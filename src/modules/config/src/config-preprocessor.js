"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigPreprocessor = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const jq_json_handler_1 = require("../../error-handler/src/utils/jq-json-handler");
class ConfigPreprocessor {
    static preprocess(configPath) {
        const startTime = Date.now();
        const timestamp = new Date().toISOString();
        try {
            const rawConfig = ConfigPreprocessor._readConfigFile(configPath);
            const parsedConfig = ConfigPreprocessor._parseConfigContent(rawConfig);
            const systemConfig = ConfigPreprocessor._loadSystemConfig();
            const providers = ConfigPreprocessor._expandProviders(parsedConfig.providers || [], systemConfig);
            const routes = ConfigPreprocessor._generateRoutes(parsedConfig.router || {}, providers);
            const routingTable = {
                providers,
                routes,
                server: ConfigPreprocessor._normalizeServerConfig(parsedConfig.server || {}),
                apiKey: parsedConfig.APIKEY || parsedConfig.apiKey || 'default-key',
                version: parsedConfig.version || '4.1',
                description: parsedConfig.description || 'Generated by ConfigPreprocessor',
                lastUpdated: timestamp
            };
            return {
                success: true,
                routingTable,
                metadata: {
                    configPath,
                    processingTime: Date.now() - startTime,
                    timestamp,
                    sourceFormat: 'v4'
                }
            };
        }
        catch (error) {
            const processingError = error;
            return {
                success: false,
                error: {
                    code: 'CONFIG_PREPROCESSING_FAILED',
                    message: processingError.message,
                    details: { configPath }
                },
                metadata: {
                    configPath,
                    processingTime: Date.now() - startTime,
                    timestamp,
                    sourceFormat: 'unknown'
                }
            };
        }
    }
    static _readConfigFile(configPath) {
        const fileContent = fs.readFileSync(configPath, 'utf8');
        return jq_json_handler_1.JQJsonHandler.parseJsonString(fileContent);
    }
    static _loadSystemConfig() {
        if (this.systemConfig) {
            return this.systemConfig;
        }
        const possiblePaths = [
            path.join(process.cwd(), 'config', 'system-config.json'),
            path.join(__dirname, '..', '..', '..', 'config', 'system-config.json'),
            path.join(__dirname, '..', '..', '..', '..', 'config', 'system-config.json')
        ];
        for (const configPath of possiblePaths) {
            if (fs.existsSync(configPath)) {
                try {
                    const systemConfigContent = fs.readFileSync(configPath, 'utf8');
                    this.systemConfig = jq_json_handler_1.JQJsonHandler.parseJsonString(systemConfigContent);
                    return this.systemConfig;
                }
                catch (err) {
                    continue;
                }
            }
        }
        return {}; // 返回空对象而不是抛出错误
    }
    static _parseConfigContent(config) {
        return {
            providers: config.Providers || config.providers || [],
            router: config.router || {},
            server: config.server || {},
            APIKEY: config.APIKEY || config.apiKey,
            version: config.version,
            description: config.description
        };
    }
    static _expandProviders(providers, systemConfig) {
        return providers.map(provider => {
            const providerName = provider.name.toLowerCase();
            const systemProviderConfig = systemConfig.providerTypes?.[providerName];
            // 处理serverCompatibility配置
            let serverCompatibility = provider.serverCompatibility;
            // 如果没有提供serverCompatibility配置，尝试从系统配置获取
            if (!serverCompatibility && systemProviderConfig?.serverCompatibility) {
                serverCompatibility = {
                    use: systemProviderConfig.serverCompatibility,
                    options: {}
                };
            }
            else if (!serverCompatibility) {
                serverCompatibility = {
                    use: provider.name,
                    options: {}
                };
            }
            // 确保options对象存在
            if (!serverCompatibility.options) {
                serverCompatibility.options = {};
            }
            // 如果有系统配置，增强serverCompatibility选项
            if (systemProviderConfig) {
                if (systemProviderConfig.timeout) {
                    serverCompatibility.options.timeout = systemProviderConfig.timeout;
                }
                if (systemProviderConfig.maxRetries) {
                    serverCompatibility.options.maxRetries = systemProviderConfig.maxRetries;
                }
                if (systemProviderConfig.protocol) {
                    serverCompatibility.options.protocol = systemProviderConfig.protocol;
                }
                if (systemProviderConfig.transformer) {
                    serverCompatibility.options.transformer = systemProviderConfig.transformer;
                }
            }
            // 处理模型配置，支持字符串和对象格式
            let models = [];
            if (Array.isArray(provider.models)) {
                models = provider.models.map((model) => {
                    if (typeof model === 'string') {
                        return model;
                    }
                    else if (typeof model === 'object' && model.name) {
                        return {
                            name: model.name,
                            maxTokens: model.maxTokens,
                            ...model
                        };
                    }
                    return String(model);
                });
            }
            else {
                models = [`${provider.name}-default-model`];
            }
            return {
                name: provider.name,
                priority: provider.priority || 1,
                api_base_url: provider.api_base_url,
                api_key: provider.api_key,
                maxTokens: provider.maxTokens,
                models: models,
                serverCompatibility: serverCompatibility
            };
        });
    }
    static _generateRoutes(routerConfig, providers) {
        const routes = {};
        for (const [routeName, routeValue] of Object.entries(routerConfig)) {
            if (typeof routeValue === 'string') {
                routes[routeName] = routeValue;
            }
        }
        if (!routes.default && providers.length > 0) {
            const firstProvider = providers[0];
            const firstModel = firstProvider.models[0];
            routes.default = `${firstProvider.name},${firstModel}`;
        }
        return routes;
    }
    static _normalizeServerConfig(serverConfig) {
        return {
            port: serverConfig.port || 5506,
            host: serverConfig.host || '0.0.0.0',
            debug: serverConfig.debug || false
        };
    }
}
exports.ConfigPreprocessor = ConfigPreprocessor;
ConfigPreprocessor.systemConfig = null;
//# sourceMappingURL=config-preprocessor.js.map