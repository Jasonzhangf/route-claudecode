/**
 * Routing Table Types - RCC v4.0 Configuration System
 * 
 * 定义路由表的标准数据结构和预处理结果类型
 * 支持从配置文件到路由表的转换过程中的所有数据类型
 * 
 * @author RCC v4.0 - Zero Interface Exposure Architecture
 */

/**
 * 模型信息接口
 */
export interface ModelInfo {
  name: string;
  maxTokens?: number;
  [key: string]: unknown;
}

/**
 * Provider信息接口
 */
export interface ProviderInfo {
  name: string;
  priority?: number;
  api_base_url: string;
  api_key: string | string[];
  maxTokens?: number;
  models: (string | ModelInfo)[];
  serverCompatibility?: {
    use: string;
    options: Record<string, unknown>;
  };
}

/**
 * 路由映射接口
 */
export interface RouteMapping {
  [routeName: string]: string; // routeName -> "provider,model" format
}

/**
 * 服务器配置接口
 */
export interface ServerInfo {
  port: number;
  host: string;
  debug?: boolean;
}

/**
 * 标准路由表接口
 */
export interface RoutingTable {
  providers: ProviderInfo[];
  routes: RouteMapping;
  server: ServerInfo;
  apiKey: string;
  version?: string;
  description?: string;
  lastUpdated?: string;
}

/**
 * 配置预处理结果接口
 */
export interface ConfigPreprocessResult {
  success: boolean;
  routingTable?: RoutingTable;
  error?: {
    code: string;
    message: string;
    details?: unknown;
  };
  metadata: {
    configPath: string;
    processingTime: number;
    timestamp: string;
    sourceFormat: 'v4' | 'basic' | 'unknown';
  };
}

/**
 * 配置文件格式检测结果
 */
export interface ConfigFormatDetectionResult {
  format: 'v4' | 'basic' | 'unknown';
  version?: string;
  confidence: number;
  reasons: string[];
}

/**
 * Provider扩展结果
 */
export interface ProviderExpansionResult {
  expandedProviders: ProviderInfo[];
  warnings: string[];
  errors: string[];
}

/**
 * 路由生成结果
 */
export interface RouteGenerationResult {
  routes: RouteMapping;
  autoGenerated: string[];
  warnings: string[];
}

/**
 * 字段转换函数类型
 */
export type FieldTransformFunction = (value: any, context: any) => any;

/**
 * 字段转换规则接口
 */
export interface FieldTransformRule {
  /** 源字段路径 (支持点号分隔的嵌套路径) */
  source: string;
  /** 目标字段路径 */
  target: string;
  /** 转换函数 */
  transform: FieldTransformFunction;
  /** 是否必需字段 */
  required?: boolean;
  /** 默认值 */
  defaultValue?: any;
  /** 转换失败时的fallback值 */
  fallbackValue?: any;
  /** 转换描述 */
  description?: string;
}

/**
 * Provider配置接口
 */
export interface ProviderFieldConfig {
  /** Provider名称 */
  provider: string;
  /** 是否支持OpenAI格式直接透传 */
  supportsOpenAIPassthrough: boolean;
  /** 请求字段转换规则 */
  requestTransforms: FieldTransformRule[];
  /** 响应字段转换规则 */
  responseTransforms: FieldTransformRule[];
  /** 特殊处理配置 */
  specialHandling?: {
    /** 工具格式转换 */
    tools?: {
      inputFormat: 'anthropic' | 'openai' | 'mixed';
      outputFormat: 'anthropic' | 'openai' | 'mixed';
    };
    /** 流式处理 */
    streaming?: {
      supported: boolean;
      responseConversion: boolean;
    };
    /** 认证方式 */
    auth?: {
      type: 'bearer' | 'basic' | 'oauth2' | 'custom';
      tokenSource?: string;
    };
  };
}

/**
 * Transformer层配置
 */
export interface TransformerConfig {
  /** Anthropic到OpenAI转换规则 */
  anthropicToOpenAI: FieldTransformRule[];
  /** 格式检测规则 */
  formatDetection: {
    /** OpenAI格式检测特征 */
    openAIIndicators: string[];
    /** Anthropic格式检测特征 */
    anthropicIndicators: string[];
  };
}

/**
 * ServerCompatibility层配置
 */
export interface ServerCompatibilityConfig {
  /** 各Provider的兼容性配置 */
  providers: Record<string, ProviderFieldConfig>;
  /** 通用处理规则 */
  commonRules: {
    /** 参数标准化 */
    parameterNormalization: FieldTransformRule[];
    /** 错误处理 */
    errorHandling: {
      standardizeErrors: boolean;
      errorMapping: Record<string, string>;
    };
  };
}

/**
 * 完整的字段转换配置结构
 */
export interface FieldTransformationConfig {
  transformer: TransformerConfig;
  serverCompatibility: ServerCompatibilityConfig;
}