[
  {
    "timestamp": "2025-08-10T09:20:19.250Z",
    "requestId": "session_1754817611909_plg2n7ad8:conv_1754817611909_0nnvy7m4a:1:1754817611910:vs2q",
    "provider": "lmstudio",
    "model": "gpt-oss-20b-mlx",
    "endpoint": "localhost:1234",
    "failureType": "text_instead_of_tools",
    "originalResponse": {
      "id": "chatcmpl-qfx2ka9asx8v757k2ynmq",
      "object": "chat.completion",
      "created": 1754817611,
      "model": "gpt-oss-20b-mlx",
      "choices": [
        {
          "index": 0,
          "logprobs": null,
          "finish_reason": "stop",
          "message": {
            "role": "assistant",
            "content": "The user says: \"使用grep搜索包含'character'的行\" which means \"Use grep to search for lines containing 'character'\". They likely want a command. We can provide the grep command: `grep -n 'character' filename`. But maybe they want to search in current directory? We can give a command: `grep -rn 'character' .` or similar. Provide explanation.\n\nWe can also use the tool to run grep? The user didn't specify a file path. We could ask for file or directory. But we can give generic command.\n\nWe should respond in Chinese, as user wrote Chinese. Provide the grep usage: `grep -n 'character' file` or recursively: `grep -rnw '.' -e 'character'`. Provide explanation.下面给出几种常见的 `grep` 用法，帮助你在文件或目录中搜索包含 **character** 的行：\n\n| 场景 | 命令 | 说明 |\n|------|------|------|\n| **单个文件** | `grep -n 'character' <file>` | 在 `<file>` 中搜索，`-n` 选项会在每行前显示行号。 |\n| **递归搜索整个目录** | `grep -rnw '.' -e 'character'` | 在当前目录（`.`）及其子目录下递归搜索，`-r` 递归、`-n` 行号、`-w` 匹配完整单词。 |\n| **忽略大小写** | `grep -rin 'character' .` | 与递归搜索相同，但加上 `-i` 选项忽略大小写。 |\n| *... [truncated]"
          }
        }
      ],
      "usage": {
        "prompt_tokens": 321,
        "completion_tokens": 570,
        "total_tokens": 891
      },
      "stats": {},
      "system_fingerprint": "gpt-oss-20b-mlx"
    },
    "expectedFormat": "openai",
    "errorMessage": "All parsing strategies failed",
    "responseAnalysis": {
      "hasToolCalls": false,
      "hasContent": true,
      "contentLength": 1433,
      "contentPreview": "The user says: \"使用grep搜索包含'character'的行\" which means \"Use grep to search for lines containing 'character'\". They likely want a command. We can provide the grep command: `grep -n 'character' filename`.",
      "finishReason": "stop",
      "toolCallPatterns": []
    },
    "debugInfo": {
      "requestTools": [
        {
          "name": "bash",
          "description": "Execute shell commands",
          "input_schema": {
            "type": "object",
            "properties": {
              "command": {
                "type": "string",
                "description": "Shell command to execute"
              },
              "description": {
                "type": "string",
                "description": "Description of what the command does"
              }
            },
            "required": [
              "command"
            ]
          }
        },
        {
          "name": "grep",
          "description": "Search for patterns in files using ripgrep",
          "input_schema": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "The regex pattern to search for"
              },
              "path": {
                "type": "string",
                "description": "Directory or file to search in"
              },
              "glob": {
                "type": "string",
                "description": "File pattern to match (e.g., '*.ts')"
              },
              "output_mode": {
                "type": "string",
                "description": "Output mode: content/files_with_matches/count"
              },
              "-i": {
                "type": "boolean",
                "description": "Case insensitive search"
              },
              "-C": {
                "type": "number",
                "description": "Lines of context to show"
              },
              "-n": {
                "type": "boolean",
                "description": "Show line numbers"
              }
            },
            "required": [
              "pattern"
            ]
          }
        },
        {
          "name": "read",
          "description": "Read file contents from the filesystem",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "Absolute path to the file to read"
              },
              "limit": {
                "type": "number",
                "description": "Number of lines to read"
              },
              "offset": {
                "type": "number",
                "description": "Starting line number"
              }
            },
            "required": [
              "file_path"
            ]
          }
        },
        {
          "name": "ls",
          "description": "List directory contents",
          "input_schema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "Directory path to list (must be absolute)"
              },
              "ignore": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Glob patterns to ignore"
              }
            },
            "required": [
              "path"
            ]
          }
        }
      ],
      "responseStructure": {
        "type": "object",
        "keys": [
          "id",
          "object",
          "created",
          "model",
          "choices",
          "usage",
          "stats",
          "system_fingerprint"
        ],
        "hasChoices": true,
        "hasContent": false,
        "hasUsage": true,
        "choicesCount": 1,
        "firstChoice": {
          "hasMessage": true,
          "hasToolCalls": false,
          "finishReason": "stop"
        }
      },
      "parsingAttempts": [
        "json_format",
        "function_call",
        "action_format",
        "natural_language"
      ]
    }
  },
  {
    "timestamp": "2025-08-10T09:11:02.537Z",
    "requestId": "session_1754817017503_s5ab3v6zo:conv_1754817017503_sqh3h6x0c:3:1754817042869:h6nr",
    "provider": "lmstudio",
    "model": "gpt-oss-20b-mlx",
    "endpoint": "localhost:1234",
    "failureType": "text_instead_of_tools",
    "originalResponse": {
      "id": "chatcmpl-emowd4ysedi98nnc30z8ui",
      "object": "chat.completion",
      "created": 1754817042,
      "model": "gpt-oss-20b-mlx",
      "choices": [
        {
          "index": 0,
          "logprobs": null,
          "finish_reason": "stop",
          "message": {
            "role": "assistant",
            "content": "We need to provide an answer that lists current directory contents. But no output from LS yet? The tool didn't show output.\n\nHmm, maybe the environment requires we call LS with a 'path' that exists within current repo (like repository root). The path relative may not be accepted. We need to find where the repository is located.\n\nMaybe the working directory on this interface is at repo root. We can use `pwd` to confirm.\n\nLet's try run Bash again: `pwd`.<|start|>assistant<|channel|>commentary to=functions.Bash<|message|>{\"command\":\"pwd\",\"description\":\"Get current working directory\"}"
          }
        }
      ],
      "usage": {
        "prompt_tokens": 20304,
        "completion_tokens": 120,
        "total_tokens": 20424
      },
      "stats": {},
      "system_fingerprint": "gpt-oss-20b-mlx"
    },
    "expectedFormat": "openai",
    "errorMessage": "All parsing strategies failed",
    "responseAnalysis": {
      "hasToolCalls": false,
      "hasContent": true,
      "contentLength": 587,
      "contentPreview": "We need to provide an answer that lists current directory contents. But no output from LS yet? The tool didn't show output.\n\nHmm, maybe the environment requires we call LS with a 'path' that exists wi",
      "finishReason": "stop",
      "toolCallPatterns": []
    },
    "debugInfo": {
      "requestTools": [
        {
          "name": "Task",
          "description": "Launch a new agent to handle complex, multi-step tasks autonomously.\n\nAvailable agent types and the tools they have access to:\n- general-purpose: General-purpose agent for researching complex questions, searching for code, and executing multi-step tasks. When you are searching for a keyword or file and are not confident that you will find the right match in the first few tries use this agent to perform the search for you. (Tools: *)\n- code-refactorer: Use this agent when you need to improve existing code structure, readability, or maintainability without changing functionality. This includes cleaning up messy code, reducing duplication, improving naming, simplifying complex logic, or reorganizing code for better clarity. Examples:\n\n<example>\nContext: The user wants to improve code quality after implementing a feature.\nuser: \"I just finished implementing the user authentication system. Can you help clean it up?\"\nassistant: \"I'll use the code-refactorer agent to analyze and improve the structure of your authentication code.\"\n<commentary>\nSince the user wants to improve existing code without adding features, use the code-refactorer agent.\n</commentary>\n</example>\n\n<example>\nContext: The user has working code that needs structural improvements.\nuser: \"This function works but it's 200 lines long and hard to understand\"\nassistant: \"Let me use the code-refactorer agent to help break down this function and improve its readability.\"\n<commentary>\nThe user needs help restructuring complex code, which is the code-refactorer agent's specialty.\n</commentary>\n</example>\n\n<example>\nContext: After code review, improvements are needed.\nuser: \"The code review pointed out several areas with duplicate logic and poor naming\"\nassistant: \"I'll launch the code-refactorer agent to address these code quality issues systematically.\"\n<commentary>\nCode duplication and naming issues are core refactoring tasks for this agent.\n</commentary>\n</example> (Tools: Edit, MultiEdit, Write, NotebookEdit, Grep, LS, Read)\n- project-task-planner: Use this agent when you need to create a comprehensive development task list from a Product Requirements Document (PRD). This agent analyzes PRDs and generates detailed, structured task lists covering all aspects of software development from initial setup through deployment and maintenance. Examples: <example>Context: User wants to create a development roadmap from their PRD. user: \"I have a PRD for a new e-commerce platform. Can you create a task list?\" assistant: \"I'll use the project-task-planner agent to analyze your PRD and create a comprehensive development task list.\" <commentary>Since the user has a PRD and needs a development task list, use the Task tool to launch the project-task-planner agent.</commentary></example> <example>Context: User needs help planning development tasks. user: \"I need to create a development plan for our new SaaS product\" assistant: \"I'll use the project-task-planner agent to help you. First, I'll need to see your Product Requirements Document (PRD).\" <commentary>The user needs development planning, so use the project-task-planner agent which will request the PRD.</commentary></example> (Tools: Task, Bash, Edit, MultiEdit, Write, NotebookEdit, Grep, LS, Read, ExitPlanMode, TodoWrite, WebSearch)\n- vibe-coding-coach: Use this agent when users want to build applications through conversation, focusing on the vision and feel of their app rather than technical implementation details. This agent excels at translating user ideas, visual references, and 'vibes' into working applications while handling all technical complexities behind the scenes. <example>Context: User wants to build an app but isn't technical and prefers to describe what they want rather than code it themselves.\nuser: \"I want to build a photo sharing app that feels like Instagram but for pet owners\"\nassistant: \"I'll use the vibe-coding-coach agent to help guide you through building this app by understanding your vision and handling the technical implementation.\"\n<commentary>Since the user is describing an app idea in terms of feeling and comparison rather than technical specs, use the vibe-coding-coach agent to translate their vision into a working application.</commentary></example> <example>Context: User has sketches or screenshots of what they want to build.\nuser: \"Here's a screenshot of an app I like. Can we build something similar but for tracking workouts?\"\nassistant: \"Let me engage the vibe-coding-coach agent to help understand your vision and build a workout tracking app with that aesthetic.\"\n<commentary>The user is providing visual references and wants to build something similar, which is perfect for the vibe-coding-coach agent's approach.</commentary></example> (Tools: *)\n- debug-system-architect: Use this agent when you need to establish a comprehensive debug logging system for a project. This includes setting up log directories, implementing node-level tracing, creating time-based test records, establishing replay mechanisms, and documenting debug rules. Example: <example> Context: User is setting up a new project and wants to implement proper debugging infrastructure from the start. user: \"Please help me set up a debug system for my new API router project\" <commentary> Since the user is requesting debug system setup, use the debug-system-architect agent to analyze the project and implement comprehensive logging and tracing mechanisms. </commentary> </example> <example> Context: User encounters intermittent issues in their routing system and needs better visibility. user: \"I'm having trouble tracking down why some requests fail intermittently\" <commentary> Since the user needs better debugging visibility for intermittent issues, use the debug-system-architect agent to implement node-level tracing and replay mechanisms. </commentary> </example> (Tools: *)\n- code-risk-auditor: Use this agent when you need to perform comprehensive code risk assessment and identify potential architectural issues in your codebase. Examples: <example>Context: The user has just completed a major refactoring and wants to ensure no hardcoded values or fallback mechanisms were introduced. user: \"I just finished refactoring the routing system, can you check for any code risks?\" assistant: \"I'll use the code-risk-auditor agent to perform a comprehensive risk assessment of your routing system changes.\"</example> <example>Context: Before a major release, the user wants to clean up technical debt and ensure code quality. user: \"We're preparing for v2.0 release, I need a full code audit\" assistant: \"Let me launch the code-risk-auditor agent to identify hardcoding, fallback risks, outdated tests, and duplicate implementations across the entire codebase.\"</example> <example>Context: The user notices inconsistent behavior and suspects duplicate implementations. user: \"The same feature seems to be implemented in multiple places, causing bugs\" assistant: \"I'll use the code-risk-auditor agent to scan for duplicate implementations and provide a consolidation plan.\"</example> (Tools: *)\n- security-auditor: Use this agent when you need to perform a comprehensive security audit of a codebase, identify vulnerabilities, and generate a detailed security report with actionable remediation steps. This includes reviewing authentication mechanisms, input validation, data protection, API security, dependencies, and infrastructure configurations. Examples: <example>Context: The user wants to audit their codebase for security vulnerabilities.\nuser: \"Can you perform a security audit of my application?\"\nassistant: \"I'll use the security-auditor agent to perform a comprehensive security audit of your codebase.\"\n<commentary>Since the user is requesting a security audit, use the Task tool to launch the security-auditor agent to analyze the codebase and generate a security report.</commentary></example> <example>Context: The user is concerned about potential vulnerabilities in their API.\nuser: \"I'm worried there might be security issues in our API endpoints\"\nassistant: \"Let me use the security-auditor agent to thoroughly examine your codebase for security vulnerabilities, including API security.\"\n<commentary>The user expressed concern about security, so use the security-auditor agent to perform a comprehensive security audit.</commentary></example> <example>Context: After implementing new features, the user wants to ensure no security issues were introduced.\nuser: \"We just added user authentication to our app. Can you check if it's secure?\"\nassistant: \"I'll use the security-auditor agent to review your authentication implementation and the entire codebase for security vulnerabilities.\"\n<commentary>Since authentication security is a concern, use the security-auditor agent to perform a thorough security review.</commentary></example> (Tools: Task, Bash, Edit, MultiEdit, Write, NotebookEdit)\n- project-memory-manager: Use this agent when you need to manage project-specific memory entries, create project documentation, or organize project knowledge. This includes creating project summaries, documenting project decisions, tracking project progress, and maintaining project-specific knowledge bases. <example>Context: User wants to document a project decision or create project documentation. user: \"请为我们的新项目创建一个内存管理系统的文档\" assistant: \"我将使用 project-memory-manager agent 来创建这个项目文档\" <commentary>Since the user needs project documentation, use the project-memory-manager agent to create project-specific memory entries.</commentary></example> <example>Context: User wants to track project progress or decisions. user: \"我们需要记录这个项目的关键决策点\" assistant: \"让我使用 project-memory-manager agent 来记录这些项目决策\" <commentary>Since this is project tracking, use the project-memory-manager agent to create decision-type memory entries.</commentary></example> (Tools: *)\n- rules-architect: Use this agent when you need to analyze project architecture and establish comprehensive rule management systems. Examples: <example>Context: User wants to organize project rules and create a structured rule management system. user: \"I need to reorganize our project rules and create a better structure for managing coding standards, file organization, and testing protocols\" assistant: \"I'll use the rules-architect agent to analyze the current project structure and establish a comprehensive rule management system with proper categorization and organization.\"</example> <example>Context: Project has grown complex and needs better rule organization. user: \"Our CLAUDE.md file is getting too large and we need to break down rules into manageable categories\" assistant: \"Let me call the rules-architect agent to create a structured .claude/rules system that will organize all project rules into logical categories.\"</example> (Tools: *)\n- frontend-designer: Use this agent when you need to convert design mockups, wireframes, or visual concepts into detailed technical specifications and implementation guides for frontend development. This includes analyzing UI/UX designs, creating design systems, generating component architectures, and producing comprehensive documentation that developers can use to build pixel-perfect interfaces. Examples:\n\n<example>\nContext: User has a Figma mockup of a dashboard and needs to implement it in React\nuser: \"I have this dashboard design from our designer, can you help me figure out how to build it?\"\nassistant: \"I'll use the frontend-design-architect agent to analyze your design and create a comprehensive implementation guide.\"\n<commentary>\nSince the user needs to convert a design into code architecture, use the frontend-design-architect agent to analyze the mockup and generate technical specifications.\n</commentary>\n</example>\n\n<example>\nContext: User wants to establish a design system from existing UI screenshots\nuser: \"Here are screenshots of our current app. We need to extract a consistent design system from these.\"\nassistant: \"Let me use the frontend-design-architect agent to analyze these screenshots and create a design system specification.\"\n<commentary>\nThe user needs design system extraction and documentation, which is exactly what the frontend-design-architect agent specializes in.\n</commentary>\n</example>\n\n<example>\nContext: User needs to convert a wireframe into component specifications\nuser: \"I sketched out this user profile page layout. How should I structure the components?\"\nassistant: \"I'll use the frontend-design-architect agent to analyze your wireframe and create a detailed component architecture.\"\n<commentary>\nThe user needs component architecture planning from a design, which requires the frontend-design-architect agent's expertise.\n</commentary>\n</example> (Tools: *)\n- content-writer: Use this agent when you need to create compelling, informative content that explains complex topics in simple terms. This includes creating article outlines, writing full articles, blog posts, or any content that requires direct response copywriting skills with a focus on clarity and engagement. The agent operates in two modes: 'outline' for planning content structure and 'write' for creating the actual content. Examples: <example>Context: User needs to create an article about a technical topic for a general audience. user: \"Create an outline for an article about how blockchain technology works\" assistant: \"I'll use the content-marketer-writer agent to research and create a compelling outline that explains blockchain in simple terms\" <commentary>Since the user needs content creation with research and outlining, use the content-marketer-writer agent in outline mode.</commentary></example> <example>Context: User has an outline and needs to write the full article. user: \"Now write the full article based on the blockchain outline\" assistant: \"I'll use the content-marketer-writer agent to write each section of the article with engaging, informative content\" <commentary>Since the user needs to write content based on an existing outline, use the content-marketer-writer agent in write mode.</commentary></example> (Tools: *)\n- test-runner: Use this agent to run and manage tests according to the global and project-specific testing rules. This includes executing test scripts, documenting test results, and helping to diagnose issues following the standard pipeline. <example>Context: User wants to run all functional tests. user: \"运行所有功能测试\" assistant: \"我将使用 test-runner agent 来执行所有功能测试\" <commentary>Since the user wants to run tests by category, use the test-runner agent.</commentary></example> <example>Context: User wants to verify a bug fix. user: \"我修复了一个bug，帮我验证一下\" assistant: \"让我使用 test-runner agent 来执行对应的修复验证测试\" <commentary>The user needs to verify a fix, which is a core task for the test-runner agent.</commentary></example> (Tools: *)\n- in-depth-research-analyst: Use this agent when you need to conduct comprehensive research reports with in-depth web mining, data analysis, and visualization. This includes industry analysis, market research, competitive intelligence, and trend forecasting with accurate data from authoritative sources. <example>Context: User wants a comprehensive industry analysis report. user: \"请对人工智能芯片市场进行深入调研，包括主要厂商、市场份额和增长趋势\" assistant: \"我将使用 in-depth-research-analyst agent 来进行这项深入的市场调研并生成可视化报告\" <commentary>Since the user needs a comprehensive industry analysis with data visualization, use the in-depth-research-analyst agent to conduct thorough research and create an integrated report.</commentary></example> <example>Context: User wants market research with accurate data and visualizations. user: \"我们需要一份关于电动汽车充电基础设施的深度报告，包含数据图表\" assistant: \"让我使用 in-depth-research-analyst agent 来收集准确数据并生成图文并茂的分析报告\" <commentary>Since this requires market research with data accuracy and visualizations, use the in-depth-research-analyst agent to create a comprehensive report.</commentary></example> (Tools: *)\n- prd-writer: Use this agent when you need to create a comprehensive Product Requirements Document (PRD) for a software project or feature. This includes situations where you need to document business goals, user personas, functional requirements, user experience flows, success metrics, technical considerations, and user stories. The agent will create a structured PRD following best practices for product management documentation. Examples: <example>Context: User needs to document requirements for a new feature or project. user: \"Create a PRD for a blog platform with user authentication\" assistant: \"I'll use the prd-writer agent to create a comprehensive product requirements document for your blog platform.\" <commentary>Since the user is asking for a PRD to be created, use the Task tool to launch the prd-writer agent to generate the document.</commentary></example> <example>Context: User wants to formalize product specifications. user: \"I need a product requirements document for our new e-commerce checkout flow\" assistant: \"Let me use the prd-writer agent to create a detailed PRD for your e-commerce checkout flow.\" <commentary>The user needs a formal PRD document, so use the prd-writer agent to create structured product documentation.</commentary></example> (Tools: Task, Bash, Grep, LS, Read, Write, WebSearch, Glob)\n- pipeline-debug-universal: Use this agent when you need to implement comprehensive debug hooks and testing infrastructure for ANY pipeline system - whether it's API routing, data processing, CI/CD workflows, or transformation pipelines. This agent specializes in creating universal debug architectures that work across different pipeline types with data capture, replay capabilities, and systematic testing matrices. Examples: <example>Context: User is working on a multi-provider API routing system and needs to add debug capabilities to track data flow through each pipeline step. user: \"I need to add debug hooks to our routing pipeline so we can capture and replay data at each step\" assistant: \"I'll use the pipeline-debug-universal agent to design a comprehensive debug infrastructure with data capture and replay capabilities\" <commentary>Since the user needs pipeline debugging infrastructure, use the pipeline-debug-universal agent to create debug hooks and testing matrices.</commentary></example> <example>Context: User has a complex data transformation pipeline and wants to build systematic testing for each stage and provider. user: \"Our data processing pipeline has issues and we need better testing infrastructure to isolate problems at each step\" assistant: \"Let me use the pipeline-debug-universal agent to create a complete testing matrix and debug system\" <commentary>Since the user needs systematic pipeline testing infrastructure, use the pipeline-debug-universal agent to architect the testing system.</commentary></example> <example>Context: User is building a CI/CD pipeline and needs to implement debug capabilities for tracking deployment issues. user: \"Our deployment pipeline fails randomly and we can't reproduce the issues consistently\" assistant: \"I'll deploy the pipeline-debug-universal agent to create comprehensive debug hooks and replay capabilities for your CI/CD pipeline\" <commentary>Since the user needs debug infrastructure for a deployment pipeline, use the pipeline-debug-universal agent to design the debug system.</commentary></example> (Tools: *)\n\nWhen using the Task tool, you must specify a subagent_type parameter to select which agent type to use.\n\n\n\nWhen NOT to use the Agent tool:\n- If you want to read a specific file path, use the Read or Glob tool instead of the Agent tool, to find the match more quickly\n- If you are searching for a specific class definition like \"class Foo\", use the Glob tool instead, to find the match more quickly\n- If you are searching for code within a specific file or set of 2-3 files, use the Read tool instead of the Agent tool, to find the match more quickly\n- Other tasks that are not related to the agent descriptions above\n\n\nUsage notes:\n1. Launch multiple agents concurrently whenever possible, to maximize performance; to do that, use a single message with multiple tool uses\n2. When the agent is done, it will return a single message back to you. The result returned by the agent is not visible to the user. To show the user the result, you should send a text message back to the user with a concise summary of the result.\n3. Each agent invocation is stateless. You will not be able to send additional messages to the agent, nor will the agent be able to communicate with you outside of its final report. Therefore, your prompt should contain a highly detailed task description for the agent to perform autonomously and you should specify exactly what information the agent should return back to you in its final and only message to you.\n4. The agent's outputs should generally be trusted\n5. Clearly tell the agent whether you expect it to write code or just to do research (search, file reads, web fetches, etc.), since it is not aware of the user's intent\n6. If the agent description mentions that it should be used proactively, then you should try your best to use it without the user having to ask for it first. Use your judgement.\n\nExample usage:\n\n<example_agent_descriptions>\n\"code-reviewer\": use this agent after you are done writing a signficant piece of code\n\"greeting-responder\": use this agent when to respond to user greetings with a friendly joke\n</example_agent_description>\n\n<example>\nuser: \"Please write a function that checks if a number is prime\"\nassistant: Sure let me write a function that checks if a number is prime\nassistant: First let me use the Write tool to write a function that checks if a number is prime\nassistant: I'm going to use the Write tool to write the following code:\n<code>\nfunction isPrime(n) {\n  if (n <= 1) return false\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n</code>\n<commentary>\nSince a signficant piece of code was written and the task was completed, now use the code-reviewer agent to review the code\n</commentary>\nassistant: Now let me use the code-reviewer agent to review the code\nassistant: Uses the Task tool to launch the with the code-reviewer agent\n</example>\n\n<example>\nuser: \"Hello\"\n<commentary>\nSince the user is greeting, use the greeting-responder agent to respond with a friendly joke\n</commentary>\nassistant: \"I'm going to use the Task tool to launch the with the greeting-responder agent\"\n</example>\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "description": {
                "type": "string",
                "description": "A short (3-5 word) description of the task"
              },
              "prompt": {
                "type": "string",
                "description": "The task for the agent to perform"
              },
              "subagent_type": {
                "type": "string",
                "description": "The type of specialized agent to use for this task"
              }
            },
            "required": [
              "description",
              "prompt",
              "subagent_type"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Bash",
          "description": "Executes a given bash command in a persistent shell session with optional timeout, ensuring proper handling and security measures.\n\nBefore executing the command, please follow these steps:\n\n1. Directory Verification:\n   - If the command will create new directories or files, first use the LS tool to verify the parent directory exists and is the correct location\n   - For example, before running \"mkdir foo/bar\", first use LS to check that \"foo\" exists and is the intended parent directory\n\n2. Command Execution:\n   - Always quote file paths that contain spaces with double quotes (e.g., cd \"path with spaces/file.txt\")\n   - Examples of proper quoting:\n     - cd \"/Users/name/My Documents\" (correct)\n     - cd /Users/name/My Documents (incorrect - will fail)\n     - python \"/path/with spaces/script.py\" (correct)\n     - python /path/with spaces/script.py (incorrect - will fail)\n   - After ensuring proper quoting, execute the command.\n   - Capture the output of the command.\n\nUsage notes:\n  - The command argument is required.\n  - You can specify an optional timeout in milliseconds (up to 600000ms / 10 minutes). If not specified, commands will timeout after 120000ms (2 minutes).\n  - It is very helpful if you write a clear, concise description of what this command does in 5-10 words.\n  - If the output exceeds 30000 characters, output will be truncated before being returned to you.\n  - VERY IMPORTANT: You MUST avoid using search commands like `find` and `grep`. Instead use Grep, Glob, or Task to search. You MUST avoid read tools like `cat`, `head`, `tail`, and `ls`, and use Read and LS to read files.\n - If you _still_ need to run `grep`, STOP. ALWAYS USE ripgrep at `rg` first, which all ${PRODUCT_NAME} users have pre-installed.\n  - When issuing multiple commands, use the ';' or '&&' operator to separate them. DO NOT use newlines (newlines are ok in quoted strings).\n  - Try to maintain your current working directory throughout the session by using absolute paths and avoiding usage of `cd`. You may use `cd` if the User explicitly requests it.\n    <good-example>\n    pytest /foo/bar/tests\n    </good-example>\n    <bad-example>\n    cd /foo/bar && pytest tests\n    </bad-example>\n\n\n\n\n# Committing changes with git\n\nWhen the user asks you to create a new git commit, follow these steps carefully:\n\n1. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following bash commands in parallel, each using the Bash tool:\n  - Run a git status command to see all untracked files.\n  - Run a git diff command to see both staged and unstaged changes that will be committed.\n  - Run a git log command to see recent commit messages, so that you can follow this repository's commit message style.\n2. Analyze all staged changes (both previously staged and newly added) and draft a commit message:\n  - Summarize the nature of the changes (eg. new feature, enhancement to an existing feature, bug fix, refactoring, test, docs, etc.). Ensure the message accurately reflects the changes and their purpose (i.e. \"add\" means a wholly new feature, \"update\" means an enhancement to an existing feature, \"fix\" means a bug fix, etc.).\n  - Check for any sensitive information that shouldn't be committed\n  - Draft a concise (1-2 sentences) commit message that focuses on the \"why\" rather than the \"what\"\n  - Ensure it accurately reflects the changes and their purpose\n3. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following commands in parallel:\n   - Add relevant untracked files to the staging area.\n   - Create the commit with a message ending with:\n   🤖 Generated with [Claude Code](https://claude.ai/code)\n\n   Co-Authored-By: Claude <noreply@anthropic.com>\n   - Run git status to make sure the commit succeeded.\n4. If the commit fails due to pre-commit hook changes, retry the commit ONCE to include these automated changes. If it fails again, it usually means a pre-commit hook is preventing the commit. If the commit succeeds but you notice that files were modified by the pre-commit hook, you MUST amend your commit to include them.\n\nImportant notes:\n- NEVER update the git config\n- NEVER run additional commands to read or explore code, besides git bash commands\n- NEVER use the TodoWrite or Task tools\n- DO NOT push to the remote repository unless the user explicitly asks you to do so\n- IMPORTANT: Never use git commands with the -i flag (like git rebase -i or git add -i) since they require interactive input which is not supported.\n- If there are no changes to commit (i.e., no untracked files and no modifications), do not create an empty commit\n- In order to ensure good formatting, ALWAYS pass the commit message via a HEREDOC, a la this example:\n<example>\ngit commit -m \"$(cat <<'EOF'\n   Commit message here.\n\n   🤖 Generated with [Claude Code](https://claude.ai/code)\n\n   Co-Authored-By: Claude <noreply@anthropic.com>\n   EOF\n   )\"\n</example>\n\n# Creating pull requests\nUse the gh command via the Bash tool for ALL GitHub-related tasks including working with issues, pull requests, checks, and releases. If given a Github URL use the gh command to get the information needed.\n\nIMPORTANT: When the user asks you to create a pull request, follow these steps carefully:\n\n1. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following bash commands in parallel using the Bash tool, in order to understand the current state of the branch since it diverged from the main branch:\n   - Run a git status command to see all untracked files\n   - Run a git diff command to see both staged and unstaged changes that will be committed\n   - Check if the current branch tracks a remote branch and is up to date with the remote, so you know if you need to push to the remote\n   - Run a git log command and `git diff [base-branch]...HEAD` to understand the full commit history for the current branch (from the time it diverged from the base branch)\n2. Analyze all changes that will be included in the pull request, making sure to look at all relevant commits (NOT just the latest commit, but ALL commits that will be included in the pull request!!!), and draft a pull request summary\n3. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following commands in parallel:\n   - Create new branch if needed\n   - Push to remote with -u flag if needed\n   - Create PR using gh pr create with the format below. Use a HEREDOC to pass the body to ensure correct formatting.\n<example>\ngh pr create --title \"the pr title\" --body \"$(cat <<'EOF'\n## Summary\n<1-3 bullet points>\n\n## Test plan\n[Checklist of TODOs for testing the pull request...]\n\n🤖 Generated with [Claude Code](https://claude.ai/code)\nEOF\n)\"\n</example>\n\nImportant:\n- NEVER update the git config\n- DO NOT use the TodoWrite or Task tools\n- Return the PR URL when you're done, so the user can see it\n\n# Other common operations\n- View comments on a Github PR: gh api repos/foo/bar/pulls/123/comments",
          "input_schema": {
            "type": "object",
            "properties": {
              "command": {
                "type": "string",
                "description": "The command to execute"
              },
              "timeout": {
                "type": "number",
                "description": "Optional timeout in milliseconds (max 600000)"
              },
              "description": {
                "type": "string",
                "description": " Clear, concise description of what this command does in 5-10 words. Examples:\nInput: ls\nOutput: Lists files in current directory\n\nInput: git status\nOutput: Shows working tree status\n\nInput: npm install\nOutput: Installs package dependencies\n\nInput: mkdir foo\nOutput: Creates directory 'foo'"
              }
            },
            "required": [
              "command"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Glob",
          "description": "- Fast file pattern matching tool that works with any codebase size\n- Supports glob patterns like \"**/*.js\" or \"src/**/*.ts\"\n- Returns matching file paths sorted by modification time\n- Use this tool when you need to find files by name patterns\n- When you are doing an open ended search that may require multiple rounds of globbing and grepping, use the Agent tool instead\n- You have the capability to call multiple tools in a single response. It is always better to speculatively perform multiple searches as a batch that are potentially useful.",
          "input_schema": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "The glob pattern to match files against"
              },
              "path": {
                "type": "string",
                "description": "The directory to search in. If not specified, the current working directory will be used. IMPORTANT: Omit this field to use the default directory. DO NOT enter \"undefined\" or \"null\" - simply omit it for the default behavior. Must be a valid directory path if provided."
              }
            },
            "required": [
              "pattern"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Grep",
          "description": "A powerful search tool built on ripgrep\n\n  Usage:\n  - ALWAYS use Grep for search tasks. NEVER invoke `grep` or `rg` as a Bash command. The Grep tool has been optimized for correct permissions and access.\n  - Supports full regex syntax (e.g., \"log.*Error\", \"function\\s+\\w+\")\n  - Filter files with glob parameter (e.g., \"*.js\", \"**/*.tsx\") or type parameter (e.g., \"js\", \"py\", \"rust\")\n  - Output modes: \"content\" shows matching lines, \"files_with_matches\" shows only file paths (default), \"count\" shows match counts\n  - Use Task tool for open-ended searches requiring multiple rounds\n  - Pattern syntax: Uses ripgrep (not grep) - literal braces need escaping (use `interface\\{\\}` to find `interface{}` in Go code)\n  - Multiline matching: By default patterns match within single lines only. For cross-line patterns like `struct \\{[\\s\\S]*?field`, use `multiline: true`\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "The regular expression pattern to search for in file contents"
              },
              "path": {
                "type": "string",
                "description": "File or directory to search in (rg PATH). Defaults to current working directory."
              },
              "glob": {
                "type": "string",
                "description": "Glob pattern to filter files (e.g. \"*.js\", \"*.{ts,tsx}\") - maps to rg --glob"
              },
              "output_mode": {
                "type": "string",
                "enum": [
                  "content",
                  "files_with_matches",
                  "count"
                ],
                "description": "Output mode: \"content\" shows matching lines (supports -A/-B/-C context, -n line numbers, head_limit), \"files_with_matches\" shows file paths (supports head_limit), \"count\" shows match counts (supports head_limit). Defaults to \"files_with_matches\"."
              },
              "-B": {
                "type": "number",
                "description": "Number of lines to show before each match (rg -B). Requires output_mode: \"content\", ignored otherwise."
              },
              "-A": {
                "type": "number",
                "description": "Number of lines to show after each match (rg -A). Requires output_mode: \"content\", ignored otherwise."
              },
              "-C": {
                "type": "number",
                "description": "Number of lines to show before and after each match (rg -C). Requires output_mode: \"content\", ignored otherwise."
              },
              "-n": {
                "type": "boolean",
                "description": "Show line numbers in output (rg -n). Requires output_mode: \"content\", ignored otherwise."
              },
              "-i": {
                "type": "boolean",
                "description": "Case insensitive search (rg -i)"
              },
              "type": {
                "type": "string",
                "description": "File type to search (rg --type). Common types: js, py, rust, go, java, etc. More efficient than include for standard file types."
              },
              "head_limit": {
                "type": "number",
                "description": "Limit output to first N lines/entries, equivalent to \"| head -N\". Works across all output modes: content (limits output lines), files_with_matches (limits file paths), count (limits count entries). When unspecified, shows all results from ripgrep."
              },
              "multiline": {
                "type": "boolean",
                "description": "Enable multiline mode where . matches newlines and patterns can span lines (rg -U --multiline-dotall). Default: false."
              }
            },
            "required": [
              "pattern"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "LS",
          "description": "Lists files and directories in a given path. The path parameter must be an absolute path, not a relative path. You can optionally provide an array of glob patterns to ignore with the ignore parameter. You should generally prefer the Glob and Grep tools, if you know which directories to search.",
          "input_schema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "The absolute path to the directory to list (must be absolute, not relative)"
              },
              "ignore": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of glob patterns to ignore"
              }
            },
            "required": [
              "path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "ExitPlanMode",
          "description": "Use this tool when you are in plan mode and have finished presenting your plan and are ready to code. This will prompt the user to exit plan mode.\nIMPORTANT: Only use this tool when the task requires planning the implementation steps of a task that requires writing code. For research tasks where you're gathering information, searching files, reading files or in general trying to understand the codebase - do NOT use this tool.\n\nEg.\n1. Initial task: \"Search for and understand the implementation of vim mode in the codebase\" - Do not use the exit plan mode tool because you are not planning the implementation steps of a task.\n2. Initial task: \"Help me implement yank mode for vim\" - Use the exit plan mode tool after you have finished planning the implementation steps of the task.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "plan": {
                "type": "string",
                "description": "The plan you came up with, that you want to run by the user for approval. Supports markdown. The plan should be pretty concise."
              }
            },
            "required": [
              "plan"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Read",
          "description": "Reads a file from the local filesystem. You can access any file directly by using this tool.\nAssume this tool is able to read all files on the machine. If the User provides a path to a file assume that path is valid. It is okay to read a file that does not exist; an error will be returned.\n\nUsage:\n- The file_path parameter must be an absolute path, not a relative path\n- By default, it reads up to 2000 lines starting from the beginning of the file\n- You can optionally specify a line offset and limit (especially handy for long files), but it's recommended to read the whole file by not providing these parameters\n- Any lines longer than 2000 characters will be truncated\n- Results are returned using cat -n format, with line numbers starting at 1\n- This tool allows Claude Code to read images (eg PNG, JPG, etc). When reading an image file the contents are presented visually as Claude Code is a multimodal LLM.\n- This tool can read PDF files (.pdf). PDFs are processed page by page, extracting both text and visual content for analysis.\n- For Jupyter notebooks (.ipynb files), use the NotebookRead instead\n- You have the capability to call multiple tools in a single response. It is always better to speculatively read multiple files as a batch that are potentially useful.\n- You will regularly be asked to read screenshots. If the user provides a path to a screenshot ALWAYS use this tool to view the file at the path. This tool will work with all temporary file paths like /var/folders/123/abc/T/TemporaryItems/NSIRD_screencaptureui_ZfB1tD/Screenshot.png\n- If you read a file that exists but has empty contents you will receive a system reminder warning in place of file contents.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to read"
              },
              "offset": {
                "type": "number",
                "description": "The line number to start reading from. Only provide if the file is too large to read at once"
              },
              "limit": {
                "type": "number",
                "description": "The number of lines to read. Only provide if the file is too large to read at once."
              }
            },
            "required": [
              "file_path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Edit",
          "description": "Performs exact string replacements in files.\n\nUsage:\n- You must use your `Read` tool at least once in the conversation before editing. This tool will error if you attempt an edit without reading the file.\n- When editing text from Read tool output, ensure you preserve the exact indentation (tabs/spaces) as it appears AFTER the line number prefix. The line number prefix format is: spaces + line number + tab. Everything after that tab is the actual file content to match. Never include any part of the line number prefix in the old_string or new_string.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- Only use emojis if the user explicitly requests it. Avoid adding emojis to files unless asked.\n- The edit will FAIL if `old_string` is not unique in the file. Either provide a larger string with more surrounding context to make it unique or use `replace_all` to change every instance of `old_string`.\n- Use `replace_all` for replacing and renaming strings across the file. This parameter is useful if you want to rename a variable for instance.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to modify"
              },
              "old_string": {
                "type": "string",
                "description": "The text to replace"
              },
              "new_string": {
                "type": "string",
                "description": "The text to replace it with (must be different from old_string)"
              },
              "replace_all": {
                "type": "boolean",
                "default": false,
                "description": "Replace all occurences of old_string (default false)"
              }
            },
            "required": [
              "file_path",
              "old_string",
              "new_string"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "MultiEdit",
          "description": "This is a tool for making multiple edits to a single file in one operation. It is built on top of the Edit tool and allows you to perform multiple find-and-replace operations efficiently. Prefer this tool over the Edit tool when you need to make multiple edits to the same file.\n\nBefore using this tool:\n\n1. Use the Read tool to understand the file's contents and context\n2. Verify the directory path is correct\n\nTo make multiple file edits, provide the following:\n1. file_path: The absolute path to the file to modify (must be absolute, not relative)\n2. edits: An array of edit operations to perform, where each edit contains:\n   - old_string: The text to replace (must match the file contents exactly, including all whitespace and indentation)\n   - new_string: The edited text to replace the old_string\n   - replace_all: Replace all occurences of old_string. This parameter is optional and defaults to false.\n\nIMPORTANT:\n- All edits are applied in sequence, in the order they are provided\n- Each edit operates on the result of the previous edit\n- All edits must be valid for the operation to succeed - if any edit fails, none will be applied\n- This tool is ideal when you need to make several changes to different parts of the same file\n- For Jupyter notebooks (.ipynb files), use the NotebookEdit instead\n\nCRITICAL REQUIREMENTS:\n1. All edits follow the same requirements as the single Edit tool\n2. The edits are atomic - either all succeed or none are applied\n3. Plan your edits carefully to avoid conflicts between sequential operations\n\nWARNING:\n- The tool will fail if edits.old_string doesn't match the file contents exactly (including whitespace)\n- The tool will fail if edits.old_string and edits.new_string are the same\n- Since edits are applied in sequence, ensure that earlier edits don't affect the text that later edits are trying to find\n\nWhen making edits:\n- Ensure all edits result in idiomatic, correct code\n- Do not leave the code in a broken state\n- Always use absolute file paths (starting with /)\n- Only use emojis if the user explicitly requests it. Avoid adding emojis to files unless asked.\n- Use replace_all for replacing and renaming strings across the file. This parameter is useful if you want to rename a variable for instance.\n\nIf you want to create a new file, use:\n- A new file path, including dir name if needed\n- First edit: empty old_string and the new file's contents as new_string\n- Subsequent edits: normal edit operations on the created content",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to modify"
              },
              "edits": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "old_string": {
                      "type": "string",
                      "description": "The text to replace"
                    },
                    "new_string": {
                      "type": "string",
                      "description": "The text to replace it with"
                    },
                    "replace_all": {
                      "type": "boolean",
                      "default": false,
                      "description": "Replace all occurences of old_string (default false)."
                    }
                  },
                  "required": [
                    "old_string",
                    "new_string"
                  ],
                  "additionalProperties": false
                },
                "minItems": 1,
                "description": "Array of edit operations to perform sequentially on the file"
              }
            },
            "required": [
              "file_path",
              "edits"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Write",
          "description": "Writes a file to the local filesystem.\n\nUsage:\n- This tool will overwrite the existing file if there is one at the provided path.\n- If this is an existing file, you MUST use the Read tool first to read the file's contents. This tool will fail if you did not read the file first.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- NEVER proactively create documentation files (*.md) or README files. Only create documentation files if explicitly requested by the User.\n- Only use emojis if the user explicitly requests it. Avoid writing emojis to files unless asked.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to write (must be absolute, not relative)"
              },
              "content": {
                "type": "string",
                "description": "The content to write to the file"
              }
            },
            "required": [
              "file_path",
              "content"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "NotebookRead",
          "description": "Reads a Jupyter notebook (.ipynb file) and returns all of the cells with their outputs. Jupyter notebooks are interactive documents that combine code, text, and visualizations, commonly used for data analysis and scientific computing. The notebook_path parameter must be an absolute path, not a relative path.",
          "input_schema": {
            "type": "object",
            "properties": {
              "notebook_path": {
                "type": "string",
                "description": "The absolute path to the Jupyter notebook file to read (must be absolute, not relative)"
              },
              "cell_id": {
                "type": "string",
                "description": "The ID of a specific cell to read. If not provided, all cells will be read."
              }
            },
            "required": [
              "notebook_path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "NotebookEdit",
          "description": "Completely replaces the contents of a specific cell in a Jupyter notebook (.ipynb file) with new source. Jupyter notebooks are interactive documents that combine code, text, and visualizations, commonly used for data analysis and scientific computing. The notebook_path parameter must be an absolute path, not a relative path. The cell_number is 0-indexed. Use edit_mode=insert to add a new cell at the index specified by cell_number. Use edit_mode=delete to delete the cell at the index specified by cell_number.",
          "input_schema": {
            "type": "object",
            "properties": {
              "notebook_path": {
                "type": "string",
                "description": "The absolute path to the Jupyter notebook file to edit (must be absolute, not relative)"
              },
              "cell_id": {
                "type": "string",
                "description": "The ID of the cell to edit. When inserting a new cell, the new cell will be inserted after the cell with this ID, or at the beginning if not specified."
              },
              "new_source": {
                "type": "string",
                "description": "The new source for the cell"
              },
              "cell_type": {
                "type": "string",
                "enum": [
                  "code",
                  "markdown"
                ],
                "description": "The type of the cell (code or markdown). If not specified, it defaults to the current cell type. If using edit_mode=insert, this is required."
              },
              "edit_mode": {
                "type": "string",
                "enum": [
                  "replace",
                  "insert",
                  "delete"
                ],
                "description": "The type of edit to make (replace, insert, delete). Defaults to replace."
              }
            },
            "required": [
              "notebook_path",
              "new_source"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "WebFetch",
          "description": "\n- Fetches content from a specified URL and processes it using an AI model\n- Takes a URL and a prompt as input\n- Fetches the URL content, converts HTML to markdown\n- Processes the content with the prompt using a small, fast model\n- Returns the model's response about the content\n- Use this tool when you need to retrieve and analyze web content\n\nUsage notes:\n  - IMPORTANT: If an MCP-provided web fetch tool is available, prefer using that tool instead of this one, as it may have fewer restrictions. All MCP-provided tools start with \"mcp__\".\n  - The URL must be a fully-formed valid URL\n  - HTTP URLs will be automatically upgraded to HTTPS\n  - The prompt should describe what information you want to extract from the page\n  - This tool is read-only and does not modify any files\n  - Results may be summarized if the content is very large\n  - Includes a self-cleaning 15-minute cache for faster responses when repeatedly accessing the same URL\n  - When a URL redirects to a different host, the tool will inform you and provide the redirect URL in a special format. You should then make a new WebFetch request with the redirect URL to fetch the content.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "format": "uri",
                "description": "The URL to fetch content from"
              },
              "prompt": {
                "type": "string",
                "description": "The prompt to run on the fetched content"
              }
            },
            "required": [
              "url",
              "prompt"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "TodoWrite",
          "description": "Use this tool to create and manage a structured task list for your current coding session. This helps you track progress, organize complex tasks, and demonstrate thoroughness to the user.\nIt also helps the user understand the progress of the task and overall progress of their requests.\n\n## When to Use This Tool\nUse this tool proactively in these scenarios:\n\n1. Complex multi-step tasks - When a task requires 3 or more distinct steps or actions\n2. Non-trivial and complex tasks - Tasks that require careful planning or multiple operations\n3. User explicitly requests todo list - When the user directly asks you to use the todo list\n4. User provides multiple tasks - When users provide a list of things to be done (numbered or comma-separated)\n5. After receiving new instructions - Immediately capture user requirements as todos\n6. When you start working on a task - Mark it as in_progress BEFORE beginning work. Ideally you should only have one todo as in_progress at a time\n7. After completing a task - Mark it as completed and add any new follow-up tasks discovered during implementation\n\n## When NOT to Use This Tool\n\nSkip using this tool when:\n1. There is only a single, straightforward task\n2. The task is trivial and tracking it provides no organizational benefit\n3. The task can be completed in less than 3 trivial steps\n4. The task is purely conversational or informational\n\nNOTE that you should not use this tool if there is only one trivial task to do. In this case you are better off just doing the task directly.\n\n## Examples of When to Use the Todo List\n\n<example>\nUser: I want to add a dark mode toggle to the application settings. Make sure you run the tests and build when you're done!\nAssistant: I'll help add a dark mode toggle to your application settings. Let me create a todo list to track this implementation.\n*Creates todo list with the following items:*\n1. Create dark mode toggle component in Settings page\n2. Add dark mode state management (context/store)\n3. Implement CSS-in-JS styles for dark theme\n4. Update existing components to support theme switching\n5. Run tests and build process, addressing any failures or errors that occur\n*Begins working on the first task*\n\n<reasoning>\nThe assistant used the todo list because:\n1. Adding dark mode is a multi-step feature requiring UI, state management, and styling changes\n2. The user explicitly requested tests and build be run afterward\n3. The assistant inferred that tests and build need to pass by adding \"Ensure tests and build succeed\" as the final task\n</reasoning>\n</example>\n\n<example>\nUser: Help me rename the function getCwd to getCurrentWorkingDirectory across my project\nAssistant: Let me first search through your codebase to find all occurrences of 'getCwd'.\n*Uses grep or search tools to locate all instances of getCwd in the codebase*\nAssistant: I've found 15 instances of 'getCwd' across 8 different files. Let me create a todo list to track these changes.\n*Creates todo list with specific items for each file that needs updating*\n\n<reasoning>\nThe assistant used the todo list because:\n1. First, the assistant searched to understand the scope of the task\n2. Upon finding multiple occurrences across different files, it determined this was a complex task with multiple steps\n3. The todo list helps ensure every instance is tracked and updated systematically\n4. This approach prevents missing any occurrences and maintains code consistency\n</reasoning>\n</example>\n\n\n<example>\nUser: I need to implement these features for my e-commerce site: user registration, product catalog, shopping cart, and checkout flow.\nAssistant: I'll help implement these features. First, let's add all the features to the todo list.\n*Creates a todo list breaking down each feature into specific tasks based on the project architecture*\nAssistant: Let's start with user registration. This will involve creating database models, API endpoints, and frontend forms that integrate with your existing authentication system.\n\n<reasoning>\nThe assistant used the todo list because:\n1. The user provided multiple complex features to implement in a comma separated list\n2. The todo list helps organize these large features into manageable tasks\n3. This approach allows for tracking progress across the entire implementation\n</reasoning>\n</example>\n\n<example>\nUser: Can you help optimize my React application? It's rendering slowly and has performance issues.</user>\nAssistant: I'll help optimize your React application. First, let me examine your codebase to identify potential performance bottlenecks.\n*Reviews component structure, render patterns, state management, and data fetching*\nAssistant: After analyzing your codebase, I've identified several performance issues. Let me create a todo list to track our optimization efforts.\n*Creates todo list with items like: 1) Implement memoization for expensive calculations in ProductList, 2) Add virtualization for long lists in Dashboard, 3) Optimize image loading in Gallery component, 4) Fix state update loops in ShoppingCart, 5) Review bundle size and implement code splitting*\nLet's start by implementing memoization for the expensive calculations in your ProductList component.</assistant>\n\n<reasoning>\nThe assistant used the todo list because:\n1. First, the assistant examined the codebase to identify specific performance issues\n2. Based on this analysis, it identified multiple optimization opportunities\n3. Performance optimization is a non-trivial task requiring multiple steps\n4. The todo list helps methodically track improvements across different components\n5. This systematic approach ensures all performance bottlenecks are addressed\n</reasoning>\n</example>\n\n## Examples of When NOT to Use the Todo List\n\n<example>\nUser: How do I print 'Hello World' in Python?\nAssistant: In Python, you can print \"Hello World\" with this simple code:\n\npython\nprint(\"Hello World\")\n\nThis will output the text \"Hello World\" to the console when executed.</assistant>\n\n<reasoning>\nThe assistant did not use the todo list because this is a single, trivial task that can be completed in one step. There's no need to track multiple tasks or steps for such a straightforward request.\n</reasoning>\n</example>\n\n<example>\nUser: What does the git status command do?\nAssistant: The git status command shows the current state of your working directory and staging area. It displays which changes have been staged, which haven't, and which files aren't being tracked by Git. This is a fundamental command for understanding the current state of your repository before making commits.\n\n<reasoning>\nThe assistant did not use the todo list because this is an informational request with no actual coding task to complete. The user is simply asking for an explanation, not for the assistant to perform multiple steps or tasks.\n</reasoning>\n</example>\n\n<example>\nUser: Can you add a comment to the calculateTotal function to explain what it does?\nAssistant: Sure, let me add a comment to the calculateTotal function to explain what it does.\n* Uses the Edit tool to add a comment to the calculateTotal function *\n\n<reasoning>\nThe assistant did not use the todo list because this is a single, straightforward task confined to one location in the code. Adding a comment doesn't require tracking multiple steps or systematic organization.\n</reasoning>\n</example>\n\n<example>\nUser: Run npm install for me and tell me what happens.\nAssistant: I'll run the npm install command for you.\n\n*Executes: npm install*\n\nThe command completed successfully. Here's the output:\n[Output of npm install command]\n\nAll dependencies have been installed according to your package.json file.\n\n<reasoning>\nThe assistant did not use the todo list because this is a single command execution with immediate results. There are no multiple steps to track or organize, making the todo list unnecessary for this straightforward task.\n</reasoning>\n</example>\n\n## Task States and Management\n\n1. **Task States**: Use these states to track progress:\n   - pending: Task not yet started\n   - in_progress: Currently working on (limit to ONE task at a time)\n   - completed: Task finished successfully\n\n2. **Task Management**:\n   - Update task status in real-time as you work\n   - Mark tasks complete IMMEDIATELY after finishing (don't batch completions)\n   - Only have ONE task in_progress at any time\n   - Complete current tasks before starting new ones\n   - Remove tasks that are no longer relevant from the list entirely\n\n3. **Task Completion Requirements**:\n   - ONLY mark a task as completed when you have FULLY accomplished it\n   - If you encounter errors, blockers, or cannot finish, keep the task as in_progress\n   - When blocked, create a new task describing what needs to be resolved\n   - Never mark a task as completed if:\n     - Tests are failing\n     - Implementation is partial\n     - You encountered unresolved errors\n     - You couldn't find necessary files or dependencies\n\n4. **Task Breakdown**:\n   - Create specific, actionable items\n   - Break complex tasks into smaller, manageable steps\n   - Use clear, descriptive task names\n\nWhen in doubt, use this tool. Being proactive with task management demonstrates attentiveness and ensures you complete all requirements successfully.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "todos": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "content": {
                      "type": "string",
                      "minLength": 1
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "pending",
                        "in_progress",
                        "completed"
                      ]
                    },
                    "priority": {
                      "type": "string",
                      "enum": [
                        "high",
                        "medium",
                        "low"
                      ]
                    },
                    "id": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "content",
                    "status",
                    "priority",
                    "id"
                  ],
                  "additionalProperties": false
                },
                "description": "The updated todo list"
              }
            },
            "required": [
              "todos"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "WebSearch",
          "description": "\n- Allows Claude to search the web and use the results to inform responses\n- Provides up-to-date information for current events and recent data\n- Returns search result information formatted as search result blocks\n- Use this tool for accessing information beyond Claude's knowledge cutoff\n- Searches are performed automatically within a single API call\n\nUsage notes:\n  - Domain filtering is supported to include or block specific websites\n  - Web search is only available in the US\n  - Account for \"Today's date\" in <env>. For example, if <env> says \"Today's date: 2025-07-01\", and the user wants the latest docs, do not use 2024 in the search query. Use 2025.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "minLength": 2,
                "description": "The search query to use"
              },
              "allowed_domains": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Only include search results from these domains"
              },
              "blocked_domains": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Never include search results from these domains"
              }
            },
            "required": [
              "query"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        }
      ],
      "responseStructure": {
        "type": "object",
        "keys": [
          "id",
          "object",
          "created",
          "model",
          "choices",
          "usage",
          "stats",
          "system_fingerprint"
        ],
        "hasChoices": true,
        "hasContent": false,
        "hasUsage": true,
        "choicesCount": 1,
        "firstChoice": {
          "hasMessage": true,
          "hasToolCalls": false,
          "finishReason": "stop"
        }
      },
      "parsingAttempts": [
        "json_format",
        "function_call",
        "action_format",
        "natural_language"
      ]
    }
  },
  {
    "timestamp": "2025-08-10T09:10:42.782Z",
    "requestId": "session_1754817017503_s5ab3v6zo:conv_1754817017503_sqh3h6x0c:2:1754817017596:uo48",
    "provider": "lmstudio",
    "model": "gpt-oss-20b-mlx",
    "endpoint": "localhost:1234",
    "failureType": "text_instead_of_tools",
    "originalResponse": {
      "id": "chatcmpl-9r4792lz23s98xlh9tucqi",
      "object": "chat.completion",
      "created": 1754817017,
      "model": "gpt-oss-20b-mlx",
      "choices": [
        {
          "index": 0,
          "logprobs": null,
          "finish_reason": "stop",
          "message": {
            "role": "assistant",
            "content": "The tool didn't return output. Maybe the environment restricts root listing, or we need to specify working directory. Let's find current directory: maybe it's project root in environment where repo is mounted at /repo? Many earlier tasks use path \"/\". But no output.\n\nGiven this, maybe we can inspect environment variable? Not possible.\n\nWe could attempt using `find` via Bash to list present directory, but use absolute path? Use \"bash find . -maxdepth 1\" to list files in current directory. We'll use Bash tool with command \"find . -maxdepth 1\". But need to know working dir. This may give list relative.\n\nLet's try:\n<|start|>assistant<|channel|>commentary to=functions.Bash<|message|>{\"command\":\"find . -maxdepth 1\",\"description\":\"List root files of current working directory\"}"
          }
        }
      ],
      "usage": {
        "prompt_tokens": 20304,
        "completion_tokens": 165,
        "total_tokens": 20469
      },
      "stats": {},
      "system_fingerprint": "gpt-oss-20b-mlx"
    },
    "expectedFormat": "openai",
    "errorMessage": "All parsing strategies failed",
    "responseAnalysis": {
      "hasToolCalls": false,
      "hasContent": true,
      "contentLength": 780,
      "contentPreview": "The tool didn't return output. Maybe the environment restricts root listing, or we need to specify working directory. Let's find current directory: maybe it's project root in environment where repo is",
      "finishReason": "stop",
      "toolCallPatterns": []
    },
    "debugInfo": {
      "requestTools": [
        {
          "name": "Task",
          "description": "Launch a new agent to handle complex, multi-step tasks autonomously.\n\nAvailable agent types and the tools they have access to:\n- general-purpose: General-purpose agent for researching complex questions, searching for code, and executing multi-step tasks. When you are searching for a keyword or file and are not confident that you will find the right match in the first few tries use this agent to perform the search for you. (Tools: *)\n- code-refactorer: Use this agent when you need to improve existing code structure, readability, or maintainability without changing functionality. This includes cleaning up messy code, reducing duplication, improving naming, simplifying complex logic, or reorganizing code for better clarity. Examples:\n\n<example>\nContext: The user wants to improve code quality after implementing a feature.\nuser: \"I just finished implementing the user authentication system. Can you help clean it up?\"\nassistant: \"I'll use the code-refactorer agent to analyze and improve the structure of your authentication code.\"\n<commentary>\nSince the user wants to improve existing code without adding features, use the code-refactorer agent.\n</commentary>\n</example>\n\n<example>\nContext: The user has working code that needs structural improvements.\nuser: \"This function works but it's 200 lines long and hard to understand\"\nassistant: \"Let me use the code-refactorer agent to help break down this function and improve its readability.\"\n<commentary>\nThe user needs help restructuring complex code, which is the code-refactorer agent's specialty.\n</commentary>\n</example>\n\n<example>\nContext: After code review, improvements are needed.\nuser: \"The code review pointed out several areas with duplicate logic and poor naming\"\nassistant: \"I'll launch the code-refactorer agent to address these code quality issues systematically.\"\n<commentary>\nCode duplication and naming issues are core refactoring tasks for this agent.\n</commentary>\n</example> (Tools: Edit, MultiEdit, Write, NotebookEdit, Grep, LS, Read)\n- project-task-planner: Use this agent when you need to create a comprehensive development task list from a Product Requirements Document (PRD). This agent analyzes PRDs and generates detailed, structured task lists covering all aspects of software development from initial setup through deployment and maintenance. Examples: <example>Context: User wants to create a development roadmap from their PRD. user: \"I have a PRD for a new e-commerce platform. Can you create a task list?\" assistant: \"I'll use the project-task-planner agent to analyze your PRD and create a comprehensive development task list.\" <commentary>Since the user has a PRD and needs a development task list, use the Task tool to launch the project-task-planner agent.</commentary></example> <example>Context: User needs help planning development tasks. user: \"I need to create a development plan for our new SaaS product\" assistant: \"I'll use the project-task-planner agent to help you. First, I'll need to see your Product Requirements Document (PRD).\" <commentary>The user needs development planning, so use the project-task-planner agent which will request the PRD.</commentary></example> (Tools: Task, Bash, Edit, MultiEdit, Write, NotebookEdit, Grep, LS, Read, ExitPlanMode, TodoWrite, WebSearch)\n- vibe-coding-coach: Use this agent when users want to build applications through conversation, focusing on the vision and feel of their app rather than technical implementation details. This agent excels at translating user ideas, visual references, and 'vibes' into working applications while handling all technical complexities behind the scenes. <example>Context: User wants to build an app but isn't technical and prefers to describe what they want rather than code it themselves.\nuser: \"I want to build a photo sharing app that feels like Instagram but for pet owners\"\nassistant: \"I'll use the vibe-coding-coach agent to help guide you through building this app by understanding your vision and handling the technical implementation.\"\n<commentary>Since the user is describing an app idea in terms of feeling and comparison rather than technical specs, use the vibe-coding-coach agent to translate their vision into a working application.</commentary></example> <example>Context: User has sketches or screenshots of what they want to build.\nuser: \"Here's a screenshot of an app I like. Can we build something similar but for tracking workouts?\"\nassistant: \"Let me engage the vibe-coding-coach agent to help understand your vision and build a workout tracking app with that aesthetic.\"\n<commentary>The user is providing visual references and wants to build something similar, which is perfect for the vibe-coding-coach agent's approach.</commentary></example> (Tools: *)\n- debug-system-architect: Use this agent when you need to establish a comprehensive debug logging system for a project. This includes setting up log directories, implementing node-level tracing, creating time-based test records, establishing replay mechanisms, and documenting debug rules. Example: <example> Context: User is setting up a new project and wants to implement proper debugging infrastructure from the start. user: \"Please help me set up a debug system for my new API router project\" <commentary> Since the user is requesting debug system setup, use the debug-system-architect agent to analyze the project and implement comprehensive logging and tracing mechanisms. </commentary> </example> <example> Context: User encounters intermittent issues in their routing system and needs better visibility. user: \"I'm having trouble tracking down why some requests fail intermittently\" <commentary> Since the user needs better debugging visibility for intermittent issues, use the debug-system-architect agent to implement node-level tracing and replay mechanisms. </commentary> </example> (Tools: *)\n- code-risk-auditor: Use this agent when you need to perform comprehensive code risk assessment and identify potential architectural issues in your codebase. Examples: <example>Context: The user has just completed a major refactoring and wants to ensure no hardcoded values or fallback mechanisms were introduced. user: \"I just finished refactoring the routing system, can you check for any code risks?\" assistant: \"I'll use the code-risk-auditor agent to perform a comprehensive risk assessment of your routing system changes.\"</example> <example>Context: Before a major release, the user wants to clean up technical debt and ensure code quality. user: \"We're preparing for v2.0 release, I need a full code audit\" assistant: \"Let me launch the code-risk-auditor agent to identify hardcoding, fallback risks, outdated tests, and duplicate implementations across the entire codebase.\"</example> <example>Context: The user notices inconsistent behavior and suspects duplicate implementations. user: \"The same feature seems to be implemented in multiple places, causing bugs\" assistant: \"I'll use the code-risk-auditor agent to scan for duplicate implementations and provide a consolidation plan.\"</example> (Tools: *)\n- security-auditor: Use this agent when you need to perform a comprehensive security audit of a codebase, identify vulnerabilities, and generate a detailed security report with actionable remediation steps. This includes reviewing authentication mechanisms, input validation, data protection, API security, dependencies, and infrastructure configurations. Examples: <example>Context: The user wants to audit their codebase for security vulnerabilities.\nuser: \"Can you perform a security audit of my application?\"\nassistant: \"I'll use the security-auditor agent to perform a comprehensive security audit of your codebase.\"\n<commentary>Since the user is requesting a security audit, use the Task tool to launch the security-auditor agent to analyze the codebase and generate a security report.</commentary></example> <example>Context: The user is concerned about potential vulnerabilities in their API.\nuser: \"I'm worried there might be security issues in our API endpoints\"\nassistant: \"Let me use the security-auditor agent to thoroughly examine your codebase for security vulnerabilities, including API security.\"\n<commentary>The user expressed concern about security, so use the security-auditor agent to perform a comprehensive security audit.</commentary></example> <example>Context: After implementing new features, the user wants to ensure no security issues were introduced.\nuser: \"We just added user authentication to our app. Can you check if it's secure?\"\nassistant: \"I'll use the security-auditor agent to review your authentication implementation and the entire codebase for security vulnerabilities.\"\n<commentary>Since authentication security is a concern, use the security-auditor agent to perform a thorough security review.</commentary></example> (Tools: Task, Bash, Edit, MultiEdit, Write, NotebookEdit)\n- project-memory-manager: Use this agent when you need to manage project-specific memory entries, create project documentation, or organize project knowledge. This includes creating project summaries, documenting project decisions, tracking project progress, and maintaining project-specific knowledge bases. <example>Context: User wants to document a project decision or create project documentation. user: \"请为我们的新项目创建一个内存管理系统的文档\" assistant: \"我将使用 project-memory-manager agent 来创建这个项目文档\" <commentary>Since the user needs project documentation, use the project-memory-manager agent to create project-specific memory entries.</commentary></example> <example>Context: User wants to track project progress or decisions. user: \"我们需要记录这个项目的关键决策点\" assistant: \"让我使用 project-memory-manager agent 来记录这些项目决策\" <commentary>Since this is project tracking, use the project-memory-manager agent to create decision-type memory entries.</commentary></example> (Tools: *)\n- rules-architect: Use this agent when you need to analyze project architecture and establish comprehensive rule management systems. Examples: <example>Context: User wants to organize project rules and create a structured rule management system. user: \"I need to reorganize our project rules and create a better structure for managing coding standards, file organization, and testing protocols\" assistant: \"I'll use the rules-architect agent to analyze the current project structure and establish a comprehensive rule management system with proper categorization and organization.\"</example> <example>Context: Project has grown complex and needs better rule organization. user: \"Our CLAUDE.md file is getting too large and we need to break down rules into manageable categories\" assistant: \"Let me call the rules-architect agent to create a structured .claude/rules system that will organize all project rules into logical categories.\"</example> (Tools: *)\n- frontend-designer: Use this agent when you need to convert design mockups, wireframes, or visual concepts into detailed technical specifications and implementation guides for frontend development. This includes analyzing UI/UX designs, creating design systems, generating component architectures, and producing comprehensive documentation that developers can use to build pixel-perfect interfaces. Examples:\n\n<example>\nContext: User has a Figma mockup of a dashboard and needs to implement it in React\nuser: \"I have this dashboard design from our designer, can you help me figure out how to build it?\"\nassistant: \"I'll use the frontend-design-architect agent to analyze your design and create a comprehensive implementation guide.\"\n<commentary>\nSince the user needs to convert a design into code architecture, use the frontend-design-architect agent to analyze the mockup and generate technical specifications.\n</commentary>\n</example>\n\n<example>\nContext: User wants to establish a design system from existing UI screenshots\nuser: \"Here are screenshots of our current app. We need to extract a consistent design system from these.\"\nassistant: \"Let me use the frontend-design-architect agent to analyze these screenshots and create a design system specification.\"\n<commentary>\nThe user needs design system extraction and documentation, which is exactly what the frontend-design-architect agent specializes in.\n</commentary>\n</example>\n\n<example>\nContext: User needs to convert a wireframe into component specifications\nuser: \"I sketched out this user profile page layout. How should I structure the components?\"\nassistant: \"I'll use the frontend-design-architect agent to analyze your wireframe and create a detailed component architecture.\"\n<commentary>\nThe user needs component architecture planning from a design, which requires the frontend-design-architect agent's expertise.\n</commentary>\n</example> (Tools: *)\n- content-writer: Use this agent when you need to create compelling, informative content that explains complex topics in simple terms. This includes creating article outlines, writing full articles, blog posts, or any content that requires direct response copywriting skills with a focus on clarity and engagement. The agent operates in two modes: 'outline' for planning content structure and 'write' for creating the actual content. Examples: <example>Context: User needs to create an article about a technical topic for a general audience. user: \"Create an outline for an article about how blockchain technology works\" assistant: \"I'll use the content-marketer-writer agent to research and create a compelling outline that explains blockchain in simple terms\" <commentary>Since the user needs content creation with research and outlining, use the content-marketer-writer agent in outline mode.</commentary></example> <example>Context: User has an outline and needs to write the full article. user: \"Now write the full article based on the blockchain outline\" assistant: \"I'll use the content-marketer-writer agent to write each section of the article with engaging, informative content\" <commentary>Since the user needs to write content based on an existing outline, use the content-marketer-writer agent in write mode.</commentary></example> (Tools: *)\n- test-runner: Use this agent to run and manage tests according to the global and project-specific testing rules. This includes executing test scripts, documenting test results, and helping to diagnose issues following the standard pipeline. <example>Context: User wants to run all functional tests. user: \"运行所有功能测试\" assistant: \"我将使用 test-runner agent 来执行所有功能测试\" <commentary>Since the user wants to run tests by category, use the test-runner agent.</commentary></example> <example>Context: User wants to verify a bug fix. user: \"我修复了一个bug，帮我验证一下\" assistant: \"让我使用 test-runner agent 来执行对应的修复验证测试\" <commentary>The user needs to verify a fix, which is a core task for the test-runner agent.</commentary></example> (Tools: *)\n- in-depth-research-analyst: Use this agent when you need to conduct comprehensive research reports with in-depth web mining, data analysis, and visualization. This includes industry analysis, market research, competitive intelligence, and trend forecasting with accurate data from authoritative sources. <example>Context: User wants a comprehensive industry analysis report. user: \"请对人工智能芯片市场进行深入调研，包括主要厂商、市场份额和增长趋势\" assistant: \"我将使用 in-depth-research-analyst agent 来进行这项深入的市场调研并生成可视化报告\" <commentary>Since the user needs a comprehensive industry analysis with data visualization, use the in-depth-research-analyst agent to conduct thorough research and create an integrated report.</commentary></example> <example>Context: User wants market research with accurate data and visualizations. user: \"我们需要一份关于电动汽车充电基础设施的深度报告，包含数据图表\" assistant: \"让我使用 in-depth-research-analyst agent 来收集准确数据并生成图文并茂的分析报告\" <commentary>Since this requires market research with data accuracy and visualizations, use the in-depth-research-analyst agent to create a comprehensive report.</commentary></example> (Tools: *)\n- prd-writer: Use this agent when you need to create a comprehensive Product Requirements Document (PRD) for a software project or feature. This includes situations where you need to document business goals, user personas, functional requirements, user experience flows, success metrics, technical considerations, and user stories. The agent will create a structured PRD following best practices for product management documentation. Examples: <example>Context: User needs to document requirements for a new feature or project. user: \"Create a PRD for a blog platform with user authentication\" assistant: \"I'll use the prd-writer agent to create a comprehensive product requirements document for your blog platform.\" <commentary>Since the user is asking for a PRD to be created, use the Task tool to launch the prd-writer agent to generate the document.</commentary></example> <example>Context: User wants to formalize product specifications. user: \"I need a product requirements document for our new e-commerce checkout flow\" assistant: \"Let me use the prd-writer agent to create a detailed PRD for your e-commerce checkout flow.\" <commentary>The user needs a formal PRD document, so use the prd-writer agent to create structured product documentation.</commentary></example> (Tools: Task, Bash, Grep, LS, Read, Write, WebSearch, Glob)\n- pipeline-debug-universal: Use this agent when you need to implement comprehensive debug hooks and testing infrastructure for ANY pipeline system - whether it's API routing, data processing, CI/CD workflows, or transformation pipelines. This agent specializes in creating universal debug architectures that work across different pipeline types with data capture, replay capabilities, and systematic testing matrices. Examples: <example>Context: User is working on a multi-provider API routing system and needs to add debug capabilities to track data flow through each pipeline step. user: \"I need to add debug hooks to our routing pipeline so we can capture and replay data at each step\" assistant: \"I'll use the pipeline-debug-universal agent to design a comprehensive debug infrastructure with data capture and replay capabilities\" <commentary>Since the user needs pipeline debugging infrastructure, use the pipeline-debug-universal agent to create debug hooks and testing matrices.</commentary></example> <example>Context: User has a complex data transformation pipeline and wants to build systematic testing for each stage and provider. user: \"Our data processing pipeline has issues and we need better testing infrastructure to isolate problems at each step\" assistant: \"Let me use the pipeline-debug-universal agent to create a complete testing matrix and debug system\" <commentary>Since the user needs systematic pipeline testing infrastructure, use the pipeline-debug-universal agent to architect the testing system.</commentary></example> <example>Context: User is building a CI/CD pipeline and needs to implement debug capabilities for tracking deployment issues. user: \"Our deployment pipeline fails randomly and we can't reproduce the issues consistently\" assistant: \"I'll deploy the pipeline-debug-universal agent to create comprehensive debug hooks and replay capabilities for your CI/CD pipeline\" <commentary>Since the user needs debug infrastructure for a deployment pipeline, use the pipeline-debug-universal agent to design the debug system.</commentary></example> (Tools: *)\n\nWhen using the Task tool, you must specify a subagent_type parameter to select which agent type to use.\n\n\n\nWhen NOT to use the Agent tool:\n- If you want to read a specific file path, use the Read or Glob tool instead of the Agent tool, to find the match more quickly\n- If you are searching for a specific class definition like \"class Foo\", use the Glob tool instead, to find the match more quickly\n- If you are searching for code within a specific file or set of 2-3 files, use the Read tool instead of the Agent tool, to find the match more quickly\n- Other tasks that are not related to the agent descriptions above\n\n\nUsage notes:\n1. Launch multiple agents concurrently whenever possible, to maximize performance; to do that, use a single message with multiple tool uses\n2. When the agent is done, it will return a single message back to you. The result returned by the agent is not visible to the user. To show the user the result, you should send a text message back to the user with a concise summary of the result.\n3. Each agent invocation is stateless. You will not be able to send additional messages to the agent, nor will the agent be able to communicate with you outside of its final report. Therefore, your prompt should contain a highly detailed task description for the agent to perform autonomously and you should specify exactly what information the agent should return back to you in its final and only message to you.\n4. The agent's outputs should generally be trusted\n5. Clearly tell the agent whether you expect it to write code or just to do research (search, file reads, web fetches, etc.), since it is not aware of the user's intent\n6. If the agent description mentions that it should be used proactively, then you should try your best to use it without the user having to ask for it first. Use your judgement.\n\nExample usage:\n\n<example_agent_descriptions>\n\"code-reviewer\": use this agent after you are done writing a signficant piece of code\n\"greeting-responder\": use this agent when to respond to user greetings with a friendly joke\n</example_agent_description>\n\n<example>\nuser: \"Please write a function that checks if a number is prime\"\nassistant: Sure let me write a function that checks if a number is prime\nassistant: First let me use the Write tool to write a function that checks if a number is prime\nassistant: I'm going to use the Write tool to write the following code:\n<code>\nfunction isPrime(n) {\n  if (n <= 1) return false\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n</code>\n<commentary>\nSince a signficant piece of code was written and the task was completed, now use the code-reviewer agent to review the code\n</commentary>\nassistant: Now let me use the code-reviewer agent to review the code\nassistant: Uses the Task tool to launch the with the code-reviewer agent\n</example>\n\n<example>\nuser: \"Hello\"\n<commentary>\nSince the user is greeting, use the greeting-responder agent to respond with a friendly joke\n</commentary>\nassistant: \"I'm going to use the Task tool to launch the with the greeting-responder agent\"\n</example>\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "description": {
                "type": "string",
                "description": "A short (3-5 word) description of the task"
              },
              "prompt": {
                "type": "string",
                "description": "The task for the agent to perform"
              },
              "subagent_type": {
                "type": "string",
                "description": "The type of specialized agent to use for this task"
              }
            },
            "required": [
              "description",
              "prompt",
              "subagent_type"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Bash",
          "description": "Executes a given bash command in a persistent shell session with optional timeout, ensuring proper handling and security measures.\n\nBefore executing the command, please follow these steps:\n\n1. Directory Verification:\n   - If the command will create new directories or files, first use the LS tool to verify the parent directory exists and is the correct location\n   - For example, before running \"mkdir foo/bar\", first use LS to check that \"foo\" exists and is the intended parent directory\n\n2. Command Execution:\n   - Always quote file paths that contain spaces with double quotes (e.g., cd \"path with spaces/file.txt\")\n   - Examples of proper quoting:\n     - cd \"/Users/name/My Documents\" (correct)\n     - cd /Users/name/My Documents (incorrect - will fail)\n     - python \"/path/with spaces/script.py\" (correct)\n     - python /path/with spaces/script.py (incorrect - will fail)\n   - After ensuring proper quoting, execute the command.\n   - Capture the output of the command.\n\nUsage notes:\n  - The command argument is required.\n  - You can specify an optional timeout in milliseconds (up to 600000ms / 10 minutes). If not specified, commands will timeout after 120000ms (2 minutes).\n  - It is very helpful if you write a clear, concise description of what this command does in 5-10 words.\n  - If the output exceeds 30000 characters, output will be truncated before being returned to you.\n  - VERY IMPORTANT: You MUST avoid using search commands like `find` and `grep`. Instead use Grep, Glob, or Task to search. You MUST avoid read tools like `cat`, `head`, `tail`, and `ls`, and use Read and LS to read files.\n - If you _still_ need to run `grep`, STOP. ALWAYS USE ripgrep at `rg` first, which all ${PRODUCT_NAME} users have pre-installed.\n  - When issuing multiple commands, use the ';' or '&&' operator to separate them. DO NOT use newlines (newlines are ok in quoted strings).\n  - Try to maintain your current working directory throughout the session by using absolute paths and avoiding usage of `cd`. You may use `cd` if the User explicitly requests it.\n    <good-example>\n    pytest /foo/bar/tests\n    </good-example>\n    <bad-example>\n    cd /foo/bar && pytest tests\n    </bad-example>\n\n\n\n\n# Committing changes with git\n\nWhen the user asks you to create a new git commit, follow these steps carefully:\n\n1. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following bash commands in parallel, each using the Bash tool:\n  - Run a git status command to see all untracked files.\n  - Run a git diff command to see both staged and unstaged changes that will be committed.\n  - Run a git log command to see recent commit messages, so that you can follow this repository's commit message style.\n2. Analyze all staged changes (both previously staged and newly added) and draft a commit message:\n  - Summarize the nature of the changes (eg. new feature, enhancement to an existing feature, bug fix, refactoring, test, docs, etc.). Ensure the message accurately reflects the changes and their purpose (i.e. \"add\" means a wholly new feature, \"update\" means an enhancement to an existing feature, \"fix\" means a bug fix, etc.).\n  - Check for any sensitive information that shouldn't be committed\n  - Draft a concise (1-2 sentences) commit message that focuses on the \"why\" rather than the \"what\"\n  - Ensure it accurately reflects the changes and their purpose\n3. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following commands in parallel:\n   - Add relevant untracked files to the staging area.\n   - Create the commit with a message ending with:\n   🤖 Generated with [Claude Code](https://claude.ai/code)\n\n   Co-Authored-By: Claude <noreply@anthropic.com>\n   - Run git status to make sure the commit succeeded.\n4. If the commit fails due to pre-commit hook changes, retry the commit ONCE to include these automated changes. If it fails again, it usually means a pre-commit hook is preventing the commit. If the commit succeeds but you notice that files were modified by the pre-commit hook, you MUST amend your commit to include them.\n\nImportant notes:\n- NEVER update the git config\n- NEVER run additional commands to read or explore code, besides git bash commands\n- NEVER use the TodoWrite or Task tools\n- DO NOT push to the remote repository unless the user explicitly asks you to do so\n- IMPORTANT: Never use git commands with the -i flag (like git rebase -i or git add -i) since they require interactive input which is not supported.\n- If there are no changes to commit (i.e., no untracked files and no modifications), do not create an empty commit\n- In order to ensure good formatting, ALWAYS pass the commit message via a HEREDOC, a la this example:\n<example>\ngit commit -m \"$(cat <<'EOF'\n   Commit message here.\n\n   🤖 Generated with [Claude Code](https://claude.ai/code)\n\n   Co-Authored-By: Claude <noreply@anthropic.com>\n   EOF\n   )\"\n</example>\n\n# Creating pull requests\nUse the gh command via the Bash tool for ALL GitHub-related tasks including working with issues, pull requests, checks, and releases. If given a Github URL use the gh command to get the information needed.\n\nIMPORTANT: When the user asks you to create a pull request, follow these steps carefully:\n\n1. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following bash commands in parallel using the Bash tool, in order to understand the current state of the branch since it diverged from the main branch:\n   - Run a git status command to see all untracked files\n   - Run a git diff command to see both staged and unstaged changes that will be committed\n   - Check if the current branch tracks a remote branch and is up to date with the remote, so you know if you need to push to the remote\n   - Run a git log command and `git diff [base-branch]...HEAD` to understand the full commit history for the current branch (from the time it diverged from the base branch)\n2. Analyze all changes that will be included in the pull request, making sure to look at all relevant commits (NOT just the latest commit, but ALL commits that will be included in the pull request!!!), and draft a pull request summary\n3. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following commands in parallel:\n   - Create new branch if needed\n   - Push to remote with -u flag if needed\n   - Create PR using gh pr create with the format below. Use a HEREDOC to pass the body to ensure correct formatting.\n<example>\ngh pr create --title \"the pr title\" --body \"$(cat <<'EOF'\n## Summary\n<1-3 bullet points>\n\n## Test plan\n[Checklist of TODOs for testing the pull request...]\n\n🤖 Generated with [Claude Code](https://claude.ai/code)\nEOF\n)\"\n</example>\n\nImportant:\n- NEVER update the git config\n- DO NOT use the TodoWrite or Task tools\n- Return the PR URL when you're done, so the user can see it\n\n# Other common operations\n- View comments on a Github PR: gh api repos/foo/bar/pulls/123/comments",
          "input_schema": {
            "type": "object",
            "properties": {
              "command": {
                "type": "string",
                "description": "The command to execute"
              },
              "timeout": {
                "type": "number",
                "description": "Optional timeout in milliseconds (max 600000)"
              },
              "description": {
                "type": "string",
                "description": " Clear, concise description of what this command does in 5-10 words. Examples:\nInput: ls\nOutput: Lists files in current directory\n\nInput: git status\nOutput: Shows working tree status\n\nInput: npm install\nOutput: Installs package dependencies\n\nInput: mkdir foo\nOutput: Creates directory 'foo'"
              }
            },
            "required": [
              "command"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Glob",
          "description": "- Fast file pattern matching tool that works with any codebase size\n- Supports glob patterns like \"**/*.js\" or \"src/**/*.ts\"\n- Returns matching file paths sorted by modification time\n- Use this tool when you need to find files by name patterns\n- When you are doing an open ended search that may require multiple rounds of globbing and grepping, use the Agent tool instead\n- You have the capability to call multiple tools in a single response. It is always better to speculatively perform multiple searches as a batch that are potentially useful.",
          "input_schema": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "The glob pattern to match files against"
              },
              "path": {
                "type": "string",
                "description": "The directory to search in. If not specified, the current working directory will be used. IMPORTANT: Omit this field to use the default directory. DO NOT enter \"undefined\" or \"null\" - simply omit it for the default behavior. Must be a valid directory path if provided."
              }
            },
            "required": [
              "pattern"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Grep",
          "description": "A powerful search tool built on ripgrep\n\n  Usage:\n  - ALWAYS use Grep for search tasks. NEVER invoke `grep` or `rg` as a Bash command. The Grep tool has been optimized for correct permissions and access.\n  - Supports full regex syntax (e.g., \"log.*Error\", \"function\\s+\\w+\")\n  - Filter files with glob parameter (e.g., \"*.js\", \"**/*.tsx\") or type parameter (e.g., \"js\", \"py\", \"rust\")\n  - Output modes: \"content\" shows matching lines, \"files_with_matches\" shows only file paths (default), \"count\" shows match counts\n  - Use Task tool for open-ended searches requiring multiple rounds\n  - Pattern syntax: Uses ripgrep (not grep) - literal braces need escaping (use `interface\\{\\}` to find `interface{}` in Go code)\n  - Multiline matching: By default patterns match within single lines only. For cross-line patterns like `struct \\{[\\s\\S]*?field`, use `multiline: true`\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "The regular expression pattern to search for in file contents"
              },
              "path": {
                "type": "string",
                "description": "File or directory to search in (rg PATH). Defaults to current working directory."
              },
              "glob": {
                "type": "string",
                "description": "Glob pattern to filter files (e.g. \"*.js\", \"*.{ts,tsx}\") - maps to rg --glob"
              },
              "output_mode": {
                "type": "string",
                "enum": [
                  "content",
                  "files_with_matches",
                  "count"
                ],
                "description": "Output mode: \"content\" shows matching lines (supports -A/-B/-C context, -n line numbers, head_limit), \"files_with_matches\" shows file paths (supports head_limit), \"count\" shows match counts (supports head_limit). Defaults to \"files_with_matches\"."
              },
              "-B": {
                "type": "number",
                "description": "Number of lines to show before each match (rg -B). Requires output_mode: \"content\", ignored otherwise."
              },
              "-A": {
                "type": "number",
                "description": "Number of lines to show after each match (rg -A). Requires output_mode: \"content\", ignored otherwise."
              },
              "-C": {
                "type": "number",
                "description": "Number of lines to show before and after each match (rg -C). Requires output_mode: \"content\", ignored otherwise."
              },
              "-n": {
                "type": "boolean",
                "description": "Show line numbers in output (rg -n). Requires output_mode: \"content\", ignored otherwise."
              },
              "-i": {
                "type": "boolean",
                "description": "Case insensitive search (rg -i)"
              },
              "type": {
                "type": "string",
                "description": "File type to search (rg --type). Common types: js, py, rust, go, java, etc. More efficient than include for standard file types."
              },
              "head_limit": {
                "type": "number",
                "description": "Limit output to first N lines/entries, equivalent to \"| head -N\". Works across all output modes: content (limits output lines), files_with_matches (limits file paths), count (limits count entries). When unspecified, shows all results from ripgrep."
              },
              "multiline": {
                "type": "boolean",
                "description": "Enable multiline mode where . matches newlines and patterns can span lines (rg -U --multiline-dotall). Default: false."
              }
            },
            "required": [
              "pattern"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "LS",
          "description": "Lists files and directories in a given path. The path parameter must be an absolute path, not a relative path. You can optionally provide an array of glob patterns to ignore with the ignore parameter. You should generally prefer the Glob and Grep tools, if you know which directories to search.",
          "input_schema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "The absolute path to the directory to list (must be absolute, not relative)"
              },
              "ignore": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of glob patterns to ignore"
              }
            },
            "required": [
              "path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "ExitPlanMode",
          "description": "Use this tool when you are in plan mode and have finished presenting your plan and are ready to code. This will prompt the user to exit plan mode.\nIMPORTANT: Only use this tool when the task requires planning the implementation steps of a task that requires writing code. For research tasks where you're gathering information, searching files, reading files or in general trying to understand the codebase - do NOT use this tool.\n\nEg.\n1. Initial task: \"Search for and understand the implementation of vim mode in the codebase\" - Do not use the exit plan mode tool because you are not planning the implementation steps of a task.\n2. Initial task: \"Help me implement yank mode for vim\" - Use the exit plan mode tool after you have finished planning the implementation steps of the task.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "plan": {
                "type": "string",
                "description": "The plan you came up with, that you want to run by the user for approval. Supports markdown. The plan should be pretty concise."
              }
            },
            "required": [
              "plan"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Read",
          "description": "Reads a file from the local filesystem. You can access any file directly by using this tool.\nAssume this tool is able to read all files on the machine. If the User provides a path to a file assume that path is valid. It is okay to read a file that does not exist; an error will be returned.\n\nUsage:\n- The file_path parameter must be an absolute path, not a relative path\n- By default, it reads up to 2000 lines starting from the beginning of the file\n- You can optionally specify a line offset and limit (especially handy for long files), but it's recommended to read the whole file by not providing these parameters\n- Any lines longer than 2000 characters will be truncated\n- Results are returned using cat -n format, with line numbers starting at 1\n- This tool allows Claude Code to read images (eg PNG, JPG, etc). When reading an image file the contents are presented visually as Claude Code is a multimodal LLM.\n- This tool can read PDF files (.pdf). PDFs are processed page by page, extracting both text and visual content for analysis.\n- For Jupyter notebooks (.ipynb files), use the NotebookRead instead\n- You have the capability to call multiple tools in a single response. It is always better to speculatively read multiple files as a batch that are potentially useful.\n- You will regularly be asked to read screenshots. If the user provides a path to a screenshot ALWAYS use this tool to view the file at the path. This tool will work with all temporary file paths like /var/folders/123/abc/T/TemporaryItems/NSIRD_screencaptureui_ZfB1tD/Screenshot.png\n- If you read a file that exists but has empty contents you will receive a system reminder warning in place of file contents.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to read"
              },
              "offset": {
                "type": "number",
                "description": "The line number to start reading from. Only provide if the file is too large to read at once"
              },
              "limit": {
                "type": "number",
                "description": "The number of lines to read. Only provide if the file is too large to read at once."
              }
            },
            "required": [
              "file_path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Edit",
          "description": "Performs exact string replacements in files.\n\nUsage:\n- You must use your `Read` tool at least once in the conversation before editing. This tool will error if you attempt an edit without reading the file.\n- When editing text from Read tool output, ensure you preserve the exact indentation (tabs/spaces) as it appears AFTER the line number prefix. The line number prefix format is: spaces + line number + tab. Everything after that tab is the actual file content to match. Never include any part of the line number prefix in the old_string or new_string.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- Only use emojis if the user explicitly requests it. Avoid adding emojis to files unless asked.\n- The edit will FAIL if `old_string` is not unique in the file. Either provide a larger string with more surrounding context to make it unique or use `replace_all` to change every instance of `old_string`.\n- Use `replace_all` for replacing and renaming strings across the file. This parameter is useful if you want to rename a variable for instance.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to modify"
              },
              "old_string": {
                "type": "string",
                "description": "The text to replace"
              },
              "new_string": {
                "type": "string",
                "description": "The text to replace it with (must be different from old_string)"
              },
              "replace_all": {
                "type": "boolean",
                "default": false,
                "description": "Replace all occurences of old_string (default false)"
              }
            },
            "required": [
              "file_path",
              "old_string",
              "new_string"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "MultiEdit",
          "description": "This is a tool for making multiple edits to a single file in one operation. It is built on top of the Edit tool and allows you to perform multiple find-and-replace operations efficiently. Prefer this tool over the Edit tool when you need to make multiple edits to the same file.\n\nBefore using this tool:\n\n1. Use the Read tool to understand the file's contents and context\n2. Verify the directory path is correct\n\nTo make multiple file edits, provide the following:\n1. file_path: The absolute path to the file to modify (must be absolute, not relative)\n2. edits: An array of edit operations to perform, where each edit contains:\n   - old_string: The text to replace (must match the file contents exactly, including all whitespace and indentation)\n   - new_string: The edited text to replace the old_string\n   - replace_all: Replace all occurences of old_string. This parameter is optional and defaults to false.\n\nIMPORTANT:\n- All edits are applied in sequence, in the order they are provided\n- Each edit operates on the result of the previous edit\n- All edits must be valid for the operation to succeed - if any edit fails, none will be applied\n- This tool is ideal when you need to make several changes to different parts of the same file\n- For Jupyter notebooks (.ipynb files), use the NotebookEdit instead\n\nCRITICAL REQUIREMENTS:\n1. All edits follow the same requirements as the single Edit tool\n2. The edits are atomic - either all succeed or none are applied\n3. Plan your edits carefully to avoid conflicts between sequential operations\n\nWARNING:\n- The tool will fail if edits.old_string doesn't match the file contents exactly (including whitespace)\n- The tool will fail if edits.old_string and edits.new_string are the same\n- Since edits are applied in sequence, ensure that earlier edits don't affect the text that later edits are trying to find\n\nWhen making edits:\n- Ensure all edits result in idiomatic, correct code\n- Do not leave the code in a broken state\n- Always use absolute file paths (starting with /)\n- Only use emojis if the user explicitly requests it. Avoid adding emojis to files unless asked.\n- Use replace_all for replacing and renaming strings across the file. This parameter is useful if you want to rename a variable for instance.\n\nIf you want to create a new file, use:\n- A new file path, including dir name if needed\n- First edit: empty old_string and the new file's contents as new_string\n- Subsequent edits: normal edit operations on the created content",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to modify"
              },
              "edits": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "old_string": {
                      "type": "string",
                      "description": "The text to replace"
                    },
                    "new_string": {
                      "type": "string",
                      "description": "The text to replace it with"
                    },
                    "replace_all": {
                      "type": "boolean",
                      "default": false,
                      "description": "Replace all occurences of old_string (default false)."
                    }
                  },
                  "required": [
                    "old_string",
                    "new_string"
                  ],
                  "additionalProperties": false
                },
                "minItems": 1,
                "description": "Array of edit operations to perform sequentially on the file"
              }
            },
            "required": [
              "file_path",
              "edits"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Write",
          "description": "Writes a file to the local filesystem.\n\nUsage:\n- This tool will overwrite the existing file if there is one at the provided path.\n- If this is an existing file, you MUST use the Read tool first to read the file's contents. This tool will fail if you did not read the file first.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- NEVER proactively create documentation files (*.md) or README files. Only create documentation files if explicitly requested by the User.\n- Only use emojis if the user explicitly requests it. Avoid writing emojis to files unless asked.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to write (must be absolute, not relative)"
              },
              "content": {
                "type": "string",
                "description": "The content to write to the file"
              }
            },
            "required": [
              "file_path",
              "content"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "NotebookRead",
          "description": "Reads a Jupyter notebook (.ipynb file) and returns all of the cells with their outputs. Jupyter notebooks are interactive documents that combine code, text, and visualizations, commonly used for data analysis and scientific computing. The notebook_path parameter must be an absolute path, not a relative path.",
          "input_schema": {
            "type": "object",
            "properties": {
              "notebook_path": {
                "type": "string",
                "description": "The absolute path to the Jupyter notebook file to read (must be absolute, not relative)"
              },
              "cell_id": {
                "type": "string",
                "description": "The ID of a specific cell to read. If not provided, all cells will be read."
              }
            },
            "required": [
              "notebook_path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "NotebookEdit",
          "description": "Completely replaces the contents of a specific cell in a Jupyter notebook (.ipynb file) with new source. Jupyter notebooks are interactive documents that combine code, text, and visualizations, commonly used for data analysis and scientific computing. The notebook_path parameter must be an absolute path, not a relative path. The cell_number is 0-indexed. Use edit_mode=insert to add a new cell at the index specified by cell_number. Use edit_mode=delete to delete the cell at the index specified by cell_number.",
          "input_schema": {
            "type": "object",
            "properties": {
              "notebook_path": {
                "type": "string",
                "description": "The absolute path to the Jupyter notebook file to edit (must be absolute, not relative)"
              },
              "cell_id": {
                "type": "string",
                "description": "The ID of the cell to edit. When inserting a new cell, the new cell will be inserted after the cell with this ID, or at the beginning if not specified."
              },
              "new_source": {
                "type": "string",
                "description": "The new source for the cell"
              },
              "cell_type": {
                "type": "string",
                "enum": [
                  "code",
                  "markdown"
                ],
                "description": "The type of the cell (code or markdown). If not specified, it defaults to the current cell type. If using edit_mode=insert, this is required."
              },
              "edit_mode": {
                "type": "string",
                "enum": [
                  "replace",
                  "insert",
                  "delete"
                ],
                "description": "The type of edit to make (replace, insert, delete). Defaults to replace."
              }
            },
            "required": [
              "notebook_path",
              "new_source"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "WebFetch",
          "description": "\n- Fetches content from a specified URL and processes it using an AI model\n- Takes a URL and a prompt as input\n- Fetches the URL content, converts HTML to markdown\n- Processes the content with the prompt using a small, fast model\n- Returns the model's response about the content\n- Use this tool when you need to retrieve and analyze web content\n\nUsage notes:\n  - IMPORTANT: If an MCP-provided web fetch tool is available, prefer using that tool instead of this one, as it may have fewer restrictions. All MCP-provided tools start with \"mcp__\".\n  - The URL must be a fully-formed valid URL\n  - HTTP URLs will be automatically upgraded to HTTPS\n  - The prompt should describe what information you want to extract from the page\n  - This tool is read-only and does not modify any files\n  - Results may be summarized if the content is very large\n  - Includes a self-cleaning 15-minute cache for faster responses when repeatedly accessing the same URL\n  - When a URL redirects to a different host, the tool will inform you and provide the redirect URL in a special format. You should then make a new WebFetch request with the redirect URL to fetch the content.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "format": "uri",
                "description": "The URL to fetch content from"
              },
              "prompt": {
                "type": "string",
                "description": "The prompt to run on the fetched content"
              }
            },
            "required": [
              "url",
              "prompt"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "TodoWrite",
          "description": "Use this tool to create and manage a structured task list for your current coding session. This helps you track progress, organize complex tasks, and demonstrate thoroughness to the user.\nIt also helps the user understand the progress of the task and overall progress of their requests.\n\n## When to Use This Tool\nUse this tool proactively in these scenarios:\n\n1. Complex multi-step tasks - When a task requires 3 or more distinct steps or actions\n2. Non-trivial and complex tasks - Tasks that require careful planning or multiple operations\n3. User explicitly requests todo list - When the user directly asks you to use the todo list\n4. User provides multiple tasks - When users provide a list of things to be done (numbered or comma-separated)\n5. After receiving new instructions - Immediately capture user requirements as todos\n6. When you start working on a task - Mark it as in_progress BEFORE beginning work. Ideally you should only have one todo as in_progress at a time\n7. After completing a task - Mark it as completed and add any new follow-up tasks discovered during implementation\n\n## When NOT to Use This Tool\n\nSkip using this tool when:\n1. There is only a single, straightforward task\n2. The task is trivial and tracking it provides no organizational benefit\n3. The task can be completed in less than 3 trivial steps\n4. The task is purely conversational or informational\n\nNOTE that you should not use this tool if there is only one trivial task to do. In this case you are better off just doing the task directly.\n\n## Examples of When to Use the Todo List\n\n<example>\nUser: I want to add a dark mode toggle to the application settings. Make sure you run the tests and build when you're done!\nAssistant: I'll help add a dark mode toggle to your application settings. Let me create a todo list to track this implementation.\n*Creates todo list with the following items:*\n1. Create dark mode toggle component in Settings page\n2. Add dark mode state management (context/store)\n3. Implement CSS-in-JS styles for dark theme\n4. Update existing components to support theme switching\n5. Run tests and build process, addressing any failures or errors that occur\n*Begins working on the first task*\n\n<reasoning>\nThe assistant used the todo list because:\n1. Adding dark mode is a multi-step feature requiring UI, state management, and styling changes\n2. The user explicitly requested tests and build be run afterward\n3. The assistant inferred that tests and build need to pass by adding \"Ensure tests and build succeed\" as the final task\n</reasoning>\n</example>\n\n<example>\nUser: Help me rename the function getCwd to getCurrentWorkingDirectory across my project\nAssistant: Let me first search through your codebase to find all occurrences of 'getCwd'.\n*Uses grep or search tools to locate all instances of getCwd in the codebase*\nAssistant: I've found 15 instances of 'getCwd' across 8 different files. Let me create a todo list to track these changes.\n*Creates todo list with specific items for each file that needs updating*\n\n<reasoning>\nThe assistant used the todo list because:\n1. First, the assistant searched to understand the scope of the task\n2. Upon finding multiple occurrences across different files, it determined this was a complex task with multiple steps\n3. The todo list helps ensure every instance is tracked and updated systematically\n4. This approach prevents missing any occurrences and maintains code consistency\n</reasoning>\n</example>\n\n\n<example>\nUser: I need to implement these features for my e-commerce site: user registration, product catalog, shopping cart, and checkout flow.\nAssistant: I'll help implement these features. First, let's add all the features to the todo list.\n*Creates a todo list breaking down each feature into specific tasks based on the project architecture*\nAssistant: Let's start with user registration. This will involve creating database models, API endpoints, and frontend forms that integrate with your existing authentication system.\n\n<reasoning>\nThe assistant used the todo list because:\n1. The user provided multiple complex features to implement in a comma separated list\n2. The todo list helps organize these large features into manageable tasks\n3. This approach allows for tracking progress across the entire implementation\n</reasoning>\n</example>\n\n<example>\nUser: Can you help optimize my React application? It's rendering slowly and has performance issues.</user>\nAssistant: I'll help optimize your React application. First, let me examine your codebase to identify potential performance bottlenecks.\n*Reviews component structure, render patterns, state management, and data fetching*\nAssistant: After analyzing your codebase, I've identified several performance issues. Let me create a todo list to track our optimization efforts.\n*Creates todo list with items like: 1) Implement memoization for expensive calculations in ProductList, 2) Add virtualization for long lists in Dashboard, 3) Optimize image loading in Gallery component, 4) Fix state update loops in ShoppingCart, 5) Review bundle size and implement code splitting*\nLet's start by implementing memoization for the expensive calculations in your ProductList component.</assistant>\n\n<reasoning>\nThe assistant used the todo list because:\n1. First, the assistant examined the codebase to identify specific performance issues\n2. Based on this analysis, it identified multiple optimization opportunities\n3. Performance optimization is a non-trivial task requiring multiple steps\n4. The todo list helps methodically track improvements across different components\n5. This systematic approach ensures all performance bottlenecks are addressed\n</reasoning>\n</example>\n\n## Examples of When NOT to Use the Todo List\n\n<example>\nUser: How do I print 'Hello World' in Python?\nAssistant: In Python, you can print \"Hello World\" with this simple code:\n\npython\nprint(\"Hello World\")\n\nThis will output the text \"Hello World\" to the console when executed.</assistant>\n\n<reasoning>\nThe assistant did not use the todo list because this is a single, trivial task that can be completed in one step. There's no need to track multiple tasks or steps for such a straightforward request.\n</reasoning>\n</example>\n\n<example>\nUser: What does the git status command do?\nAssistant: The git status command shows the current state of your working directory and staging area. It displays which changes have been staged, which haven't, and which files aren't being tracked by Git. This is a fundamental command for understanding the current state of your repository before making commits.\n\n<reasoning>\nThe assistant did not use the todo list because this is an informational request with no actual coding task to complete. The user is simply asking for an explanation, not for the assistant to perform multiple steps or tasks.\n</reasoning>\n</example>\n\n<example>\nUser: Can you add a comment to the calculateTotal function to explain what it does?\nAssistant: Sure, let me add a comment to the calculateTotal function to explain what it does.\n* Uses the Edit tool to add a comment to the calculateTotal function *\n\n<reasoning>\nThe assistant did not use the todo list because this is a single, straightforward task confined to one location in the code. Adding a comment doesn't require tracking multiple steps or systematic organization.\n</reasoning>\n</example>\n\n<example>\nUser: Run npm install for me and tell me what happens.\nAssistant: I'll run the npm install command for you.\n\n*Executes: npm install*\n\nThe command completed successfully. Here's the output:\n[Output of npm install command]\n\nAll dependencies have been installed according to your package.json file.\n\n<reasoning>\nThe assistant did not use the todo list because this is a single command execution with immediate results. There are no multiple steps to track or organize, making the todo list unnecessary for this straightforward task.\n</reasoning>\n</example>\n\n## Task States and Management\n\n1. **Task States**: Use these states to track progress:\n   - pending: Task not yet started\n   - in_progress: Currently working on (limit to ONE task at a time)\n   - completed: Task finished successfully\n\n2. **Task Management**:\n   - Update task status in real-time as you work\n   - Mark tasks complete IMMEDIATELY after finishing (don't batch completions)\n   - Only have ONE task in_progress at any time\n   - Complete current tasks before starting new ones\n   - Remove tasks that are no longer relevant from the list entirely\n\n3. **Task Completion Requirements**:\n   - ONLY mark a task as completed when you have FULLY accomplished it\n   - If you encounter errors, blockers, or cannot finish, keep the task as in_progress\n   - When blocked, create a new task describing what needs to be resolved\n   - Never mark a task as completed if:\n     - Tests are failing\n     - Implementation is partial\n     - You encountered unresolved errors\n     - You couldn't find necessary files or dependencies\n\n4. **Task Breakdown**:\n   - Create specific, actionable items\n   - Break complex tasks into smaller, manageable steps\n   - Use clear, descriptive task names\n\nWhen in doubt, use this tool. Being proactive with task management demonstrates attentiveness and ensures you complete all requirements successfully.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "todos": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "content": {
                      "type": "string",
                      "minLength": 1
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "pending",
                        "in_progress",
                        "completed"
                      ]
                    },
                    "priority": {
                      "type": "string",
                      "enum": [
                        "high",
                        "medium",
                        "low"
                      ]
                    },
                    "id": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "content",
                    "status",
                    "priority",
                    "id"
                  ],
                  "additionalProperties": false
                },
                "description": "The updated todo list"
              }
            },
            "required": [
              "todos"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "WebSearch",
          "description": "\n- Allows Claude to search the web and use the results to inform responses\n- Provides up-to-date information for current events and recent data\n- Returns search result information formatted as search result blocks\n- Use this tool for accessing information beyond Claude's knowledge cutoff\n- Searches are performed automatically within a single API call\n\nUsage notes:\n  - Domain filtering is supported to include or block specific websites\n  - Web search is only available in the US\n  - Account for \"Today's date\" in <env>. For example, if <env> says \"Today's date: 2025-07-01\", and the user wants the latest docs, do not use 2024 in the search query. Use 2025.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "minLength": 2,
                "description": "The search query to use"
              },
              "allowed_domains": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Only include search results from these domains"
              },
              "blocked_domains": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Never include search results from these domains"
              }
            },
            "required": [
              "query"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        }
      ],
      "responseStructure": {
        "type": "object",
        "keys": [
          "id",
          "object",
          "created",
          "model",
          "choices",
          "usage",
          "stats",
          "system_fingerprint"
        ],
        "hasChoices": true,
        "hasContent": false,
        "hasUsage": true,
        "choicesCount": 1,
        "firstChoice": {
          "hasMessage": true,
          "hasToolCalls": false,
          "finishReason": "stop"
        }
      },
      "parsingAttempts": [
        "json_format",
        "function_call",
        "action_format",
        "natural_language"
      ]
    }
  },
  {
    "timestamp": "2025-08-10T09:07:41.769Z",
    "requestId": "session_1754816854534_pv1w57ed9:conv_1754816854534_g1ykvfonh:1:1754816854536:gyga",
    "provider": "lmstudio",
    "model": "gpt-oss-20b-mlx",
    "endpoint": "localhost:1234",
    "failureType": "text_instead_of_tools",
    "originalResponse": {
      "id": "chatcmpl-piawqr6zg5rubo7tiu1z",
      "object": "chat.completion",
      "created": 1754816854,
      "model": "gpt-oss-20b-mlx",
      "choices": [
        {
          "index": 0,
          "logprobs": null,
          "finish_reason": "stop",
          "message": {
            "role": "assistant",
            "content": "The user says: \"使用grep搜索包含'character'的行\" which means \"Use grep to search for lines containing 'character'\". They likely want a command. We can provide the grep command: `grep -n 'character' filename` or use ripgrep. We can also show usage of the tool. The user didn't specify file path, so we might ask for a directory or file. But maybe they want the command. We can give an example: `grep -R 'character' .` or using ripgrep: `rg 'character'`. Provide explanation.下面给出几种常见的 `grep`（或 ripgrep）用法，帮助你在文件/目录中搜索包含 **character** 的行：\n\n| 目的 | 命令示例 | 说明 |\n|------|----------|------|\n| **在单个文件中搜索** | `grep -n 'character' /path/to/file.txt` | `-n` 让 grep 在输出中显示行号。 |\n| **递归搜索整个目录** | `grep -Rni 'character' /path/to/dir` | `-R` 递归；`-n` 行号；`-i` 忽略大小写。 |\n| **使用 ripgrep（更快、更现代）** | `rg -n 'character' /path/to/dir` | ripgrep 默认递归，支持行号。 |\n| **只显示匹配的文本（不含文件名）** | `grep -o 'character' /path/to/file.txt` | 只输出匹配到的字符串。 |\n| **统计出现次数** | `grep -o 'character' /path/to/file.txt | wc -l` | 统计匹配行数。 |\n\n### 示例\n\n假设你想在当前目录... [truncated]"
          }
        }
      ],
      "usage": {
        "prompt_tokens": 321,
        "completion_tokens": 604,
        "total_tokens": 925
      },
      "stats": {},
      "system_fingerprint": "gpt-oss-20b-mlx"
    },
    "expectedFormat": "openai",
    "errorMessage": "All parsing strategies failed",
    "responseAnalysis": {
      "hasToolCalls": false,
      "hasContent": true,
      "contentLength": 1417,
      "contentPreview": "The user says: \"使用grep搜索包含'character'的行\" which means \"Use grep to search for lines containing 'character'\". They likely want a command. We can provide the grep command: `grep -n 'character' filename` ",
      "finishReason": "stop",
      "toolCallPatterns": []
    },
    "debugInfo": {
      "requestTools": [
        {
          "name": "bash",
          "description": "Execute shell commands",
          "input_schema": {
            "type": "object",
            "properties": {
              "command": {
                "type": "string",
                "description": "Shell command to execute"
              },
              "description": {
                "type": "string",
                "description": "Description of what the command does"
              }
            },
            "required": [
              "command"
            ]
          }
        },
        {
          "name": "grep",
          "description": "Search for patterns in files using ripgrep",
          "input_schema": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "The regex pattern to search for"
              },
              "path": {
                "type": "string",
                "description": "Directory or file to search in"
              },
              "glob": {
                "type": "string",
                "description": "File pattern to match (e.g., '*.ts')"
              },
              "output_mode": {
                "type": "string",
                "description": "Output mode: content/files_with_matches/count"
              },
              "-i": {
                "type": "boolean",
                "description": "Case insensitive search"
              },
              "-C": {
                "type": "number",
                "description": "Lines of context to show"
              },
              "-n": {
                "type": "boolean",
                "description": "Show line numbers"
              }
            },
            "required": [
              "pattern"
            ]
          }
        },
        {
          "name": "read",
          "description": "Read file contents from the filesystem",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "Absolute path to the file to read"
              },
              "limit": {
                "type": "number",
                "description": "Number of lines to read"
              },
              "offset": {
                "type": "number",
                "description": "Starting line number"
              }
            },
            "required": [
              "file_path"
            ]
          }
        },
        {
          "name": "ls",
          "description": "List directory contents",
          "input_schema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "Directory path to list (must be absolute)"
              },
              "ignore": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Glob patterns to ignore"
              }
            },
            "required": [
              "path"
            ]
          }
        }
      ],
      "responseStructure": {
        "type": "object",
        "keys": [
          "id",
          "object",
          "created",
          "model",
          "choices",
          "usage",
          "stats",
          "system_fingerprint"
        ],
        "hasChoices": true,
        "hasContent": false,
        "hasUsage": true,
        "choicesCount": 1,
        "firstChoice": {
          "hasMessage": true,
          "hasToolCalls": false,
          "finishReason": "stop"
        }
      },
      "parsingAttempts": [
        "json_format",
        "function_call",
        "action_format",
        "natural_language"
      ]
    }
  },
  {
    "timestamp": "2025-08-10T09:06:42.137Z",
    "requestId": "session_1754816753452_eqo8u18uc:conv_1754816753452_jwegk07kv:3:1754816780137:t1e9",
    "provider": "lmstudio",
    "model": "gpt-oss-20b-mlx",
    "endpoint": "localhost:1234",
    "failureType": "text_instead_of_tools",
    "originalResponse": {
      "id": "chatcmpl-lnmnghxv7r0sfkgyl64no",
      "object": "chat.completion",
      "created": 1754816780,
      "model": "gpt-oss-20b-mlx",
      "choices": [
        {
          "index": 0,
          "logprobs": null,
          "finish_reason": "stop",
          "message": {
            "role": "assistant",
            "content": "We need to list current directory contents. We must use the LS tool with absolute path or \".\"? According to LS spec: \"path\" is an absolute path. It cannot use relative unless current working dir? The tool accepts path: string, no optional arg.\n\nWe need to find base directory. It might be the repo root at \"/\". But we don't know. Use the LS tool from repository root? Let's try path: \".\" but fails maybe.\n\nWe need to identify root of repo. Maybe it's \"/\". But to make path absolute, use \"/\". Let's run LS with path=\"/\". That's root of filesystem, might be huge.\n\nBut maybe the repository is at '/workspace' or current working dir. In some environments, they mount the repo in current directory; we could use \".\" but must be absolute. Could try path=\"/tmp\", etc. We can try path=\"/\" with ignore of huge output.\n\nWe need a narrower path: we might try to find path by exploring `ls -R`? But tool only allows LS with absolute path. Let's try to list root: \"/\".\n\nBut output may be huge and possibly trunca... [truncated]"
          }
        }
      ],
      "usage": {
        "prompt_tokens": 20033,
        "completion_tokens": 256,
        "total_tokens": 20289
      },
      "stats": {},
      "system_fingerprint": "gpt-oss-20b-mlx"
    },
    "expectedFormat": "openai",
    "errorMessage": "All parsing strategies failed",
    "responseAnalysis": {
      "hasToolCalls": false,
      "hasContent": true,
      "contentLength": 1131,
      "contentPreview": "We need to list current directory contents. We must use the LS tool with absolute path or \".\"? According to LS spec: \"path\" is an absolute path. It cannot use relative unless current working dir? The ",
      "finishReason": "stop",
      "toolCallPatterns": []
    },
    "debugInfo": {
      "requestTools": [
        {
          "name": "Task",
          "description": "Launch a new agent to handle complex, multi-step tasks autonomously.\n\nAvailable agent types and the tools they have access to:\n- general-purpose: General-purpose agent for researching complex questions, searching for code, and executing multi-step tasks. When you are searching for a keyword or file and are not confident that you will find the right match in the first few tries use this agent to perform the search for you. (Tools: *)\n- code-refactorer: Use this agent when you need to improve existing code structure, readability, or maintainability without changing functionality. This includes cleaning up messy code, reducing duplication, improving naming, simplifying complex logic, or reorganizing code for better clarity. Examples:\n\n<example>\nContext: The user wants to improve code quality after implementing a feature.\nuser: \"I just finished implementing the user authentication system. Can you help clean it up?\"\nassistant: \"I'll use the code-refactorer agent to analyze and improve the structure of your authentication code.\"\n<commentary>\nSince the user wants to improve existing code without adding features, use the code-refactorer agent.\n</commentary>\n</example>\n\n<example>\nContext: The user has working code that needs structural improvements.\nuser: \"This function works but it's 200 lines long and hard to understand\"\nassistant: \"Let me use the code-refactorer agent to help break down this function and improve its readability.\"\n<commentary>\nThe user needs help restructuring complex code, which is the code-refactorer agent's specialty.\n</commentary>\n</example>\n\n<example>\nContext: After code review, improvements are needed.\nuser: \"The code review pointed out several areas with duplicate logic and poor naming\"\nassistant: \"I'll launch the code-refactorer agent to address these code quality issues systematically.\"\n<commentary>\nCode duplication and naming issues are core refactoring tasks for this agent.\n</commentary>\n</example> (Tools: Edit, MultiEdit, Write, NotebookEdit, Grep, LS, Read)\n- project-task-planner: Use this agent when you need to create a comprehensive development task list from a Product Requirements Document (PRD). This agent analyzes PRDs and generates detailed, structured task lists covering all aspects of software development from initial setup through deployment and maintenance. Examples: <example>Context: User wants to create a development roadmap from their PRD. user: \"I have a PRD for a new e-commerce platform. Can you create a task list?\" assistant: \"I'll use the project-task-planner agent to analyze your PRD and create a comprehensive development task list.\" <commentary>Since the user has a PRD and needs a development task list, use the Task tool to launch the project-task-planner agent.</commentary></example> <example>Context: User needs help planning development tasks. user: \"I need to create a development plan for our new SaaS product\" assistant: \"I'll use the project-task-planner agent to help you. First, I'll need to see your Product Requirements Document (PRD).\" <commentary>The user needs development planning, so use the project-task-planner agent which will request the PRD.</commentary></example> (Tools: Task, Bash, Edit, MultiEdit, Write, NotebookEdit, Grep, LS, Read, ExitPlanMode, TodoWrite, WebSearch)\n- vibe-coding-coach: Use this agent when users want to build applications through conversation, focusing on the vision and feel of their app rather than technical implementation details. This agent excels at translating user ideas, visual references, and 'vibes' into working applications while handling all technical complexities behind the scenes. <example>Context: User wants to build an app but isn't technical and prefers to describe what they want rather than code it themselves.\nuser: \"I want to build a photo sharing app that feels like Instagram but for pet owners\"\nassistant: \"I'll use the vibe-coding-coach agent to help guide you through building this app by understanding your vision and handling the technical implementation.\"\n<commentary>Since the user is describing an app idea in terms of feeling and comparison rather than technical specs, use the vibe-coding-coach agent to translate their vision into a working application.</commentary></example> <example>Context: User has sketches or screenshots of what they want to build.\nuser: \"Here's a screenshot of an app I like. Can we build something similar but for tracking workouts?\"\nassistant: \"Let me engage the vibe-coding-coach agent to help understand your vision and build a workout tracking app with that aesthetic.\"\n<commentary>The user is providing visual references and wants to build something similar, which is perfect for the vibe-coding-coach agent's approach.</commentary></example> (Tools: *)\n- debug-system-architect: Use this agent when you need to establish a comprehensive debug logging system for a project. This includes setting up log directories, implementing node-level tracing, creating time-based test records, establishing replay mechanisms, and documenting debug rules. Example: <example> Context: User is setting up a new project and wants to implement proper debugging infrastructure from the start. user: \"Please help me set up a debug system for my new API router project\" <commentary> Since the user is requesting debug system setup, use the debug-system-architect agent to analyze the project and implement comprehensive logging and tracing mechanisms. </commentary> </example> <example> Context: User encounters intermittent issues in their routing system and needs better visibility. user: \"I'm having trouble tracking down why some requests fail intermittently\" <commentary> Since the user needs better debugging visibility for intermittent issues, use the debug-system-architect agent to implement node-level tracing and replay mechanisms. </commentary> </example> (Tools: *)\n- code-risk-auditor: Use this agent when you need to perform comprehensive code risk assessment and identify potential architectural issues in your codebase. Examples: <example>Context: The user has just completed a major refactoring and wants to ensure no hardcoded values or fallback mechanisms were introduced. user: \"I just finished refactoring the routing system, can you check for any code risks?\" assistant: \"I'll use the code-risk-auditor agent to perform a comprehensive risk assessment of your routing system changes.\"</example> <example>Context: Before a major release, the user wants to clean up technical debt and ensure code quality. user: \"We're preparing for v2.0 release, I need a full code audit\" assistant: \"Let me launch the code-risk-auditor agent to identify hardcoding, fallback risks, outdated tests, and duplicate implementations across the entire codebase.\"</example> <example>Context: The user notices inconsistent behavior and suspects duplicate implementations. user: \"The same feature seems to be implemented in multiple places, causing bugs\" assistant: \"I'll use the code-risk-auditor agent to scan for duplicate implementations and provide a consolidation plan.\"</example> (Tools: *)\n- security-auditor: Use this agent when you need to perform a comprehensive security audit of a codebase, identify vulnerabilities, and generate a detailed security report with actionable remediation steps. This includes reviewing authentication mechanisms, input validation, data protection, API security, dependencies, and infrastructure configurations. Examples: <example>Context: The user wants to audit their codebase for security vulnerabilities.\nuser: \"Can you perform a security audit of my application?\"\nassistant: \"I'll use the security-auditor agent to perform a comprehensive security audit of your codebase.\"\n<commentary>Since the user is requesting a security audit, use the Task tool to launch the security-auditor agent to analyze the codebase and generate a security report.</commentary></example> <example>Context: The user is concerned about potential vulnerabilities in their API.\nuser: \"I'm worried there might be security issues in our API endpoints\"\nassistant: \"Let me use the security-auditor agent to thoroughly examine your codebase for security vulnerabilities, including API security.\"\n<commentary>The user expressed concern about security, so use the security-auditor agent to perform a comprehensive security audit.</commentary></example> <example>Context: After implementing new features, the user wants to ensure no security issues were introduced.\nuser: \"We just added user authentication to our app. Can you check if it's secure?\"\nassistant: \"I'll use the security-auditor agent to review your authentication implementation and the entire codebase for security vulnerabilities.\"\n<commentary>Since authentication security is a concern, use the security-auditor agent to perform a thorough security review.</commentary></example> (Tools: Task, Bash, Edit, MultiEdit, Write, NotebookEdit)\n- project-memory-manager: Use this agent when you need to manage project-specific memory entries, create project documentation, or organize project knowledge. This includes creating project summaries, documenting project decisions, tracking project progress, and maintaining project-specific knowledge bases. <example>Context: User wants to document a project decision or create project documentation. user: \"请为我们的新项目创建一个内存管理系统的文档\" assistant: \"我将使用 project-memory-manager agent 来创建这个项目文档\" <commentary>Since the user needs project documentation, use the project-memory-manager agent to create project-specific memory entries.</commentary></example> <example>Context: User wants to track project progress or decisions. user: \"我们需要记录这个项目的关键决策点\" assistant: \"让我使用 project-memory-manager agent 来记录这些项目决策\" <commentary>Since this is project tracking, use the project-memory-manager agent to create decision-type memory entries.</commentary></example> (Tools: *)\n- rules-architect: Use this agent when you need to analyze project architecture and establish comprehensive rule management systems. Examples: <example>Context: User wants to organize project rules and create a structured rule management system. user: \"I need to reorganize our project rules and create a better structure for managing coding standards, file organization, and testing protocols\" assistant: \"I'll use the rules-architect agent to analyze the current project structure and establish a comprehensive rule management system with proper categorization and organization.\"</example> <example>Context: Project has grown complex and needs better rule organization. user: \"Our CLAUDE.md file is getting too large and we need to break down rules into manageable categories\" assistant: \"Let me call the rules-architect agent to create a structured .claude/rules system that will organize all project rules into logical categories.\"</example> (Tools: *)\n- frontend-designer: Use this agent when you need to convert design mockups, wireframes, or visual concepts into detailed technical specifications and implementation guides for frontend development. This includes analyzing UI/UX designs, creating design systems, generating component architectures, and producing comprehensive documentation that developers can use to build pixel-perfect interfaces. Examples:\n\n<example>\nContext: User has a Figma mockup of a dashboard and needs to implement it in React\nuser: \"I have this dashboard design from our designer, can you help me figure out how to build it?\"\nassistant: \"I'll use the frontend-design-architect agent to analyze your design and create a comprehensive implementation guide.\"\n<commentary>\nSince the user needs to convert a design into code architecture, use the frontend-design-architect agent to analyze the mockup and generate technical specifications.\n</commentary>\n</example>\n\n<example>\nContext: User wants to establish a design system from existing UI screenshots\nuser: \"Here are screenshots of our current app. We need to extract a consistent design system from these.\"\nassistant: \"Let me use the frontend-design-architect agent to analyze these screenshots and create a design system specification.\"\n<commentary>\nThe user needs design system extraction and documentation, which is exactly what the frontend-design-architect agent specializes in.\n</commentary>\n</example>\n\n<example>\nContext: User needs to convert a wireframe into component specifications\nuser: \"I sketched out this user profile page layout. How should I structure the components?\"\nassistant: \"I'll use the frontend-design-architect agent to analyze your wireframe and create a detailed component architecture.\"\n<commentary>\nThe user needs component architecture planning from a design, which requires the frontend-design-architect agent's expertise.\n</commentary>\n</example> (Tools: *)\n- content-writer: Use this agent when you need to create compelling, informative content that explains complex topics in simple terms. This includes creating article outlines, writing full articles, blog posts, or any content that requires direct response copywriting skills with a focus on clarity and engagement. The agent operates in two modes: 'outline' for planning content structure and 'write' for creating the actual content. Examples: <example>Context: User needs to create an article about a technical topic for a general audience. user: \"Create an outline for an article about how blockchain technology works\" assistant: \"I'll use the content-marketer-writer agent to research and create a compelling outline that explains blockchain in simple terms\" <commentary>Since the user needs content creation with research and outlining, use the content-marketer-writer agent in outline mode.</commentary></example> <example>Context: User has an outline and needs to write the full article. user: \"Now write the full article based on the blockchain outline\" assistant: \"I'll use the content-marketer-writer agent to write each section of the article with engaging, informative content\" <commentary>Since the user needs to write content based on an existing outline, use the content-marketer-writer agent in write mode.</commentary></example> (Tools: *)\n- test-runner: Use this agent to run and manage tests according to the global and project-specific testing rules. This includes executing test scripts, documenting test results, and helping to diagnose issues following the standard pipeline. <example>Context: User wants to run all functional tests. user: \"运行所有功能测试\" assistant: \"我将使用 test-runner agent 来执行所有功能测试\" <commentary>Since the user wants to run tests by category, use the test-runner agent.</commentary></example> <example>Context: User wants to verify a bug fix. user: \"我修复了一个bug，帮我验证一下\" assistant: \"让我使用 test-runner agent 来执行对应的修复验证测试\" <commentary>The user needs to verify a fix, which is a core task for the test-runner agent.</commentary></example> (Tools: *)\n- in-depth-research-analyst: Use this agent when you need to conduct comprehensive research reports with in-depth web mining, data analysis, and visualization. This includes industry analysis, market research, competitive intelligence, and trend forecasting with accurate data from authoritative sources. <example>Context: User wants a comprehensive industry analysis report. user: \"请对人工智能芯片市场进行深入调研，包括主要厂商、市场份额和增长趋势\" assistant: \"我将使用 in-depth-research-analyst agent 来进行这项深入的市场调研并生成可视化报告\" <commentary>Since the user needs a comprehensive industry analysis with data visualization, use the in-depth-research-analyst agent to conduct thorough research and create an integrated report.</commentary></example> <example>Context: User wants market research with accurate data and visualizations. user: \"我们需要一份关于电动汽车充电基础设施的深度报告，包含数据图表\" assistant: \"让我使用 in-depth-research-analyst agent 来收集准确数据并生成图文并茂的分析报告\" <commentary>Since this requires market research with data accuracy and visualizations, use the in-depth-research-analyst agent to create a comprehensive report.</commentary></example> (Tools: *)\n- prd-writer: Use this agent when you need to create a comprehensive Product Requirements Document (PRD) for a software project or feature. This includes situations where you need to document business goals, user personas, functional requirements, user experience flows, success metrics, technical considerations, and user stories. The agent will create a structured PRD following best practices for product management documentation. Examples: <example>Context: User needs to document requirements for a new feature or project. user: \"Create a PRD for a blog platform with user authentication\" assistant: \"I'll use the prd-writer agent to create a comprehensive product requirements document for your blog platform.\" <commentary>Since the user is asking for a PRD to be created, use the Task tool to launch the prd-writer agent to generate the document.</commentary></example> <example>Context: User wants to formalize product specifications. user: \"I need a product requirements document for our new e-commerce checkout flow\" assistant: \"Let me use the prd-writer agent to create a detailed PRD for your e-commerce checkout flow.\" <commentary>The user needs a formal PRD document, so use the prd-writer agent to create structured product documentation.</commentary></example> (Tools: Task, Bash, Grep, LS, Read, Write, WebSearch, Glob)\n- pipeline-debug-universal: Use this agent when you need to implement comprehensive debug hooks and testing infrastructure for ANY pipeline system - whether it's API routing, data processing, CI/CD workflows, or transformation pipelines. This agent specializes in creating universal debug architectures that work across different pipeline types with data capture, replay capabilities, and systematic testing matrices. Examples: <example>Context: User is working on a multi-provider API routing system and needs to add debug capabilities to track data flow through each pipeline step. user: \"I need to add debug hooks to our routing pipeline so we can capture and replay data at each step\" assistant: \"I'll use the pipeline-debug-universal agent to design a comprehensive debug infrastructure with data capture and replay capabilities\" <commentary>Since the user needs pipeline debugging infrastructure, use the pipeline-debug-universal agent to create debug hooks and testing matrices.</commentary></example> <example>Context: User has a complex data transformation pipeline and wants to build systematic testing for each stage and provider. user: \"Our data processing pipeline has issues and we need better testing infrastructure to isolate problems at each step\" assistant: \"Let me use the pipeline-debug-universal agent to create a complete testing matrix and debug system\" <commentary>Since the user needs systematic pipeline testing infrastructure, use the pipeline-debug-universal agent to architect the testing system.</commentary></example> <example>Context: User is building a CI/CD pipeline and needs to implement debug capabilities for tracking deployment issues. user: \"Our deployment pipeline fails randomly and we can't reproduce the issues consistently\" assistant: \"I'll deploy the pipeline-debug-universal agent to create comprehensive debug hooks and replay capabilities for your CI/CD pipeline\" <commentary>Since the user needs debug infrastructure for a deployment pipeline, use the pipeline-debug-universal agent to design the debug system.</commentary></example> (Tools: *)\n\nWhen using the Task tool, you must specify a subagent_type parameter to select which agent type to use.\n\n\n\nWhen NOT to use the Agent tool:\n- If you want to read a specific file path, use the Read or Glob tool instead of the Agent tool, to find the match more quickly\n- If you are searching for a specific class definition like \"class Foo\", use the Glob tool instead, to find the match more quickly\n- If you are searching for code within a specific file or set of 2-3 files, use the Read tool instead of the Agent tool, to find the match more quickly\n- Other tasks that are not related to the agent descriptions above\n\n\nUsage notes:\n1. Launch multiple agents concurrently whenever possible, to maximize performance; to do that, use a single message with multiple tool uses\n2. When the agent is done, it will return a single message back to you. The result returned by the agent is not visible to the user. To show the user the result, you should send a text message back to the user with a concise summary of the result.\n3. Each agent invocation is stateless. You will not be able to send additional messages to the agent, nor will the agent be able to communicate with you outside of its final report. Therefore, your prompt should contain a highly detailed task description for the agent to perform autonomously and you should specify exactly what information the agent should return back to you in its final and only message to you.\n4. The agent's outputs should generally be trusted\n5. Clearly tell the agent whether you expect it to write code or just to do research (search, file reads, web fetches, etc.), since it is not aware of the user's intent\n6. If the agent description mentions that it should be used proactively, then you should try your best to use it without the user having to ask for it first. Use your judgement.\n\nExample usage:\n\n<example_agent_descriptions>\n\"code-reviewer\": use this agent after you are done writing a signficant piece of code\n\"greeting-responder\": use this agent when to respond to user greetings with a friendly joke\n</example_agent_description>\n\n<example>\nuser: \"Please write a function that checks if a number is prime\"\nassistant: Sure let me write a function that checks if a number is prime\nassistant: First let me use the Write tool to write a function that checks if a number is prime\nassistant: I'm going to use the Write tool to write the following code:\n<code>\nfunction isPrime(n) {\n  if (n <= 1) return false\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n</code>\n<commentary>\nSince a signficant piece of code was written and the task was completed, now use the code-reviewer agent to review the code\n</commentary>\nassistant: Now let me use the code-reviewer agent to review the code\nassistant: Uses the Task tool to launch the with the code-reviewer agent\n</example>\n\n<example>\nuser: \"Hello\"\n<commentary>\nSince the user is greeting, use the greeting-responder agent to respond with a friendly joke\n</commentary>\nassistant: \"I'm going to use the Task tool to launch the with the greeting-responder agent\"\n</example>\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "description": {
                "type": "string",
                "description": "A short (3-5 word) description of the task"
              },
              "prompt": {
                "type": "string",
                "description": "The task for the agent to perform"
              },
              "subagent_type": {
                "type": "string",
                "description": "The type of specialized agent to use for this task"
              }
            },
            "required": [
              "description",
              "prompt",
              "subagent_type"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Bash",
          "description": "Executes a given bash command in a persistent shell session with optional timeout, ensuring proper handling and security measures.\n\nBefore executing the command, please follow these steps:\n\n1. Directory Verification:\n   - If the command will create new directories or files, first use the LS tool to verify the parent directory exists and is the correct location\n   - For example, before running \"mkdir foo/bar\", first use LS to check that \"foo\" exists and is the intended parent directory\n\n2. Command Execution:\n   - Always quote file paths that contain spaces with double quotes (e.g., cd \"path with spaces/file.txt\")\n   - Examples of proper quoting:\n     - cd \"/Users/name/My Documents\" (correct)\n     - cd /Users/name/My Documents (incorrect - will fail)\n     - python \"/path/with spaces/script.py\" (correct)\n     - python /path/with spaces/script.py (incorrect - will fail)\n   - After ensuring proper quoting, execute the command.\n   - Capture the output of the command.\n\nUsage notes:\n  - The command argument is required.\n  - You can specify an optional timeout in milliseconds (up to 600000ms / 10 minutes). If not specified, commands will timeout after 120000ms (2 minutes).\n  - It is very helpful if you write a clear, concise description of what this command does in 5-10 words.\n  - If the output exceeds 30000 characters, output will be truncated before being returned to you.\n  - VERY IMPORTANT: You MUST avoid using search commands like `find` and `grep`. Instead use Grep, Glob, or Task to search. You MUST avoid read tools like `cat`, `head`, `tail`, and `ls`, and use Read and LS to read files.\n - If you _still_ need to run `grep`, STOP. ALWAYS USE ripgrep at `rg` first, which all ${PRODUCT_NAME} users have pre-installed.\n  - When issuing multiple commands, use the ';' or '&&' operator to separate them. DO NOT use newlines (newlines are ok in quoted strings).\n  - Try to maintain your current working directory throughout the session by using absolute paths and avoiding usage of `cd`. You may use `cd` if the User explicitly requests it.\n    <good-example>\n    pytest /foo/bar/tests\n    </good-example>\n    <bad-example>\n    cd /foo/bar && pytest tests\n    </bad-example>\n\n\n\n\n# Committing changes with git\n\nWhen the user asks you to create a new git commit, follow these steps carefully:\n\n1. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following bash commands in parallel, each using the Bash tool:\n  - Run a git status command to see all untracked files.\n  - Run a git diff command to see both staged and unstaged changes that will be committed.\n  - Run a git log command to see recent commit messages, so that you can follow this repository's commit message style.\n2. Analyze all staged changes (both previously staged and newly added) and draft a commit message:\n  - Summarize the nature of the changes (eg. new feature, enhancement to an existing feature, bug fix, refactoring, test, docs, etc.). Ensure the message accurately reflects the changes and their purpose (i.e. \"add\" means a wholly new feature, \"update\" means an enhancement to an existing feature, \"fix\" means a bug fix, etc.).\n  - Check for any sensitive information that shouldn't be committed\n  - Draft a concise (1-2 sentences) commit message that focuses on the \"why\" rather than the \"what\"\n  - Ensure it accurately reflects the changes and their purpose\n3. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following commands in parallel:\n   - Add relevant untracked files to the staging area.\n   - Create the commit with a message ending with:\n   🤖 Generated with [Claude Code](https://claude.ai/code)\n\n   Co-Authored-By: Claude <noreply@anthropic.com>\n   - Run git status to make sure the commit succeeded.\n4. If the commit fails due to pre-commit hook changes, retry the commit ONCE to include these automated changes. If it fails again, it usually means a pre-commit hook is preventing the commit. If the commit succeeds but you notice that files were modified by the pre-commit hook, you MUST amend your commit to include them.\n\nImportant notes:\n- NEVER update the git config\n- NEVER run additional commands to read or explore code, besides git bash commands\n- NEVER use the TodoWrite or Task tools\n- DO NOT push to the remote repository unless the user explicitly asks you to do so\n- IMPORTANT: Never use git commands with the -i flag (like git rebase -i or git add -i) since they require interactive input which is not supported.\n- If there are no changes to commit (i.e., no untracked files and no modifications), do not create an empty commit\n- In order to ensure good formatting, ALWAYS pass the commit message via a HEREDOC, a la this example:\n<example>\ngit commit -m \"$(cat <<'EOF'\n   Commit message here.\n\n   🤖 Generated with [Claude Code](https://claude.ai/code)\n\n   Co-Authored-By: Claude <noreply@anthropic.com>\n   EOF\n   )\"\n</example>\n\n# Creating pull requests\nUse the gh command via the Bash tool for ALL GitHub-related tasks including working with issues, pull requests, checks, and releases. If given a Github URL use the gh command to get the information needed.\n\nIMPORTANT: When the user asks you to create a pull request, follow these steps carefully:\n\n1. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following bash commands in parallel using the Bash tool, in order to understand the current state of the branch since it diverged from the main branch:\n   - Run a git status command to see all untracked files\n   - Run a git diff command to see both staged and unstaged changes that will be committed\n   - Check if the current branch tracks a remote branch and is up to date with the remote, so you know if you need to push to the remote\n   - Run a git log command and `git diff [base-branch]...HEAD` to understand the full commit history for the current branch (from the time it diverged from the base branch)\n2. Analyze all changes that will be included in the pull request, making sure to look at all relevant commits (NOT just the latest commit, but ALL commits that will be included in the pull request!!!), and draft a pull request summary\n3. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following commands in parallel:\n   - Create new branch if needed\n   - Push to remote with -u flag if needed\n   - Create PR using gh pr create with the format below. Use a HEREDOC to pass the body to ensure correct formatting.\n<example>\ngh pr create --title \"the pr title\" --body \"$(cat <<'EOF'\n## Summary\n<1-3 bullet points>\n\n## Test plan\n[Checklist of TODOs for testing the pull request...]\n\n🤖 Generated with [Claude Code](https://claude.ai/code)\nEOF\n)\"\n</example>\n\nImportant:\n- NEVER update the git config\n- DO NOT use the TodoWrite or Task tools\n- Return the PR URL when you're done, so the user can see it\n\n# Other common operations\n- View comments on a Github PR: gh api repos/foo/bar/pulls/123/comments",
          "input_schema": {
            "type": "object",
            "properties": {
              "command": {
                "type": "string",
                "description": "The command to execute"
              },
              "timeout": {
                "type": "number",
                "description": "Optional timeout in milliseconds (max 600000)"
              },
              "description": {
                "type": "string",
                "description": " Clear, concise description of what this command does in 5-10 words. Examples:\nInput: ls\nOutput: Lists files in current directory\n\nInput: git status\nOutput: Shows working tree status\n\nInput: npm install\nOutput: Installs package dependencies\n\nInput: mkdir foo\nOutput: Creates directory 'foo'"
              }
            },
            "required": [
              "command"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Glob",
          "description": "- Fast file pattern matching tool that works with any codebase size\n- Supports glob patterns like \"**/*.js\" or \"src/**/*.ts\"\n- Returns matching file paths sorted by modification time\n- Use this tool when you need to find files by name patterns\n- When you are doing an open ended search that may require multiple rounds of globbing and grepping, use the Agent tool instead\n- You have the capability to call multiple tools in a single response. It is always better to speculatively perform multiple searches as a batch that are potentially useful.",
          "input_schema": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "The glob pattern to match files against"
              },
              "path": {
                "type": "string",
                "description": "The directory to search in. If not specified, the current working directory will be used. IMPORTANT: Omit this field to use the default directory. DO NOT enter \"undefined\" or \"null\" - simply omit it for the default behavior. Must be a valid directory path if provided."
              }
            },
            "required": [
              "pattern"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Grep",
          "description": "A powerful search tool built on ripgrep\n\n  Usage:\n  - ALWAYS use Grep for search tasks. NEVER invoke `grep` or `rg` as a Bash command. The Grep tool has been optimized for correct permissions and access.\n  - Supports full regex syntax (e.g., \"log.*Error\", \"function\\s+\\w+\")\n  - Filter files with glob parameter (e.g., \"*.js\", \"**/*.tsx\") or type parameter (e.g., \"js\", \"py\", \"rust\")\n  - Output modes: \"content\" shows matching lines, \"files_with_matches\" shows only file paths (default), \"count\" shows match counts\n  - Use Task tool for open-ended searches requiring multiple rounds\n  - Pattern syntax: Uses ripgrep (not grep) - literal braces need escaping (use `interface\\{\\}` to find `interface{}` in Go code)\n  - Multiline matching: By default patterns match within single lines only. For cross-line patterns like `struct \\{[\\s\\S]*?field`, use `multiline: true`\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "The regular expression pattern to search for in file contents"
              },
              "path": {
                "type": "string",
                "description": "File or directory to search in (rg PATH). Defaults to current working directory."
              },
              "glob": {
                "type": "string",
                "description": "Glob pattern to filter files (e.g. \"*.js\", \"*.{ts,tsx}\") - maps to rg --glob"
              },
              "output_mode": {
                "type": "string",
                "enum": [
                  "content",
                  "files_with_matches",
                  "count"
                ],
                "description": "Output mode: \"content\" shows matching lines (supports -A/-B/-C context, -n line numbers, head_limit), \"files_with_matches\" shows file paths (supports head_limit), \"count\" shows match counts (supports head_limit). Defaults to \"files_with_matches\"."
              },
              "-B": {
                "type": "number",
                "description": "Number of lines to show before each match (rg -B). Requires output_mode: \"content\", ignored otherwise."
              },
              "-A": {
                "type": "number",
                "description": "Number of lines to show after each match (rg -A). Requires output_mode: \"content\", ignored otherwise."
              },
              "-C": {
                "type": "number",
                "description": "Number of lines to show before and after each match (rg -C). Requires output_mode: \"content\", ignored otherwise."
              },
              "-n": {
                "type": "boolean",
                "description": "Show line numbers in output (rg -n). Requires output_mode: \"content\", ignored otherwise."
              },
              "-i": {
                "type": "boolean",
                "description": "Case insensitive search (rg -i)"
              },
              "type": {
                "type": "string",
                "description": "File type to search (rg --type). Common types: js, py, rust, go, java, etc. More efficient than include for standard file types."
              },
              "head_limit": {
                "type": "number",
                "description": "Limit output to first N lines/entries, equivalent to \"| head -N\". Works across all output modes: content (limits output lines), files_with_matches (limits file paths), count (limits count entries). When unspecified, shows all results from ripgrep."
              },
              "multiline": {
                "type": "boolean",
                "description": "Enable multiline mode where . matches newlines and patterns can span lines (rg -U --multiline-dotall). Default: false."
              }
            },
            "required": [
              "pattern"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "LS",
          "description": "Lists files and directories in a given path. The path parameter must be an absolute path, not a relative path. You can optionally provide an array of glob patterns to ignore with the ignore parameter. You should generally prefer the Glob and Grep tools, if you know which directories to search.",
          "input_schema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "The absolute path to the directory to list (must be absolute, not relative)"
              },
              "ignore": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of glob patterns to ignore"
              }
            },
            "required": [
              "path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "ExitPlanMode",
          "description": "Use this tool when you are in plan mode and have finished presenting your plan and are ready to code. This will prompt the user to exit plan mode.\nIMPORTANT: Only use this tool when the task requires planning the implementation steps of a task that requires writing code. For research tasks where you're gathering information, searching files, reading files or in general trying to understand the codebase - do NOT use this tool.\n\nEg.\n1. Initial task: \"Search for and understand the implementation of vim mode in the codebase\" - Do not use the exit plan mode tool because you are not planning the implementation steps of a task.\n2. Initial task: \"Help me implement yank mode for vim\" - Use the exit plan mode tool after you have finished planning the implementation steps of the task.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "plan": {
                "type": "string",
                "description": "The plan you came up with, that you want to run by the user for approval. Supports markdown. The plan should be pretty concise."
              }
            },
            "required": [
              "plan"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Read",
          "description": "Reads a file from the local filesystem. You can access any file directly by using this tool.\nAssume this tool is able to read all files on the machine. If the User provides a path to a file assume that path is valid. It is okay to read a file that does not exist; an error will be returned.\n\nUsage:\n- The file_path parameter must be an absolute path, not a relative path\n- By default, it reads up to 2000 lines starting from the beginning of the file\n- You can optionally specify a line offset and limit (especially handy for long files), but it's recommended to read the whole file by not providing these parameters\n- Any lines longer than 2000 characters will be truncated\n- Results are returned using cat -n format, with line numbers starting at 1\n- This tool allows Claude Code to read images (eg PNG, JPG, etc). When reading an image file the contents are presented visually as Claude Code is a multimodal LLM.\n- This tool can read PDF files (.pdf). PDFs are processed page by page, extracting both text and visual content for analysis.\n- For Jupyter notebooks (.ipynb files), use the NotebookRead instead\n- You have the capability to call multiple tools in a single response. It is always better to speculatively read multiple files as a batch that are potentially useful.\n- You will regularly be asked to read screenshots. If the user provides a path to a screenshot ALWAYS use this tool to view the file at the path. This tool will work with all temporary file paths like /var/folders/123/abc/T/TemporaryItems/NSIRD_screencaptureui_ZfB1tD/Screenshot.png\n- If you read a file that exists but has empty contents you will receive a system reminder warning in place of file contents.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to read"
              },
              "offset": {
                "type": "number",
                "description": "The line number to start reading from. Only provide if the file is too large to read at once"
              },
              "limit": {
                "type": "number",
                "description": "The number of lines to read. Only provide if the file is too large to read at once."
              }
            },
            "required": [
              "file_path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Edit",
          "description": "Performs exact string replacements in files.\n\nUsage:\n- You must use your `Read` tool at least once in the conversation before editing. This tool will error if you attempt an edit without reading the file.\n- When editing text from Read tool output, ensure you preserve the exact indentation (tabs/spaces) as it appears AFTER the line number prefix. The line number prefix format is: spaces + line number + tab. Everything after that tab is the actual file content to match. Never include any part of the line number prefix in the old_string or new_string.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- Only use emojis if the user explicitly requests it. Avoid adding emojis to files unless asked.\n- The edit will FAIL if `old_string` is not unique in the file. Either provide a larger string with more surrounding context to make it unique or use `replace_all` to change every instance of `old_string`.\n- Use `replace_all` for replacing and renaming strings across the file. This parameter is useful if you want to rename a variable for instance.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to modify"
              },
              "old_string": {
                "type": "string",
                "description": "The text to replace"
              },
              "new_string": {
                "type": "string",
                "description": "The text to replace it with (must be different from old_string)"
              },
              "replace_all": {
                "type": "boolean",
                "default": false,
                "description": "Replace all occurences of old_string (default false)"
              }
            },
            "required": [
              "file_path",
              "old_string",
              "new_string"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "MultiEdit",
          "description": "This is a tool for making multiple edits to a single file in one operation. It is built on top of the Edit tool and allows you to perform multiple find-and-replace operations efficiently. Prefer this tool over the Edit tool when you need to make multiple edits to the same file.\n\nBefore using this tool:\n\n1. Use the Read tool to understand the file's contents and context\n2. Verify the directory path is correct\n\nTo make multiple file edits, provide the following:\n1. file_path: The absolute path to the file to modify (must be absolute, not relative)\n2. edits: An array of edit operations to perform, where each edit contains:\n   - old_string: The text to replace (must match the file contents exactly, including all whitespace and indentation)\n   - new_string: The edited text to replace the old_string\n   - replace_all: Replace all occurences of old_string. This parameter is optional and defaults to false.\n\nIMPORTANT:\n- All edits are applied in sequence, in the order they are provided\n- Each edit operates on the result of the previous edit\n- All edits must be valid for the operation to succeed - if any edit fails, none will be applied\n- This tool is ideal when you need to make several changes to different parts of the same file\n- For Jupyter notebooks (.ipynb files), use the NotebookEdit instead\n\nCRITICAL REQUIREMENTS:\n1. All edits follow the same requirements as the single Edit tool\n2. The edits are atomic - either all succeed or none are applied\n3. Plan your edits carefully to avoid conflicts between sequential operations\n\nWARNING:\n- The tool will fail if edits.old_string doesn't match the file contents exactly (including whitespace)\n- The tool will fail if edits.old_string and edits.new_string are the same\n- Since edits are applied in sequence, ensure that earlier edits don't affect the text that later edits are trying to find\n\nWhen making edits:\n- Ensure all edits result in idiomatic, correct code\n- Do not leave the code in a broken state\n- Always use absolute file paths (starting with /)\n- Only use emojis if the user explicitly requests it. Avoid adding emojis to files unless asked.\n- Use replace_all for replacing and renaming strings across the file. This parameter is useful if you want to rename a variable for instance.\n\nIf you want to create a new file, use:\n- A new file path, including dir name if needed\n- First edit: empty old_string and the new file's contents as new_string\n- Subsequent edits: normal edit operations on the created content",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to modify"
              },
              "edits": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "old_string": {
                      "type": "string",
                      "description": "The text to replace"
                    },
                    "new_string": {
                      "type": "string",
                      "description": "The text to replace it with"
                    },
                    "replace_all": {
                      "type": "boolean",
                      "default": false,
                      "description": "Replace all occurences of old_string (default false)."
                    }
                  },
                  "required": [
                    "old_string",
                    "new_string"
                  ],
                  "additionalProperties": false
                },
                "minItems": 1,
                "description": "Array of edit operations to perform sequentially on the file"
              }
            },
            "required": [
              "file_path",
              "edits"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Write",
          "description": "Writes a file to the local filesystem.\n\nUsage:\n- This tool will overwrite the existing file if there is one at the provided path.\n- If this is an existing file, you MUST use the Read tool first to read the file's contents. This tool will fail if you did not read the file first.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- NEVER proactively create documentation files (*.md) or README files. Only create documentation files if explicitly requested by the User.\n- Only use emojis if the user explicitly requests it. Avoid writing emojis to files unless asked.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to write (must be absolute, not relative)"
              },
              "content": {
                "type": "string",
                "description": "The content to write to the file"
              }
            },
            "required": [
              "file_path",
              "content"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "NotebookRead",
          "description": "Reads a Jupyter notebook (.ipynb file) and returns all of the cells with their outputs. Jupyter notebooks are interactive documents that combine code, text, and visualizations, commonly used for data analysis and scientific computing. The notebook_path parameter must be an absolute path, not a relative path.",
          "input_schema": {
            "type": "object",
            "properties": {
              "notebook_path": {
                "type": "string",
                "description": "The absolute path to the Jupyter notebook file to read (must be absolute, not relative)"
              },
              "cell_id": {
                "type": "string",
                "description": "The ID of a specific cell to read. If not provided, all cells will be read."
              }
            },
            "required": [
              "notebook_path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "NotebookEdit",
          "description": "Completely replaces the contents of a specific cell in a Jupyter notebook (.ipynb file) with new source. Jupyter notebooks are interactive documents that combine code, text, and visualizations, commonly used for data analysis and scientific computing. The notebook_path parameter must be an absolute path, not a relative path. The cell_number is 0-indexed. Use edit_mode=insert to add a new cell at the index specified by cell_number. Use edit_mode=delete to delete the cell at the index specified by cell_number.",
          "input_schema": {
            "type": "object",
            "properties": {
              "notebook_path": {
                "type": "string",
                "description": "The absolute path to the Jupyter notebook file to edit (must be absolute, not relative)"
              },
              "cell_id": {
                "type": "string",
                "description": "The ID of the cell to edit. When inserting a new cell, the new cell will be inserted after the cell with this ID, or at the beginning if not specified."
              },
              "new_source": {
                "type": "string",
                "description": "The new source for the cell"
              },
              "cell_type": {
                "type": "string",
                "enum": [
                  "code",
                  "markdown"
                ],
                "description": "The type of the cell (code or markdown). If not specified, it defaults to the current cell type. If using edit_mode=insert, this is required."
              },
              "edit_mode": {
                "type": "string",
                "enum": [
                  "replace",
                  "insert",
                  "delete"
                ],
                "description": "The type of edit to make (replace, insert, delete). Defaults to replace."
              }
            },
            "required": [
              "notebook_path",
              "new_source"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "WebFetch",
          "description": "\n- Fetches content from a specified URL and processes it using an AI model\n- Takes a URL and a prompt as input\n- Fetches the URL content, converts HTML to markdown\n- Processes the content with the prompt using a small, fast model\n- Returns the model's response about the content\n- Use this tool when you need to retrieve and analyze web content\n\nUsage notes:\n  - IMPORTANT: If an MCP-provided web fetch tool is available, prefer using that tool instead of this one, as it may have fewer restrictions. All MCP-provided tools start with \"mcp__\".\n  - The URL must be a fully-formed valid URL\n  - HTTP URLs will be automatically upgraded to HTTPS\n  - The prompt should describe what information you want to extract from the page\n  - This tool is read-only and does not modify any files\n  - Results may be summarized if the content is very large\n  - Includes a self-cleaning 15-minute cache for faster responses when repeatedly accessing the same URL\n  - When a URL redirects to a different host, the tool will inform you and provide the redirect URL in a special format. You should then make a new WebFetch request with the redirect URL to fetch the content.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "format": "uri",
                "description": "The URL to fetch content from"
              },
              "prompt": {
                "type": "string",
                "description": "The prompt to run on the fetched content"
              }
            },
            "required": [
              "url",
              "prompt"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "TodoWrite",
          "description": "Use this tool to create and manage a structured task list for your current coding session. This helps you track progress, organize complex tasks, and demonstrate thoroughness to the user.\nIt also helps the user understand the progress of the task and overall progress of their requests.\n\n## When to Use This Tool\nUse this tool proactively in these scenarios:\n\n1. Complex multi-step tasks - When a task requires 3 or more distinct steps or actions\n2. Non-trivial and complex tasks - Tasks that require careful planning or multiple operations\n3. User explicitly requests todo list - When the user directly asks you to use the todo list\n4. User provides multiple tasks - When users provide a list of things to be done (numbered or comma-separated)\n5. After receiving new instructions - Immediately capture user requirements as todos\n6. When you start working on a task - Mark it as in_progress BEFORE beginning work. Ideally you should only have one todo as in_progress at a time\n7. After completing a task - Mark it as completed and add any new follow-up tasks discovered during implementation\n\n## When NOT to Use This Tool\n\nSkip using this tool when:\n1. There is only a single, straightforward task\n2. The task is trivial and tracking it provides no organizational benefit\n3. The task can be completed in less than 3 trivial steps\n4. The task is purely conversational or informational\n\nNOTE that you should not use this tool if there is only one trivial task to do. In this case you are better off just doing the task directly.\n\n## Examples of When to Use the Todo List\n\n<example>\nUser: I want to add a dark mode toggle to the application settings. Make sure you run the tests and build when you're done!\nAssistant: I'll help add a dark mode toggle to your application settings. Let me create a todo list to track this implementation.\n*Creates todo list with the following items:*\n1. Create dark mode toggle component in Settings page\n2. Add dark mode state management (context/store)\n3. Implement CSS-in-JS styles for dark theme\n4. Update existing components to support theme switching\n5. Run tests and build process, addressing any failures or errors that occur\n*Begins working on the first task*\n\n<reasoning>\nThe assistant used the todo list because:\n1. Adding dark mode is a multi-step feature requiring UI, state management, and styling changes\n2. The user explicitly requested tests and build be run afterward\n3. The assistant inferred that tests and build need to pass by adding \"Ensure tests and build succeed\" as the final task\n</reasoning>\n</example>\n\n<example>\nUser: Help me rename the function getCwd to getCurrentWorkingDirectory across my project\nAssistant: Let me first search through your codebase to find all occurrences of 'getCwd'.\n*Uses grep or search tools to locate all instances of getCwd in the codebase*\nAssistant: I've found 15 instances of 'getCwd' across 8 different files. Let me create a todo list to track these changes.\n*Creates todo list with specific items for each file that needs updating*\n\n<reasoning>\nThe assistant used the todo list because:\n1. First, the assistant searched to understand the scope of the task\n2. Upon finding multiple occurrences across different files, it determined this was a complex task with multiple steps\n3. The todo list helps ensure every instance is tracked and updated systematically\n4. This approach prevents missing any occurrences and maintains code consistency\n</reasoning>\n</example>\n\n\n<example>\nUser: I need to implement these features for my e-commerce site: user registration, product catalog, shopping cart, and checkout flow.\nAssistant: I'll help implement these features. First, let's add all the features to the todo list.\n*Creates a todo list breaking down each feature into specific tasks based on the project architecture*\nAssistant: Let's start with user registration. This will involve creating database models, API endpoints, and frontend forms that integrate with your existing authentication system.\n\n<reasoning>\nThe assistant used the todo list because:\n1. The user provided multiple complex features to implement in a comma separated list\n2. The todo list helps organize these large features into manageable tasks\n3. This approach allows for tracking progress across the entire implementation\n</reasoning>\n</example>\n\n<example>\nUser: Can you help optimize my React application? It's rendering slowly and has performance issues.</user>\nAssistant: I'll help optimize your React application. First, let me examine your codebase to identify potential performance bottlenecks.\n*Reviews component structure, render patterns, state management, and data fetching*\nAssistant: After analyzing your codebase, I've identified several performance issues. Let me create a todo list to track our optimization efforts.\n*Creates todo list with items like: 1) Implement memoization for expensive calculations in ProductList, 2) Add virtualization for long lists in Dashboard, 3) Optimize image loading in Gallery component, 4) Fix state update loops in ShoppingCart, 5) Review bundle size and implement code splitting*\nLet's start by implementing memoization for the expensive calculations in your ProductList component.</assistant>\n\n<reasoning>\nThe assistant used the todo list because:\n1. First, the assistant examined the codebase to identify specific performance issues\n2. Based on this analysis, it identified multiple optimization opportunities\n3. Performance optimization is a non-trivial task requiring multiple steps\n4. The todo list helps methodically track improvements across different components\n5. This systematic approach ensures all performance bottlenecks are addressed\n</reasoning>\n</example>\n\n## Examples of When NOT to Use the Todo List\n\n<example>\nUser: How do I print 'Hello World' in Python?\nAssistant: In Python, you can print \"Hello World\" with this simple code:\n\npython\nprint(\"Hello World\")\n\nThis will output the text \"Hello World\" to the console when executed.</assistant>\n\n<reasoning>\nThe assistant did not use the todo list because this is a single, trivial task that can be completed in one step. There's no need to track multiple tasks or steps for such a straightforward request.\n</reasoning>\n</example>\n\n<example>\nUser: What does the git status command do?\nAssistant: The git status command shows the current state of your working directory and staging area. It displays which changes have been staged, which haven't, and which files aren't being tracked by Git. This is a fundamental command for understanding the current state of your repository before making commits.\n\n<reasoning>\nThe assistant did not use the todo list because this is an informational request with no actual coding task to complete. The user is simply asking for an explanation, not for the assistant to perform multiple steps or tasks.\n</reasoning>\n</example>\n\n<example>\nUser: Can you add a comment to the calculateTotal function to explain what it does?\nAssistant: Sure, let me add a comment to the calculateTotal function to explain what it does.\n* Uses the Edit tool to add a comment to the calculateTotal function *\n\n<reasoning>\nThe assistant did not use the todo list because this is a single, straightforward task confined to one location in the code. Adding a comment doesn't require tracking multiple steps or systematic organization.\n</reasoning>\n</example>\n\n<example>\nUser: Run npm install for me and tell me what happens.\nAssistant: I'll run the npm install command for you.\n\n*Executes: npm install*\n\nThe command completed successfully. Here's the output:\n[Output of npm install command]\n\nAll dependencies have been installed according to your package.json file.\n\n<reasoning>\nThe assistant did not use the todo list because this is a single command execution with immediate results. There are no multiple steps to track or organize, making the todo list unnecessary for this straightforward task.\n</reasoning>\n</example>\n\n## Task States and Management\n\n1. **Task States**: Use these states to track progress:\n   - pending: Task not yet started\n   - in_progress: Currently working on (limit to ONE task at a time)\n   - completed: Task finished successfully\n\n2. **Task Management**:\n   - Update task status in real-time as you work\n   - Mark tasks complete IMMEDIATELY after finishing (don't batch completions)\n   - Only have ONE task in_progress at any time\n   - Complete current tasks before starting new ones\n   - Remove tasks that are no longer relevant from the list entirely\n\n3. **Task Completion Requirements**:\n   - ONLY mark a task as completed when you have FULLY accomplished it\n   - If you encounter errors, blockers, or cannot finish, keep the task as in_progress\n   - When blocked, create a new task describing what needs to be resolved\n   - Never mark a task as completed if:\n     - Tests are failing\n     - Implementation is partial\n     - You encountered unresolved errors\n     - You couldn't find necessary files or dependencies\n\n4. **Task Breakdown**:\n   - Create specific, actionable items\n   - Break complex tasks into smaller, manageable steps\n   - Use clear, descriptive task names\n\nWhen in doubt, use this tool. Being proactive with task management demonstrates attentiveness and ensures you complete all requirements successfully.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "todos": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "content": {
                      "type": "string",
                      "minLength": 1
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "pending",
                        "in_progress",
                        "completed"
                      ]
                    },
                    "priority": {
                      "type": "string",
                      "enum": [
                        "high",
                        "medium",
                        "low"
                      ]
                    },
                    "id": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "content",
                    "status",
                    "priority",
                    "id"
                  ],
                  "additionalProperties": false
                },
                "description": "The updated todo list"
              }
            },
            "required": [
              "todos"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "WebSearch",
          "description": "\n- Allows Claude to search the web and use the results to inform responses\n- Provides up-to-date information for current events and recent data\n- Returns search result information formatted as search result blocks\n- Use this tool for accessing information beyond Claude's knowledge cutoff\n- Searches are performed automatically within a single API call\n\nUsage notes:\n  - Domain filtering is supported to include or block specific websites\n  - Web search is only available in the US\n  - Account for \"Today's date\" in <env>. For example, if <env> says \"Today's date: 2025-07-01\", and the user wants the latest docs, do not use 2024 in the search query. Use 2025.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "minLength": 2,
                "description": "The search query to use"
              },
              "allowed_domains": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Only include search results from these domains"
              },
              "blocked_domains": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Never include search results from these domains"
              }
            },
            "required": [
              "query"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        }
      ],
      "responseStructure": {
        "type": "object",
        "keys": [
          "id",
          "object",
          "created",
          "model",
          "choices",
          "usage",
          "stats",
          "system_fingerprint"
        ],
        "hasChoices": true,
        "hasContent": false,
        "hasUsage": true,
        "choicesCount": 1,
        "firstChoice": {
          "hasMessage": true,
          "hasToolCalls": false,
          "finishReason": "stop"
        }
      },
      "parsingAttempts": [
        "json_format",
        "function_call",
        "action_format",
        "natural_language"
      ]
    }
  },
  {
    "timestamp": "2025-08-10T09:06:20.047Z",
    "requestId": "session_1754816753452_eqo8u18uc:conv_1754816753452_jwegk07kv:2:1754816753542:j8ax",
    "provider": "lmstudio",
    "model": "gpt-oss-20b-mlx",
    "endpoint": "localhost:1234",
    "failureType": "text_instead_of_tools",
    "originalResponse": {
      "id": "chatcmpl-shyc8nq27g2jhlze1795z",
      "object": "chat.completion",
      "created": 1754816753,
      "model": "gpt-oss-20b-mlx",
      "choices": [
        {
          "index": 0,
          "logprobs": null,
          "finish_reason": "stop",
          "message": {
            "role": "assistant",
            "content": "We need to list current directory. The user says: \"列出当前目录下的文件\". Use LS or Grep.\n\nTool LS to list current directory: path \"\" maybe? Provide empty path? For usage, \"path\": string absolute. We can use \".\"? Might be relative to repo root. We'll try LS with path: \"\"?\n\nBut spec says path must be absolute. We can use \".\"? Might not accept relative. I'd try: use Path: \"./\" maybe.\n\nLet's call:\n\n`ls .` but via LS tool path \".\". But we can use \"path\":\".\"? The tool might check if relative allowed?\n\nAlternatively use Bash: `ls`.\n\nLet's call Bash to get output of `printf`. But we need file names only.\n\nWe'll use Bash tool: command \"ls -a\" to list all files in current directory.\n\nBut we also need to ensure no additional extraneous output. We can use \"ls\" command; it returns file list.\n\nLet's do:\n\n```bash\nls -a\n```\n\nWe can capture that output. Also we can use \"basename\" etc.\n\nLet's call the Bash tool.\n\n<|start|>assistant<|channel|>commentary to=functions.Bash<|message|>{\"command\":\"ls -a\",\"description\"... [truncated]"
          }
        }
      ],
      "usage": {
        "prompt_tokens": 20033,
        "completion_tokens": 257,
        "total_tokens": 20290
      },
      "stats": {},
      "system_fingerprint": "gpt-oss-20b-mlx"
    },
    "expectedFormat": "openai",
    "errorMessage": "All parsing strategies failed",
    "responseAnalysis": {
      "hasToolCalls": false,
      "hasContent": true,
      "contentLength": 1039,
      "contentPreview": "We need to list current directory. The user says: \"列出当前目录下的文件\". Use LS or Grep.\n\nTool LS to list current directory: path \"\" maybe? Provide empty path? For usage, \"path\": string absolute. We can use \".",
      "finishReason": "stop",
      "toolCallPatterns": []
    },
    "debugInfo": {
      "requestTools": [
        {
          "name": "Task",
          "description": "Launch a new agent to handle complex, multi-step tasks autonomously.\n\nAvailable agent types and the tools they have access to:\n- general-purpose: General-purpose agent for researching complex questions, searching for code, and executing multi-step tasks. When you are searching for a keyword or file and are not confident that you will find the right match in the first few tries use this agent to perform the search for you. (Tools: *)\n- code-refactorer: Use this agent when you need to improve existing code structure, readability, or maintainability without changing functionality. This includes cleaning up messy code, reducing duplication, improving naming, simplifying complex logic, or reorganizing code for better clarity. Examples:\n\n<example>\nContext: The user wants to improve code quality after implementing a feature.\nuser: \"I just finished implementing the user authentication system. Can you help clean it up?\"\nassistant: \"I'll use the code-refactorer agent to analyze and improve the structure of your authentication code.\"\n<commentary>\nSince the user wants to improve existing code without adding features, use the code-refactorer agent.\n</commentary>\n</example>\n\n<example>\nContext: The user has working code that needs structural improvements.\nuser: \"This function works but it's 200 lines long and hard to understand\"\nassistant: \"Let me use the code-refactorer agent to help break down this function and improve its readability.\"\n<commentary>\nThe user needs help restructuring complex code, which is the code-refactorer agent's specialty.\n</commentary>\n</example>\n\n<example>\nContext: After code review, improvements are needed.\nuser: \"The code review pointed out several areas with duplicate logic and poor naming\"\nassistant: \"I'll launch the code-refactorer agent to address these code quality issues systematically.\"\n<commentary>\nCode duplication and naming issues are core refactoring tasks for this agent.\n</commentary>\n</example> (Tools: Edit, MultiEdit, Write, NotebookEdit, Grep, LS, Read)\n- project-task-planner: Use this agent when you need to create a comprehensive development task list from a Product Requirements Document (PRD). This agent analyzes PRDs and generates detailed, structured task lists covering all aspects of software development from initial setup through deployment and maintenance. Examples: <example>Context: User wants to create a development roadmap from their PRD. user: \"I have a PRD for a new e-commerce platform. Can you create a task list?\" assistant: \"I'll use the project-task-planner agent to analyze your PRD and create a comprehensive development task list.\" <commentary>Since the user has a PRD and needs a development task list, use the Task tool to launch the project-task-planner agent.</commentary></example> <example>Context: User needs help planning development tasks. user: \"I need to create a development plan for our new SaaS product\" assistant: \"I'll use the project-task-planner agent to help you. First, I'll need to see your Product Requirements Document (PRD).\" <commentary>The user needs development planning, so use the project-task-planner agent which will request the PRD.</commentary></example> (Tools: Task, Bash, Edit, MultiEdit, Write, NotebookEdit, Grep, LS, Read, ExitPlanMode, TodoWrite, WebSearch)\n- vibe-coding-coach: Use this agent when users want to build applications through conversation, focusing on the vision and feel of their app rather than technical implementation details. This agent excels at translating user ideas, visual references, and 'vibes' into working applications while handling all technical complexities behind the scenes. <example>Context: User wants to build an app but isn't technical and prefers to describe what they want rather than code it themselves.\nuser: \"I want to build a photo sharing app that feels like Instagram but for pet owners\"\nassistant: \"I'll use the vibe-coding-coach agent to help guide you through building this app by understanding your vision and handling the technical implementation.\"\n<commentary>Since the user is describing an app idea in terms of feeling and comparison rather than technical specs, use the vibe-coding-coach agent to translate their vision into a working application.</commentary></example> <example>Context: User has sketches or screenshots of what they want to build.\nuser: \"Here's a screenshot of an app I like. Can we build something similar but for tracking workouts?\"\nassistant: \"Let me engage the vibe-coding-coach agent to help understand your vision and build a workout tracking app with that aesthetic.\"\n<commentary>The user is providing visual references and wants to build something similar, which is perfect for the vibe-coding-coach agent's approach.</commentary></example> (Tools: *)\n- debug-system-architect: Use this agent when you need to establish a comprehensive debug logging system for a project. This includes setting up log directories, implementing node-level tracing, creating time-based test records, establishing replay mechanisms, and documenting debug rules. Example: <example> Context: User is setting up a new project and wants to implement proper debugging infrastructure from the start. user: \"Please help me set up a debug system for my new API router project\" <commentary> Since the user is requesting debug system setup, use the debug-system-architect agent to analyze the project and implement comprehensive logging and tracing mechanisms. </commentary> </example> <example> Context: User encounters intermittent issues in their routing system and needs better visibility. user: \"I'm having trouble tracking down why some requests fail intermittently\" <commentary> Since the user needs better debugging visibility for intermittent issues, use the debug-system-architect agent to implement node-level tracing and replay mechanisms. </commentary> </example> (Tools: *)\n- code-risk-auditor: Use this agent when you need to perform comprehensive code risk assessment and identify potential architectural issues in your codebase. Examples: <example>Context: The user has just completed a major refactoring and wants to ensure no hardcoded values or fallback mechanisms were introduced. user: \"I just finished refactoring the routing system, can you check for any code risks?\" assistant: \"I'll use the code-risk-auditor agent to perform a comprehensive risk assessment of your routing system changes.\"</example> <example>Context: Before a major release, the user wants to clean up technical debt and ensure code quality. user: \"We're preparing for v2.0 release, I need a full code audit\" assistant: \"Let me launch the code-risk-auditor agent to identify hardcoding, fallback risks, outdated tests, and duplicate implementations across the entire codebase.\"</example> <example>Context: The user notices inconsistent behavior and suspects duplicate implementations. user: \"The same feature seems to be implemented in multiple places, causing bugs\" assistant: \"I'll use the code-risk-auditor agent to scan for duplicate implementations and provide a consolidation plan.\"</example> (Tools: *)\n- security-auditor: Use this agent when you need to perform a comprehensive security audit of a codebase, identify vulnerabilities, and generate a detailed security report with actionable remediation steps. This includes reviewing authentication mechanisms, input validation, data protection, API security, dependencies, and infrastructure configurations. Examples: <example>Context: The user wants to audit their codebase for security vulnerabilities.\nuser: \"Can you perform a security audit of my application?\"\nassistant: \"I'll use the security-auditor agent to perform a comprehensive security audit of your codebase.\"\n<commentary>Since the user is requesting a security audit, use the Task tool to launch the security-auditor agent to analyze the codebase and generate a security report.</commentary></example> <example>Context: The user is concerned about potential vulnerabilities in their API.\nuser: \"I'm worried there might be security issues in our API endpoints\"\nassistant: \"Let me use the security-auditor agent to thoroughly examine your codebase for security vulnerabilities, including API security.\"\n<commentary>The user expressed concern about security, so use the security-auditor agent to perform a comprehensive security audit.</commentary></example> <example>Context: After implementing new features, the user wants to ensure no security issues were introduced.\nuser: \"We just added user authentication to our app. Can you check if it's secure?\"\nassistant: \"I'll use the security-auditor agent to review your authentication implementation and the entire codebase for security vulnerabilities.\"\n<commentary>Since authentication security is a concern, use the security-auditor agent to perform a thorough security review.</commentary></example> (Tools: Task, Bash, Edit, MultiEdit, Write, NotebookEdit)\n- project-memory-manager: Use this agent when you need to manage project-specific memory entries, create project documentation, or organize project knowledge. This includes creating project summaries, documenting project decisions, tracking project progress, and maintaining project-specific knowledge bases. <example>Context: User wants to document a project decision or create project documentation. user: \"请为我们的新项目创建一个内存管理系统的文档\" assistant: \"我将使用 project-memory-manager agent 来创建这个项目文档\" <commentary>Since the user needs project documentation, use the project-memory-manager agent to create project-specific memory entries.</commentary></example> <example>Context: User wants to track project progress or decisions. user: \"我们需要记录这个项目的关键决策点\" assistant: \"让我使用 project-memory-manager agent 来记录这些项目决策\" <commentary>Since this is project tracking, use the project-memory-manager agent to create decision-type memory entries.</commentary></example> (Tools: *)\n- rules-architect: Use this agent when you need to analyze project architecture and establish comprehensive rule management systems. Examples: <example>Context: User wants to organize project rules and create a structured rule management system. user: \"I need to reorganize our project rules and create a better structure for managing coding standards, file organization, and testing protocols\" assistant: \"I'll use the rules-architect agent to analyze the current project structure and establish a comprehensive rule management system with proper categorization and organization.\"</example> <example>Context: Project has grown complex and needs better rule organization. user: \"Our CLAUDE.md file is getting too large and we need to break down rules into manageable categories\" assistant: \"Let me call the rules-architect agent to create a structured .claude/rules system that will organize all project rules into logical categories.\"</example> (Tools: *)\n- frontend-designer: Use this agent when you need to convert design mockups, wireframes, or visual concepts into detailed technical specifications and implementation guides for frontend development. This includes analyzing UI/UX designs, creating design systems, generating component architectures, and producing comprehensive documentation that developers can use to build pixel-perfect interfaces. Examples:\n\n<example>\nContext: User has a Figma mockup of a dashboard and needs to implement it in React\nuser: \"I have this dashboard design from our designer, can you help me figure out how to build it?\"\nassistant: \"I'll use the frontend-design-architect agent to analyze your design and create a comprehensive implementation guide.\"\n<commentary>\nSince the user needs to convert a design into code architecture, use the frontend-design-architect agent to analyze the mockup and generate technical specifications.\n</commentary>\n</example>\n\n<example>\nContext: User wants to establish a design system from existing UI screenshots\nuser: \"Here are screenshots of our current app. We need to extract a consistent design system from these.\"\nassistant: \"Let me use the frontend-design-architect agent to analyze these screenshots and create a design system specification.\"\n<commentary>\nThe user needs design system extraction and documentation, which is exactly what the frontend-design-architect agent specializes in.\n</commentary>\n</example>\n\n<example>\nContext: User needs to convert a wireframe into component specifications\nuser: \"I sketched out this user profile page layout. How should I structure the components?\"\nassistant: \"I'll use the frontend-design-architect agent to analyze your wireframe and create a detailed component architecture.\"\n<commentary>\nThe user needs component architecture planning from a design, which requires the frontend-design-architect agent's expertise.\n</commentary>\n</example> (Tools: *)\n- content-writer: Use this agent when you need to create compelling, informative content that explains complex topics in simple terms. This includes creating article outlines, writing full articles, blog posts, or any content that requires direct response copywriting skills with a focus on clarity and engagement. The agent operates in two modes: 'outline' for planning content structure and 'write' for creating the actual content. Examples: <example>Context: User needs to create an article about a technical topic for a general audience. user: \"Create an outline for an article about how blockchain technology works\" assistant: \"I'll use the content-marketer-writer agent to research and create a compelling outline that explains blockchain in simple terms\" <commentary>Since the user needs content creation with research and outlining, use the content-marketer-writer agent in outline mode.</commentary></example> <example>Context: User has an outline and needs to write the full article. user: \"Now write the full article based on the blockchain outline\" assistant: \"I'll use the content-marketer-writer agent to write each section of the article with engaging, informative content\" <commentary>Since the user needs to write content based on an existing outline, use the content-marketer-writer agent in write mode.</commentary></example> (Tools: *)\n- test-runner: Use this agent to run and manage tests according to the global and project-specific testing rules. This includes executing test scripts, documenting test results, and helping to diagnose issues following the standard pipeline. <example>Context: User wants to run all functional tests. user: \"运行所有功能测试\" assistant: \"我将使用 test-runner agent 来执行所有功能测试\" <commentary>Since the user wants to run tests by category, use the test-runner agent.</commentary></example> <example>Context: User wants to verify a bug fix. user: \"我修复了一个bug，帮我验证一下\" assistant: \"让我使用 test-runner agent 来执行对应的修复验证测试\" <commentary>The user needs to verify a fix, which is a core task for the test-runner agent.</commentary></example> (Tools: *)\n- in-depth-research-analyst: Use this agent when you need to conduct comprehensive research reports with in-depth web mining, data analysis, and visualization. This includes industry analysis, market research, competitive intelligence, and trend forecasting with accurate data from authoritative sources. <example>Context: User wants a comprehensive industry analysis report. user: \"请对人工智能芯片市场进行深入调研，包括主要厂商、市场份额和增长趋势\" assistant: \"我将使用 in-depth-research-analyst agent 来进行这项深入的市场调研并生成可视化报告\" <commentary>Since the user needs a comprehensive industry analysis with data visualization, use the in-depth-research-analyst agent to conduct thorough research and create an integrated report.</commentary></example> <example>Context: User wants market research with accurate data and visualizations. user: \"我们需要一份关于电动汽车充电基础设施的深度报告，包含数据图表\" assistant: \"让我使用 in-depth-research-analyst agent 来收集准确数据并生成图文并茂的分析报告\" <commentary>Since this requires market research with data accuracy and visualizations, use the in-depth-research-analyst agent to create a comprehensive report.</commentary></example> (Tools: *)\n- prd-writer: Use this agent when you need to create a comprehensive Product Requirements Document (PRD) for a software project or feature. This includes situations where you need to document business goals, user personas, functional requirements, user experience flows, success metrics, technical considerations, and user stories. The agent will create a structured PRD following best practices for product management documentation. Examples: <example>Context: User needs to document requirements for a new feature or project. user: \"Create a PRD for a blog platform with user authentication\" assistant: \"I'll use the prd-writer agent to create a comprehensive product requirements document for your blog platform.\" <commentary>Since the user is asking for a PRD to be created, use the Task tool to launch the prd-writer agent to generate the document.</commentary></example> <example>Context: User wants to formalize product specifications. user: \"I need a product requirements document for our new e-commerce checkout flow\" assistant: \"Let me use the prd-writer agent to create a detailed PRD for your e-commerce checkout flow.\" <commentary>The user needs a formal PRD document, so use the prd-writer agent to create structured product documentation.</commentary></example> (Tools: Task, Bash, Grep, LS, Read, Write, WebSearch, Glob)\n- pipeline-debug-universal: Use this agent when you need to implement comprehensive debug hooks and testing infrastructure for ANY pipeline system - whether it's API routing, data processing, CI/CD workflows, or transformation pipelines. This agent specializes in creating universal debug architectures that work across different pipeline types with data capture, replay capabilities, and systematic testing matrices. Examples: <example>Context: User is working on a multi-provider API routing system and needs to add debug capabilities to track data flow through each pipeline step. user: \"I need to add debug hooks to our routing pipeline so we can capture and replay data at each step\" assistant: \"I'll use the pipeline-debug-universal agent to design a comprehensive debug infrastructure with data capture and replay capabilities\" <commentary>Since the user needs pipeline debugging infrastructure, use the pipeline-debug-universal agent to create debug hooks and testing matrices.</commentary></example> <example>Context: User has a complex data transformation pipeline and wants to build systematic testing for each stage and provider. user: \"Our data processing pipeline has issues and we need better testing infrastructure to isolate problems at each step\" assistant: \"Let me use the pipeline-debug-universal agent to create a complete testing matrix and debug system\" <commentary>Since the user needs systematic pipeline testing infrastructure, use the pipeline-debug-universal agent to architect the testing system.</commentary></example> <example>Context: User is building a CI/CD pipeline and needs to implement debug capabilities for tracking deployment issues. user: \"Our deployment pipeline fails randomly and we can't reproduce the issues consistently\" assistant: \"I'll deploy the pipeline-debug-universal agent to create comprehensive debug hooks and replay capabilities for your CI/CD pipeline\" <commentary>Since the user needs debug infrastructure for a deployment pipeline, use the pipeline-debug-universal agent to design the debug system.</commentary></example> (Tools: *)\n\nWhen using the Task tool, you must specify a subagent_type parameter to select which agent type to use.\n\n\n\nWhen NOT to use the Agent tool:\n- If you want to read a specific file path, use the Read or Glob tool instead of the Agent tool, to find the match more quickly\n- If you are searching for a specific class definition like \"class Foo\", use the Glob tool instead, to find the match more quickly\n- If you are searching for code within a specific file or set of 2-3 files, use the Read tool instead of the Agent tool, to find the match more quickly\n- Other tasks that are not related to the agent descriptions above\n\n\nUsage notes:\n1. Launch multiple agents concurrently whenever possible, to maximize performance; to do that, use a single message with multiple tool uses\n2. When the agent is done, it will return a single message back to you. The result returned by the agent is not visible to the user. To show the user the result, you should send a text message back to the user with a concise summary of the result.\n3. Each agent invocation is stateless. You will not be able to send additional messages to the agent, nor will the agent be able to communicate with you outside of its final report. Therefore, your prompt should contain a highly detailed task description for the agent to perform autonomously and you should specify exactly what information the agent should return back to you in its final and only message to you.\n4. The agent's outputs should generally be trusted\n5. Clearly tell the agent whether you expect it to write code or just to do research (search, file reads, web fetches, etc.), since it is not aware of the user's intent\n6. If the agent description mentions that it should be used proactively, then you should try your best to use it without the user having to ask for it first. Use your judgement.\n\nExample usage:\n\n<example_agent_descriptions>\n\"code-reviewer\": use this agent after you are done writing a signficant piece of code\n\"greeting-responder\": use this agent when to respond to user greetings with a friendly joke\n</example_agent_description>\n\n<example>\nuser: \"Please write a function that checks if a number is prime\"\nassistant: Sure let me write a function that checks if a number is prime\nassistant: First let me use the Write tool to write a function that checks if a number is prime\nassistant: I'm going to use the Write tool to write the following code:\n<code>\nfunction isPrime(n) {\n  if (n <= 1) return false\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n</code>\n<commentary>\nSince a signficant piece of code was written and the task was completed, now use the code-reviewer agent to review the code\n</commentary>\nassistant: Now let me use the code-reviewer agent to review the code\nassistant: Uses the Task tool to launch the with the code-reviewer agent\n</example>\n\n<example>\nuser: \"Hello\"\n<commentary>\nSince the user is greeting, use the greeting-responder agent to respond with a friendly joke\n</commentary>\nassistant: \"I'm going to use the Task tool to launch the with the greeting-responder agent\"\n</example>\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "description": {
                "type": "string",
                "description": "A short (3-5 word) description of the task"
              },
              "prompt": {
                "type": "string",
                "description": "The task for the agent to perform"
              },
              "subagent_type": {
                "type": "string",
                "description": "The type of specialized agent to use for this task"
              }
            },
            "required": [
              "description",
              "prompt",
              "subagent_type"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Bash",
          "description": "Executes a given bash command in a persistent shell session with optional timeout, ensuring proper handling and security measures.\n\nBefore executing the command, please follow these steps:\n\n1. Directory Verification:\n   - If the command will create new directories or files, first use the LS tool to verify the parent directory exists and is the correct location\n   - For example, before running \"mkdir foo/bar\", first use LS to check that \"foo\" exists and is the intended parent directory\n\n2. Command Execution:\n   - Always quote file paths that contain spaces with double quotes (e.g., cd \"path with spaces/file.txt\")\n   - Examples of proper quoting:\n     - cd \"/Users/name/My Documents\" (correct)\n     - cd /Users/name/My Documents (incorrect - will fail)\n     - python \"/path/with spaces/script.py\" (correct)\n     - python /path/with spaces/script.py (incorrect - will fail)\n   - After ensuring proper quoting, execute the command.\n   - Capture the output of the command.\n\nUsage notes:\n  - The command argument is required.\n  - You can specify an optional timeout in milliseconds (up to 600000ms / 10 minutes). If not specified, commands will timeout after 120000ms (2 minutes).\n  - It is very helpful if you write a clear, concise description of what this command does in 5-10 words.\n  - If the output exceeds 30000 characters, output will be truncated before being returned to you.\n  - VERY IMPORTANT: You MUST avoid using search commands like `find` and `grep`. Instead use Grep, Glob, or Task to search. You MUST avoid read tools like `cat`, `head`, `tail`, and `ls`, and use Read and LS to read files.\n - If you _still_ need to run `grep`, STOP. ALWAYS USE ripgrep at `rg` first, which all ${PRODUCT_NAME} users have pre-installed.\n  - When issuing multiple commands, use the ';' or '&&' operator to separate them. DO NOT use newlines (newlines are ok in quoted strings).\n  - Try to maintain your current working directory throughout the session by using absolute paths and avoiding usage of `cd`. You may use `cd` if the User explicitly requests it.\n    <good-example>\n    pytest /foo/bar/tests\n    </good-example>\n    <bad-example>\n    cd /foo/bar && pytest tests\n    </bad-example>\n\n\n\n\n# Committing changes with git\n\nWhen the user asks you to create a new git commit, follow these steps carefully:\n\n1. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following bash commands in parallel, each using the Bash tool:\n  - Run a git status command to see all untracked files.\n  - Run a git diff command to see both staged and unstaged changes that will be committed.\n  - Run a git log command to see recent commit messages, so that you can follow this repository's commit message style.\n2. Analyze all staged changes (both previously staged and newly added) and draft a commit message:\n  - Summarize the nature of the changes (eg. new feature, enhancement to an existing feature, bug fix, refactoring, test, docs, etc.). Ensure the message accurately reflects the changes and their purpose (i.e. \"add\" means a wholly new feature, \"update\" means an enhancement to an existing feature, \"fix\" means a bug fix, etc.).\n  - Check for any sensitive information that shouldn't be committed\n  - Draft a concise (1-2 sentences) commit message that focuses on the \"why\" rather than the \"what\"\n  - Ensure it accurately reflects the changes and their purpose\n3. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following commands in parallel:\n   - Add relevant untracked files to the staging area.\n   - Create the commit with a message ending with:\n   🤖 Generated with [Claude Code](https://claude.ai/code)\n\n   Co-Authored-By: Claude <noreply@anthropic.com>\n   - Run git status to make sure the commit succeeded.\n4. If the commit fails due to pre-commit hook changes, retry the commit ONCE to include these automated changes. If it fails again, it usually means a pre-commit hook is preventing the commit. If the commit succeeds but you notice that files were modified by the pre-commit hook, you MUST amend your commit to include them.\n\nImportant notes:\n- NEVER update the git config\n- NEVER run additional commands to read or explore code, besides git bash commands\n- NEVER use the TodoWrite or Task tools\n- DO NOT push to the remote repository unless the user explicitly asks you to do so\n- IMPORTANT: Never use git commands with the -i flag (like git rebase -i or git add -i) since they require interactive input which is not supported.\n- If there are no changes to commit (i.e., no untracked files and no modifications), do not create an empty commit\n- In order to ensure good formatting, ALWAYS pass the commit message via a HEREDOC, a la this example:\n<example>\ngit commit -m \"$(cat <<'EOF'\n   Commit message here.\n\n   🤖 Generated with [Claude Code](https://claude.ai/code)\n\n   Co-Authored-By: Claude <noreply@anthropic.com>\n   EOF\n   )\"\n</example>\n\n# Creating pull requests\nUse the gh command via the Bash tool for ALL GitHub-related tasks including working with issues, pull requests, checks, and releases. If given a Github URL use the gh command to get the information needed.\n\nIMPORTANT: When the user asks you to create a pull request, follow these steps carefully:\n\n1. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following bash commands in parallel using the Bash tool, in order to understand the current state of the branch since it diverged from the main branch:\n   - Run a git status command to see all untracked files\n   - Run a git diff command to see both staged and unstaged changes that will be committed\n   - Check if the current branch tracks a remote branch and is up to date with the remote, so you know if you need to push to the remote\n   - Run a git log command and `git diff [base-branch]...HEAD` to understand the full commit history for the current branch (from the time it diverged from the base branch)\n2. Analyze all changes that will be included in the pull request, making sure to look at all relevant commits (NOT just the latest commit, but ALL commits that will be included in the pull request!!!), and draft a pull request summary\n3. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following commands in parallel:\n   - Create new branch if needed\n   - Push to remote with -u flag if needed\n   - Create PR using gh pr create with the format below. Use a HEREDOC to pass the body to ensure correct formatting.\n<example>\ngh pr create --title \"the pr title\" --body \"$(cat <<'EOF'\n## Summary\n<1-3 bullet points>\n\n## Test plan\n[Checklist of TODOs for testing the pull request...]\n\n🤖 Generated with [Claude Code](https://claude.ai/code)\nEOF\n)\"\n</example>\n\nImportant:\n- NEVER update the git config\n- DO NOT use the TodoWrite or Task tools\n- Return the PR URL when you're done, so the user can see it\n\n# Other common operations\n- View comments on a Github PR: gh api repos/foo/bar/pulls/123/comments",
          "input_schema": {
            "type": "object",
            "properties": {
              "command": {
                "type": "string",
                "description": "The command to execute"
              },
              "timeout": {
                "type": "number",
                "description": "Optional timeout in milliseconds (max 600000)"
              },
              "description": {
                "type": "string",
                "description": " Clear, concise description of what this command does in 5-10 words. Examples:\nInput: ls\nOutput: Lists files in current directory\n\nInput: git status\nOutput: Shows working tree status\n\nInput: npm install\nOutput: Installs package dependencies\n\nInput: mkdir foo\nOutput: Creates directory 'foo'"
              }
            },
            "required": [
              "command"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Glob",
          "description": "- Fast file pattern matching tool that works with any codebase size\n- Supports glob patterns like \"**/*.js\" or \"src/**/*.ts\"\n- Returns matching file paths sorted by modification time\n- Use this tool when you need to find files by name patterns\n- When you are doing an open ended search that may require multiple rounds of globbing and grepping, use the Agent tool instead\n- You have the capability to call multiple tools in a single response. It is always better to speculatively perform multiple searches as a batch that are potentially useful.",
          "input_schema": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "The glob pattern to match files against"
              },
              "path": {
                "type": "string",
                "description": "The directory to search in. If not specified, the current working directory will be used. IMPORTANT: Omit this field to use the default directory. DO NOT enter \"undefined\" or \"null\" - simply omit it for the default behavior. Must be a valid directory path if provided."
              }
            },
            "required": [
              "pattern"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Grep",
          "description": "A powerful search tool built on ripgrep\n\n  Usage:\n  - ALWAYS use Grep for search tasks. NEVER invoke `grep` or `rg` as a Bash command. The Grep tool has been optimized for correct permissions and access.\n  - Supports full regex syntax (e.g., \"log.*Error\", \"function\\s+\\w+\")\n  - Filter files with glob parameter (e.g., \"*.js\", \"**/*.tsx\") or type parameter (e.g., \"js\", \"py\", \"rust\")\n  - Output modes: \"content\" shows matching lines, \"files_with_matches\" shows only file paths (default), \"count\" shows match counts\n  - Use Task tool for open-ended searches requiring multiple rounds\n  - Pattern syntax: Uses ripgrep (not grep) - literal braces need escaping (use `interface\\{\\}` to find `interface{}` in Go code)\n  - Multiline matching: By default patterns match within single lines only. For cross-line patterns like `struct \\{[\\s\\S]*?field`, use `multiline: true`\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "The regular expression pattern to search for in file contents"
              },
              "path": {
                "type": "string",
                "description": "File or directory to search in (rg PATH). Defaults to current working directory."
              },
              "glob": {
                "type": "string",
                "description": "Glob pattern to filter files (e.g. \"*.js\", \"*.{ts,tsx}\") - maps to rg --glob"
              },
              "output_mode": {
                "type": "string",
                "enum": [
                  "content",
                  "files_with_matches",
                  "count"
                ],
                "description": "Output mode: \"content\" shows matching lines (supports -A/-B/-C context, -n line numbers, head_limit), \"files_with_matches\" shows file paths (supports head_limit), \"count\" shows match counts (supports head_limit). Defaults to \"files_with_matches\"."
              },
              "-B": {
                "type": "number",
                "description": "Number of lines to show before each match (rg -B). Requires output_mode: \"content\", ignored otherwise."
              },
              "-A": {
                "type": "number",
                "description": "Number of lines to show after each match (rg -A). Requires output_mode: \"content\", ignored otherwise."
              },
              "-C": {
                "type": "number",
                "description": "Number of lines to show before and after each match (rg -C). Requires output_mode: \"content\", ignored otherwise."
              },
              "-n": {
                "type": "boolean",
                "description": "Show line numbers in output (rg -n). Requires output_mode: \"content\", ignored otherwise."
              },
              "-i": {
                "type": "boolean",
                "description": "Case insensitive search (rg -i)"
              },
              "type": {
                "type": "string",
                "description": "File type to search (rg --type). Common types: js, py, rust, go, java, etc. More efficient than include for standard file types."
              },
              "head_limit": {
                "type": "number",
                "description": "Limit output to first N lines/entries, equivalent to \"| head -N\". Works across all output modes: content (limits output lines), files_with_matches (limits file paths), count (limits count entries). When unspecified, shows all results from ripgrep."
              },
              "multiline": {
                "type": "boolean",
                "description": "Enable multiline mode where . matches newlines and patterns can span lines (rg -U --multiline-dotall). Default: false."
              }
            },
            "required": [
              "pattern"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "LS",
          "description": "Lists files and directories in a given path. The path parameter must be an absolute path, not a relative path. You can optionally provide an array of glob patterns to ignore with the ignore parameter. You should generally prefer the Glob and Grep tools, if you know which directories to search.",
          "input_schema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "The absolute path to the directory to list (must be absolute, not relative)"
              },
              "ignore": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of glob patterns to ignore"
              }
            },
            "required": [
              "path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "ExitPlanMode",
          "description": "Use this tool when you are in plan mode and have finished presenting your plan and are ready to code. This will prompt the user to exit plan mode.\nIMPORTANT: Only use this tool when the task requires planning the implementation steps of a task that requires writing code. For research tasks where you're gathering information, searching files, reading files or in general trying to understand the codebase - do NOT use this tool.\n\nEg.\n1. Initial task: \"Search for and understand the implementation of vim mode in the codebase\" - Do not use the exit plan mode tool because you are not planning the implementation steps of a task.\n2. Initial task: \"Help me implement yank mode for vim\" - Use the exit plan mode tool after you have finished planning the implementation steps of the task.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "plan": {
                "type": "string",
                "description": "The plan you came up with, that you want to run by the user for approval. Supports markdown. The plan should be pretty concise."
              }
            },
            "required": [
              "plan"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Read",
          "description": "Reads a file from the local filesystem. You can access any file directly by using this tool.\nAssume this tool is able to read all files on the machine. If the User provides a path to a file assume that path is valid. It is okay to read a file that does not exist; an error will be returned.\n\nUsage:\n- The file_path parameter must be an absolute path, not a relative path\n- By default, it reads up to 2000 lines starting from the beginning of the file\n- You can optionally specify a line offset and limit (especially handy for long files), but it's recommended to read the whole file by not providing these parameters\n- Any lines longer than 2000 characters will be truncated\n- Results are returned using cat -n format, with line numbers starting at 1\n- This tool allows Claude Code to read images (eg PNG, JPG, etc). When reading an image file the contents are presented visually as Claude Code is a multimodal LLM.\n- This tool can read PDF files (.pdf). PDFs are processed page by page, extracting both text and visual content for analysis.\n- For Jupyter notebooks (.ipynb files), use the NotebookRead instead\n- You have the capability to call multiple tools in a single response. It is always better to speculatively read multiple files as a batch that are potentially useful.\n- You will regularly be asked to read screenshots. If the user provides a path to a screenshot ALWAYS use this tool to view the file at the path. This tool will work with all temporary file paths like /var/folders/123/abc/T/TemporaryItems/NSIRD_screencaptureui_ZfB1tD/Screenshot.png\n- If you read a file that exists but has empty contents you will receive a system reminder warning in place of file contents.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to read"
              },
              "offset": {
                "type": "number",
                "description": "The line number to start reading from. Only provide if the file is too large to read at once"
              },
              "limit": {
                "type": "number",
                "description": "The number of lines to read. Only provide if the file is too large to read at once."
              }
            },
            "required": [
              "file_path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Edit",
          "description": "Performs exact string replacements in files.\n\nUsage:\n- You must use your `Read` tool at least once in the conversation before editing. This tool will error if you attempt an edit without reading the file.\n- When editing text from Read tool output, ensure you preserve the exact indentation (tabs/spaces) as it appears AFTER the line number prefix. The line number prefix format is: spaces + line number + tab. Everything after that tab is the actual file content to match. Never include any part of the line number prefix in the old_string or new_string.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- Only use emojis if the user explicitly requests it. Avoid adding emojis to files unless asked.\n- The edit will FAIL if `old_string` is not unique in the file. Either provide a larger string with more surrounding context to make it unique or use `replace_all` to change every instance of `old_string`.\n- Use `replace_all` for replacing and renaming strings across the file. This parameter is useful if you want to rename a variable for instance.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to modify"
              },
              "old_string": {
                "type": "string",
                "description": "The text to replace"
              },
              "new_string": {
                "type": "string",
                "description": "The text to replace it with (must be different from old_string)"
              },
              "replace_all": {
                "type": "boolean",
                "default": false,
                "description": "Replace all occurences of old_string (default false)"
              }
            },
            "required": [
              "file_path",
              "old_string",
              "new_string"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "MultiEdit",
          "description": "This is a tool for making multiple edits to a single file in one operation. It is built on top of the Edit tool and allows you to perform multiple find-and-replace operations efficiently. Prefer this tool over the Edit tool when you need to make multiple edits to the same file.\n\nBefore using this tool:\n\n1. Use the Read tool to understand the file's contents and context\n2. Verify the directory path is correct\n\nTo make multiple file edits, provide the following:\n1. file_path: The absolute path to the file to modify (must be absolute, not relative)\n2. edits: An array of edit operations to perform, where each edit contains:\n   - old_string: The text to replace (must match the file contents exactly, including all whitespace and indentation)\n   - new_string: The edited text to replace the old_string\n   - replace_all: Replace all occurences of old_string. This parameter is optional and defaults to false.\n\nIMPORTANT:\n- All edits are applied in sequence, in the order they are provided\n- Each edit operates on the result of the previous edit\n- All edits must be valid for the operation to succeed - if any edit fails, none will be applied\n- This tool is ideal when you need to make several changes to different parts of the same file\n- For Jupyter notebooks (.ipynb files), use the NotebookEdit instead\n\nCRITICAL REQUIREMENTS:\n1. All edits follow the same requirements as the single Edit tool\n2. The edits are atomic - either all succeed or none are applied\n3. Plan your edits carefully to avoid conflicts between sequential operations\n\nWARNING:\n- The tool will fail if edits.old_string doesn't match the file contents exactly (including whitespace)\n- The tool will fail if edits.old_string and edits.new_string are the same\n- Since edits are applied in sequence, ensure that earlier edits don't affect the text that later edits are trying to find\n\nWhen making edits:\n- Ensure all edits result in idiomatic, correct code\n- Do not leave the code in a broken state\n- Always use absolute file paths (starting with /)\n- Only use emojis if the user explicitly requests it. Avoid adding emojis to files unless asked.\n- Use replace_all for replacing and renaming strings across the file. This parameter is useful if you want to rename a variable for instance.\n\nIf you want to create a new file, use:\n- A new file path, including dir name if needed\n- First edit: empty old_string and the new file's contents as new_string\n- Subsequent edits: normal edit operations on the created content",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to modify"
              },
              "edits": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "old_string": {
                      "type": "string",
                      "description": "The text to replace"
                    },
                    "new_string": {
                      "type": "string",
                      "description": "The text to replace it with"
                    },
                    "replace_all": {
                      "type": "boolean",
                      "default": false,
                      "description": "Replace all occurences of old_string (default false)."
                    }
                  },
                  "required": [
                    "old_string",
                    "new_string"
                  ],
                  "additionalProperties": false
                },
                "minItems": 1,
                "description": "Array of edit operations to perform sequentially on the file"
              }
            },
            "required": [
              "file_path",
              "edits"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Write",
          "description": "Writes a file to the local filesystem.\n\nUsage:\n- This tool will overwrite the existing file if there is one at the provided path.\n- If this is an existing file, you MUST use the Read tool first to read the file's contents. This tool will fail if you did not read the file first.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- NEVER proactively create documentation files (*.md) or README files. Only create documentation files if explicitly requested by the User.\n- Only use emojis if the user explicitly requests it. Avoid writing emojis to files unless asked.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to write (must be absolute, not relative)"
              },
              "content": {
                "type": "string",
                "description": "The content to write to the file"
              }
            },
            "required": [
              "file_path",
              "content"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "NotebookRead",
          "description": "Reads a Jupyter notebook (.ipynb file) and returns all of the cells with their outputs. Jupyter notebooks are interactive documents that combine code, text, and visualizations, commonly used for data analysis and scientific computing. The notebook_path parameter must be an absolute path, not a relative path.",
          "input_schema": {
            "type": "object",
            "properties": {
              "notebook_path": {
                "type": "string",
                "description": "The absolute path to the Jupyter notebook file to read (must be absolute, not relative)"
              },
              "cell_id": {
                "type": "string",
                "description": "The ID of a specific cell to read. If not provided, all cells will be read."
              }
            },
            "required": [
              "notebook_path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "NotebookEdit",
          "description": "Completely replaces the contents of a specific cell in a Jupyter notebook (.ipynb file) with new source. Jupyter notebooks are interactive documents that combine code, text, and visualizations, commonly used for data analysis and scientific computing. The notebook_path parameter must be an absolute path, not a relative path. The cell_number is 0-indexed. Use edit_mode=insert to add a new cell at the index specified by cell_number. Use edit_mode=delete to delete the cell at the index specified by cell_number.",
          "input_schema": {
            "type": "object",
            "properties": {
              "notebook_path": {
                "type": "string",
                "description": "The absolute path to the Jupyter notebook file to edit (must be absolute, not relative)"
              },
              "cell_id": {
                "type": "string",
                "description": "The ID of the cell to edit. When inserting a new cell, the new cell will be inserted after the cell with this ID, or at the beginning if not specified."
              },
              "new_source": {
                "type": "string",
                "description": "The new source for the cell"
              },
              "cell_type": {
                "type": "string",
                "enum": [
                  "code",
                  "markdown"
                ],
                "description": "The type of the cell (code or markdown). If not specified, it defaults to the current cell type. If using edit_mode=insert, this is required."
              },
              "edit_mode": {
                "type": "string",
                "enum": [
                  "replace",
                  "insert",
                  "delete"
                ],
                "description": "The type of edit to make (replace, insert, delete). Defaults to replace."
              }
            },
            "required": [
              "notebook_path",
              "new_source"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "WebFetch",
          "description": "\n- Fetches content from a specified URL and processes it using an AI model\n- Takes a URL and a prompt as input\n- Fetches the URL content, converts HTML to markdown\n- Processes the content with the prompt using a small, fast model\n- Returns the model's response about the content\n- Use this tool when you need to retrieve and analyze web content\n\nUsage notes:\n  - IMPORTANT: If an MCP-provided web fetch tool is available, prefer using that tool instead of this one, as it may have fewer restrictions. All MCP-provided tools start with \"mcp__\".\n  - The URL must be a fully-formed valid URL\n  - HTTP URLs will be automatically upgraded to HTTPS\n  - The prompt should describe what information you want to extract from the page\n  - This tool is read-only and does not modify any files\n  - Results may be summarized if the content is very large\n  - Includes a self-cleaning 15-minute cache for faster responses when repeatedly accessing the same URL\n  - When a URL redirects to a different host, the tool will inform you and provide the redirect URL in a special format. You should then make a new WebFetch request with the redirect URL to fetch the content.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "format": "uri",
                "description": "The URL to fetch content from"
              },
              "prompt": {
                "type": "string",
                "description": "The prompt to run on the fetched content"
              }
            },
            "required": [
              "url",
              "prompt"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "TodoWrite",
          "description": "Use this tool to create and manage a structured task list for your current coding session. This helps you track progress, organize complex tasks, and demonstrate thoroughness to the user.\nIt also helps the user understand the progress of the task and overall progress of their requests.\n\n## When to Use This Tool\nUse this tool proactively in these scenarios:\n\n1. Complex multi-step tasks - When a task requires 3 or more distinct steps or actions\n2. Non-trivial and complex tasks - Tasks that require careful planning or multiple operations\n3. User explicitly requests todo list - When the user directly asks you to use the todo list\n4. User provides multiple tasks - When users provide a list of things to be done (numbered or comma-separated)\n5. After receiving new instructions - Immediately capture user requirements as todos\n6. When you start working on a task - Mark it as in_progress BEFORE beginning work. Ideally you should only have one todo as in_progress at a time\n7. After completing a task - Mark it as completed and add any new follow-up tasks discovered during implementation\n\n## When NOT to Use This Tool\n\nSkip using this tool when:\n1. There is only a single, straightforward task\n2. The task is trivial and tracking it provides no organizational benefit\n3. The task can be completed in less than 3 trivial steps\n4. The task is purely conversational or informational\n\nNOTE that you should not use this tool if there is only one trivial task to do. In this case you are better off just doing the task directly.\n\n## Examples of When to Use the Todo List\n\n<example>\nUser: I want to add a dark mode toggle to the application settings. Make sure you run the tests and build when you're done!\nAssistant: I'll help add a dark mode toggle to your application settings. Let me create a todo list to track this implementation.\n*Creates todo list with the following items:*\n1. Create dark mode toggle component in Settings page\n2. Add dark mode state management (context/store)\n3. Implement CSS-in-JS styles for dark theme\n4. Update existing components to support theme switching\n5. Run tests and build process, addressing any failures or errors that occur\n*Begins working on the first task*\n\n<reasoning>\nThe assistant used the todo list because:\n1. Adding dark mode is a multi-step feature requiring UI, state management, and styling changes\n2. The user explicitly requested tests and build be run afterward\n3. The assistant inferred that tests and build need to pass by adding \"Ensure tests and build succeed\" as the final task\n</reasoning>\n</example>\n\n<example>\nUser: Help me rename the function getCwd to getCurrentWorkingDirectory across my project\nAssistant: Let me first search through your codebase to find all occurrences of 'getCwd'.\n*Uses grep or search tools to locate all instances of getCwd in the codebase*\nAssistant: I've found 15 instances of 'getCwd' across 8 different files. Let me create a todo list to track these changes.\n*Creates todo list with specific items for each file that needs updating*\n\n<reasoning>\nThe assistant used the todo list because:\n1. First, the assistant searched to understand the scope of the task\n2. Upon finding multiple occurrences across different files, it determined this was a complex task with multiple steps\n3. The todo list helps ensure every instance is tracked and updated systematically\n4. This approach prevents missing any occurrences and maintains code consistency\n</reasoning>\n</example>\n\n\n<example>\nUser: I need to implement these features for my e-commerce site: user registration, product catalog, shopping cart, and checkout flow.\nAssistant: I'll help implement these features. First, let's add all the features to the todo list.\n*Creates a todo list breaking down each feature into specific tasks based on the project architecture*\nAssistant: Let's start with user registration. This will involve creating database models, API endpoints, and frontend forms that integrate with your existing authentication system.\n\n<reasoning>\nThe assistant used the todo list because:\n1. The user provided multiple complex features to implement in a comma separated list\n2. The todo list helps organize these large features into manageable tasks\n3. This approach allows for tracking progress across the entire implementation\n</reasoning>\n</example>\n\n<example>\nUser: Can you help optimize my React application? It's rendering slowly and has performance issues.</user>\nAssistant: I'll help optimize your React application. First, let me examine your codebase to identify potential performance bottlenecks.\n*Reviews component structure, render patterns, state management, and data fetching*\nAssistant: After analyzing your codebase, I've identified several performance issues. Let me create a todo list to track our optimization efforts.\n*Creates todo list with items like: 1) Implement memoization for expensive calculations in ProductList, 2) Add virtualization for long lists in Dashboard, 3) Optimize image loading in Gallery component, 4) Fix state update loops in ShoppingCart, 5) Review bundle size and implement code splitting*\nLet's start by implementing memoization for the expensive calculations in your ProductList component.</assistant>\n\n<reasoning>\nThe assistant used the todo list because:\n1. First, the assistant examined the codebase to identify specific performance issues\n2. Based on this analysis, it identified multiple optimization opportunities\n3. Performance optimization is a non-trivial task requiring multiple steps\n4. The todo list helps methodically track improvements across different components\n5. This systematic approach ensures all performance bottlenecks are addressed\n</reasoning>\n</example>\n\n## Examples of When NOT to Use the Todo List\n\n<example>\nUser: How do I print 'Hello World' in Python?\nAssistant: In Python, you can print \"Hello World\" with this simple code:\n\npython\nprint(\"Hello World\")\n\nThis will output the text \"Hello World\" to the console when executed.</assistant>\n\n<reasoning>\nThe assistant did not use the todo list because this is a single, trivial task that can be completed in one step. There's no need to track multiple tasks or steps for such a straightforward request.\n</reasoning>\n</example>\n\n<example>\nUser: What does the git status command do?\nAssistant: The git status command shows the current state of your working directory and staging area. It displays which changes have been staged, which haven't, and which files aren't being tracked by Git. This is a fundamental command for understanding the current state of your repository before making commits.\n\n<reasoning>\nThe assistant did not use the todo list because this is an informational request with no actual coding task to complete. The user is simply asking for an explanation, not for the assistant to perform multiple steps or tasks.\n</reasoning>\n</example>\n\n<example>\nUser: Can you add a comment to the calculateTotal function to explain what it does?\nAssistant: Sure, let me add a comment to the calculateTotal function to explain what it does.\n* Uses the Edit tool to add a comment to the calculateTotal function *\n\n<reasoning>\nThe assistant did not use the todo list because this is a single, straightforward task confined to one location in the code. Adding a comment doesn't require tracking multiple steps or systematic organization.\n</reasoning>\n</example>\n\n<example>\nUser: Run npm install for me and tell me what happens.\nAssistant: I'll run the npm install command for you.\n\n*Executes: npm install*\n\nThe command completed successfully. Here's the output:\n[Output of npm install command]\n\nAll dependencies have been installed according to your package.json file.\n\n<reasoning>\nThe assistant did not use the todo list because this is a single command execution with immediate results. There are no multiple steps to track or organize, making the todo list unnecessary for this straightforward task.\n</reasoning>\n</example>\n\n## Task States and Management\n\n1. **Task States**: Use these states to track progress:\n   - pending: Task not yet started\n   - in_progress: Currently working on (limit to ONE task at a time)\n   - completed: Task finished successfully\n\n2. **Task Management**:\n   - Update task status in real-time as you work\n   - Mark tasks complete IMMEDIATELY after finishing (don't batch completions)\n   - Only have ONE task in_progress at any time\n   - Complete current tasks before starting new ones\n   - Remove tasks that are no longer relevant from the list entirely\n\n3. **Task Completion Requirements**:\n   - ONLY mark a task as completed when you have FULLY accomplished it\n   - If you encounter errors, blockers, or cannot finish, keep the task as in_progress\n   - When blocked, create a new task describing what needs to be resolved\n   - Never mark a task as completed if:\n     - Tests are failing\n     - Implementation is partial\n     - You encountered unresolved errors\n     - You couldn't find necessary files or dependencies\n\n4. **Task Breakdown**:\n   - Create specific, actionable items\n   - Break complex tasks into smaller, manageable steps\n   - Use clear, descriptive task names\n\nWhen in doubt, use this tool. Being proactive with task management demonstrates attentiveness and ensures you complete all requirements successfully.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "todos": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "content": {
                      "type": "string",
                      "minLength": 1
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "pending",
                        "in_progress",
                        "completed"
                      ]
                    },
                    "priority": {
                      "type": "string",
                      "enum": [
                        "high",
                        "medium",
                        "low"
                      ]
                    },
                    "id": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "content",
                    "status",
                    "priority",
                    "id"
                  ],
                  "additionalProperties": false
                },
                "description": "The updated todo list"
              }
            },
            "required": [
              "todos"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "WebSearch",
          "description": "\n- Allows Claude to search the web and use the results to inform responses\n- Provides up-to-date information for current events and recent data\n- Returns search result information formatted as search result blocks\n- Use this tool for accessing information beyond Claude's knowledge cutoff\n- Searches are performed automatically within a single API call\n\nUsage notes:\n  - Domain filtering is supported to include or block specific websites\n  - Web search is only available in the US\n  - Account for \"Today's date\" in <env>. For example, if <env> says \"Today's date: 2025-07-01\", and the user wants the latest docs, do not use 2024 in the search query. Use 2025.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "minLength": 2,
                "description": "The search query to use"
              },
              "allowed_domains": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Only include search results from these domains"
              },
              "blocked_domains": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Never include search results from these domains"
              }
            },
            "required": [
              "query"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        }
      ],
      "responseStructure": {
        "type": "object",
        "keys": [
          "id",
          "object",
          "created",
          "model",
          "choices",
          "usage",
          "stats",
          "system_fingerprint"
        ],
        "hasChoices": true,
        "hasContent": false,
        "hasUsage": true,
        "choicesCount": 1,
        "firstChoice": {
          "hasMessage": true,
          "hasToolCalls": false,
          "finishReason": "stop"
        }
      },
      "parsingAttempts": [
        "json_format",
        "function_call",
        "action_format",
        "natural_language"
      ]
    }
  },
  {
    "timestamp": "2025-08-10T08:32:35.485Z",
    "requestId": "session_1754814714758_bhymaxeqs:conv_1754814714758_pvlsj74x1:14:1754814752071:i3f6",
    "provider": "lmstudio",
    "model": "gpt-oss-20b-mlx",
    "endpoint": "localhost:1234",
    "failureType": "text_instead_of_tools",
    "originalResponse": {
      "id": "chatcmpl-y5w7ujxpqxrpem9sx7lrzj",
      "object": "chat.completion",
      "created": 1754814752,
      "model": "gpt-oss-20b-mlx",
      "choices": [
        {
          "index": 0,
          "logprobs": null,
          "finish_reason": "stop",
          "message": {
            "role": "assistant",
            "content": "The user says: \"执行复杂的shell命令组合\" which means \"Execute complex shell command combinations\". They want us to run a complex shell command. We need to ask for details? The user didn't specify what command. Maybe they want us to demonstrate executing a complex shell command combination. We can ask for specifics or provide an example? The instruction: \"You are ChatGPT...\". There's no explicit request for a particular command. We could ask clarifying question: \"Could you specify the commands or what you want to achieve?\" Or we could provide a generic example of combining commands. But the user explicitly says \"执行复杂的shell命令组合\" which is a request to execute. We need to ask for details or we can provide an example.\n\nGiven the policy: we should not run arbitrary commands without user specifying. We could ask for clarification. So respond asking what they want to do.\n\nThus: \"请告诉我您想执行哪些命令，或者描述一下你想实现的目标，我可以帮你组合成一个复杂的shell命令。\"请告诉我您想执行哪些具体操作，或者描述一下您想实现的目标（例如：查找文件、过滤日志、备份数据等）。我可以帮您把这些步骤组合成一个完整的复杂 shell ... [truncated]"
          }
        }
      ],
      "usage": {
        "prompt_tokens": 414,
        "completion_tokens": 266,
        "total_tokens": 680
      },
      "stats": {},
      "system_fingerprint": "gpt-oss-20b-mlx"
    },
    "expectedFormat": "openai",
    "errorMessage": "All parsing strategies failed",
    "responseAnalysis": {
      "hasToolCalls": false,
      "hasContent": true,
      "contentLength": 1003,
      "contentPreview": "The user says: \"执行复杂的shell命令组合\" which means \"Execute complex shell command combinations\". They want us to run a complex shell command. We need to ask for details? The user didn't specify what command.",
      "finishReason": "stop",
      "toolCallPatterns": []
    },
    "debugInfo": {
      "requestTools": [
        {
          "name": "bash",
          "description": "Execute shell commands",
          "input_schema": {
            "type": "object",
            "properties": {
              "command": {
                "type": "string",
                "description": "Shell command to execute"
              },
              "description": {
                "type": "string",
                "description": "Description of what the command does"
              }
            },
            "required": [
              "command"
            ]
          }
        },
        {
          "name": "grep",
          "description": "Search for patterns in files using ripgrep",
          "input_schema": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "The regex pattern to search for"
              },
              "path": {
                "type": "string",
                "description": "Directory or file to search in"
              },
              "glob": {
                "type": "string",
                "description": "File pattern to match (e.g., '*.ts')"
              },
              "output_mode": {
                "type": "string",
                "description": "Output mode: content/files_with_matches/count"
              },
              "-i": {
                "type": "boolean",
                "description": "Case insensitive search"
              },
              "-C": {
                "type": "number",
                "description": "Lines of context to show"
              },
              "-n": {
                "type": "boolean",
                "description": "Show line numbers"
              }
            },
            "required": [
              "pattern"
            ]
          }
        },
        {
          "name": "read",
          "description": "Read file contents from the filesystem",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "Absolute path to the file to read"
              },
              "limit": {
                "type": "number",
                "description": "Number of lines to read"
              },
              "offset": {
                "type": "number",
                "description": "Starting line number"
              }
            },
            "required": [
              "file_path"
            ]
          }
        },
        {
          "name": "ls",
          "description": "List directory contents",
          "input_schema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "Directory path to list (must be absolute)"
              },
              "ignore": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Glob patterns to ignore"
              }
            },
            "required": [
              "path"
            ]
          }
        },
        {
          "name": "write",
          "description": "Write content to a file",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "Absolute path to write the file"
              },
              "content": {
                "type": "string",
                "description": "Content to write to the file"
              }
            },
            "required": [
              "file_path",
              "content"
            ]
          }
        },
        {
          "name": "edit",
          "description": "Edit existing files with string replacement",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "Absolute path to the file to edit"
              },
              "old_string": {
                "type": "string",
                "description": "String to replace"
              },
              "new_string": {
                "type": "string",
                "description": "Replacement string"
              },
              "replace_all": {
                "type": "boolean",
                "description": "Replace all occurrences"
              }
            },
            "required": [
              "file_path",
              "old_string",
              "new_string"
            ]
          }
        }
      ],
      "responseStructure": {
        "type": "object",
        "keys": [
          "id",
          "object",
          "created",
          "model",
          "choices",
          "usage",
          "stats",
          "system_fingerprint"
        ],
        "hasChoices": true,
        "hasContent": false,
        "hasUsage": true,
        "choicesCount": 1,
        "firstChoice": {
          "hasMessage": true,
          "hasToolCalls": false,
          "finishReason": "stop"
        }
      },
      "parsingAttempts": [
        "json_format",
        "function_call",
        "action_format",
        "natural_language"
      ]
    }
  },
  {
    "timestamp": "2025-08-10T08:32:31.053Z",
    "requestId": "session_1754814714758_bhymaxeqs:conv_1754814714758_pvlsj74x1:13:1754814749050:t02y",
    "provider": "lmstudio",
    "model": "gpt-oss-20b-mlx",
    "endpoint": "localhost:1234",
    "failureType": "text_instead_of_tools",
    "originalResponse": {
      "id": "chatcmpl-otxuctx2s251lhk2u8qv5",
      "object": "chat.completion",
      "created": 1754814749,
      "model": "gpt-oss-20b-mlx",
      "choices": [
        {
          "index": 0,
          "logprobs": null,
          "finish_reason": "stop",
          "message": {
            "role": "assistant",
            "content": "We need to modify existing file content. But we don't know which file. The user says \"修改现有文件的内容\" (modify existing file content). We need to ask for details: which file, what changes. Probably we should respond asking clarifying question.好的，请告诉我：\n\n1. 需要修改的文件路径（相对或绝对路径）  \n2. 想要做哪些具体修改（例如替换某段文字、插入内容、删除行等）  \n3. 如果是替换，请提供旧字符串和新字符串；如果是插入或删除，请说明位置（行号、关键字等）\n\n有了这些信息，我就能帮你完成修改。"
          }
        }
      ],
      "usage": {
        "prompt_tokens": 413,
        "completion_tokens": 144,
        "total_tokens": 557
      },
      "stats": {},
      "system_fingerprint": "gpt-oss-20b-mlx"
    },
    "expectedFormat": "openai",
    "errorMessage": "All parsing strategies failed",
    "responseAnalysis": {
      "hasToolCalls": false,
      "hasContent": true,
      "contentLength": 370,
      "contentPreview": "We need to modify existing file content. But we don't know which file. The user says \"修改现有文件的内容\" (modify existing file content). We need to ask for details: which file, what changes. Probably we shoul",
      "finishReason": "stop",
      "toolCallPatterns": []
    },
    "debugInfo": {
      "requestTools": [
        {
          "name": "bash",
          "description": "Execute shell commands",
          "input_schema": {
            "type": "object",
            "properties": {
              "command": {
                "type": "string",
                "description": "Shell command to execute"
              },
              "description": {
                "type": "string",
                "description": "Description of what the command does"
              }
            },
            "required": [
              "command"
            ]
          }
        },
        {
          "name": "grep",
          "description": "Search for patterns in files using ripgrep",
          "input_schema": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "The regex pattern to search for"
              },
              "path": {
                "type": "string",
                "description": "Directory or file to search in"
              },
              "glob": {
                "type": "string",
                "description": "File pattern to match (e.g., '*.ts')"
              },
              "output_mode": {
                "type": "string",
                "description": "Output mode: content/files_with_matches/count"
              },
              "-i": {
                "type": "boolean",
                "description": "Case insensitive search"
              },
              "-C": {
                "type": "number",
                "description": "Lines of context to show"
              },
              "-n": {
                "type": "boolean",
                "description": "Show line numbers"
              }
            },
            "required": [
              "pattern"
            ]
          }
        },
        {
          "name": "read",
          "description": "Read file contents from the filesystem",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "Absolute path to the file to read"
              },
              "limit": {
                "type": "number",
                "description": "Number of lines to read"
              },
              "offset": {
                "type": "number",
                "description": "Starting line number"
              }
            },
            "required": [
              "file_path"
            ]
          }
        },
        {
          "name": "ls",
          "description": "List directory contents",
          "input_schema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "Directory path to list (must be absolute)"
              },
              "ignore": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Glob patterns to ignore"
              }
            },
            "required": [
              "path"
            ]
          }
        },
        {
          "name": "write",
          "description": "Write content to a file",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "Absolute path to write the file"
              },
              "content": {
                "type": "string",
                "description": "Content to write to the file"
              }
            },
            "required": [
              "file_path",
              "content"
            ]
          }
        },
        {
          "name": "edit",
          "description": "Edit existing files with string replacement",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "Absolute path to the file to edit"
              },
              "old_string": {
                "type": "string",
                "description": "String to replace"
              },
              "new_string": {
                "type": "string",
                "description": "Replacement string"
              },
              "replace_all": {
                "type": "boolean",
                "description": "Replace all occurrences"
              }
            },
            "required": [
              "file_path",
              "old_string",
              "new_string"
            ]
          }
        }
      ],
      "responseStructure": {
        "type": "object",
        "keys": [
          "id",
          "object",
          "created",
          "model",
          "choices",
          "usage",
          "stats",
          "system_fingerprint"
        ],
        "hasChoices": true,
        "hasContent": false,
        "hasUsage": true,
        "choicesCount": 1,
        "firstChoice": {
          "hasMessage": true,
          "hasToolCalls": false,
          "finishReason": "stop"
        }
      },
      "parsingAttempts": [
        "json_format",
        "function_call",
        "action_format",
        "natural_language"
      ]
    }
  },
  {
    "timestamp": "2025-08-10T08:32:25.982Z",
    "requestId": "session_1754814714758_bhymaxeqs:conv_1754814714758_pvlsj74x1:11:1754814744330:mxfk",
    "provider": "lmstudio",
    "model": "gpt-oss-20b-mlx",
    "endpoint": "localhost:1234",
    "failureType": "text_instead_of_tools",
    "originalResponse": {
      "id": "chatcmpl-t31ad2zktyn8i4zz6rch6r",
      "object": "chat.completion",
      "created": 1754814744,
      "model": "gpt-oss-20b-mlx",
      "choices": [
        {
          "index": 0,
          "logprobs": null,
          "finish_reason": "stop",
          "message": {
            "role": "assistant",
            "content": "We need to read a config file. But we don't know which file. The user says \"查看配置文件的内容\" meaning \"view the configuration file content\". We need to ask which config file? Or maybe we should list config files. The user didn't specify path. We can ask for clarification.请问您想查看哪一个配置文件？  \n- 例如 `/etc/nginx/nginx.conf`、`.env`、`config.yaml` 等  \n- 或者您可以提供文件的完整路径，我会帮您读取并展示内容。"
          }
        }
      ],
      "usage": {
        "prompt_tokens": 412,
        "completion_tokens": 112,
        "total_tokens": 524
      },
      "stats": {},
      "system_fingerprint": "gpt-oss-20b-mlx"
    },
    "expectedFormat": "openai",
    "errorMessage": "All parsing strategies failed",
    "responseAnalysis": {
      "hasToolCalls": false,
      "hasContent": true,
      "contentLength": 365,
      "contentPreview": "We need to read a config file. But we don't know which file. The user says \"查看配置文件的内容\" meaning \"view the configuration file content\". We need to ask which config file? Or maybe we should list config f",
      "finishReason": "stop",
      "toolCallPatterns": []
    },
    "debugInfo": {
      "requestTools": [
        {
          "name": "bash",
          "description": "Execute shell commands",
          "input_schema": {
            "type": "object",
            "properties": {
              "command": {
                "type": "string",
                "description": "Shell command to execute"
              },
              "description": {
                "type": "string",
                "description": "Description of what the command does"
              }
            },
            "required": [
              "command"
            ]
          }
        },
        {
          "name": "grep",
          "description": "Search for patterns in files using ripgrep",
          "input_schema": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "The regex pattern to search for"
              },
              "path": {
                "type": "string",
                "description": "Directory or file to search in"
              },
              "glob": {
                "type": "string",
                "description": "File pattern to match (e.g., '*.ts')"
              },
              "output_mode": {
                "type": "string",
                "description": "Output mode: content/files_with_matches/count"
              },
              "-i": {
                "type": "boolean",
                "description": "Case insensitive search"
              },
              "-C": {
                "type": "number",
                "description": "Lines of context to show"
              },
              "-n": {
                "type": "boolean",
                "description": "Show line numbers"
              }
            },
            "required": [
              "pattern"
            ]
          }
        },
        {
          "name": "read",
          "description": "Read file contents from the filesystem",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "Absolute path to the file to read"
              },
              "limit": {
                "type": "number",
                "description": "Number of lines to read"
              },
              "offset": {
                "type": "number",
                "description": "Starting line number"
              }
            },
            "required": [
              "file_path"
            ]
          }
        },
        {
          "name": "ls",
          "description": "List directory contents",
          "input_schema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "Directory path to list (must be absolute)"
              },
              "ignore": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Glob patterns to ignore"
              }
            },
            "required": [
              "path"
            ]
          }
        },
        {
          "name": "write",
          "description": "Write content to a file",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "Absolute path to write the file"
              },
              "content": {
                "type": "string",
                "description": "Content to write to the file"
              }
            },
            "required": [
              "file_path",
              "content"
            ]
          }
        },
        {
          "name": "edit",
          "description": "Edit existing files with string replacement",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "Absolute path to the file to edit"
              },
              "old_string": {
                "type": "string",
                "description": "String to replace"
              },
              "new_string": {
                "type": "string",
                "description": "Replacement string"
              },
              "replace_all": {
                "type": "boolean",
                "description": "Replace all occurrences"
              }
            },
            "required": [
              "file_path",
              "old_string",
              "new_string"
            ]
          }
        }
      ],
      "responseStructure": {
        "type": "object",
        "keys": [
          "id",
          "object",
          "created",
          "model",
          "choices",
          "usage",
          "stats",
          "system_fingerprint"
        ],
        "hasChoices": true,
        "hasContent": false,
        "hasUsage": true,
        "choicesCount": 1,
        "firstChoice": {
          "hasMessage": true,
          "hasToolCalls": false,
          "finishReason": "stop"
        }
      },
      "parsingAttempts": [
        "json_format",
        "function_call",
        "action_format",
        "natural_language"
      ]
    }
  },
  {
    "timestamp": "2025-08-10T08:32:10.487Z",
    "requestId": "session_1754814714758_bhymaxeqs:conv_1754814714758_pvlsj74x1:5:1754814727201:5o4h",
    "provider": "lmstudio",
    "model": "gpt-oss-20b-mlx",
    "endpoint": "localhost:1234",
    "failureType": "text_instead_of_tools",
    "originalResponse": {
      "id": "chatcmpl-2xopqb3qqpp098izm8ia7k",
      "object": "chat.completion",
      "created": 1754814727,
      "model": "gpt-oss-20b-mlx",
      "choices": [
        {
          "index": 0,
          "logprobs": null,
          "finish_reason": "stop",
          "message": {
            "role": "assistant",
            "content": "The user says: \"忽略大小写搜索'ERROR'在日志文件中\" which means \"Search for 'ERROR' in the log file ignoring case\". We need to use grep tool. Need to specify path? The user didn't give a file path. Maybe we assume current directory or typical log file like /var/log/syslog? We can ask for clarification. But maybe we should assume a generic path like \"./*.log\". Use ripgrep with -i and pattern 'ERROR'. Provide command. Let's ask for path? The instruction: \"You are ChatGPT...\". We can respond with a command. Probably we should ask for the log file path. But maybe they want to run grep on all logs in current directory ignoring case. Let's ask for clarification: \"Which log file or directory should I search?\"请问您想在哪个日志文件或目录中搜索 `ERROR`？  \n- 如果是当前工作目录下的所有 `.log` 文件，可以使用：\n\n```bash\nrg -i 'ERROR' --glob '*.log'\n```\n\n- 如果是特定文件，例如 `/var/log/syslog`，请告诉我完整路径。  \n- 如果想搜索整个系统的日志目录（如 `/var/log`），也请告知。"
          }
        }
      ],
      "usage": {
        "prompt_tokens": 419,
        "completion_tokens": 255,
        "total_tokens": 674
      },
      "stats": {},
      "system_fingerprint": "gpt-oss-20b-mlx"
    },
    "expectedFormat": "openai",
    "errorMessage": "All parsing strategies failed",
    "responseAnalysis": {
      "hasToolCalls": false,
      "hasContent": true,
      "contentLength": 880,
      "contentPreview": "The user says: \"忽略大小写搜索'ERROR'在日志文件中\" which means \"Search for 'ERROR' in the log file ignoring case\". We need to use grep tool. Need to specify path? The user didn't give a file path. Maybe we assume ",
      "finishReason": "stop",
      "toolCallPatterns": []
    },
    "debugInfo": {
      "requestTools": [
        {
          "name": "bash",
          "description": "Execute shell commands",
          "input_schema": {
            "type": "object",
            "properties": {
              "command": {
                "type": "string",
                "description": "Shell command to execute"
              },
              "description": {
                "type": "string",
                "description": "Description of what the command does"
              }
            },
            "required": [
              "command"
            ]
          }
        },
        {
          "name": "grep",
          "description": "Search for patterns in files using ripgrep",
          "input_schema": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "The regex pattern to search for"
              },
              "path": {
                "type": "string",
                "description": "Directory or file to search in"
              },
              "glob": {
                "type": "string",
                "description": "File pattern to match (e.g., '*.ts')"
              },
              "output_mode": {
                "type": "string",
                "description": "Output mode: content/files_with_matches/count"
              },
              "-i": {
                "type": "boolean",
                "description": "Case insensitive search"
              },
              "-C": {
                "type": "number",
                "description": "Lines of context to show"
              },
              "-n": {
                "type": "boolean",
                "description": "Show line numbers"
              }
            },
            "required": [
              "pattern"
            ]
          }
        },
        {
          "name": "read",
          "description": "Read file contents from the filesystem",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "Absolute path to the file to read"
              },
              "limit": {
                "type": "number",
                "description": "Number of lines to read"
              },
              "offset": {
                "type": "number",
                "description": "Starting line number"
              }
            },
            "required": [
              "file_path"
            ]
          }
        },
        {
          "name": "ls",
          "description": "List directory contents",
          "input_schema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "Directory path to list (must be absolute)"
              },
              "ignore": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Glob patterns to ignore"
              }
            },
            "required": [
              "path"
            ]
          }
        },
        {
          "name": "write",
          "description": "Write content to a file",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "Absolute path to write the file"
              },
              "content": {
                "type": "string",
                "description": "Content to write to the file"
              }
            },
            "required": [
              "file_path",
              "content"
            ]
          }
        },
        {
          "name": "edit",
          "description": "Edit existing files with string replacement",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "Absolute path to the file to edit"
              },
              "old_string": {
                "type": "string",
                "description": "String to replace"
              },
              "new_string": {
                "type": "string",
                "description": "Replacement string"
              },
              "replace_all": {
                "type": "boolean",
                "description": "Replace all occurrences"
              }
            },
            "required": [
              "file_path",
              "old_string",
              "new_string"
            ]
          }
        }
      ],
      "responseStructure": {
        "type": "object",
        "keys": [
          "id",
          "object",
          "created",
          "model",
          "choices",
          "usage",
          "stats",
          "system_fingerprint"
        ],
        "hasChoices": true,
        "hasContent": false,
        "hasUsage": true,
        "choicesCount": 1,
        "firstChoice": {
          "hasMessage": true,
          "hasToolCalls": false,
          "finishReason": "stop"
        }
      },
      "parsingAttempts": [
        "json_format",
        "function_call",
        "action_format",
        "natural_language"
      ]
    }
  },
  {
    "timestamp": "2025-08-10T08:32:03.299Z",
    "requestId": "session_1754814714758_bhymaxeqs:conv_1754814714758_pvlsj74x1:3:1754814719379:ipd5",
    "provider": "lmstudio",
    "model": "gpt-oss-20b-mlx",
    "endpoint": "localhost:1234",
    "failureType": "text_instead_of_tools",
    "originalResponse": {
      "id": "chatcmpl-x3spazl311a95ibkd77z7",
      "object": "chat.completion",
      "created": 1754814719,
      "model": "gpt-oss-20b-mlx",
      "choices": [
        {
          "index": 0,
          "logprobs": null,
          "finish_reason": "stop",
          "message": {
            "role": "assistant",
            "content": "The user says: \"使用grep搜索包含'character'的行\" which means \"Use grep to search for lines containing 'character'\". They likely want a command. We can provide the grep command: `grep -n 'character' filename`. But maybe they want to search in current directory? We can give a command: `grep -rn 'character' .` or something. Provide explanation.要在当前目录（及其子目录）中搜索所有文件里包含 **`character`** 的行，可以使用 `grep` 的递归选项：\n\n```bash\n# 在当前目录及子目录中搜索，显示行号和文件名\ngrep -rn 'character' .\n```\n\n- `-r` 或 `--recursive`：递归搜索子目录  \n- `-n` 或 `--line-number`：在输出中显示匹配行的行号  \n- `.` 表示从当前目录开始搜索；如果你想指定某个文件或路径，只需把 `.` 换成对应的文件/目录即可。\n\n如果你只想在单个文件里搜索，例如 `example.txt`，可以这样：\n\n```bash\ngrep -n 'character' example.txt\n```\n\n如果你想忽略大小写（即匹配 `Character`、`CHARACTER` 等），可以加上 `-i`：\n\n```bash\ngrep -rni 'character' .\n```\n\n这样就能快速定位所有包含 `character` 的行。"
          }
        }
      ],
      "usage": {
        "prompt_tokens": 416,
        "completion_tokens": 307,
        "total_tokens": 723
      },
      "stats": {},
      "system_fingerprint": "gpt-oss-20b-mlx"
    },
    "expectedFormat": "openai",
    "errorMessage": "All parsing strategies failed",
    "responseAnalysis": {
      "hasToolCalls": false,
      "hasContent": true,
      "contentLength": 787,
      "contentPreview": "The user says: \"使用grep搜索包含'character'的行\" which means \"Use grep to search for lines containing 'character'\". They likely want a command. We can provide the grep command: `grep -n 'character' filename`.",
      "finishReason": "stop",
      "toolCallPatterns": []
    },
    "debugInfo": {
      "requestTools": [
        {
          "name": "bash",
          "description": "Execute shell commands",
          "input_schema": {
            "type": "object",
            "properties": {
              "command": {
                "type": "string",
                "description": "Shell command to execute"
              },
              "description": {
                "type": "string",
                "description": "Description of what the command does"
              }
            },
            "required": [
              "command"
            ]
          }
        },
        {
          "name": "grep",
          "description": "Search for patterns in files using ripgrep",
          "input_schema": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "The regex pattern to search for"
              },
              "path": {
                "type": "string",
                "description": "Directory or file to search in"
              },
              "glob": {
                "type": "string",
                "description": "File pattern to match (e.g., '*.ts')"
              },
              "output_mode": {
                "type": "string",
                "description": "Output mode: content/files_with_matches/count"
              },
              "-i": {
                "type": "boolean",
                "description": "Case insensitive search"
              },
              "-C": {
                "type": "number",
                "description": "Lines of context to show"
              },
              "-n": {
                "type": "boolean",
                "description": "Show line numbers"
              }
            },
            "required": [
              "pattern"
            ]
          }
        },
        {
          "name": "read",
          "description": "Read file contents from the filesystem",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "Absolute path to the file to read"
              },
              "limit": {
                "type": "number",
                "description": "Number of lines to read"
              },
              "offset": {
                "type": "number",
                "description": "Starting line number"
              }
            },
            "required": [
              "file_path"
            ]
          }
        },
        {
          "name": "ls",
          "description": "List directory contents",
          "input_schema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "Directory path to list (must be absolute)"
              },
              "ignore": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Glob patterns to ignore"
              }
            },
            "required": [
              "path"
            ]
          }
        },
        {
          "name": "write",
          "description": "Write content to a file",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "Absolute path to write the file"
              },
              "content": {
                "type": "string",
                "description": "Content to write to the file"
              }
            },
            "required": [
              "file_path",
              "content"
            ]
          }
        },
        {
          "name": "edit",
          "description": "Edit existing files with string replacement",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "Absolute path to the file to edit"
              },
              "old_string": {
                "type": "string",
                "description": "String to replace"
              },
              "new_string": {
                "type": "string",
                "description": "Replacement string"
              },
              "replace_all": {
                "type": "boolean",
                "description": "Replace all occurrences"
              }
            },
            "required": [
              "file_path",
              "old_string",
              "new_string"
            ]
          }
        }
      ],
      "responseStructure": {
        "type": "object",
        "keys": [
          "id",
          "object",
          "created",
          "model",
          "choices",
          "usage",
          "stats",
          "system_fingerprint"
        ],
        "hasChoices": true,
        "hasContent": false,
        "hasUsage": true,
        "choicesCount": 1,
        "firstChoice": {
          "hasMessage": true,
          "hasToolCalls": false,
          "finishReason": "stop"
        }
      },
      "parsingAttempts": [
        "json_format",
        "function_call",
        "action_format",
        "natural_language"
      ]
    }
  },
  {
    "timestamp": "2025-08-10T08:22:07.508Z",
    "requestId": "session_1754814081195_gh1e6cs5l:conv_1754814081195_i6o2sdwdg:14:1754814125491:d0v8",
    "provider": "lmstudio",
    "model": "gpt-oss-20b-mlx",
    "endpoint": "localhost:1234",
    "failureType": "text_instead_of_tools",
    "originalResponse": {
      "id": "chatcmpl-dxtccea8ato0gqvn1yyaq5j",
      "object": "chat.completion",
      "created": 1754814125,
      "model": "gpt-oss-20b-mlx",
      "choices": [
        {
          "index": 0,
          "logprobs": null,
          "finish_reason": "stop",
          "message": {
            "role": "assistant",
            "content": "The user says: \"执行复杂的shell命令组合\" which means \"execute complex shell command combinations\". They want us to run a complex shell command. We need to ask for the specific command or provide an example? The user didn't specify what they want. We can ask clarifying question: \"请提供具体的命令或描述您想执行的操作\" or we can ask for details. According to policy, we should not execute arbitrary commands without user specifying. So we need to ask for clarification.请告诉我您想要执行的具体命令或描述一下需要完成的任务，我才能帮您构造并运行相应的复杂 shell 命令组合。"
          }
        }
      ],
      "usage": {
        "prompt_tokens": 414,
        "completion_tokens": 139,
        "total_tokens": 553
      },
      "stats": {},
      "system_fingerprint": "gpt-oss-20b-mlx"
    },
    "expectedFormat": "openai",
    "errorMessage": "All parsing strategies failed",
    "responseAnalysis": {
      "hasToolCalls": false,
      "hasContent": true,
      "contentLength": 495,
      "contentPreview": "The user says: \"执行复杂的shell命令组合\" which means \"execute complex shell command combinations\". They want us to run a complex shell command. We need to ask for the specific command or provide an example? Th",
      "finishReason": "stop",
      "toolCallPatterns": []
    },
    "debugInfo": {
      "requestTools": [
        {
          "name": "bash",
          "description": "Execute shell commands",
          "input_schema": {
            "type": "object",
            "properties": {
              "command": {
                "type": "string",
                "description": "Shell command to execute"
              },
              "description": {
                "type": "string",
                "description": "Description of what the command does"
              }
            },
            "required": [
              "command"
            ]
          }
        },
        {
          "name": "grep",
          "description": "Search for patterns in files using ripgrep",
          "input_schema": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "The regex pattern to search for"
              },
              "path": {
                "type": "string",
                "description": "Directory or file to search in"
              },
              "glob": {
                "type": "string",
                "description": "File pattern to match (e.g., '*.ts')"
              },
              "output_mode": {
                "type": "string",
                "description": "Output mode: content/files_with_matches/count"
              },
              "-i": {
                "type": "boolean",
                "description": "Case insensitive search"
              },
              "-C": {
                "type": "number",
                "description": "Lines of context to show"
              },
              "-n": {
                "type": "boolean",
                "description": "Show line numbers"
              }
            },
            "required": [
              "pattern"
            ]
          }
        },
        {
          "name": "read",
          "description": "Read file contents from the filesystem",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "Absolute path to the file to read"
              },
              "limit": {
                "type": "number",
                "description": "Number of lines to read"
              },
              "offset": {
                "type": "number",
                "description": "Starting line number"
              }
            },
            "required": [
              "file_path"
            ]
          }
        },
        {
          "name": "ls",
          "description": "List directory contents",
          "input_schema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "Directory path to list (must be absolute)"
              },
              "ignore": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Glob patterns to ignore"
              }
            },
            "required": [
              "path"
            ]
          }
        },
        {
          "name": "write",
          "description": "Write content to a file",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "Absolute path to write the file"
              },
              "content": {
                "type": "string",
                "description": "Content to write to the file"
              }
            },
            "required": [
              "file_path",
              "content"
            ]
          }
        },
        {
          "name": "edit",
          "description": "Edit existing files with string replacement",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "Absolute path to the file to edit"
              },
              "old_string": {
                "type": "string",
                "description": "String to replace"
              },
              "new_string": {
                "type": "string",
                "description": "Replacement string"
              },
              "replace_all": {
                "type": "boolean",
                "description": "Replace all occurrences"
              }
            },
            "required": [
              "file_path",
              "old_string",
              "new_string"
            ]
          }
        }
      ],
      "responseStructure": {
        "type": "object",
        "keys": [
          "id",
          "object",
          "created",
          "model",
          "choices",
          "usage",
          "stats",
          "system_fingerprint"
        ],
        "hasChoices": true,
        "hasContent": false,
        "hasUsage": true,
        "choicesCount": 1,
        "firstChoice": {
          "hasMessage": true,
          "hasToolCalls": false,
          "finishReason": "stop"
        }
      },
      "parsingAttempts": [
        "json_format",
        "function_call",
        "action_format",
        "natural_language"
      ]
    }
  },
  {
    "timestamp": "2025-08-10T08:22:04.477Z",
    "requestId": "session_1754814081195_gh1e6cs5l:conv_1754814081195_i6o2sdwdg:13:1754814122957:as32",
    "provider": "lmstudio",
    "model": "gpt-oss-20b-mlx",
    "endpoint": "localhost:1234",
    "failureType": "text_instead_of_tools",
    "originalResponse": {
      "id": "chatcmpl-xnjol05z8thola1q5koh8a",
      "object": "chat.completion",
      "created": 1754814122,
      "model": "gpt-oss-20b-mlx",
      "choices": [
        {
          "index": 0,
          "logprobs": null,
          "finish_reason": "stop",
          "message": {
            "role": "assistant",
            "content": "The user says: \"修改现有文件的内容\" which means \"Modify existing file content\". They didn't specify which file or what changes. We need to ask clarifying question: Which file and what modifications?请告诉我：\n\n1. 需要修改的文件路径（相对或绝对路径）。  \n2. 想要进行哪些具体修改（例如替换文本、插入内容、删除行等）。  \n\n有了这些信息，我就能帮你完成修改。"
          }
        }
      ],
      "usage": {
        "prompt_tokens": 413,
        "completion_tokens": 99,
        "total_tokens": 512
      },
      "stats": {},
      "system_fingerprint": "gpt-oss-20b-mlx"
    },
    "expectedFormat": "openai",
    "errorMessage": "All parsing strategies failed",
    "responseAnalysis": {
      "hasToolCalls": false,
      "hasContent": true,
      "contentLength": 274,
      "contentPreview": "The user says: \"修改现有文件的内容\" which means \"Modify existing file content\". They didn't specify which file or what changes. We need to ask clarifying question: Which file and what modifications?请告诉我：\n\n1. 需",
      "finishReason": "stop",
      "toolCallPatterns": []
    },
    "debugInfo": {
      "requestTools": [
        {
          "name": "bash",
          "description": "Execute shell commands",
          "input_schema": {
            "type": "object",
            "properties": {
              "command": {
                "type": "string",
                "description": "Shell command to execute"
              },
              "description": {
                "type": "string",
                "description": "Description of what the command does"
              }
            },
            "required": [
              "command"
            ]
          }
        },
        {
          "name": "grep",
          "description": "Search for patterns in files using ripgrep",
          "input_schema": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "The regex pattern to search for"
              },
              "path": {
                "type": "string",
                "description": "Directory or file to search in"
              },
              "glob": {
                "type": "string",
                "description": "File pattern to match (e.g., '*.ts')"
              },
              "output_mode": {
                "type": "string",
                "description": "Output mode: content/files_with_matches/count"
              },
              "-i": {
                "type": "boolean",
                "description": "Case insensitive search"
              },
              "-C": {
                "type": "number",
                "description": "Lines of context to show"
              },
              "-n": {
                "type": "boolean",
                "description": "Show line numbers"
              }
            },
            "required": [
              "pattern"
            ]
          }
        },
        {
          "name": "read",
          "description": "Read file contents from the filesystem",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "Absolute path to the file to read"
              },
              "limit": {
                "type": "number",
                "description": "Number of lines to read"
              },
              "offset": {
                "type": "number",
                "description": "Starting line number"
              }
            },
            "required": [
              "file_path"
            ]
          }
        },
        {
          "name": "ls",
          "description": "List directory contents",
          "input_schema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "Directory path to list (must be absolute)"
              },
              "ignore": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Glob patterns to ignore"
              }
            },
            "required": [
              "path"
            ]
          }
        },
        {
          "name": "write",
          "description": "Write content to a file",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "Absolute path to write the file"
              },
              "content": {
                "type": "string",
                "description": "Content to write to the file"
              }
            },
            "required": [
              "file_path",
              "content"
            ]
          }
        },
        {
          "name": "edit",
          "description": "Edit existing files with string replacement",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "Absolute path to the file to edit"
              },
              "old_string": {
                "type": "string",
                "description": "String to replace"
              },
              "new_string": {
                "type": "string",
                "description": "Replacement string"
              },
              "replace_all": {
                "type": "boolean",
                "description": "Replace all occurrences"
              }
            },
            "required": [
              "file_path",
              "old_string",
              "new_string"
            ]
          }
        }
      ],
      "responseStructure": {
        "type": "object",
        "keys": [
          "id",
          "object",
          "created",
          "model",
          "choices",
          "usage",
          "stats",
          "system_fingerprint"
        ],
        "hasChoices": true,
        "hasContent": false,
        "hasUsage": true,
        "choicesCount": 1,
        "firstChoice": {
          "hasMessage": true,
          "hasToolCalls": false,
          "finishReason": "stop"
        }
      },
      "parsingAttempts": [
        "json_format",
        "function_call",
        "action_format",
        "natural_language"
      ]
    }
  },
  {
    "timestamp": "2025-08-10T08:21:59.860Z",
    "requestId": "session_1754814081195_gh1e6cs5l:conv_1754814081195_i6o2sdwdg:11:1754814118236:m3el",
    "provider": "lmstudio",
    "model": "gpt-oss-20b-mlx",
    "endpoint": "localhost:1234",
    "failureType": "text_instead_of_tools",
    "originalResponse": {
      "id": "chatcmpl-jxmzgchzmmq5h2gxjv2x",
      "object": "chat.completion",
      "created": 1754814118,
      "model": "gpt-oss-20b-mlx",
      "choices": [
        {
          "index": 0,
          "logprobs": null,
          "finish_reason": "stop",
          "message": {
            "role": "assistant",
            "content": "We need to read a config file. But we don't know which file. The user says \"查看配置文件的内容\" (view config file content). We need to ask which config file? Or maybe we assume a typical config file path like /etc/config or something. We should ask for clarification.请问您想查看哪一个配置文件？可以告诉我完整路径（例如 `/etc/nginx/nginx.conf` 或 `./config.yaml`），或者给出文件名，我会帮您读取并展示内容。"
          }
        }
      ],
      "usage": {
        "prompt_tokens": 412,
        "completion_tokens": 106,
        "total_tokens": 518
      },
      "stats": {},
      "system_fingerprint": "gpt-oss-20b-mlx"
    },
    "expectedFormat": "openai",
    "errorMessage": "All parsing strategies failed",
    "responseAnalysis": {
      "hasToolCalls": false,
      "hasContent": true,
      "contentLength": 348,
      "contentPreview": "We need to read a config file. But we don't know which file. The user says \"查看配置文件的内容\" (view config file content). We need to ask which config file? Or maybe we assume a typical config file path like ",
      "finishReason": "stop",
      "toolCallPatterns": []
    },
    "debugInfo": {
      "requestTools": [
        {
          "name": "bash",
          "description": "Execute shell commands",
          "input_schema": {
            "type": "object",
            "properties": {
              "command": {
                "type": "string",
                "description": "Shell command to execute"
              },
              "description": {
                "type": "string",
                "description": "Description of what the command does"
              }
            },
            "required": [
              "command"
            ]
          }
        },
        {
          "name": "grep",
          "description": "Search for patterns in files using ripgrep",
          "input_schema": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "The regex pattern to search for"
              },
              "path": {
                "type": "string",
                "description": "Directory or file to search in"
              },
              "glob": {
                "type": "string",
                "description": "File pattern to match (e.g., '*.ts')"
              },
              "output_mode": {
                "type": "string",
                "description": "Output mode: content/files_with_matches/count"
              },
              "-i": {
                "type": "boolean",
                "description": "Case insensitive search"
              },
              "-C": {
                "type": "number",
                "description": "Lines of context to show"
              },
              "-n": {
                "type": "boolean",
                "description": "Show line numbers"
              }
            },
            "required": [
              "pattern"
            ]
          }
        },
        {
          "name": "read",
          "description": "Read file contents from the filesystem",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "Absolute path to the file to read"
              },
              "limit": {
                "type": "number",
                "description": "Number of lines to read"
              },
              "offset": {
                "type": "number",
                "description": "Starting line number"
              }
            },
            "required": [
              "file_path"
            ]
          }
        },
        {
          "name": "ls",
          "description": "List directory contents",
          "input_schema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "Directory path to list (must be absolute)"
              },
              "ignore": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Glob patterns to ignore"
              }
            },
            "required": [
              "path"
            ]
          }
        },
        {
          "name": "write",
          "description": "Write content to a file",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "Absolute path to write the file"
              },
              "content": {
                "type": "string",
                "description": "Content to write to the file"
              }
            },
            "required": [
              "file_path",
              "content"
            ]
          }
        },
        {
          "name": "edit",
          "description": "Edit existing files with string replacement",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "Absolute path to the file to edit"
              },
              "old_string": {
                "type": "string",
                "description": "String to replace"
              },
              "new_string": {
                "type": "string",
                "description": "Replacement string"
              },
              "replace_all": {
                "type": "boolean",
                "description": "Replace all occurrences"
              }
            },
            "required": [
              "file_path",
              "old_string",
              "new_string"
            ]
          }
        }
      ],
      "responseStructure": {
        "type": "object",
        "keys": [
          "id",
          "object",
          "created",
          "model",
          "choices",
          "usage",
          "stats",
          "system_fingerprint"
        ],
        "hasChoices": true,
        "hasContent": false,
        "hasUsage": true,
        "choicesCount": 1,
        "firstChoice": {
          "hasMessage": true,
          "hasToolCalls": false,
          "finishReason": "stop"
        }
      },
      "parsingAttempts": [
        "json_format",
        "function_call",
        "action_format",
        "natural_language"
      ]
    }
  },
  {
    "timestamp": "2025-08-10T08:21:56.720Z",
    "requestId": "session_1754814081195_gh1e6cs5l:conv_1754814081195_i6o2sdwdg:10:1754814106520:94rc",
    "provider": "lmstudio",
    "model": "gpt-oss-20b-mlx",
    "endpoint": "localhost:1234",
    "failureType": "text_instead_of_tools",
    "originalResponse": {
      "id": "chatcmpl-ihltl0qndgs92cae56t38h",
      "object": "chat.completion",
      "created": 1754814106,
      "model": "gpt-oss-20b-mlx",
      "choices": [
        {
          "index": 0,
          "logprobs": null,
          "finish_reason": "stop",
          "message": {
            "role": "assistant",
            "content": "The user says: \"查找包含错误信息的日志行\" which means \"Find log lines containing error messages\". We need to search logs for error. But we don't know which file. Likely they want a command or script to find lines containing \"error\" in logs. We can provide a grep command: `grep -i 'error' /var/log/*.log` or similar. Or use ripgrep: `rg -i 'error' /path/to/logs`. Provide instructions. Also maybe ask for log directory? But we can give generic solution.\n\nWe should respond in Chinese, as user wrote Chinese. Provide explanation and command. Also mention using `grep -i` or `rg`. Provide example.\n\nWe can also show how to use the provided tools: e.g., call grep function. But we don't know path. We can ask for log directory or assume typical /var/log.\n\nWe should respond with a helpful answer.下面给你几种常见的做法，任选其一即可快速定位日志中包含错误信息（`error`、`Error`、`ERR` 等）的行。\n\n---\n\n## 1. 使用 `grep`\n\n```bash\n# 在 /var/log/ 下搜索所有 *.log 文件，忽略大小写\ngrep -iR --line-number 'error' /var/log/*.log\n\n# 如果你想把结果写到文件\ngrep -iR --line-number 'error' /... [truncated]"
          }
        }
      ],
      "usage": {
        "prompt_tokens": 415,
        "completion_tokens": 839,
        "total_tokens": 1254
      },
      "stats": {},
      "system_fingerprint": "gpt-oss-20b-mlx"
    },
    "expectedFormat": "openai",
    "errorMessage": "All parsing strategies failed",
    "responseAnalysis": {
      "hasToolCalls": false,
      "hasContent": true,
      "contentLength": 2179,
      "contentPreview": "The user says: \"查找包含错误信息的日志行\" which means \"Find log lines containing error messages\". We need to search logs for error. But we don't know which file. Likely they want a command or script to find lines",
      "finishReason": "stop",
      "toolCallPatterns": []
    },
    "debugInfo": {
      "requestTools": [
        {
          "name": "bash",
          "description": "Execute shell commands",
          "input_schema": {
            "type": "object",
            "properties": {
              "command": {
                "type": "string",
                "description": "Shell command to execute"
              },
              "description": {
                "type": "string",
                "description": "Description of what the command does"
              }
            },
            "required": [
              "command"
            ]
          }
        },
        {
          "name": "grep",
          "description": "Search for patterns in files using ripgrep",
          "input_schema": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "The regex pattern to search for"
              },
              "path": {
                "type": "string",
                "description": "Directory or file to search in"
              },
              "glob": {
                "type": "string",
                "description": "File pattern to match (e.g., '*.ts')"
              },
              "output_mode": {
                "type": "string",
                "description": "Output mode: content/files_with_matches/count"
              },
              "-i": {
                "type": "boolean",
                "description": "Case insensitive search"
              },
              "-C": {
                "type": "number",
                "description": "Lines of context to show"
              },
              "-n": {
                "type": "boolean",
                "description": "Show line numbers"
              }
            },
            "required": [
              "pattern"
            ]
          }
        },
        {
          "name": "read",
          "description": "Read file contents from the filesystem",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "Absolute path to the file to read"
              },
              "limit": {
                "type": "number",
                "description": "Number of lines to read"
              },
              "offset": {
                "type": "number",
                "description": "Starting line number"
              }
            },
            "required": [
              "file_path"
            ]
          }
        },
        {
          "name": "ls",
          "description": "List directory contents",
          "input_schema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "Directory path to list (must be absolute)"
              },
              "ignore": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Glob patterns to ignore"
              }
            },
            "required": [
              "path"
            ]
          }
        },
        {
          "name": "write",
          "description": "Write content to a file",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "Absolute path to write the file"
              },
              "content": {
                "type": "string",
                "description": "Content to write to the file"
              }
            },
            "required": [
              "file_path",
              "content"
            ]
          }
        },
        {
          "name": "edit",
          "description": "Edit existing files with string replacement",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "Absolute path to the file to edit"
              },
              "old_string": {
                "type": "string",
                "description": "String to replace"
              },
              "new_string": {
                "type": "string",
                "description": "Replacement string"
              },
              "replace_all": {
                "type": "boolean",
                "description": "Replace all occurrences"
              }
            },
            "required": [
              "file_path",
              "old_string",
              "new_string"
            ]
          }
        }
      ],
      "responseStructure": {
        "type": "object",
        "keys": [
          "id",
          "object",
          "created",
          "model",
          "choices",
          "usage",
          "stats",
          "system_fingerprint"
        ],
        "hasChoices": true,
        "hasContent": false,
        "hasUsage": true,
        "choicesCount": 1,
        "firstChoice": {
          "hasMessage": true,
          "hasToolCalls": false,
          "finishReason": "stop"
        }
      },
      "parsingAttempts": [
        "json_format",
        "function_call",
        "action_format",
        "natural_language"
      ]
    }
  },
  {
    "timestamp": "2025-08-10T08:21:34.726Z",
    "requestId": "session_1754814081195_gh1e6cs5l:conv_1754814081195_i6o2sdwdg:5:1754814092466:olrg",
    "provider": "lmstudio",
    "model": "gpt-oss-20b-mlx",
    "endpoint": "localhost:1234",
    "failureType": "text_instead_of_tools",
    "originalResponse": {
      "id": "chatcmpl-sp4d131s1bej05jspj4o4",
      "object": "chat.completion",
      "created": 1754814092,
      "model": "gpt-oss-20b-mlx",
      "choices": [
        {
          "index": 0,
          "logprobs": null,
          "finish_reason": "stop",
          "message": {
            "role": "assistant",
            "content": "We need to search for pattern 'ERROR' ignoring case in log file. We don't know the path; maybe typical logs like /var/log/syslog or a specific file? The user says \"在日志文件中\" meaning in the log file. We need to ask for path? Or we can assume a typical location like /var/log/syslog or /var/log/messages. But better ask for file path. The user didn't specify. We can respond asking which log file to search.请告诉我你想在哪个日志文件中搜索 `ERROR`？  \n例如：\n\n- `/var/log/syslog`\n- `/var/log/application.log`\n- 任何你自己的日志文件路径\n\n一旦知道了文件路径，我就可以帮你执行不区分大小写的搜索。"
          }
        }
      ],
      "usage": {
        "prompt_tokens": 419,
        "completion_tokens": 158,
        "total_tokens": 577
      },
      "stats": {},
      "system_fingerprint": "gpt-oss-20b-mlx"
    },
    "expectedFormat": "openai",
    "errorMessage": "All parsing strategies failed",
    "responseAnalysis": {
      "hasToolCalls": false,
      "hasContent": true,
      "contentLength": 529,
      "contentPreview": "We need to search for pattern 'ERROR' ignoring case in log file. We don't know the path; maybe typical logs like /var/log/syslog or a specific file? The user says \"在日志文件中\" meaning in the log file. We ",
      "finishReason": "stop",
      "toolCallPatterns": []
    },
    "debugInfo": {
      "requestTools": [
        {
          "name": "bash",
          "description": "Execute shell commands",
          "input_schema": {
            "type": "object",
            "properties": {
              "command": {
                "type": "string",
                "description": "Shell command to execute"
              },
              "description": {
                "type": "string",
                "description": "Description of what the command does"
              }
            },
            "required": [
              "command"
            ]
          }
        },
        {
          "name": "grep",
          "description": "Search for patterns in files using ripgrep",
          "input_schema": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "The regex pattern to search for"
              },
              "path": {
                "type": "string",
                "description": "Directory or file to search in"
              },
              "glob": {
                "type": "string",
                "description": "File pattern to match (e.g., '*.ts')"
              },
              "output_mode": {
                "type": "string",
                "description": "Output mode: content/files_with_matches/count"
              },
              "-i": {
                "type": "boolean",
                "description": "Case insensitive search"
              },
              "-C": {
                "type": "number",
                "description": "Lines of context to show"
              },
              "-n": {
                "type": "boolean",
                "description": "Show line numbers"
              }
            },
            "required": [
              "pattern"
            ]
          }
        },
        {
          "name": "read",
          "description": "Read file contents from the filesystem",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "Absolute path to the file to read"
              },
              "limit": {
                "type": "number",
                "description": "Number of lines to read"
              },
              "offset": {
                "type": "number",
                "description": "Starting line number"
              }
            },
            "required": [
              "file_path"
            ]
          }
        },
        {
          "name": "ls",
          "description": "List directory contents",
          "input_schema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "Directory path to list (must be absolute)"
              },
              "ignore": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Glob patterns to ignore"
              }
            },
            "required": [
              "path"
            ]
          }
        },
        {
          "name": "write",
          "description": "Write content to a file",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "Absolute path to write the file"
              },
              "content": {
                "type": "string",
                "description": "Content to write to the file"
              }
            },
            "required": [
              "file_path",
              "content"
            ]
          }
        },
        {
          "name": "edit",
          "description": "Edit existing files with string replacement",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "Absolute path to the file to edit"
              },
              "old_string": {
                "type": "string",
                "description": "String to replace"
              },
              "new_string": {
                "type": "string",
                "description": "Replacement string"
              },
              "replace_all": {
                "type": "boolean",
                "description": "Replace all occurrences"
              }
            },
            "required": [
              "file_path",
              "old_string",
              "new_string"
            ]
          }
        }
      ],
      "responseStructure": {
        "type": "object",
        "keys": [
          "id",
          "object",
          "created",
          "model",
          "choices",
          "usage",
          "stats",
          "system_fingerprint"
        ],
        "hasChoices": true,
        "hasContent": false,
        "hasUsage": true,
        "choicesCount": 1,
        "firstChoice": {
          "hasMessage": true,
          "hasToolCalls": false,
          "finishReason": "stop"
        }
      },
      "parsingAttempts": [
        "json_format",
        "function_call",
        "action_format",
        "natural_language"
      ]
    }
  },
  {
    "timestamp": "2025-08-10T08:10:33.189Z",
    "requestId": "session_1754813424868_8gsubttqf:conv_1754813424868_0avl0gutr:2:1754813426505:0a6h",
    "provider": "lmstudio",
    "model": "gpt-oss-20b-mlx",
    "endpoint": "localhost:1234",
    "failureType": "text_instead_of_tools",
    "originalResponse": {
      "id": "chatcmpl-lfcbue8qobwg6a56bbda",
      "object": "chat.completion",
      "created": 1754813426,
      "model": "gpt-oss-20b-mlx",
      "choices": [
        {
          "index": 0,
          "logprobs": null,
          "finish_reason": "stop",
          "message": {
            "role": "assistant",
            "content": "The user says: \"使用grep搜索包含'character'的行\" which means \"Use grep to search for lines containing 'character'\". They likely want a command. We can provide the grep command: `grep 'character' filename`. But maybe they want to search in current directory? Provide example. Also mention options like -r for recursive, -n for line numbers. So answer in Chinese.要在文件或目录中搜索包含 **`character`** 的行，可以使用 `grep` 命令。下面给出几种常见的用法示例，您可以根据自己的需求进行调整。\n\n| 场景 | 命令 | 说明 |\n|------|------|------|\n| **单个文件** | `grep 'character' your_file.txt` | 在 `your_file.txt` 中查找包含 `character` 的行。 |\n| **显示行号** | `grep -n 'character' your_file.txt` | 在输出中同时显示行号。 |\n| **忽略大小写** | `grep -i 'character' your_file.txt` | 匹配时不区分大小写（即 `Character`, `CHARACTER` 等也会匹配）。 |\n| **递归搜索目录** | `grep -r 'character' ./` | 在当前目录及其子目录下递归搜索所有文件。 |\n| **仅显示匹配的单词** | `grep -o 'character' your_file.txt` | 只输出匹配到的单词，而不是整行。 |\n| **统计出现次数** | `grep -c 'character' your_file.txt` | 只输出匹配行的数量。 |\n| **结合正则表达式** | `grep -E 'char[a-z]*' your_file.txt` | 使用扩展正则表达式匹配 `ch... [truncated]"
          }
        }
      ],
      "usage": {
        "prompt_tokens": 221,
        "completion_tokens": 537,
        "total_tokens": 758
      },
      "stats": {},
      "system_fingerprint": "gpt-oss-20b-mlx"
    },
    "expectedFormat": "openai",
    "errorMessage": "All parsing strategies failed",
    "responseAnalysis": {
      "hasToolCalls": false,
      "hasContent": true,
      "contentLength": 1288,
      "contentPreview": "The user says: \"使用grep搜索包含'character'的行\" which means \"Use grep to search for lines containing 'character'\". They likely want a command. We can provide the grep command: `grep 'character' filename`. Bu",
      "finishReason": "stop",
      "toolCallPatterns": []
    },
    "debugInfo": {
      "requestTools": [
        {
          "name": "bash",
          "description": "Execute shell commands",
          "input_schema": {
            "type": "object",
            "properties": {
              "command": {
                "type": "string",
                "description": "Shell command to execute"
              }
            },
            "required": [
              "command"
            ]
          }
        },
        {
          "name": "grep",
          "description": "Search for patterns in files",
          "input_schema": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "Pattern to search for"
              },
              "path": {
                "type": "string",
                "description": "Path to search in"
              },
              "output_mode": {
                "type": "string",
                "description": "Output mode"
              }
            },
            "required": [
              "pattern"
            ]
          }
        },
        {
          "name": "read",
          "description": "Read file contents",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "Path to the file to read"
              }
            },
            "required": [
              "file_path"
            ]
          }
        },
        {
          "name": "ls",
          "description": "List directory contents",
          "input_schema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "Directory path to list"
              }
            },
            "required": [
              "path"
            ]
          }
        }
      ],
      "responseStructure": {
        "type": "object",
        "keys": [
          "id",
          "object",
          "created",
          "model",
          "choices",
          "usage",
          "stats",
          "system_fingerprint"
        ],
        "hasChoices": true,
        "hasContent": false,
        "hasUsage": true,
        "choicesCount": 1,
        "firstChoice": {
          "hasMessage": true,
          "hasToolCalls": false,
          "finishReason": "stop"
        }
      },
      "parsingAttempts": [
        "json_format",
        "function_call",
        "action_format",
        "natural_language"
      ]
    }
  },
  {
    "timestamp": "2025-08-10T08:09:52.682Z",
    "requestId": "session_1754813346759_7lwdnj44v:conv_1754813346759_ru7wt0fei:3:1754813370987:tjey",
    "provider": "lmstudio",
    "model": "gpt-oss-20b-mlx",
    "endpoint": "localhost:1234",
    "failureType": "text_instead_of_tools",
    "originalResponse": {
      "id": "chatcmpl-bi8yxxgel5fh5l7feb9t76",
      "object": "chat.completion",
      "created": 1754813370,
      "model": "gpt-oss-20b-mlx",
      "choices": [
        {
          "index": 0,
          "logprobs": null,
          "finish_reason": "stop",
          "message": {
            "role": "assistant",
            "content": "It appears the environment might not provide outputs due to some restriction. Let's try using `glob` with pattern \"**/*.md\" but the earlier call didn't output.\n\nMaybe our tool usage is wrong: The \"path\" may need to be absolute. Usually 'path' argument expects a directory. We can use '.' or '/' but may have errors.\n\nGiven difficulties, I'll ask user: \"请提供项目根目录路径。\"\n\nBut guidelines say we can ask for clarification. So we may respond asking for directory location of novel config files or clarifying what docs missing.\n\nThus answer: We need more info to proceed.我在当前工作区里无法找到任何关于“小说”的 Markdown 文档。  \n请您告诉我：\n\n1. 您的项目根目录（例如 `~/Documents/github/你的项目`）。\n2. 在该项目中，小说设定（世界观、情节梗概、角色档案等）目前存放在哪些文件或目录？\n3. “汇总的人物档案删掉”指的是哪份文件？现在它是已被彻底删除还是仅保留空白？\n\n得到这些信息后，我就能定位现有文档、确定缺失的部分，并补齐相应的 `.md` 文档。"
          }
        }
      ],
      "usage": {
        "prompt_tokens": 19690,
        "completion_tokens": 261,
        "total_tokens": 19951
      },
      "stats": {},
      "system_fingerprint": "gpt-oss-20b-mlx"
    },
    "expectedFormat": "openai",
    "errorMessage": "All parsing strategies failed",
    "responseAnalysis": {
      "hasToolCalls": false,
      "hasContent": true,
      "contentLength": 776,
      "contentPreview": "It appears the environment might not provide outputs due to some restriction. Let's try using `glob` with pattern \"**/*.md\" but the earlier call didn't output.\n\nMaybe our tool usage is wrong: The \"pat",
      "finishReason": "stop",
      "toolCallPatterns": []
    },
    "debugInfo": {
      "requestTools": [
        {
          "name": "Task",
          "description": "Launch a new agent to handle complex, multi-step tasks autonomously.\n\nAvailable agent types and the tools they have access to:\n- general-purpose: General-purpose agent for researching complex questions, searching for code, and executing multi-step tasks. When you are searching for a keyword or file and are not confident that you will find the right match in the first few tries use this agent to perform the search for you. (Tools: *)\n- code-refactorer: Use this agent when you need to improve existing code structure, readability, or maintainability without changing functionality. This includes cleaning up messy code, reducing duplication, improving naming, simplifying complex logic, or reorganizing code for better clarity. Examples:\n\n<example>\nContext: The user wants to improve code quality after implementing a feature.\nuser: \"I just finished implementing the user authentication system. Can you help clean it up?\"\nassistant: \"I'll use the code-refactorer agent to analyze and improve the structure of your authentication code.\"\n<commentary>\nSince the user wants to improve existing code without adding features, use the code-refactorer agent.\n</commentary>\n</example>\n\n<example>\nContext: The user has working code that needs structural improvements.\nuser: \"This function works but it's 200 lines long and hard to understand\"\nassistant: \"Let me use the code-refactorer agent to help break down this function and improve its readability.\"\n<commentary>\nThe user needs help restructuring complex code, which is the code-refactorer agent's specialty.\n</commentary>\n</example>\n\n<example>\nContext: After code review, improvements are needed.\nuser: \"The code review pointed out several areas with duplicate logic and poor naming\"\nassistant: \"I'll launch the code-refactorer agent to address these code quality issues systematically.\"\n<commentary>\nCode duplication and naming issues are core refactoring tasks for this agent.\n</commentary>\n</example> (Tools: Edit, MultiEdit, Write, NotebookEdit, Grep, LS, Read)\n- project-task-planner: Use this agent when you need to create a comprehensive development task list from a Product Requirements Document (PRD). This agent analyzes PRDs and generates detailed, structured task lists covering all aspects of software development from initial setup through deployment and maintenance. Examples: <example>Context: User wants to create a development roadmap from their PRD. user: \"I have a PRD for a new e-commerce platform. Can you create a task list?\" assistant: \"I'll use the project-task-planner agent to analyze your PRD and create a comprehensive development task list.\" <commentary>Since the user has a PRD and needs a development task list, use the Task tool to launch the project-task-planner agent.</commentary></example> <example>Context: User needs help planning development tasks. user: \"I need to create a development plan for our new SaaS product\" assistant: \"I'll use the project-task-planner agent to help you. First, I'll need to see your Product Requirements Document (PRD).\" <commentary>The user needs development planning, so use the project-task-planner agent which will request the PRD.</commentary></example> (Tools: Task, Bash, Edit, MultiEdit, Write, NotebookEdit, Grep, LS, Read, ExitPlanMode, TodoWrite, WebSearch)\n- vibe-coding-coach: Use this agent when users want to build applications through conversation, focusing on the vision and feel of their app rather than technical implementation details. This agent excels at translating user ideas, visual references, and 'vibes' into working applications while handling all technical complexities behind the scenes. <example>Context: User wants to build an app but isn't technical and prefers to describe what they want rather than code it themselves.\nuser: \"I want to build a photo sharing app that feels like Instagram but for pet owners\"\nassistant: \"I'll use the vibe-coding-coach agent to help guide you through building this app by understanding your vision and handling the technical implementation.\"\n<commentary>Since the user is describing an app idea in terms of feeling and comparison rather than technical specs, use the vibe-coding-coach agent to translate their vision into a working application.</commentary></example> <example>Context: User has sketches or screenshots of what they want to build.\nuser: \"Here's a screenshot of an app I like. Can we build something similar but for tracking workouts?\"\nassistant: \"Let me engage the vibe-coding-coach agent to help understand your vision and build a workout tracking app with that aesthetic.\"\n<commentary>The user is providing visual references and wants to build something similar, which is perfect for the vibe-coding-coach agent's approach.</commentary></example> (Tools: *)\n- debug-system-architect: Use this agent when you need to establish a comprehensive debug logging system for a project. This includes setting up log directories, implementing node-level tracing, creating time-based test records, establishing replay mechanisms, and documenting debug rules. Example: <example> Context: User is setting up a new project and wants to implement proper debugging infrastructure from the start. user: \"Please help me set up a debug system for my new API router project\" <commentary> Since the user is requesting debug system setup, use the debug-system-architect agent to analyze the project and implement comprehensive logging and tracing mechanisms. </commentary> </example> <example> Context: User encounters intermittent issues in their routing system and needs better visibility. user: \"I'm having trouble tracking down why some requests fail intermittently\" <commentary> Since the user needs better debugging visibility for intermittent issues, use the debug-system-architect agent to implement node-level tracing and replay mechanisms. </commentary> </example> (Tools: *)\n- code-risk-auditor: Use this agent when you need to perform comprehensive code risk assessment and identify potential architectural issues in your codebase. Examples: <example>Context: The user has just completed a major refactoring and wants to ensure no hardcoded values or fallback mechanisms were introduced. user: \"I just finished refactoring the routing system, can you check for any code risks?\" assistant: \"I'll use the code-risk-auditor agent to perform a comprehensive risk assessment of your routing system changes.\"</example> <example>Context: Before a major release, the user wants to clean up technical debt and ensure code quality. user: \"We're preparing for v2.0 release, I need a full code audit\" assistant: \"Let me launch the code-risk-auditor agent to identify hardcoding, fallback risks, outdated tests, and duplicate implementations across the entire codebase.\"</example> <example>Context: The user notices inconsistent behavior and suspects duplicate implementations. user: \"The same feature seems to be implemented in multiple places, causing bugs\" assistant: \"I'll use the code-risk-auditor agent to scan for duplicate implementations and provide a consolidation plan.\"</example> (Tools: *)\n- security-auditor: Use this agent when you need to perform a comprehensive security audit of a codebase, identify vulnerabilities, and generate a detailed security report with actionable remediation steps. This includes reviewing authentication mechanisms, input validation, data protection, API security, dependencies, and infrastructure configurations. Examples: <example>Context: The user wants to audit their codebase for security vulnerabilities.\nuser: \"Can you perform a security audit of my application?\"\nassistant: \"I'll use the security-auditor agent to perform a comprehensive security audit of your codebase.\"\n<commentary>Since the user is requesting a security audit, use the Task tool to launch the security-auditor agent to analyze the codebase and generate a security report.</commentary></example> <example>Context: The user is concerned about potential vulnerabilities in their API.\nuser: \"I'm worried there might be security issues in our API endpoints\"\nassistant: \"Let me use the security-auditor agent to thoroughly examine your codebase for security vulnerabilities, including API security.\"\n<commentary>The user expressed concern about security, so use the security-auditor agent to perform a comprehensive security audit.</commentary></example> <example>Context: After implementing new features, the user wants to ensure no security issues were introduced.\nuser: \"We just added user authentication to our app. Can you check if it's secure?\"\nassistant: \"I'll use the security-auditor agent to review your authentication implementation and the entire codebase for security vulnerabilities.\"\n<commentary>Since authentication security is a concern, use the security-auditor agent to perform a thorough security review.</commentary></example> (Tools: Task, Bash, Edit, MultiEdit, Write, NotebookEdit)\n- project-memory-manager: Use this agent when you need to manage project-specific memory entries, create project documentation, or organize project knowledge. This includes creating project summaries, documenting project decisions, tracking project progress, and maintaining project-specific knowledge bases. <example>Context: User wants to document a project decision or create project documentation. user: \"请为我们的新项目创建一个内存管理系统的文档\" assistant: \"我将使用 project-memory-manager agent 来创建这个项目文档\" <commentary>Since the user needs project documentation, use the project-memory-manager agent to create project-specific memory entries.</commentary></example> <example>Context: User wants to track project progress or decisions. user: \"我们需要记录这个项目的关键决策点\" assistant: \"让我使用 project-memory-manager agent 来记录这些项目决策\" <commentary>Since this is project tracking, use the project-memory-manager agent to create decision-type memory entries.</commentary></example> (Tools: *)\n- rules-architect: Use this agent when you need to analyze project architecture and establish comprehensive rule management systems. Examples: <example>Context: User wants to organize project rules and create a structured rule management system. user: \"I need to reorganize our project rules and create a better structure for managing coding standards, file organization, and testing protocols\" assistant: \"I'll use the rules-architect agent to analyze the current project structure and establish a comprehensive rule management system with proper categorization and organization.\"</example> <example>Context: Project has grown complex and needs better rule organization. user: \"Our CLAUDE.md file is getting too large and we need to break down rules into manageable categories\" assistant: \"Let me call the rules-architect agent to create a structured .claude/rules system that will organize all project rules into logical categories.\"</example> (Tools: *)\n- frontend-designer: Use this agent when you need to convert design mockups, wireframes, or visual concepts into detailed technical specifications and implementation guides for frontend development. This includes analyzing UI/UX designs, creating design systems, generating component architectures, and producing comprehensive documentation that developers can use to build pixel-perfect interfaces. Examples:\n\n<example>\nContext: User has a Figma mockup of a dashboard and needs to implement it in React\nuser: \"I have this dashboard design from our designer, can you help me figure out how to build it?\"\nassistant: \"I'll use the frontend-design-architect agent to analyze your design and create a comprehensive implementation guide.\"\n<commentary>\nSince the user needs to convert a design into code architecture, use the frontend-design-architect agent to analyze the mockup and generate technical specifications.\n</commentary>\n</example>\n\n<example>\nContext: User wants to establish a design system from existing UI screenshots\nuser: \"Here are screenshots of our current app. We need to extract a consistent design system from these.\"\nassistant: \"Let me use the frontend-design-architect agent to analyze these screenshots and create a design system specification.\"\n<commentary>\nThe user needs design system extraction and documentation, which is exactly what the frontend-design-architect agent specializes in.\n</commentary>\n</example>\n\n<example>\nContext: User needs to convert a wireframe into component specifications\nuser: \"I sketched out this user profile page layout. How should I structure the components?\"\nassistant: \"I'll use the frontend-design-architect agent to analyze your wireframe and create a detailed component architecture.\"\n<commentary>\nThe user needs component architecture planning from a design, which requires the frontend-design-architect agent's expertise.\n</commentary>\n</example> (Tools: *)\n- content-writer: Use this agent when you need to create compelling, informative content that explains complex topics in simple terms. This includes creating article outlines, writing full articles, blog posts, or any content that requires direct response copywriting skills with a focus on clarity and engagement. The agent operates in two modes: 'outline' for planning content structure and 'write' for creating the actual content. Examples: <example>Context: User needs to create an article about a technical topic for a general audience. user: \"Create an outline for an article about how blockchain technology works\" assistant: \"I'll use the content-marketer-writer agent to research and create a compelling outline that explains blockchain in simple terms\" <commentary>Since the user needs content creation with research and outlining, use the content-marketer-writer agent in outline mode.</commentary></example> <example>Context: User has an outline and needs to write the full article. user: \"Now write the full article based on the blockchain outline\" assistant: \"I'll use the content-marketer-writer agent to write each section of the article with engaging, informative content\" <commentary>Since the user needs to write content based on an existing outline, use the content-marketer-writer agent in write mode.</commentary></example> (Tools: *)\n- test-runner: Use this agent to run and manage tests according to the global and project-specific testing rules. This includes executing test scripts, documenting test results, and helping to diagnose issues following the standard pipeline. <example>Context: User wants to run all functional tests. user: \"运行所有功能测试\" assistant: \"我将使用 test-runner agent 来执行所有功能测试\" <commentary>Since the user wants to run tests by category, use the test-runner agent.</commentary></example> <example>Context: User wants to verify a bug fix. user: \"我修复了一个bug，帮我验证一下\" assistant: \"让我使用 test-runner agent 来执行对应的修复验证测试\" <commentary>The user needs to verify a fix, which is a core task for the test-runner agent.</commentary></example> (Tools: *)\n- in-depth-research-analyst: Use this agent when you need to conduct comprehensive research reports with in-depth web mining, data analysis, and visualization. This includes industry analysis, market research, competitive intelligence, and trend forecasting with accurate data from authoritative sources. <example>Context: User wants a comprehensive industry analysis report. user: \"请对人工智能芯片市场进行深入调研，包括主要厂商、市场份额和增长趋势\" assistant: \"我将使用 in-depth-research-analyst agent 来进行这项深入的市场调研并生成可视化报告\" <commentary>Since the user needs a comprehensive industry analysis with data visualization, use the in-depth-research-analyst agent to conduct thorough research and create an integrated report.</commentary></example> <example>Context: User wants market research with accurate data and visualizations. user: \"我们需要一份关于电动汽车充电基础设施的深度报告，包含数据图表\" assistant: \"让我使用 in-depth-research-analyst agent 来收集准确数据并生成图文并茂的分析报告\" <commentary>Since this requires market research with data accuracy and visualizations, use the in-depth-research-analyst agent to create a comprehensive report.</commentary></example> (Tools: *)\n- prd-writer: Use this agent when you need to create a comprehensive Product Requirements Document (PRD) for a software project or feature. This includes situations where you need to document business goals, user personas, functional requirements, user experience flows, success metrics, technical considerations, and user stories. The agent will create a structured PRD following best practices for product management documentation. Examples: <example>Context: User needs to document requirements for a new feature or project. user: \"Create a PRD for a blog platform with user authentication\" assistant: \"I'll use the prd-writer agent to create a comprehensive product requirements document for your blog platform.\" <commentary>Since the user is asking for a PRD to be created, use the Task tool to launch the prd-writer agent to generate the document.</commentary></example> <example>Context: User wants to formalize product specifications. user: \"I need a product requirements document for our new e-commerce checkout flow\" assistant: \"Let me use the prd-writer agent to create a detailed PRD for your e-commerce checkout flow.\" <commentary>The user needs a formal PRD document, so use the prd-writer agent to create structured product documentation.</commentary></example> (Tools: Task, Bash, Grep, LS, Read, Write, WebSearch, Glob)\n- pipeline-debug-universal: Use this agent when you need to implement comprehensive debug hooks and testing infrastructure for ANY pipeline system - whether it's API routing, data processing, CI/CD workflows, or transformation pipelines. This agent specializes in creating universal debug architectures that work across different pipeline types with data capture, replay capabilities, and systematic testing matrices. Examples: <example>Context: User is working on a multi-provider API routing system and needs to add debug capabilities to track data flow through each pipeline step. user: \"I need to add debug hooks to our routing pipeline so we can capture and replay data at each step\" assistant: \"I'll use the pipeline-debug-universal agent to design a comprehensive debug infrastructure with data capture and replay capabilities\" <commentary>Since the user needs pipeline debugging infrastructure, use the pipeline-debug-universal agent to create debug hooks and testing matrices.</commentary></example> <example>Context: User has a complex data transformation pipeline and wants to build systematic testing for each stage and provider. user: \"Our data processing pipeline has issues and we need better testing infrastructure to isolate problems at each step\" assistant: \"Let me use the pipeline-debug-universal agent to create a complete testing matrix and debug system\" <commentary>Since the user needs systematic pipeline testing infrastructure, use the pipeline-debug-universal agent to architect the testing system.</commentary></example> <example>Context: User is building a CI/CD pipeline and needs to implement debug capabilities for tracking deployment issues. user: \"Our deployment pipeline fails randomly and we can't reproduce the issues consistently\" assistant: \"I'll deploy the pipeline-debug-universal agent to create comprehensive debug hooks and replay capabilities for your CI/CD pipeline\" <commentary>Since the user needs debug infrastructure for a deployment pipeline, use the pipeline-debug-universal agent to design the debug system.</commentary></example> (Tools: *)\n\nWhen using the Task tool, you must specify a subagent_type parameter to select which agent type to use.\n\n\n\nWhen NOT to use the Agent tool:\n- If you want to read a specific file path, use the Read or Glob tool instead of the Agent tool, to find the match more quickly\n- If you are searching for a specific class definition like \"class Foo\", use the Glob tool instead, to find the match more quickly\n- If you are searching for code within a specific file or set of 2-3 files, use the Read tool instead of the Agent tool, to find the match more quickly\n- Other tasks that are not related to the agent descriptions above\n\n\nUsage notes:\n1. Launch multiple agents concurrently whenever possible, to maximize performance; to do that, use a single message with multiple tool uses\n2. When the agent is done, it will return a single message back to you. The result returned by the agent is not visible to the user. To show the user the result, you should send a text message back to the user with a concise summary of the result.\n3. Each agent invocation is stateless. You will not be able to send additional messages to the agent, nor will the agent be able to communicate with you outside of its final report. Therefore, your prompt should contain a highly detailed task description for the agent to perform autonomously and you should specify exactly what information the agent should return back to you in its final and only message to you.\n4. The agent's outputs should generally be trusted\n5. Clearly tell the agent whether you expect it to write code or just to do research (search, file reads, web fetches, etc.), since it is not aware of the user's intent\n6. If the agent description mentions that it should be used proactively, then you should try your best to use it without the user having to ask for it first. Use your judgement.\n\nExample usage:\n\n<example_agent_descriptions>\n\"code-reviewer\": use this agent after you are done writing a signficant piece of code\n\"greeting-responder\": use this agent when to respond to user greetings with a friendly joke\n</example_agent_description>\n\n<example>\nuser: \"Please write a function that checks if a number is prime\"\nassistant: Sure let me write a function that checks if a number is prime\nassistant: First let me use the Write tool to write a function that checks if a number is prime\nassistant: I'm going to use the Write tool to write the following code:\n<code>\nfunction isPrime(n) {\n  if (n <= 1) return false\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n</code>\n<commentary>\nSince a signficant piece of code was written and the task was completed, now use the code-reviewer agent to review the code\n</commentary>\nassistant: Now let me use the code-reviewer agent to review the code\nassistant: Uses the Task tool to launch the with the code-reviewer agent\n</example>\n\n<example>\nuser: \"Hello\"\n<commentary>\nSince the user is greeting, use the greeting-responder agent to respond with a friendly joke\n</commentary>\nassistant: \"I'm going to use the Task tool to launch the with the greeting-responder agent\"\n</example>\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "description": {
                "type": "string",
                "description": "A short (3-5 word) description of the task"
              },
              "prompt": {
                "type": "string",
                "description": "The task for the agent to perform"
              },
              "subagent_type": {
                "type": "string",
                "description": "The type of specialized agent to use for this task"
              }
            },
            "required": [
              "description",
              "prompt",
              "subagent_type"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Bash",
          "description": "Executes a given bash command in a persistent shell session with optional timeout, ensuring proper handling and security measures.\n\nBefore executing the command, please follow these steps:\n\n1. Directory Verification:\n   - If the command will create new directories or files, first use the LS tool to verify the parent directory exists and is the correct location\n   - For example, before running \"mkdir foo/bar\", first use LS to check that \"foo\" exists and is the intended parent directory\n\n2. Command Execution:\n   - Always quote file paths that contain spaces with double quotes (e.g., cd \"path with spaces/file.txt\")\n   - Examples of proper quoting:\n     - cd \"/Users/name/My Documents\" (correct)\n     - cd /Users/name/My Documents (incorrect - will fail)\n     - python \"/path/with spaces/script.py\" (correct)\n     - python /path/with spaces/script.py (incorrect - will fail)\n   - After ensuring proper quoting, execute the command.\n   - Capture the output of the command.\n\nUsage notes:\n  - The command argument is required.\n  - You can specify an optional timeout in milliseconds (up to 600000ms / 10 minutes). If not specified, commands will timeout after 120000ms (2 minutes).\n  - It is very helpful if you write a clear, concise description of what this command does in 5-10 words.\n  - If the output exceeds 30000 characters, output will be truncated before being returned to you.\n  - VERY IMPORTANT: You MUST avoid using search commands like `find` and `grep`. Instead use Grep, Glob, or Task to search. You MUST avoid read tools like `cat`, `head`, `tail`, and `ls`, and use Read and LS to read files.\n - If you _still_ need to run `grep`, STOP. ALWAYS USE ripgrep at `rg` first, which all ${PRODUCT_NAME} users have pre-installed.\n  - When issuing multiple commands, use the ';' or '&&' operator to separate them. DO NOT use newlines (newlines are ok in quoted strings).\n  - Try to maintain your current working directory throughout the session by using absolute paths and avoiding usage of `cd`. You may use `cd` if the User explicitly requests it.\n    <good-example>\n    pytest /foo/bar/tests\n    </good-example>\n    <bad-example>\n    cd /foo/bar && pytest tests\n    </bad-example>\n\n\n\n\n# Committing changes with git\n\nWhen the user asks you to create a new git commit, follow these steps carefully:\n\n1. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following bash commands in parallel, each using the Bash tool:\n  - Run a git status command to see all untracked files.\n  - Run a git diff command to see both staged and unstaged changes that will be committed.\n  - Run a git log command to see recent commit messages, so that you can follow this repository's commit message style.\n2. Analyze all staged changes (both previously staged and newly added) and draft a commit message:\n  - Summarize the nature of the changes (eg. new feature, enhancement to an existing feature, bug fix, refactoring, test, docs, etc.). Ensure the message accurately reflects the changes and their purpose (i.e. \"add\" means a wholly new feature, \"update\" means an enhancement to an existing feature, \"fix\" means a bug fix, etc.).\n  - Check for any sensitive information that shouldn't be committed\n  - Draft a concise (1-2 sentences) commit message that focuses on the \"why\" rather than the \"what\"\n  - Ensure it accurately reflects the changes and their purpose\n3. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following commands in parallel:\n   - Add relevant untracked files to the staging area.\n   - Create the commit with a message ending with:\n   🤖 Generated with [Claude Code](https://claude.ai/code)\n\n   Co-Authored-By: Claude <noreply@anthropic.com>\n   - Run git status to make sure the commit succeeded.\n4. If the commit fails due to pre-commit hook changes, retry the commit ONCE to include these automated changes. If it fails again, it usually means a pre-commit hook is preventing the commit. If the commit succeeds but you notice that files were modified by the pre-commit hook, you MUST amend your commit to include them.\n\nImportant notes:\n- NEVER update the git config\n- NEVER run additional commands to read or explore code, besides git bash commands\n- NEVER use the TodoWrite or Task tools\n- DO NOT push to the remote repository unless the user explicitly asks you to do so\n- IMPORTANT: Never use git commands with the -i flag (like git rebase -i or git add -i) since they require interactive input which is not supported.\n- If there are no changes to commit (i.e., no untracked files and no modifications), do not create an empty commit\n- In order to ensure good formatting, ALWAYS pass the commit message via a HEREDOC, a la this example:\n<example>\ngit commit -m \"$(cat <<'EOF'\n   Commit message here.\n\n   🤖 Generated with [Claude Code](https://claude.ai/code)\n\n   Co-Authored-By: Claude <noreply@anthropic.com>\n   EOF\n   )\"\n</example>\n\n# Creating pull requests\nUse the gh command via the Bash tool for ALL GitHub-related tasks including working with issues, pull requests, checks, and releases. If given a Github URL use the gh command to get the information needed.\n\nIMPORTANT: When the user asks you to create a pull request, follow these steps carefully:\n\n1. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following bash commands in parallel using the Bash tool, in order to understand the current state of the branch since it diverged from the main branch:\n   - Run a git status command to see all untracked files\n   - Run a git diff command to see both staged and unstaged changes that will be committed\n   - Check if the current branch tracks a remote branch and is up to date with the remote, so you know if you need to push to the remote\n   - Run a git log command and `git diff [base-branch]...HEAD` to understand the full commit history for the current branch (from the time it diverged from the base branch)\n2. Analyze all changes that will be included in the pull request, making sure to look at all relevant commits (NOT just the latest commit, but ALL commits that will be included in the pull request!!!), and draft a pull request summary\n3. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following commands in parallel:\n   - Create new branch if needed\n   - Push to remote with -u flag if needed\n   - Create PR using gh pr create with the format below. Use a HEREDOC to pass the body to ensure correct formatting.\n<example>\ngh pr create --title \"the pr title\" --body \"$(cat <<'EOF'\n## Summary\n<1-3 bullet points>\n\n## Test plan\n[Checklist of TODOs for testing the pull request...]\n\n🤖 Generated with [Claude Code](https://claude.ai/code)\nEOF\n)\"\n</example>\n\nImportant:\n- NEVER update the git config\n- DO NOT use the TodoWrite or Task tools\n- Return the PR URL when you're done, so the user can see it\n\n# Other common operations\n- View comments on a Github PR: gh api repos/foo/bar/pulls/123/comments",
          "input_schema": {
            "type": "object",
            "properties": {
              "command": {
                "type": "string",
                "description": "The command to execute"
              },
              "timeout": {
                "type": "number",
                "description": "Optional timeout in milliseconds (max 600000)"
              },
              "description": {
                "type": "string",
                "description": " Clear, concise description of what this command does in 5-10 words. Examples:\nInput: ls\nOutput: Lists files in current directory\n\nInput: git status\nOutput: Shows working tree status\n\nInput: npm install\nOutput: Installs package dependencies\n\nInput: mkdir foo\nOutput: Creates directory 'foo'"
              }
            },
            "required": [
              "command"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Glob",
          "description": "- Fast file pattern matching tool that works with any codebase size\n- Supports glob patterns like \"**/*.js\" or \"src/**/*.ts\"\n- Returns matching file paths sorted by modification time\n- Use this tool when you need to find files by name patterns\n- When you are doing an open ended search that may require multiple rounds of globbing and grepping, use the Agent tool instead\n- You have the capability to call multiple tools in a single response. It is always better to speculatively perform multiple searches as a batch that are potentially useful.",
          "input_schema": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "The glob pattern to match files against"
              },
              "path": {
                "type": "string",
                "description": "The directory to search in. If not specified, the current working directory will be used. IMPORTANT: Omit this field to use the default directory. DO NOT enter \"undefined\" or \"null\" - simply omit it for the default behavior. Must be a valid directory path if provided."
              }
            },
            "required": [
              "pattern"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Grep",
          "description": "A powerful search tool built on ripgrep\n\n  Usage:\n  - ALWAYS use Grep for search tasks. NEVER invoke `grep` or `rg` as a Bash command. The Grep tool has been optimized for correct permissions and access.\n  - Supports full regex syntax (e.g., \"log.*Error\", \"function\\s+\\w+\")\n  - Filter files with glob parameter (e.g., \"*.js\", \"**/*.tsx\") or type parameter (e.g., \"js\", \"py\", \"rust\")\n  - Output modes: \"content\" shows matching lines, \"files_with_matches\" shows only file paths (default), \"count\" shows match counts\n  - Use Task tool for open-ended searches requiring multiple rounds\n  - Pattern syntax: Uses ripgrep (not grep) - literal braces need escaping (use `interface\\{\\}` to find `interface{}` in Go code)\n  - Multiline matching: By default patterns match within single lines only. For cross-line patterns like `struct \\{[\\s\\S]*?field`, use `multiline: true`\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "The regular expression pattern to search for in file contents"
              },
              "path": {
                "type": "string",
                "description": "File or directory to search in (rg PATH). Defaults to current working directory."
              },
              "glob": {
                "type": "string",
                "description": "Glob pattern to filter files (e.g. \"*.js\", \"*.{ts,tsx}\") - maps to rg --glob"
              },
              "output_mode": {
                "type": "string",
                "enum": [
                  "content",
                  "files_with_matches",
                  "count"
                ],
                "description": "Output mode: \"content\" shows matching lines (supports -A/-B/-C context, -n line numbers, head_limit), \"files_with_matches\" shows file paths (supports head_limit), \"count\" shows match counts (supports head_limit). Defaults to \"files_with_matches\"."
              },
              "-B": {
                "type": "number",
                "description": "Number of lines to show before each match (rg -B). Requires output_mode: \"content\", ignored otherwise."
              },
              "-A": {
                "type": "number",
                "description": "Number of lines to show after each match (rg -A). Requires output_mode: \"content\", ignored otherwise."
              },
              "-C": {
                "type": "number",
                "description": "Number of lines to show before and after each match (rg -C). Requires output_mode: \"content\", ignored otherwise."
              },
              "-n": {
                "type": "boolean",
                "description": "Show line numbers in output (rg -n). Requires output_mode: \"content\", ignored otherwise."
              },
              "-i": {
                "type": "boolean",
                "description": "Case insensitive search (rg -i)"
              },
              "type": {
                "type": "string",
                "description": "File type to search (rg --type). Common types: js, py, rust, go, java, etc. More efficient than include for standard file types."
              },
              "head_limit": {
                "type": "number",
                "description": "Limit output to first N lines/entries, equivalent to \"| head -N\". Works across all output modes: content (limits output lines), files_with_matches (limits file paths), count (limits count entries). When unspecified, shows all results from ripgrep."
              },
              "multiline": {
                "type": "boolean",
                "description": "Enable multiline mode where . matches newlines and patterns can span lines (rg -U --multiline-dotall). Default: false."
              }
            },
            "required": [
              "pattern"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "LS",
          "description": "Lists files and directories in a given path. The path parameter must be an absolute path, not a relative path. You can optionally provide an array of glob patterns to ignore with the ignore parameter. You should generally prefer the Glob and Grep tools, if you know which directories to search.",
          "input_schema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "The absolute path to the directory to list (must be absolute, not relative)"
              },
              "ignore": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of glob patterns to ignore"
              }
            },
            "required": [
              "path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "ExitPlanMode",
          "description": "Use this tool when you are in plan mode and have finished presenting your plan and are ready to code. This will prompt the user to exit plan mode.\nIMPORTANT: Only use this tool when the task requires planning the implementation steps of a task that requires writing code. For research tasks where you're gathering information, searching files, reading files or in general trying to understand the codebase - do NOT use this tool.\n\nEg.\n1. Initial task: \"Search for and understand the implementation of vim mode in the codebase\" - Do not use the exit plan mode tool because you are not planning the implementation steps of a task.\n2. Initial task: \"Help me implement yank mode for vim\" - Use the exit plan mode tool after you have finished planning the implementation steps of the task.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "plan": {
                "type": "string",
                "description": "The plan you came up with, that you want to run by the user for approval. Supports markdown. The plan should be pretty concise."
              }
            },
            "required": [
              "plan"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Read",
          "description": "Reads a file from the local filesystem. You can access any file directly by using this tool.\nAssume this tool is able to read all files on the machine. If the User provides a path to a file assume that path is valid. It is okay to read a file that does not exist; an error will be returned.\n\nUsage:\n- The file_path parameter must be an absolute path, not a relative path\n- By default, it reads up to 2000 lines starting from the beginning of the file\n- You can optionally specify a line offset and limit (especially handy for long files), but it's recommended to read the whole file by not providing these parameters\n- Any lines longer than 2000 characters will be truncated\n- Results are returned using cat -n format, with line numbers starting at 1\n- This tool allows Claude Code to read images (eg PNG, JPG, etc). When reading an image file the contents are presented visually as Claude Code is a multimodal LLM.\n- This tool can read PDF files (.pdf). PDFs are processed page by page, extracting both text and visual content for analysis.\n- For Jupyter notebooks (.ipynb files), use the NotebookRead instead\n- You have the capability to call multiple tools in a single response. It is always better to speculatively read multiple files as a batch that are potentially useful.\n- You will regularly be asked to read screenshots. If the user provides a path to a screenshot ALWAYS use this tool to view the file at the path. This tool will work with all temporary file paths like /var/folders/123/abc/T/TemporaryItems/NSIRD_screencaptureui_ZfB1tD/Screenshot.png\n- If you read a file that exists but has empty contents you will receive a system reminder warning in place of file contents.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to read"
              },
              "offset": {
                "type": "number",
                "description": "The line number to start reading from. Only provide if the file is too large to read at once"
              },
              "limit": {
                "type": "number",
                "description": "The number of lines to read. Only provide if the file is too large to read at once."
              }
            },
            "required": [
              "file_path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Edit",
          "description": "Performs exact string replacements in files.\n\nUsage:\n- You must use your `Read` tool at least once in the conversation before editing. This tool will error if you attempt an edit without reading the file.\n- When editing text from Read tool output, ensure you preserve the exact indentation (tabs/spaces) as it appears AFTER the line number prefix. The line number prefix format is: spaces + line number + tab. Everything after that tab is the actual file content to match. Never include any part of the line number prefix in the old_string or new_string.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- Only use emojis if the user explicitly requests it. Avoid adding emojis to files unless asked.\n- The edit will FAIL if `old_string` is not unique in the file. Either provide a larger string with more surrounding context to make it unique or use `replace_all` to change every instance of `old_string`.\n- Use `replace_all` for replacing and renaming strings across the file. This parameter is useful if you want to rename a variable for instance.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to modify"
              },
              "old_string": {
                "type": "string",
                "description": "The text to replace"
              },
              "new_string": {
                "type": "string",
                "description": "The text to replace it with (must be different from old_string)"
              },
              "replace_all": {
                "type": "boolean",
                "default": false,
                "description": "Replace all occurences of old_string (default false)"
              }
            },
            "required": [
              "file_path",
              "old_string",
              "new_string"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "MultiEdit",
          "description": "This is a tool for making multiple edits to a single file in one operation. It is built on top of the Edit tool and allows you to perform multiple find-and-replace operations efficiently. Prefer this tool over the Edit tool when you need to make multiple edits to the same file.\n\nBefore using this tool:\n\n1. Use the Read tool to understand the file's contents and context\n2. Verify the directory path is correct\n\nTo make multiple file edits, provide the following:\n1. file_path: The absolute path to the file to modify (must be absolute, not relative)\n2. edits: An array of edit operations to perform, where each edit contains:\n   - old_string: The text to replace (must match the file contents exactly, including all whitespace and indentation)\n   - new_string: The edited text to replace the old_string\n   - replace_all: Replace all occurences of old_string. This parameter is optional and defaults to false.\n\nIMPORTANT:\n- All edits are applied in sequence, in the order they are provided\n- Each edit operates on the result of the previous edit\n- All edits must be valid for the operation to succeed - if any edit fails, none will be applied\n- This tool is ideal when you need to make several changes to different parts of the same file\n- For Jupyter notebooks (.ipynb files), use the NotebookEdit instead\n\nCRITICAL REQUIREMENTS:\n1. All edits follow the same requirements as the single Edit tool\n2. The edits are atomic - either all succeed or none are applied\n3. Plan your edits carefully to avoid conflicts between sequential operations\n\nWARNING:\n- The tool will fail if edits.old_string doesn't match the file contents exactly (including whitespace)\n- The tool will fail if edits.old_string and edits.new_string are the same\n- Since edits are applied in sequence, ensure that earlier edits don't affect the text that later edits are trying to find\n\nWhen making edits:\n- Ensure all edits result in idiomatic, correct code\n- Do not leave the code in a broken state\n- Always use absolute file paths (starting with /)\n- Only use emojis if the user explicitly requests it. Avoid adding emojis to files unless asked.\n- Use replace_all for replacing and renaming strings across the file. This parameter is useful if you want to rename a variable for instance.\n\nIf you want to create a new file, use:\n- A new file path, including dir name if needed\n- First edit: empty old_string and the new file's contents as new_string\n- Subsequent edits: normal edit operations on the created content",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to modify"
              },
              "edits": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "old_string": {
                      "type": "string",
                      "description": "The text to replace"
                    },
                    "new_string": {
                      "type": "string",
                      "description": "The text to replace it with"
                    },
                    "replace_all": {
                      "type": "boolean",
                      "default": false,
                      "description": "Replace all occurences of old_string (default false)."
                    }
                  },
                  "required": [
                    "old_string",
                    "new_string"
                  ],
                  "additionalProperties": false
                },
                "minItems": 1,
                "description": "Array of edit operations to perform sequentially on the file"
              }
            },
            "required": [
              "file_path",
              "edits"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Write",
          "description": "Writes a file to the local filesystem.\n\nUsage:\n- This tool will overwrite the existing file if there is one at the provided path.\n- If this is an existing file, you MUST use the Read tool first to read the file's contents. This tool will fail if you did not read the file first.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- NEVER proactively create documentation files (*.md) or README files. Only create documentation files if explicitly requested by the User.\n- Only use emojis if the user explicitly requests it. Avoid writing emojis to files unless asked.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to write (must be absolute, not relative)"
              },
              "content": {
                "type": "string",
                "description": "The content to write to the file"
              }
            },
            "required": [
              "file_path",
              "content"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "NotebookRead",
          "description": "Reads a Jupyter notebook (.ipynb file) and returns all of the cells with their outputs. Jupyter notebooks are interactive documents that combine code, text, and visualizations, commonly used for data analysis and scientific computing. The notebook_path parameter must be an absolute path, not a relative path.",
          "input_schema": {
            "type": "object",
            "properties": {
              "notebook_path": {
                "type": "string",
                "description": "The absolute path to the Jupyter notebook file to read (must be absolute, not relative)"
              },
              "cell_id": {
                "type": "string",
                "description": "The ID of a specific cell to read. If not provided, all cells will be read."
              }
            },
            "required": [
              "notebook_path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "NotebookEdit",
          "description": "Completely replaces the contents of a specific cell in a Jupyter notebook (.ipynb file) with new source. Jupyter notebooks are interactive documents that combine code, text, and visualizations, commonly used for data analysis and scientific computing. The notebook_path parameter must be an absolute path, not a relative path. The cell_number is 0-indexed. Use edit_mode=insert to add a new cell at the index specified by cell_number. Use edit_mode=delete to delete the cell at the index specified by cell_number.",
          "input_schema": {
            "type": "object",
            "properties": {
              "notebook_path": {
                "type": "string",
                "description": "The absolute path to the Jupyter notebook file to edit (must be absolute, not relative)"
              },
              "cell_id": {
                "type": "string",
                "description": "The ID of the cell to edit. When inserting a new cell, the new cell will be inserted after the cell with this ID, or at the beginning if not specified."
              },
              "new_source": {
                "type": "string",
                "description": "The new source for the cell"
              },
              "cell_type": {
                "type": "string",
                "enum": [
                  "code",
                  "markdown"
                ],
                "description": "The type of the cell (code or markdown). If not specified, it defaults to the current cell type. If using edit_mode=insert, this is required."
              },
              "edit_mode": {
                "type": "string",
                "enum": [
                  "replace",
                  "insert",
                  "delete"
                ],
                "description": "The type of edit to make (replace, insert, delete). Defaults to replace."
              }
            },
            "required": [
              "notebook_path",
              "new_source"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "WebFetch",
          "description": "\n- Fetches content from a specified URL and processes it using an AI model\n- Takes a URL and a prompt as input\n- Fetches the URL content, converts HTML to markdown\n- Processes the content with the prompt using a small, fast model\n- Returns the model's response about the content\n- Use this tool when you need to retrieve and analyze web content\n\nUsage notes:\n  - IMPORTANT: If an MCP-provided web fetch tool is available, prefer using that tool instead of this one, as it may have fewer restrictions. All MCP-provided tools start with \"mcp__\".\n  - The URL must be a fully-formed valid URL\n  - HTTP URLs will be automatically upgraded to HTTPS\n  - The prompt should describe what information you want to extract from the page\n  - This tool is read-only and does not modify any files\n  - Results may be summarized if the content is very large\n  - Includes a self-cleaning 15-minute cache for faster responses when repeatedly accessing the same URL\n  - When a URL redirects to a different host, the tool will inform you and provide the redirect URL in a special format. You should then make a new WebFetch request with the redirect URL to fetch the content.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "format": "uri",
                "description": "The URL to fetch content from"
              },
              "prompt": {
                "type": "string",
                "description": "The prompt to run on the fetched content"
              }
            },
            "required": [
              "url",
              "prompt"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "TodoWrite",
          "description": "Use this tool to create and manage a structured task list for your current coding session. This helps you track progress, organize complex tasks, and demonstrate thoroughness to the user.\nIt also helps the user understand the progress of the task and overall progress of their requests.\n\n## When to Use This Tool\nUse this tool proactively in these scenarios:\n\n1. Complex multi-step tasks - When a task requires 3 or more distinct steps or actions\n2. Non-trivial and complex tasks - Tasks that require careful planning or multiple operations\n3. User explicitly requests todo list - When the user directly asks you to use the todo list\n4. User provides multiple tasks - When users provide a list of things to be done (numbered or comma-separated)\n5. After receiving new instructions - Immediately capture user requirements as todos\n6. When you start working on a task - Mark it as in_progress BEFORE beginning work. Ideally you should only have one todo as in_progress at a time\n7. After completing a task - Mark it as completed and add any new follow-up tasks discovered during implementation\n\n## When NOT to Use This Tool\n\nSkip using this tool when:\n1. There is only a single, straightforward task\n2. The task is trivial and tracking it provides no organizational benefit\n3. The task can be completed in less than 3 trivial steps\n4. The task is purely conversational or informational\n\nNOTE that you should not use this tool if there is only one trivial task to do. In this case you are better off just doing the task directly.\n\n## Examples of When to Use the Todo List\n\n<example>\nUser: I want to add a dark mode toggle to the application settings. Make sure you run the tests and build when you're done!\nAssistant: I'll help add a dark mode toggle to your application settings. Let me create a todo list to track this implementation.\n*Creates todo list with the following items:*\n1. Create dark mode toggle component in Settings page\n2. Add dark mode state management (context/store)\n3. Implement CSS-in-JS styles for dark theme\n4. Update existing components to support theme switching\n5. Run tests and build process, addressing any failures or errors that occur\n*Begins working on the first task*\n\n<reasoning>\nThe assistant used the todo list because:\n1. Adding dark mode is a multi-step feature requiring UI, state management, and styling changes\n2. The user explicitly requested tests and build be run afterward\n3. The assistant inferred that tests and build need to pass by adding \"Ensure tests and build succeed\" as the final task\n</reasoning>\n</example>\n\n<example>\nUser: Help me rename the function getCwd to getCurrentWorkingDirectory across my project\nAssistant: Let me first search through your codebase to find all occurrences of 'getCwd'.\n*Uses grep or search tools to locate all instances of getCwd in the codebase*\nAssistant: I've found 15 instances of 'getCwd' across 8 different files. Let me create a todo list to track these changes.\n*Creates todo list with specific items for each file that needs updating*\n\n<reasoning>\nThe assistant used the todo list because:\n1. First, the assistant searched to understand the scope of the task\n2. Upon finding multiple occurrences across different files, it determined this was a complex task with multiple steps\n3. The todo list helps ensure every instance is tracked and updated systematically\n4. This approach prevents missing any occurrences and maintains code consistency\n</reasoning>\n</example>\n\n\n<example>\nUser: I need to implement these features for my e-commerce site: user registration, product catalog, shopping cart, and checkout flow.\nAssistant: I'll help implement these features. First, let's add all the features to the todo list.\n*Creates a todo list breaking down each feature into specific tasks based on the project architecture*\nAssistant: Let's start with user registration. This will involve creating database models, API endpoints, and frontend forms that integrate with your existing authentication system.\n\n<reasoning>\nThe assistant used the todo list because:\n1. The user provided multiple complex features to implement in a comma separated list\n2. The todo list helps organize these large features into manageable tasks\n3. This approach allows for tracking progress across the entire implementation\n</reasoning>\n</example>\n\n<example>\nUser: Can you help optimize my React application? It's rendering slowly and has performance issues.</user>\nAssistant: I'll help optimize your React application. First, let me examine your codebase to identify potential performance bottlenecks.\n*Reviews component structure, render patterns, state management, and data fetching*\nAssistant: After analyzing your codebase, I've identified several performance issues. Let me create a todo list to track our optimization efforts.\n*Creates todo list with items like: 1) Implement memoization for expensive calculations in ProductList, 2) Add virtualization for long lists in Dashboard, 3) Optimize image loading in Gallery component, 4) Fix state update loops in ShoppingCart, 5) Review bundle size and implement code splitting*\nLet's start by implementing memoization for the expensive calculations in your ProductList component.</assistant>\n\n<reasoning>\nThe assistant used the todo list because:\n1. First, the assistant examined the codebase to identify specific performance issues\n2. Based on this analysis, it identified multiple optimization opportunities\n3. Performance optimization is a non-trivial task requiring multiple steps\n4. The todo list helps methodically track improvements across different components\n5. This systematic approach ensures all performance bottlenecks are addressed\n</reasoning>\n</example>\n\n## Examples of When NOT to Use the Todo List\n\n<example>\nUser: How do I print 'Hello World' in Python?\nAssistant: In Python, you can print \"Hello World\" with this simple code:\n\npython\nprint(\"Hello World\")\n\nThis will output the text \"Hello World\" to the console when executed.</assistant>\n\n<reasoning>\nThe assistant did not use the todo list because this is a single, trivial task that can be completed in one step. There's no need to track multiple tasks or steps for such a straightforward request.\n</reasoning>\n</example>\n\n<example>\nUser: What does the git status command do?\nAssistant: The git status command shows the current state of your working directory and staging area. It displays which changes have been staged, which haven't, and which files aren't being tracked by Git. This is a fundamental command for understanding the current state of your repository before making commits.\n\n<reasoning>\nThe assistant did not use the todo list because this is an informational request with no actual coding task to complete. The user is simply asking for an explanation, not for the assistant to perform multiple steps or tasks.\n</reasoning>\n</example>\n\n<example>\nUser: Can you add a comment to the calculateTotal function to explain what it does?\nAssistant: Sure, let me add a comment to the calculateTotal function to explain what it does.\n* Uses the Edit tool to add a comment to the calculateTotal function *\n\n<reasoning>\nThe assistant did not use the todo list because this is a single, straightforward task confined to one location in the code. Adding a comment doesn't require tracking multiple steps or systematic organization.\n</reasoning>\n</example>\n\n<example>\nUser: Run npm install for me and tell me what happens.\nAssistant: I'll run the npm install command for you.\n\n*Executes: npm install*\n\nThe command completed successfully. Here's the output:\n[Output of npm install command]\n\nAll dependencies have been installed according to your package.json file.\n\n<reasoning>\nThe assistant did not use the todo list because this is a single command execution with immediate results. There are no multiple steps to track or organize, making the todo list unnecessary for this straightforward task.\n</reasoning>\n</example>\n\n## Task States and Management\n\n1. **Task States**: Use these states to track progress:\n   - pending: Task not yet started\n   - in_progress: Currently working on (limit to ONE task at a time)\n   - completed: Task finished successfully\n\n2. **Task Management**:\n   - Update task status in real-time as you work\n   - Mark tasks complete IMMEDIATELY after finishing (don't batch completions)\n   - Only have ONE task in_progress at any time\n   - Complete current tasks before starting new ones\n   - Remove tasks that are no longer relevant from the list entirely\n\n3. **Task Completion Requirements**:\n   - ONLY mark a task as completed when you have FULLY accomplished it\n   - If you encounter errors, blockers, or cannot finish, keep the task as in_progress\n   - When blocked, create a new task describing what needs to be resolved\n   - Never mark a task as completed if:\n     - Tests are failing\n     - Implementation is partial\n     - You encountered unresolved errors\n     - You couldn't find necessary files or dependencies\n\n4. **Task Breakdown**:\n   - Create specific, actionable items\n   - Break complex tasks into smaller, manageable steps\n   - Use clear, descriptive task names\n\nWhen in doubt, use this tool. Being proactive with task management demonstrates attentiveness and ensures you complete all requirements successfully.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "todos": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "content": {
                      "type": "string",
                      "minLength": 1
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "pending",
                        "in_progress",
                        "completed"
                      ]
                    },
                    "priority": {
                      "type": "string",
                      "enum": [
                        "high",
                        "medium",
                        "low"
                      ]
                    },
                    "id": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "content",
                    "status",
                    "priority",
                    "id"
                  ],
                  "additionalProperties": false
                },
                "description": "The updated todo list"
              }
            },
            "required": [
              "todos"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "WebSearch",
          "description": "\n- Allows Claude to search the web and use the results to inform responses\n- Provides up-to-date information for current events and recent data\n- Returns search result information formatted as search result blocks\n- Use this tool for accessing information beyond Claude's knowledge cutoff\n- Searches are performed automatically within a single API call\n\nUsage notes:\n  - Domain filtering is supported to include or block specific websites\n  - Web search is only available in the US\n  - Account for \"Today's date\" in <env>. For example, if <env> says \"Today's date: 2025-07-01\", and the user wants the latest docs, do not use 2024 in the search query. Use 2025.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "minLength": 2,
                "description": "The search query to use"
              },
              "allowed_domains": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Only include search results from these domains"
              },
              "blocked_domains": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Never include search results from these domains"
              }
            },
            "required": [
              "query"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        }
      ],
      "responseStructure": {
        "type": "object",
        "keys": [
          "id",
          "object",
          "created",
          "model",
          "choices",
          "usage",
          "stats",
          "system_fingerprint"
        ],
        "hasChoices": true,
        "hasContent": false,
        "hasUsage": true,
        "choicesCount": 1,
        "firstChoice": {
          "hasMessage": true,
          "hasToolCalls": false,
          "finishReason": "stop"
        }
      },
      "parsingAttempts": [
        "json_format",
        "function_call",
        "action_format",
        "natural_language"
      ]
    }
  },
  {
    "timestamp": "2025-08-10T08:09:30.907Z",
    "requestId": "session_1754813346759_7lwdnj44v:conv_1754813346759_ru7wt0fei:2:1754813346848:fp2l",
    "provider": "lmstudio",
    "model": "gpt-oss-20b-mlx",
    "endpoint": "localhost:1234",
    "failureType": "text_instead_of_tools",
    "originalResponse": {
      "id": "chatcmpl-0bgek9fdm66qb1wfwrqdrg8",
      "object": "chat.completion",
      "created": 1754813346,
      "model": "gpt-oss-20b-mlx",
      "choices": [
        {
          "index": 0,
          "logprobs": null,
          "finish_reason": "stop",
          "message": {
            "role": "assistant",
            "content": "Maybe we should request the repository path. Let's ask user: \"请告诉我这个小说项目在文件系统中的路径，例如 ~/Documents/github/novel 或其他。\"<|start|>assistant<|channel|>commentary to=functions.Grep<|message|>{\"path\":\"\",\"pattern\":\"novel\",\"output_mode\":\"files_with_matches\"}"
          }
        }
      ],
      "usage": {
        "prompt_tokens": 19690,
        "completion_tokens": 60,
        "total_tokens": 19750
      },
      "stats": {},
      "system_fingerprint": "gpt-oss-20b-mlx"
    },
    "expectedFormat": "openai",
    "errorMessage": "All parsing strategies failed",
    "responseAnalysis": {
      "hasToolCalls": false,
      "hasContent": true,
      "contentLength": 247,
      "contentPreview": "Maybe we should request the repository path. Let's ask user: \"请告诉我这个小说项目在文件系统中的路径，例如 ~/Documents/github/novel 或其他。\"<|start|>assistant<|channel|>commentary to=functions.Grep<|message|>{\"path\":\"\",\"patte",
      "finishReason": "stop",
      "toolCallPatterns": []
    },
    "debugInfo": {
      "requestTools": [
        {
          "name": "Task",
          "description": "Launch a new agent to handle complex, multi-step tasks autonomously.\n\nAvailable agent types and the tools they have access to:\n- general-purpose: General-purpose agent for researching complex questions, searching for code, and executing multi-step tasks. When you are searching for a keyword or file and are not confident that you will find the right match in the first few tries use this agent to perform the search for you. (Tools: *)\n- code-refactorer: Use this agent when you need to improve existing code structure, readability, or maintainability without changing functionality. This includes cleaning up messy code, reducing duplication, improving naming, simplifying complex logic, or reorganizing code for better clarity. Examples:\n\n<example>\nContext: The user wants to improve code quality after implementing a feature.\nuser: \"I just finished implementing the user authentication system. Can you help clean it up?\"\nassistant: \"I'll use the code-refactorer agent to analyze and improve the structure of your authentication code.\"\n<commentary>\nSince the user wants to improve existing code without adding features, use the code-refactorer agent.\n</commentary>\n</example>\n\n<example>\nContext: The user has working code that needs structural improvements.\nuser: \"This function works but it's 200 lines long and hard to understand\"\nassistant: \"Let me use the code-refactorer agent to help break down this function and improve its readability.\"\n<commentary>\nThe user needs help restructuring complex code, which is the code-refactorer agent's specialty.\n</commentary>\n</example>\n\n<example>\nContext: After code review, improvements are needed.\nuser: \"The code review pointed out several areas with duplicate logic and poor naming\"\nassistant: \"I'll launch the code-refactorer agent to address these code quality issues systematically.\"\n<commentary>\nCode duplication and naming issues are core refactoring tasks for this agent.\n</commentary>\n</example> (Tools: Edit, MultiEdit, Write, NotebookEdit, Grep, LS, Read)\n- project-task-planner: Use this agent when you need to create a comprehensive development task list from a Product Requirements Document (PRD). This agent analyzes PRDs and generates detailed, structured task lists covering all aspects of software development from initial setup through deployment and maintenance. Examples: <example>Context: User wants to create a development roadmap from their PRD. user: \"I have a PRD for a new e-commerce platform. Can you create a task list?\" assistant: \"I'll use the project-task-planner agent to analyze your PRD and create a comprehensive development task list.\" <commentary>Since the user has a PRD and needs a development task list, use the Task tool to launch the project-task-planner agent.</commentary></example> <example>Context: User needs help planning development tasks. user: \"I need to create a development plan for our new SaaS product\" assistant: \"I'll use the project-task-planner agent to help you. First, I'll need to see your Product Requirements Document (PRD).\" <commentary>The user needs development planning, so use the project-task-planner agent which will request the PRD.</commentary></example> (Tools: Task, Bash, Edit, MultiEdit, Write, NotebookEdit, Grep, LS, Read, ExitPlanMode, TodoWrite, WebSearch)\n- vibe-coding-coach: Use this agent when users want to build applications through conversation, focusing on the vision and feel of their app rather than technical implementation details. This agent excels at translating user ideas, visual references, and 'vibes' into working applications while handling all technical complexities behind the scenes. <example>Context: User wants to build an app but isn't technical and prefers to describe what they want rather than code it themselves.\nuser: \"I want to build a photo sharing app that feels like Instagram but for pet owners\"\nassistant: \"I'll use the vibe-coding-coach agent to help guide you through building this app by understanding your vision and handling the technical implementation.\"\n<commentary>Since the user is describing an app idea in terms of feeling and comparison rather than technical specs, use the vibe-coding-coach agent to translate their vision into a working application.</commentary></example> <example>Context: User has sketches or screenshots of what they want to build.\nuser: \"Here's a screenshot of an app I like. Can we build something similar but for tracking workouts?\"\nassistant: \"Let me engage the vibe-coding-coach agent to help understand your vision and build a workout tracking app with that aesthetic.\"\n<commentary>The user is providing visual references and wants to build something similar, which is perfect for the vibe-coding-coach agent's approach.</commentary></example> (Tools: *)\n- debug-system-architect: Use this agent when you need to establish a comprehensive debug logging system for a project. This includes setting up log directories, implementing node-level tracing, creating time-based test records, establishing replay mechanisms, and documenting debug rules. Example: <example> Context: User is setting up a new project and wants to implement proper debugging infrastructure from the start. user: \"Please help me set up a debug system for my new API router project\" <commentary> Since the user is requesting debug system setup, use the debug-system-architect agent to analyze the project and implement comprehensive logging and tracing mechanisms. </commentary> </example> <example> Context: User encounters intermittent issues in their routing system and needs better visibility. user: \"I'm having trouble tracking down why some requests fail intermittently\" <commentary> Since the user needs better debugging visibility for intermittent issues, use the debug-system-architect agent to implement node-level tracing and replay mechanisms. </commentary> </example> (Tools: *)\n- code-risk-auditor: Use this agent when you need to perform comprehensive code risk assessment and identify potential architectural issues in your codebase. Examples: <example>Context: The user has just completed a major refactoring and wants to ensure no hardcoded values or fallback mechanisms were introduced. user: \"I just finished refactoring the routing system, can you check for any code risks?\" assistant: \"I'll use the code-risk-auditor agent to perform a comprehensive risk assessment of your routing system changes.\"</example> <example>Context: Before a major release, the user wants to clean up technical debt and ensure code quality. user: \"We're preparing for v2.0 release, I need a full code audit\" assistant: \"Let me launch the code-risk-auditor agent to identify hardcoding, fallback risks, outdated tests, and duplicate implementations across the entire codebase.\"</example> <example>Context: The user notices inconsistent behavior and suspects duplicate implementations. user: \"The same feature seems to be implemented in multiple places, causing bugs\" assistant: \"I'll use the code-risk-auditor agent to scan for duplicate implementations and provide a consolidation plan.\"</example> (Tools: *)\n- security-auditor: Use this agent when you need to perform a comprehensive security audit of a codebase, identify vulnerabilities, and generate a detailed security report with actionable remediation steps. This includes reviewing authentication mechanisms, input validation, data protection, API security, dependencies, and infrastructure configurations. Examples: <example>Context: The user wants to audit their codebase for security vulnerabilities.\nuser: \"Can you perform a security audit of my application?\"\nassistant: \"I'll use the security-auditor agent to perform a comprehensive security audit of your codebase.\"\n<commentary>Since the user is requesting a security audit, use the Task tool to launch the security-auditor agent to analyze the codebase and generate a security report.</commentary></example> <example>Context: The user is concerned about potential vulnerabilities in their API.\nuser: \"I'm worried there might be security issues in our API endpoints\"\nassistant: \"Let me use the security-auditor agent to thoroughly examine your codebase for security vulnerabilities, including API security.\"\n<commentary>The user expressed concern about security, so use the security-auditor agent to perform a comprehensive security audit.</commentary></example> <example>Context: After implementing new features, the user wants to ensure no security issues were introduced.\nuser: \"We just added user authentication to our app. Can you check if it's secure?\"\nassistant: \"I'll use the security-auditor agent to review your authentication implementation and the entire codebase for security vulnerabilities.\"\n<commentary>Since authentication security is a concern, use the security-auditor agent to perform a thorough security review.</commentary></example> (Tools: Task, Bash, Edit, MultiEdit, Write, NotebookEdit)\n- project-memory-manager: Use this agent when you need to manage project-specific memory entries, create project documentation, or organize project knowledge. This includes creating project summaries, documenting project decisions, tracking project progress, and maintaining project-specific knowledge bases. <example>Context: User wants to document a project decision or create project documentation. user: \"请为我们的新项目创建一个内存管理系统的文档\" assistant: \"我将使用 project-memory-manager agent 来创建这个项目文档\" <commentary>Since the user needs project documentation, use the project-memory-manager agent to create project-specific memory entries.</commentary></example> <example>Context: User wants to track project progress or decisions. user: \"我们需要记录这个项目的关键决策点\" assistant: \"让我使用 project-memory-manager agent 来记录这些项目决策\" <commentary>Since this is project tracking, use the project-memory-manager agent to create decision-type memory entries.</commentary></example> (Tools: *)\n- rules-architect: Use this agent when you need to analyze project architecture and establish comprehensive rule management systems. Examples: <example>Context: User wants to organize project rules and create a structured rule management system. user: \"I need to reorganize our project rules and create a better structure for managing coding standards, file organization, and testing protocols\" assistant: \"I'll use the rules-architect agent to analyze the current project structure and establish a comprehensive rule management system with proper categorization and organization.\"</example> <example>Context: Project has grown complex and needs better rule organization. user: \"Our CLAUDE.md file is getting too large and we need to break down rules into manageable categories\" assistant: \"Let me call the rules-architect agent to create a structured .claude/rules system that will organize all project rules into logical categories.\"</example> (Tools: *)\n- frontend-designer: Use this agent when you need to convert design mockups, wireframes, or visual concepts into detailed technical specifications and implementation guides for frontend development. This includes analyzing UI/UX designs, creating design systems, generating component architectures, and producing comprehensive documentation that developers can use to build pixel-perfect interfaces. Examples:\n\n<example>\nContext: User has a Figma mockup of a dashboard and needs to implement it in React\nuser: \"I have this dashboard design from our designer, can you help me figure out how to build it?\"\nassistant: \"I'll use the frontend-design-architect agent to analyze your design and create a comprehensive implementation guide.\"\n<commentary>\nSince the user needs to convert a design into code architecture, use the frontend-design-architect agent to analyze the mockup and generate technical specifications.\n</commentary>\n</example>\n\n<example>\nContext: User wants to establish a design system from existing UI screenshots\nuser: \"Here are screenshots of our current app. We need to extract a consistent design system from these.\"\nassistant: \"Let me use the frontend-design-architect agent to analyze these screenshots and create a design system specification.\"\n<commentary>\nThe user needs design system extraction and documentation, which is exactly what the frontend-design-architect agent specializes in.\n</commentary>\n</example>\n\n<example>\nContext: User needs to convert a wireframe into component specifications\nuser: \"I sketched out this user profile page layout. How should I structure the components?\"\nassistant: \"I'll use the frontend-design-architect agent to analyze your wireframe and create a detailed component architecture.\"\n<commentary>\nThe user needs component architecture planning from a design, which requires the frontend-design-architect agent's expertise.\n</commentary>\n</example> (Tools: *)\n- content-writer: Use this agent when you need to create compelling, informative content that explains complex topics in simple terms. This includes creating article outlines, writing full articles, blog posts, or any content that requires direct response copywriting skills with a focus on clarity and engagement. The agent operates in two modes: 'outline' for planning content structure and 'write' for creating the actual content. Examples: <example>Context: User needs to create an article about a technical topic for a general audience. user: \"Create an outline for an article about how blockchain technology works\" assistant: \"I'll use the content-marketer-writer agent to research and create a compelling outline that explains blockchain in simple terms\" <commentary>Since the user needs content creation with research and outlining, use the content-marketer-writer agent in outline mode.</commentary></example> <example>Context: User has an outline and needs to write the full article. user: \"Now write the full article based on the blockchain outline\" assistant: \"I'll use the content-marketer-writer agent to write each section of the article with engaging, informative content\" <commentary>Since the user needs to write content based on an existing outline, use the content-marketer-writer agent in write mode.</commentary></example> (Tools: *)\n- test-runner: Use this agent to run and manage tests according to the global and project-specific testing rules. This includes executing test scripts, documenting test results, and helping to diagnose issues following the standard pipeline. <example>Context: User wants to run all functional tests. user: \"运行所有功能测试\" assistant: \"我将使用 test-runner agent 来执行所有功能测试\" <commentary>Since the user wants to run tests by category, use the test-runner agent.</commentary></example> <example>Context: User wants to verify a bug fix. user: \"我修复了一个bug，帮我验证一下\" assistant: \"让我使用 test-runner agent 来执行对应的修复验证测试\" <commentary>The user needs to verify a fix, which is a core task for the test-runner agent.</commentary></example> (Tools: *)\n- in-depth-research-analyst: Use this agent when you need to conduct comprehensive research reports with in-depth web mining, data analysis, and visualization. This includes industry analysis, market research, competitive intelligence, and trend forecasting with accurate data from authoritative sources. <example>Context: User wants a comprehensive industry analysis report. user: \"请对人工智能芯片市场进行深入调研，包括主要厂商、市场份额和增长趋势\" assistant: \"我将使用 in-depth-research-analyst agent 来进行这项深入的市场调研并生成可视化报告\" <commentary>Since the user needs a comprehensive industry analysis with data visualization, use the in-depth-research-analyst agent to conduct thorough research and create an integrated report.</commentary></example> <example>Context: User wants market research with accurate data and visualizations. user: \"我们需要一份关于电动汽车充电基础设施的深度报告，包含数据图表\" assistant: \"让我使用 in-depth-research-analyst agent 来收集准确数据并生成图文并茂的分析报告\" <commentary>Since this requires market research with data accuracy and visualizations, use the in-depth-research-analyst agent to create a comprehensive report.</commentary></example> (Tools: *)\n- prd-writer: Use this agent when you need to create a comprehensive Product Requirements Document (PRD) for a software project or feature. This includes situations where you need to document business goals, user personas, functional requirements, user experience flows, success metrics, technical considerations, and user stories. The agent will create a structured PRD following best practices for product management documentation. Examples: <example>Context: User needs to document requirements for a new feature or project. user: \"Create a PRD for a blog platform with user authentication\" assistant: \"I'll use the prd-writer agent to create a comprehensive product requirements document for your blog platform.\" <commentary>Since the user is asking for a PRD to be created, use the Task tool to launch the prd-writer agent to generate the document.</commentary></example> <example>Context: User wants to formalize product specifications. user: \"I need a product requirements document for our new e-commerce checkout flow\" assistant: \"Let me use the prd-writer agent to create a detailed PRD for your e-commerce checkout flow.\" <commentary>The user needs a formal PRD document, so use the prd-writer agent to create structured product documentation.</commentary></example> (Tools: Task, Bash, Grep, LS, Read, Write, WebSearch, Glob)\n- pipeline-debug-universal: Use this agent when you need to implement comprehensive debug hooks and testing infrastructure for ANY pipeline system - whether it's API routing, data processing, CI/CD workflows, or transformation pipelines. This agent specializes in creating universal debug architectures that work across different pipeline types with data capture, replay capabilities, and systematic testing matrices. Examples: <example>Context: User is working on a multi-provider API routing system and needs to add debug capabilities to track data flow through each pipeline step. user: \"I need to add debug hooks to our routing pipeline so we can capture and replay data at each step\" assistant: \"I'll use the pipeline-debug-universal agent to design a comprehensive debug infrastructure with data capture and replay capabilities\" <commentary>Since the user needs pipeline debugging infrastructure, use the pipeline-debug-universal agent to create debug hooks and testing matrices.</commentary></example> <example>Context: User has a complex data transformation pipeline and wants to build systematic testing for each stage and provider. user: \"Our data processing pipeline has issues and we need better testing infrastructure to isolate problems at each step\" assistant: \"Let me use the pipeline-debug-universal agent to create a complete testing matrix and debug system\" <commentary>Since the user needs systematic pipeline testing infrastructure, use the pipeline-debug-universal agent to architect the testing system.</commentary></example> <example>Context: User is building a CI/CD pipeline and needs to implement debug capabilities for tracking deployment issues. user: \"Our deployment pipeline fails randomly and we can't reproduce the issues consistently\" assistant: \"I'll deploy the pipeline-debug-universal agent to create comprehensive debug hooks and replay capabilities for your CI/CD pipeline\" <commentary>Since the user needs debug infrastructure for a deployment pipeline, use the pipeline-debug-universal agent to design the debug system.</commentary></example> (Tools: *)\n\nWhen using the Task tool, you must specify a subagent_type parameter to select which agent type to use.\n\n\n\nWhen NOT to use the Agent tool:\n- If you want to read a specific file path, use the Read or Glob tool instead of the Agent tool, to find the match more quickly\n- If you are searching for a specific class definition like \"class Foo\", use the Glob tool instead, to find the match more quickly\n- If you are searching for code within a specific file or set of 2-3 files, use the Read tool instead of the Agent tool, to find the match more quickly\n- Other tasks that are not related to the agent descriptions above\n\n\nUsage notes:\n1. Launch multiple agents concurrently whenever possible, to maximize performance; to do that, use a single message with multiple tool uses\n2. When the agent is done, it will return a single message back to you. The result returned by the agent is not visible to the user. To show the user the result, you should send a text message back to the user with a concise summary of the result.\n3. Each agent invocation is stateless. You will not be able to send additional messages to the agent, nor will the agent be able to communicate with you outside of its final report. Therefore, your prompt should contain a highly detailed task description for the agent to perform autonomously and you should specify exactly what information the agent should return back to you in its final and only message to you.\n4. The agent's outputs should generally be trusted\n5. Clearly tell the agent whether you expect it to write code or just to do research (search, file reads, web fetches, etc.), since it is not aware of the user's intent\n6. If the agent description mentions that it should be used proactively, then you should try your best to use it without the user having to ask for it first. Use your judgement.\n\nExample usage:\n\n<example_agent_descriptions>\n\"code-reviewer\": use this agent after you are done writing a signficant piece of code\n\"greeting-responder\": use this agent when to respond to user greetings with a friendly joke\n</example_agent_description>\n\n<example>\nuser: \"Please write a function that checks if a number is prime\"\nassistant: Sure let me write a function that checks if a number is prime\nassistant: First let me use the Write tool to write a function that checks if a number is prime\nassistant: I'm going to use the Write tool to write the following code:\n<code>\nfunction isPrime(n) {\n  if (n <= 1) return false\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n</code>\n<commentary>\nSince a signficant piece of code was written and the task was completed, now use the code-reviewer agent to review the code\n</commentary>\nassistant: Now let me use the code-reviewer agent to review the code\nassistant: Uses the Task tool to launch the with the code-reviewer agent\n</example>\n\n<example>\nuser: \"Hello\"\n<commentary>\nSince the user is greeting, use the greeting-responder agent to respond with a friendly joke\n</commentary>\nassistant: \"I'm going to use the Task tool to launch the with the greeting-responder agent\"\n</example>\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "description": {
                "type": "string",
                "description": "A short (3-5 word) description of the task"
              },
              "prompt": {
                "type": "string",
                "description": "The task for the agent to perform"
              },
              "subagent_type": {
                "type": "string",
                "description": "The type of specialized agent to use for this task"
              }
            },
            "required": [
              "description",
              "prompt",
              "subagent_type"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Bash",
          "description": "Executes a given bash command in a persistent shell session with optional timeout, ensuring proper handling and security measures.\n\nBefore executing the command, please follow these steps:\n\n1. Directory Verification:\n   - If the command will create new directories or files, first use the LS tool to verify the parent directory exists and is the correct location\n   - For example, before running \"mkdir foo/bar\", first use LS to check that \"foo\" exists and is the intended parent directory\n\n2. Command Execution:\n   - Always quote file paths that contain spaces with double quotes (e.g., cd \"path with spaces/file.txt\")\n   - Examples of proper quoting:\n     - cd \"/Users/name/My Documents\" (correct)\n     - cd /Users/name/My Documents (incorrect - will fail)\n     - python \"/path/with spaces/script.py\" (correct)\n     - python /path/with spaces/script.py (incorrect - will fail)\n   - After ensuring proper quoting, execute the command.\n   - Capture the output of the command.\n\nUsage notes:\n  - The command argument is required.\n  - You can specify an optional timeout in milliseconds (up to 600000ms / 10 minutes). If not specified, commands will timeout after 120000ms (2 minutes).\n  - It is very helpful if you write a clear, concise description of what this command does in 5-10 words.\n  - If the output exceeds 30000 characters, output will be truncated before being returned to you.\n  - VERY IMPORTANT: You MUST avoid using search commands like `find` and `grep`. Instead use Grep, Glob, or Task to search. You MUST avoid read tools like `cat`, `head`, `tail`, and `ls`, and use Read and LS to read files.\n - If you _still_ need to run `grep`, STOP. ALWAYS USE ripgrep at `rg` first, which all ${PRODUCT_NAME} users have pre-installed.\n  - When issuing multiple commands, use the ';' or '&&' operator to separate them. DO NOT use newlines (newlines are ok in quoted strings).\n  - Try to maintain your current working directory throughout the session by using absolute paths and avoiding usage of `cd`. You may use `cd` if the User explicitly requests it.\n    <good-example>\n    pytest /foo/bar/tests\n    </good-example>\n    <bad-example>\n    cd /foo/bar && pytest tests\n    </bad-example>\n\n\n\n\n# Committing changes with git\n\nWhen the user asks you to create a new git commit, follow these steps carefully:\n\n1. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following bash commands in parallel, each using the Bash tool:\n  - Run a git status command to see all untracked files.\n  - Run a git diff command to see both staged and unstaged changes that will be committed.\n  - Run a git log command to see recent commit messages, so that you can follow this repository's commit message style.\n2. Analyze all staged changes (both previously staged and newly added) and draft a commit message:\n  - Summarize the nature of the changes (eg. new feature, enhancement to an existing feature, bug fix, refactoring, test, docs, etc.). Ensure the message accurately reflects the changes and their purpose (i.e. \"add\" means a wholly new feature, \"update\" means an enhancement to an existing feature, \"fix\" means a bug fix, etc.).\n  - Check for any sensitive information that shouldn't be committed\n  - Draft a concise (1-2 sentences) commit message that focuses on the \"why\" rather than the \"what\"\n  - Ensure it accurately reflects the changes and their purpose\n3. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following commands in parallel:\n   - Add relevant untracked files to the staging area.\n   - Create the commit with a message ending with:\n   🤖 Generated with [Claude Code](https://claude.ai/code)\n\n   Co-Authored-By: Claude <noreply@anthropic.com>\n   - Run git status to make sure the commit succeeded.\n4. If the commit fails due to pre-commit hook changes, retry the commit ONCE to include these automated changes. If it fails again, it usually means a pre-commit hook is preventing the commit. If the commit succeeds but you notice that files were modified by the pre-commit hook, you MUST amend your commit to include them.\n\nImportant notes:\n- NEVER update the git config\n- NEVER run additional commands to read or explore code, besides git bash commands\n- NEVER use the TodoWrite or Task tools\n- DO NOT push to the remote repository unless the user explicitly asks you to do so\n- IMPORTANT: Never use git commands with the -i flag (like git rebase -i or git add -i) since they require interactive input which is not supported.\n- If there are no changes to commit (i.e., no untracked files and no modifications), do not create an empty commit\n- In order to ensure good formatting, ALWAYS pass the commit message via a HEREDOC, a la this example:\n<example>\ngit commit -m \"$(cat <<'EOF'\n   Commit message here.\n\n   🤖 Generated with [Claude Code](https://claude.ai/code)\n\n   Co-Authored-By: Claude <noreply@anthropic.com>\n   EOF\n   )\"\n</example>\n\n# Creating pull requests\nUse the gh command via the Bash tool for ALL GitHub-related tasks including working with issues, pull requests, checks, and releases. If given a Github URL use the gh command to get the information needed.\n\nIMPORTANT: When the user asks you to create a pull request, follow these steps carefully:\n\n1. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following bash commands in parallel using the Bash tool, in order to understand the current state of the branch since it diverged from the main branch:\n   - Run a git status command to see all untracked files\n   - Run a git diff command to see both staged and unstaged changes that will be committed\n   - Check if the current branch tracks a remote branch and is up to date with the remote, so you know if you need to push to the remote\n   - Run a git log command and `git diff [base-branch]...HEAD` to understand the full commit history for the current branch (from the time it diverged from the base branch)\n2. Analyze all changes that will be included in the pull request, making sure to look at all relevant commits (NOT just the latest commit, but ALL commits that will be included in the pull request!!!), and draft a pull request summary\n3. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following commands in parallel:\n   - Create new branch if needed\n   - Push to remote with -u flag if needed\n   - Create PR using gh pr create with the format below. Use a HEREDOC to pass the body to ensure correct formatting.\n<example>\ngh pr create --title \"the pr title\" --body \"$(cat <<'EOF'\n## Summary\n<1-3 bullet points>\n\n## Test plan\n[Checklist of TODOs for testing the pull request...]\n\n🤖 Generated with [Claude Code](https://claude.ai/code)\nEOF\n)\"\n</example>\n\nImportant:\n- NEVER update the git config\n- DO NOT use the TodoWrite or Task tools\n- Return the PR URL when you're done, so the user can see it\n\n# Other common operations\n- View comments on a Github PR: gh api repos/foo/bar/pulls/123/comments",
          "input_schema": {
            "type": "object",
            "properties": {
              "command": {
                "type": "string",
                "description": "The command to execute"
              },
              "timeout": {
                "type": "number",
                "description": "Optional timeout in milliseconds (max 600000)"
              },
              "description": {
                "type": "string",
                "description": " Clear, concise description of what this command does in 5-10 words. Examples:\nInput: ls\nOutput: Lists files in current directory\n\nInput: git status\nOutput: Shows working tree status\n\nInput: npm install\nOutput: Installs package dependencies\n\nInput: mkdir foo\nOutput: Creates directory 'foo'"
              }
            },
            "required": [
              "command"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Glob",
          "description": "- Fast file pattern matching tool that works with any codebase size\n- Supports glob patterns like \"**/*.js\" or \"src/**/*.ts\"\n- Returns matching file paths sorted by modification time\n- Use this tool when you need to find files by name patterns\n- When you are doing an open ended search that may require multiple rounds of globbing and grepping, use the Agent tool instead\n- You have the capability to call multiple tools in a single response. It is always better to speculatively perform multiple searches as a batch that are potentially useful.",
          "input_schema": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "The glob pattern to match files against"
              },
              "path": {
                "type": "string",
                "description": "The directory to search in. If not specified, the current working directory will be used. IMPORTANT: Omit this field to use the default directory. DO NOT enter \"undefined\" or \"null\" - simply omit it for the default behavior. Must be a valid directory path if provided."
              }
            },
            "required": [
              "pattern"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Grep",
          "description": "A powerful search tool built on ripgrep\n\n  Usage:\n  - ALWAYS use Grep for search tasks. NEVER invoke `grep` or `rg` as a Bash command. The Grep tool has been optimized for correct permissions and access.\n  - Supports full regex syntax (e.g., \"log.*Error\", \"function\\s+\\w+\")\n  - Filter files with glob parameter (e.g., \"*.js\", \"**/*.tsx\") or type parameter (e.g., \"js\", \"py\", \"rust\")\n  - Output modes: \"content\" shows matching lines, \"files_with_matches\" shows only file paths (default), \"count\" shows match counts\n  - Use Task tool for open-ended searches requiring multiple rounds\n  - Pattern syntax: Uses ripgrep (not grep) - literal braces need escaping (use `interface\\{\\}` to find `interface{}` in Go code)\n  - Multiline matching: By default patterns match within single lines only. For cross-line patterns like `struct \\{[\\s\\S]*?field`, use `multiline: true`\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "The regular expression pattern to search for in file contents"
              },
              "path": {
                "type": "string",
                "description": "File or directory to search in (rg PATH). Defaults to current working directory."
              },
              "glob": {
                "type": "string",
                "description": "Glob pattern to filter files (e.g. \"*.js\", \"*.{ts,tsx}\") - maps to rg --glob"
              },
              "output_mode": {
                "type": "string",
                "enum": [
                  "content",
                  "files_with_matches",
                  "count"
                ],
                "description": "Output mode: \"content\" shows matching lines (supports -A/-B/-C context, -n line numbers, head_limit), \"files_with_matches\" shows file paths (supports head_limit), \"count\" shows match counts (supports head_limit). Defaults to \"files_with_matches\"."
              },
              "-B": {
                "type": "number",
                "description": "Number of lines to show before each match (rg -B). Requires output_mode: \"content\", ignored otherwise."
              },
              "-A": {
                "type": "number",
                "description": "Number of lines to show after each match (rg -A). Requires output_mode: \"content\", ignored otherwise."
              },
              "-C": {
                "type": "number",
                "description": "Number of lines to show before and after each match (rg -C). Requires output_mode: \"content\", ignored otherwise."
              },
              "-n": {
                "type": "boolean",
                "description": "Show line numbers in output (rg -n). Requires output_mode: \"content\", ignored otherwise."
              },
              "-i": {
                "type": "boolean",
                "description": "Case insensitive search (rg -i)"
              },
              "type": {
                "type": "string",
                "description": "File type to search (rg --type). Common types: js, py, rust, go, java, etc. More efficient than include for standard file types."
              },
              "head_limit": {
                "type": "number",
                "description": "Limit output to first N lines/entries, equivalent to \"| head -N\". Works across all output modes: content (limits output lines), files_with_matches (limits file paths), count (limits count entries). When unspecified, shows all results from ripgrep."
              },
              "multiline": {
                "type": "boolean",
                "description": "Enable multiline mode where . matches newlines and patterns can span lines (rg -U --multiline-dotall). Default: false."
              }
            },
            "required": [
              "pattern"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "LS",
          "description": "Lists files and directories in a given path. The path parameter must be an absolute path, not a relative path. You can optionally provide an array of glob patterns to ignore with the ignore parameter. You should generally prefer the Glob and Grep tools, if you know which directories to search.",
          "input_schema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "The absolute path to the directory to list (must be absolute, not relative)"
              },
              "ignore": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of glob patterns to ignore"
              }
            },
            "required": [
              "path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "ExitPlanMode",
          "description": "Use this tool when you are in plan mode and have finished presenting your plan and are ready to code. This will prompt the user to exit plan mode.\nIMPORTANT: Only use this tool when the task requires planning the implementation steps of a task that requires writing code. For research tasks where you're gathering information, searching files, reading files or in general trying to understand the codebase - do NOT use this tool.\n\nEg.\n1. Initial task: \"Search for and understand the implementation of vim mode in the codebase\" - Do not use the exit plan mode tool because you are not planning the implementation steps of a task.\n2. Initial task: \"Help me implement yank mode for vim\" - Use the exit plan mode tool after you have finished planning the implementation steps of the task.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "plan": {
                "type": "string",
                "description": "The plan you came up with, that you want to run by the user for approval. Supports markdown. The plan should be pretty concise."
              }
            },
            "required": [
              "plan"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Read",
          "description": "Reads a file from the local filesystem. You can access any file directly by using this tool.\nAssume this tool is able to read all files on the machine. If the User provides a path to a file assume that path is valid. It is okay to read a file that does not exist; an error will be returned.\n\nUsage:\n- The file_path parameter must be an absolute path, not a relative path\n- By default, it reads up to 2000 lines starting from the beginning of the file\n- You can optionally specify a line offset and limit (especially handy for long files), but it's recommended to read the whole file by not providing these parameters\n- Any lines longer than 2000 characters will be truncated\n- Results are returned using cat -n format, with line numbers starting at 1\n- This tool allows Claude Code to read images (eg PNG, JPG, etc). When reading an image file the contents are presented visually as Claude Code is a multimodal LLM.\n- This tool can read PDF files (.pdf). PDFs are processed page by page, extracting both text and visual content for analysis.\n- For Jupyter notebooks (.ipynb files), use the NotebookRead instead\n- You have the capability to call multiple tools in a single response. It is always better to speculatively read multiple files as a batch that are potentially useful.\n- You will regularly be asked to read screenshots. If the user provides a path to a screenshot ALWAYS use this tool to view the file at the path. This tool will work with all temporary file paths like /var/folders/123/abc/T/TemporaryItems/NSIRD_screencaptureui_ZfB1tD/Screenshot.png\n- If you read a file that exists but has empty contents you will receive a system reminder warning in place of file contents.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to read"
              },
              "offset": {
                "type": "number",
                "description": "The line number to start reading from. Only provide if the file is too large to read at once"
              },
              "limit": {
                "type": "number",
                "description": "The number of lines to read. Only provide if the file is too large to read at once."
              }
            },
            "required": [
              "file_path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Edit",
          "description": "Performs exact string replacements in files.\n\nUsage:\n- You must use your `Read` tool at least once in the conversation before editing. This tool will error if you attempt an edit without reading the file.\n- When editing text from Read tool output, ensure you preserve the exact indentation (tabs/spaces) as it appears AFTER the line number prefix. The line number prefix format is: spaces + line number + tab. Everything after that tab is the actual file content to match. Never include any part of the line number prefix in the old_string or new_string.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- Only use emojis if the user explicitly requests it. Avoid adding emojis to files unless asked.\n- The edit will FAIL if `old_string` is not unique in the file. Either provide a larger string with more surrounding context to make it unique or use `replace_all` to change every instance of `old_string`.\n- Use `replace_all` for replacing and renaming strings across the file. This parameter is useful if you want to rename a variable for instance.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to modify"
              },
              "old_string": {
                "type": "string",
                "description": "The text to replace"
              },
              "new_string": {
                "type": "string",
                "description": "The text to replace it with (must be different from old_string)"
              },
              "replace_all": {
                "type": "boolean",
                "default": false,
                "description": "Replace all occurences of old_string (default false)"
              }
            },
            "required": [
              "file_path",
              "old_string",
              "new_string"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "MultiEdit",
          "description": "This is a tool for making multiple edits to a single file in one operation. It is built on top of the Edit tool and allows you to perform multiple find-and-replace operations efficiently. Prefer this tool over the Edit tool when you need to make multiple edits to the same file.\n\nBefore using this tool:\n\n1. Use the Read tool to understand the file's contents and context\n2. Verify the directory path is correct\n\nTo make multiple file edits, provide the following:\n1. file_path: The absolute path to the file to modify (must be absolute, not relative)\n2. edits: An array of edit operations to perform, where each edit contains:\n   - old_string: The text to replace (must match the file contents exactly, including all whitespace and indentation)\n   - new_string: The edited text to replace the old_string\n   - replace_all: Replace all occurences of old_string. This parameter is optional and defaults to false.\n\nIMPORTANT:\n- All edits are applied in sequence, in the order they are provided\n- Each edit operates on the result of the previous edit\n- All edits must be valid for the operation to succeed - if any edit fails, none will be applied\n- This tool is ideal when you need to make several changes to different parts of the same file\n- For Jupyter notebooks (.ipynb files), use the NotebookEdit instead\n\nCRITICAL REQUIREMENTS:\n1. All edits follow the same requirements as the single Edit tool\n2. The edits are atomic - either all succeed or none are applied\n3. Plan your edits carefully to avoid conflicts between sequential operations\n\nWARNING:\n- The tool will fail if edits.old_string doesn't match the file contents exactly (including whitespace)\n- The tool will fail if edits.old_string and edits.new_string are the same\n- Since edits are applied in sequence, ensure that earlier edits don't affect the text that later edits are trying to find\n\nWhen making edits:\n- Ensure all edits result in idiomatic, correct code\n- Do not leave the code in a broken state\n- Always use absolute file paths (starting with /)\n- Only use emojis if the user explicitly requests it. Avoid adding emojis to files unless asked.\n- Use replace_all for replacing and renaming strings across the file. This parameter is useful if you want to rename a variable for instance.\n\nIf you want to create a new file, use:\n- A new file path, including dir name if needed\n- First edit: empty old_string and the new file's contents as new_string\n- Subsequent edits: normal edit operations on the created content",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to modify"
              },
              "edits": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "old_string": {
                      "type": "string",
                      "description": "The text to replace"
                    },
                    "new_string": {
                      "type": "string",
                      "description": "The text to replace it with"
                    },
                    "replace_all": {
                      "type": "boolean",
                      "default": false,
                      "description": "Replace all occurences of old_string (default false)."
                    }
                  },
                  "required": [
                    "old_string",
                    "new_string"
                  ],
                  "additionalProperties": false
                },
                "minItems": 1,
                "description": "Array of edit operations to perform sequentially on the file"
              }
            },
            "required": [
              "file_path",
              "edits"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Write",
          "description": "Writes a file to the local filesystem.\n\nUsage:\n- This tool will overwrite the existing file if there is one at the provided path.\n- If this is an existing file, you MUST use the Read tool first to read the file's contents. This tool will fail if you did not read the file first.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- NEVER proactively create documentation files (*.md) or README files. Only create documentation files if explicitly requested by the User.\n- Only use emojis if the user explicitly requests it. Avoid writing emojis to files unless asked.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to write (must be absolute, not relative)"
              },
              "content": {
                "type": "string",
                "description": "The content to write to the file"
              }
            },
            "required": [
              "file_path",
              "content"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "NotebookRead",
          "description": "Reads a Jupyter notebook (.ipynb file) and returns all of the cells with their outputs. Jupyter notebooks are interactive documents that combine code, text, and visualizations, commonly used for data analysis and scientific computing. The notebook_path parameter must be an absolute path, not a relative path.",
          "input_schema": {
            "type": "object",
            "properties": {
              "notebook_path": {
                "type": "string",
                "description": "The absolute path to the Jupyter notebook file to read (must be absolute, not relative)"
              },
              "cell_id": {
                "type": "string",
                "description": "The ID of a specific cell to read. If not provided, all cells will be read."
              }
            },
            "required": [
              "notebook_path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "NotebookEdit",
          "description": "Completely replaces the contents of a specific cell in a Jupyter notebook (.ipynb file) with new source. Jupyter notebooks are interactive documents that combine code, text, and visualizations, commonly used for data analysis and scientific computing. The notebook_path parameter must be an absolute path, not a relative path. The cell_number is 0-indexed. Use edit_mode=insert to add a new cell at the index specified by cell_number. Use edit_mode=delete to delete the cell at the index specified by cell_number.",
          "input_schema": {
            "type": "object",
            "properties": {
              "notebook_path": {
                "type": "string",
                "description": "The absolute path to the Jupyter notebook file to edit (must be absolute, not relative)"
              },
              "cell_id": {
                "type": "string",
                "description": "The ID of the cell to edit. When inserting a new cell, the new cell will be inserted after the cell with this ID, or at the beginning if not specified."
              },
              "new_source": {
                "type": "string",
                "description": "The new source for the cell"
              },
              "cell_type": {
                "type": "string",
                "enum": [
                  "code",
                  "markdown"
                ],
                "description": "The type of the cell (code or markdown). If not specified, it defaults to the current cell type. If using edit_mode=insert, this is required."
              },
              "edit_mode": {
                "type": "string",
                "enum": [
                  "replace",
                  "insert",
                  "delete"
                ],
                "description": "The type of edit to make (replace, insert, delete). Defaults to replace."
              }
            },
            "required": [
              "notebook_path",
              "new_source"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "WebFetch",
          "description": "\n- Fetches content from a specified URL and processes it using an AI model\n- Takes a URL and a prompt as input\n- Fetches the URL content, converts HTML to markdown\n- Processes the content with the prompt using a small, fast model\n- Returns the model's response about the content\n- Use this tool when you need to retrieve and analyze web content\n\nUsage notes:\n  - IMPORTANT: If an MCP-provided web fetch tool is available, prefer using that tool instead of this one, as it may have fewer restrictions. All MCP-provided tools start with \"mcp__\".\n  - The URL must be a fully-formed valid URL\n  - HTTP URLs will be automatically upgraded to HTTPS\n  - The prompt should describe what information you want to extract from the page\n  - This tool is read-only and does not modify any files\n  - Results may be summarized if the content is very large\n  - Includes a self-cleaning 15-minute cache for faster responses when repeatedly accessing the same URL\n  - When a URL redirects to a different host, the tool will inform you and provide the redirect URL in a special format. You should then make a new WebFetch request with the redirect URL to fetch the content.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "format": "uri",
                "description": "The URL to fetch content from"
              },
              "prompt": {
                "type": "string",
                "description": "The prompt to run on the fetched content"
              }
            },
            "required": [
              "url",
              "prompt"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "TodoWrite",
          "description": "Use this tool to create and manage a structured task list for your current coding session. This helps you track progress, organize complex tasks, and demonstrate thoroughness to the user.\nIt also helps the user understand the progress of the task and overall progress of their requests.\n\n## When to Use This Tool\nUse this tool proactively in these scenarios:\n\n1. Complex multi-step tasks - When a task requires 3 or more distinct steps or actions\n2. Non-trivial and complex tasks - Tasks that require careful planning or multiple operations\n3. User explicitly requests todo list - When the user directly asks you to use the todo list\n4. User provides multiple tasks - When users provide a list of things to be done (numbered or comma-separated)\n5. After receiving new instructions - Immediately capture user requirements as todos\n6. When you start working on a task - Mark it as in_progress BEFORE beginning work. Ideally you should only have one todo as in_progress at a time\n7. After completing a task - Mark it as completed and add any new follow-up tasks discovered during implementation\n\n## When NOT to Use This Tool\n\nSkip using this tool when:\n1. There is only a single, straightforward task\n2. The task is trivial and tracking it provides no organizational benefit\n3. The task can be completed in less than 3 trivial steps\n4. The task is purely conversational or informational\n\nNOTE that you should not use this tool if there is only one trivial task to do. In this case you are better off just doing the task directly.\n\n## Examples of When to Use the Todo List\n\n<example>\nUser: I want to add a dark mode toggle to the application settings. Make sure you run the tests and build when you're done!\nAssistant: I'll help add a dark mode toggle to your application settings. Let me create a todo list to track this implementation.\n*Creates todo list with the following items:*\n1. Create dark mode toggle component in Settings page\n2. Add dark mode state management (context/store)\n3. Implement CSS-in-JS styles for dark theme\n4. Update existing components to support theme switching\n5. Run tests and build process, addressing any failures or errors that occur\n*Begins working on the first task*\n\n<reasoning>\nThe assistant used the todo list because:\n1. Adding dark mode is a multi-step feature requiring UI, state management, and styling changes\n2. The user explicitly requested tests and build be run afterward\n3. The assistant inferred that tests and build need to pass by adding \"Ensure tests and build succeed\" as the final task\n</reasoning>\n</example>\n\n<example>\nUser: Help me rename the function getCwd to getCurrentWorkingDirectory across my project\nAssistant: Let me first search through your codebase to find all occurrences of 'getCwd'.\n*Uses grep or search tools to locate all instances of getCwd in the codebase*\nAssistant: I've found 15 instances of 'getCwd' across 8 different files. Let me create a todo list to track these changes.\n*Creates todo list with specific items for each file that needs updating*\n\n<reasoning>\nThe assistant used the todo list because:\n1. First, the assistant searched to understand the scope of the task\n2. Upon finding multiple occurrences across different files, it determined this was a complex task with multiple steps\n3. The todo list helps ensure every instance is tracked and updated systematically\n4. This approach prevents missing any occurrences and maintains code consistency\n</reasoning>\n</example>\n\n\n<example>\nUser: I need to implement these features for my e-commerce site: user registration, product catalog, shopping cart, and checkout flow.\nAssistant: I'll help implement these features. First, let's add all the features to the todo list.\n*Creates a todo list breaking down each feature into specific tasks based on the project architecture*\nAssistant: Let's start with user registration. This will involve creating database models, API endpoints, and frontend forms that integrate with your existing authentication system.\n\n<reasoning>\nThe assistant used the todo list because:\n1. The user provided multiple complex features to implement in a comma separated list\n2. The todo list helps organize these large features into manageable tasks\n3. This approach allows for tracking progress across the entire implementation\n</reasoning>\n</example>\n\n<example>\nUser: Can you help optimize my React application? It's rendering slowly and has performance issues.</user>\nAssistant: I'll help optimize your React application. First, let me examine your codebase to identify potential performance bottlenecks.\n*Reviews component structure, render patterns, state management, and data fetching*\nAssistant: After analyzing your codebase, I've identified several performance issues. Let me create a todo list to track our optimization efforts.\n*Creates todo list with items like: 1) Implement memoization for expensive calculations in ProductList, 2) Add virtualization for long lists in Dashboard, 3) Optimize image loading in Gallery component, 4) Fix state update loops in ShoppingCart, 5) Review bundle size and implement code splitting*\nLet's start by implementing memoization for the expensive calculations in your ProductList component.</assistant>\n\n<reasoning>\nThe assistant used the todo list because:\n1. First, the assistant examined the codebase to identify specific performance issues\n2. Based on this analysis, it identified multiple optimization opportunities\n3. Performance optimization is a non-trivial task requiring multiple steps\n4. The todo list helps methodically track improvements across different components\n5. This systematic approach ensures all performance bottlenecks are addressed\n</reasoning>\n</example>\n\n## Examples of When NOT to Use the Todo List\n\n<example>\nUser: How do I print 'Hello World' in Python?\nAssistant: In Python, you can print \"Hello World\" with this simple code:\n\npython\nprint(\"Hello World\")\n\nThis will output the text \"Hello World\" to the console when executed.</assistant>\n\n<reasoning>\nThe assistant did not use the todo list because this is a single, trivial task that can be completed in one step. There's no need to track multiple tasks or steps for such a straightforward request.\n</reasoning>\n</example>\n\n<example>\nUser: What does the git status command do?\nAssistant: The git status command shows the current state of your working directory and staging area. It displays which changes have been staged, which haven't, and which files aren't being tracked by Git. This is a fundamental command for understanding the current state of your repository before making commits.\n\n<reasoning>\nThe assistant did not use the todo list because this is an informational request with no actual coding task to complete. The user is simply asking for an explanation, not for the assistant to perform multiple steps or tasks.\n</reasoning>\n</example>\n\n<example>\nUser: Can you add a comment to the calculateTotal function to explain what it does?\nAssistant: Sure, let me add a comment to the calculateTotal function to explain what it does.\n* Uses the Edit tool to add a comment to the calculateTotal function *\n\n<reasoning>\nThe assistant did not use the todo list because this is a single, straightforward task confined to one location in the code. Adding a comment doesn't require tracking multiple steps or systematic organization.\n</reasoning>\n</example>\n\n<example>\nUser: Run npm install for me and tell me what happens.\nAssistant: I'll run the npm install command for you.\n\n*Executes: npm install*\n\nThe command completed successfully. Here's the output:\n[Output of npm install command]\n\nAll dependencies have been installed according to your package.json file.\n\n<reasoning>\nThe assistant did not use the todo list because this is a single command execution with immediate results. There are no multiple steps to track or organize, making the todo list unnecessary for this straightforward task.\n</reasoning>\n</example>\n\n## Task States and Management\n\n1. **Task States**: Use these states to track progress:\n   - pending: Task not yet started\n   - in_progress: Currently working on (limit to ONE task at a time)\n   - completed: Task finished successfully\n\n2. **Task Management**:\n   - Update task status in real-time as you work\n   - Mark tasks complete IMMEDIATELY after finishing (don't batch completions)\n   - Only have ONE task in_progress at any time\n   - Complete current tasks before starting new ones\n   - Remove tasks that are no longer relevant from the list entirely\n\n3. **Task Completion Requirements**:\n   - ONLY mark a task as completed when you have FULLY accomplished it\n   - If you encounter errors, blockers, or cannot finish, keep the task as in_progress\n   - When blocked, create a new task describing what needs to be resolved\n   - Never mark a task as completed if:\n     - Tests are failing\n     - Implementation is partial\n     - You encountered unresolved errors\n     - You couldn't find necessary files or dependencies\n\n4. **Task Breakdown**:\n   - Create specific, actionable items\n   - Break complex tasks into smaller, manageable steps\n   - Use clear, descriptive task names\n\nWhen in doubt, use this tool. Being proactive with task management demonstrates attentiveness and ensures you complete all requirements successfully.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "todos": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "content": {
                      "type": "string",
                      "minLength": 1
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "pending",
                        "in_progress",
                        "completed"
                      ]
                    },
                    "priority": {
                      "type": "string",
                      "enum": [
                        "high",
                        "medium",
                        "low"
                      ]
                    },
                    "id": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "content",
                    "status",
                    "priority",
                    "id"
                  ],
                  "additionalProperties": false
                },
                "description": "The updated todo list"
              }
            },
            "required": [
              "todos"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "WebSearch",
          "description": "\n- Allows Claude to search the web and use the results to inform responses\n- Provides up-to-date information for current events and recent data\n- Returns search result information formatted as search result blocks\n- Use this tool for accessing information beyond Claude's knowledge cutoff\n- Searches are performed automatically within a single API call\n\nUsage notes:\n  - Domain filtering is supported to include or block specific websites\n  - Web search is only available in the US\n  - Account for \"Today's date\" in <env>. For example, if <env> says \"Today's date: 2025-07-01\", and the user wants the latest docs, do not use 2024 in the search query. Use 2025.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "minLength": 2,
                "description": "The search query to use"
              },
              "allowed_domains": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Only include search results from these domains"
              },
              "blocked_domains": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Never include search results from these domains"
              }
            },
            "required": [
              "query"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        }
      ],
      "responseStructure": {
        "type": "object",
        "keys": [
          "id",
          "object",
          "created",
          "model",
          "choices",
          "usage",
          "stats",
          "system_fingerprint"
        ],
        "hasChoices": true,
        "hasContent": false,
        "hasUsage": true,
        "choicesCount": 1,
        "firstChoice": {
          "hasMessage": true,
          "hasToolCalls": false,
          "finishReason": "stop"
        }
      },
      "parsingAttempts": [
        "json_format",
        "function_call",
        "action_format",
        "natural_language"
      ]
    }
  },
  {
    "timestamp": "2025-08-10T08:04:49.690Z",
    "requestId": "session_1754804126703_ixall6oy5:conv_1754804126703_sm1ur5dvo:3:1754813071451:6not",
    "provider": "lmstudio",
    "model": "gpt-oss-20b-mlx",
    "endpoint": "localhost:1234",
    "failureType": "text_instead_of_tools",
    "originalResponse": {
      "id": "chatcmpl-ogbibm2fo9cdkfnsekjyf",
      "object": "chat.completion",
      "created": 1754813071,
      "model": "gpt-oss-20b-mlx",
      "choices": [
        {
          "index": 0,
          "logprobs": null,
          "finish_reason": "stop",
          "message": {
            "role": "assistant",
            "content": "We need to search across repository for relevant content. Let's run Grep against all .md files for patterns like \"角色\" and \"人物\", \"世界观\", etc.\n\nBut current code doesn't show results because maybe environment can't access path. We need to check root path by calling `pwd` or similar.\n\nLet's run Bash command: `pwd`.\n\n<|start|>assistant<|channel|>commentary to=functions.Bash<|message|>{\"command\":\"pwd\",\"description\":\"Show current working directory\"}"
          }
        }
      ],
      "usage": {
        "prompt_tokens": 19582,
        "completion_tokens": 93,
        "total_tokens": 19675
      },
      "stats": {},
      "system_fingerprint": "gpt-oss-20b-mlx"
    },
    "expectedFormat": "openai",
    "errorMessage": "All parsing strategies failed",
    "responseAnalysis": {
      "hasToolCalls": false,
      "hasContent": true,
      "contentLength": 445,
      "contentPreview": "We need to search across repository for relevant content. Let's run Grep against all .md files for patterns like \"角色\" and \"人物\", \"世界观\", etc.\n\nBut current code doesn't show results because maybe environ",
      "finishReason": "stop",
      "toolCallPatterns": []
    },
    "debugInfo": {
      "requestTools": [
        {
          "name": "Task",
          "description": "Launch a new agent to handle complex, multi-step tasks autonomously.\n\nAvailable agent types and the tools they have access to:\n- general-purpose: General-purpose agent for researching complex questions, searching for code, and executing multi-step tasks. When you are searching for a keyword or file and are not confident that you will find the right match in the first few tries use this agent to perform the search for you. (Tools: *)\n- code-refactorer: Use this agent when you need to improve existing code structure, readability, or maintainability without changing functionality. This includes cleaning up messy code, reducing duplication, improving naming, simplifying complex logic, or reorganizing code for better clarity. Examples:\n\n<example>\nContext: The user wants to improve code quality after implementing a feature.\nuser: \"I just finished implementing the user authentication system. Can you help clean it up?\"\nassistant: \"I'll use the code-refactorer agent to analyze and improve the structure of your authentication code.\"\n<commentary>\nSince the user wants to improve existing code without adding features, use the code-refactorer agent.\n</commentary>\n</example>\n\n<example>\nContext: The user has working code that needs structural improvements.\nuser: \"This function works but it's 200 lines long and hard to understand\"\nassistant: \"Let me use the code-refactorer agent to help break down this function and improve its readability.\"\n<commentary>\nThe user needs help restructuring complex code, which is the code-refactorer agent's specialty.\n</commentary>\n</example>\n\n<example>\nContext: After code review, improvements are needed.\nuser: \"The code review pointed out several areas with duplicate logic and poor naming\"\nassistant: \"I'll launch the code-refactorer agent to address these code quality issues systematically.\"\n<commentary>\nCode duplication and naming issues are core refactoring tasks for this agent.\n</commentary>\n</example> (Tools: Edit, MultiEdit, Write, NotebookEdit, Grep, LS, Read)\n- project-task-planner: Use this agent when you need to create a comprehensive development task list from a Product Requirements Document (PRD). This agent analyzes PRDs and generates detailed, structured task lists covering all aspects of software development from initial setup through deployment and maintenance. Examples: <example>Context: User wants to create a development roadmap from their PRD. user: \"I have a PRD for a new e-commerce platform. Can you create a task list?\" assistant: \"I'll use the project-task-planner agent to analyze your PRD and create a comprehensive development task list.\" <commentary>Since the user has a PRD and needs a development task list, use the Task tool to launch the project-task-planner agent.</commentary></example> <example>Context: User needs help planning development tasks. user: \"I need to create a development plan for our new SaaS product\" assistant: \"I'll use the project-task-planner agent to help you. First, I'll need to see your Product Requirements Document (PRD).\" <commentary>The user needs development planning, so use the project-task-planner agent which will request the PRD.</commentary></example> (Tools: Task, Bash, Edit, MultiEdit, Write, NotebookEdit, Grep, LS, Read, ExitPlanMode, TodoWrite, WebSearch)\n- vibe-coding-coach: Use this agent when users want to build applications through conversation, focusing on the vision and feel of their app rather than technical implementation details. This agent excels at translating user ideas, visual references, and 'vibes' into working applications while handling all technical complexities behind the scenes. <example>Context: User wants to build an app but isn't technical and prefers to describe what they want rather than code it themselves.\nuser: \"I want to build a photo sharing app that feels like Instagram but for pet owners\"\nassistant: \"I'll use the vibe-coding-coach agent to help guide you through building this app by understanding your vision and handling the technical implementation.\"\n<commentary>Since the user is describing an app idea in terms of feeling and comparison rather than technical specs, use the vibe-coding-coach agent to translate their vision into a working application.</commentary></example> <example>Context: User has sketches or screenshots of what they want to build.\nuser: \"Here's a screenshot of an app I like. Can we build something similar but for tracking workouts?\"\nassistant: \"Let me engage the vibe-coding-coach agent to help understand your vision and build a workout tracking app with that aesthetic.\"\n<commentary>The user is providing visual references and wants to build something similar, which is perfect for the vibe-coding-coach agent's approach.</commentary></example> (Tools: *)\n- debug-system-architect: Use this agent when you need to establish a comprehensive debug logging system for a project. This includes setting up log directories, implementing node-level tracing, creating time-based test records, establishing replay mechanisms, and documenting debug rules. Example: <example> Context: User is setting up a new project and wants to implement proper debugging infrastructure from the start. user: \"Please help me set up a debug system for my new API router project\" <commentary> Since the user is requesting debug system setup, use the debug-system-architect agent to analyze the project and implement comprehensive logging and tracing mechanisms. </commentary> </example> <example> Context: User encounters intermittent issues in their routing system and needs better visibility. user: \"I'm having trouble tracking down why some requests fail intermittently\" <commentary> Since the user needs better debugging visibility for intermittent issues, use the debug-system-architect agent to implement node-level tracing and replay mechanisms. </commentary> </example> (Tools: *)\n- code-risk-auditor: Use this agent when you need to perform comprehensive code risk assessment and identify potential architectural issues in your codebase. Examples: <example>Context: The user has just completed a major refactoring and wants to ensure no hardcoded values or fallback mechanisms were introduced. user: \"I just finished refactoring the routing system, can you check for any code risks?\" assistant: \"I'll use the code-risk-auditor agent to perform a comprehensive risk assessment of your routing system changes.\"</example> <example>Context: Before a major release, the user wants to clean up technical debt and ensure code quality. user: \"We're preparing for v2.0 release, I need a full code audit\" assistant: \"Let me launch the code-risk-auditor agent to identify hardcoding, fallback risks, outdated tests, and duplicate implementations across the entire codebase.\"</example> <example>Context: The user notices inconsistent behavior and suspects duplicate implementations. user: \"The same feature seems to be implemented in multiple places, causing bugs\" assistant: \"I'll use the code-risk-auditor agent to scan for duplicate implementations and provide a consolidation plan.\"</example> (Tools: *)\n- security-auditor: Use this agent when you need to perform a comprehensive security audit of a codebase, identify vulnerabilities, and generate a detailed security report with actionable remediation steps. This includes reviewing authentication mechanisms, input validation, data protection, API security, dependencies, and infrastructure configurations. Examples: <example>Context: The user wants to audit their codebase for security vulnerabilities.\nuser: \"Can you perform a security audit of my application?\"\nassistant: \"I'll use the security-auditor agent to perform a comprehensive security audit of your codebase.\"\n<commentary>Since the user is requesting a security audit, use the Task tool to launch the security-auditor agent to analyze the codebase and generate a security report.</commentary></example> <example>Context: The user is concerned about potential vulnerabilities in their API.\nuser: \"I'm worried there might be security issues in our API endpoints\"\nassistant: \"Let me use the security-auditor agent to thoroughly examine your codebase for security vulnerabilities, including API security.\"\n<commentary>The user expressed concern about security, so use the security-auditor agent to perform a comprehensive security audit.</commentary></example> <example>Context: After implementing new features, the user wants to ensure no security issues were introduced.\nuser: \"We just added user authentication to our app. Can you check if it's secure?\"\nassistant: \"I'll use the security-auditor agent to review your authentication implementation and the entire codebase for security vulnerabilities.\"\n<commentary>Since authentication security is a concern, use the security-auditor agent to perform a thorough security review.</commentary></example> (Tools: Task, Bash, Edit, MultiEdit, Write, NotebookEdit)\n- project-memory-manager: Use this agent when you need to manage project-specific memory entries, create project documentation, or organize project knowledge. This includes creating project summaries, documenting project decisions, tracking project progress, and maintaining project-specific knowledge bases. <example>Context: User wants to document a project decision or create project documentation. user: \"请为我们的新项目创建一个内存管理系统的文档\" assistant: \"我将使用 project-memory-manager agent 来创建这个项目文档\" <commentary>Since the user needs project documentation, use the project-memory-manager agent to create project-specific memory entries.</commentary></example> <example>Context: User wants to track project progress or decisions. user: \"我们需要记录这个项目的关键决策点\" assistant: \"让我使用 project-memory-manager agent 来记录这些项目决策\" <commentary>Since this is project tracking, use the project-memory-manager agent to create decision-type memory entries.</commentary></example> (Tools: *)\n- rules-architect: Use this agent when you need to analyze project architecture and establish comprehensive rule management systems. Examples: <example>Context: User wants to organize project rules and create a structured rule management system. user: \"I need to reorganize our project rules and create a better structure for managing coding standards, file organization, and testing protocols\" assistant: \"I'll use the rules-architect agent to analyze the current project structure and establish a comprehensive rule management system with proper categorization and organization.\"</example> <example>Context: Project has grown complex and needs better rule organization. user: \"Our CLAUDE.md file is getting too large and we need to break down rules into manageable categories\" assistant: \"Let me call the rules-architect agent to create a structured .claude/rules system that will organize all project rules into logical categories.\"</example> (Tools: *)\n- frontend-designer: Use this agent when you need to convert design mockups, wireframes, or visual concepts into detailed technical specifications and implementation guides for frontend development. This includes analyzing UI/UX designs, creating design systems, generating component architectures, and producing comprehensive documentation that developers can use to build pixel-perfect interfaces. Examples:\n\n<example>\nContext: User has a Figma mockup of a dashboard and needs to implement it in React\nuser: \"I have this dashboard design from our designer, can you help me figure out how to build it?\"\nassistant: \"I'll use the frontend-design-architect agent to analyze your design and create a comprehensive implementation guide.\"\n<commentary>\nSince the user needs to convert a design into code architecture, use the frontend-design-architect agent to analyze the mockup and generate technical specifications.\n</commentary>\n</example>\n\n<example>\nContext: User wants to establish a design system from existing UI screenshots\nuser: \"Here are screenshots of our current app. We need to extract a consistent design system from these.\"\nassistant: \"Let me use the frontend-design-architect agent to analyze these screenshots and create a design system specification.\"\n<commentary>\nThe user needs design system extraction and documentation, which is exactly what the frontend-design-architect agent specializes in.\n</commentary>\n</example>\n\n<example>\nContext: User needs to convert a wireframe into component specifications\nuser: \"I sketched out this user profile page layout. How should I structure the components?\"\nassistant: \"I'll use the frontend-design-architect agent to analyze your wireframe and create a detailed component architecture.\"\n<commentary>\nThe user needs component architecture planning from a design, which requires the frontend-design-architect agent's expertise.\n</commentary>\n</example> (Tools: *)\n- content-writer: Use this agent when you need to create compelling, informative content that explains complex topics in simple terms. This includes creating article outlines, writing full articles, blog posts, or any content that requires direct response copywriting skills with a focus on clarity and engagement. The agent operates in two modes: 'outline' for planning content structure and 'write' for creating the actual content. Examples: <example>Context: User needs to create an article about a technical topic for a general audience. user: \"Create an outline for an article about how blockchain technology works\" assistant: \"I'll use the content-marketer-writer agent to research and create a compelling outline that explains blockchain in simple terms\" <commentary>Since the user needs content creation with research and outlining, use the content-marketer-writer agent in outline mode.</commentary></example> <example>Context: User has an outline and needs to write the full article. user: \"Now write the full article based on the blockchain outline\" assistant: \"I'll use the content-marketer-writer agent to write each section of the article with engaging, informative content\" <commentary>Since the user needs to write content based on an existing outline, use the content-marketer-writer agent in write mode.</commentary></example> (Tools: *)\n- test-runner: Use this agent to run and manage tests according to the global and project-specific testing rules. This includes executing test scripts, documenting test results, and helping to diagnose issues following the standard pipeline. <example>Context: User wants to run all functional tests. user: \"运行所有功能测试\" assistant: \"我将使用 test-runner agent 来执行所有功能测试\" <commentary>Since the user wants to run tests by category, use the test-runner agent.</commentary></example> <example>Context: User wants to verify a bug fix. user: \"我修复了一个bug，帮我验证一下\" assistant: \"让我使用 test-runner agent 来执行对应的修复验证测试\" <commentary>The user needs to verify a fix, which is a core task for the test-runner agent.</commentary></example> (Tools: *)\n- in-depth-research-analyst: Use this agent when you need to conduct comprehensive research reports with in-depth web mining, data analysis, and visualization. This includes industry analysis, market research, competitive intelligence, and trend forecasting with accurate data from authoritative sources. <example>Context: User wants a comprehensive industry analysis report. user: \"请对人工智能芯片市场进行深入调研，包括主要厂商、市场份额和增长趋势\" assistant: \"我将使用 in-depth-research-analyst agent 来进行这项深入的市场调研并生成可视化报告\" <commentary>Since the user needs a comprehensive industry analysis with data visualization, use the in-depth-research-analyst agent to conduct thorough research and create an integrated report.</commentary></example> <example>Context: User wants market research with accurate data and visualizations. user: \"我们需要一份关于电动汽车充电基础设施的深度报告，包含数据图表\" assistant: \"让我使用 in-depth-research-analyst agent 来收集准确数据并生成图文并茂的分析报告\" <commentary>Since this requires market research with data accuracy and visualizations, use the in-depth-research-analyst agent to create a comprehensive report.</commentary></example> (Tools: *)\n- prd-writer: Use this agent when you need to create a comprehensive Product Requirements Document (PRD) for a software project or feature. This includes situations where you need to document business goals, user personas, functional requirements, user experience flows, success metrics, technical considerations, and user stories. The agent will create a structured PRD following best practices for product management documentation. Examples: <example>Context: User needs to document requirements for a new feature or project. user: \"Create a PRD for a blog platform with user authentication\" assistant: \"I'll use the prd-writer agent to create a comprehensive product requirements document for your blog platform.\" <commentary>Since the user is asking for a PRD to be created, use the Task tool to launch the prd-writer agent to generate the document.</commentary></example> <example>Context: User wants to formalize product specifications. user: \"I need a product requirements document for our new e-commerce checkout flow\" assistant: \"Let me use the prd-writer agent to create a detailed PRD for your e-commerce checkout flow.\" <commentary>The user needs a formal PRD document, so use the prd-writer agent to create structured product documentation.</commentary></example> (Tools: Task, Bash, Grep, LS, Read, Write, WebSearch, Glob)\n- pipeline-debug-universal: Use this agent when you need to implement comprehensive debug hooks and testing infrastructure for ANY pipeline system - whether it's API routing, data processing, CI/CD workflows, or transformation pipelines. This agent specializes in creating universal debug architectures that work across different pipeline types with data capture, replay capabilities, and systematic testing matrices. Examples: <example>Context: User is working on a multi-provider API routing system and needs to add debug capabilities to track data flow through each pipeline step. user: \"I need to add debug hooks to our routing pipeline so we can capture and replay data at each step\" assistant: \"I'll use the pipeline-debug-universal agent to design a comprehensive debug infrastructure with data capture and replay capabilities\" <commentary>Since the user needs pipeline debugging infrastructure, use the pipeline-debug-universal agent to create debug hooks and testing matrices.</commentary></example> <example>Context: User has a complex data transformation pipeline and wants to build systematic testing for each stage and provider. user: \"Our data processing pipeline has issues and we need better testing infrastructure to isolate problems at each step\" assistant: \"Let me use the pipeline-debug-universal agent to create a complete testing matrix and debug system\" <commentary>Since the user needs systematic pipeline testing infrastructure, use the pipeline-debug-universal agent to architect the testing system.</commentary></example> <example>Context: User is building a CI/CD pipeline and needs to implement debug capabilities for tracking deployment issues. user: \"Our deployment pipeline fails randomly and we can't reproduce the issues consistently\" assistant: \"I'll deploy the pipeline-debug-universal agent to create comprehensive debug hooks and replay capabilities for your CI/CD pipeline\" <commentary>Since the user needs debug infrastructure for a deployment pipeline, use the pipeline-debug-universal agent to design the debug system.</commentary></example> (Tools: *)\n\nWhen using the Task tool, you must specify a subagent_type parameter to select which agent type to use.\n\n\n\nWhen NOT to use the Agent tool:\n- If you want to read a specific file path, use the Read or Glob tool instead of the Agent tool, to find the match more quickly\n- If you are searching for a specific class definition like \"class Foo\", use the Glob tool instead, to find the match more quickly\n- If you are searching for code within a specific file or set of 2-3 files, use the Read tool instead of the Agent tool, to find the match more quickly\n- Other tasks that are not related to the agent descriptions above\n\n\nUsage notes:\n1. Launch multiple agents concurrently whenever possible, to maximize performance; to do that, use a single message with multiple tool uses\n2. When the agent is done, it will return a single message back to you. The result returned by the agent is not visible to the user. To show the user the result, you should send a text message back to the user with a concise summary of the result.\n3. Each agent invocation is stateless. You will not be able to send additional messages to the agent, nor will the agent be able to communicate with you outside of its final report. Therefore, your prompt should contain a highly detailed task description for the agent to perform autonomously and you should specify exactly what information the agent should return back to you in its final and only message to you.\n4. The agent's outputs should generally be trusted\n5. Clearly tell the agent whether you expect it to write code or just to do research (search, file reads, web fetches, etc.), since it is not aware of the user's intent\n6. If the agent description mentions that it should be used proactively, then you should try your best to use it without the user having to ask for it first. Use your judgement.\n\nExample usage:\n\n<example_agent_descriptions>\n\"code-reviewer\": use this agent after you are done writing a signficant piece of code\n\"greeting-responder\": use this agent when to respond to user greetings with a friendly joke\n</example_agent_description>\n\n<example>\nuser: \"Please write a function that checks if a number is prime\"\nassistant: Sure let me write a function that checks if a number is prime\nassistant: First let me use the Write tool to write a function that checks if a number is prime\nassistant: I'm going to use the Write tool to write the following code:\n<code>\nfunction isPrime(n) {\n  if (n <= 1) return false\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n</code>\n<commentary>\nSince a signficant piece of code was written and the task was completed, now use the code-reviewer agent to review the code\n</commentary>\nassistant: Now let me use the code-reviewer agent to review the code\nassistant: Uses the Task tool to launch the with the code-reviewer agent\n</example>\n\n<example>\nuser: \"Hello\"\n<commentary>\nSince the user is greeting, use the greeting-responder agent to respond with a friendly joke\n</commentary>\nassistant: \"I'm going to use the Task tool to launch the with the greeting-responder agent\"\n</example>\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "description": {
                "type": "string",
                "description": "A short (3-5 word) description of the task"
              },
              "prompt": {
                "type": "string",
                "description": "The task for the agent to perform"
              },
              "subagent_type": {
                "type": "string",
                "description": "The type of specialized agent to use for this task"
              }
            },
            "required": [
              "description",
              "prompt",
              "subagent_type"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Bash",
          "description": "Executes a given bash command in a persistent shell session with optional timeout, ensuring proper handling and security measures.\n\nBefore executing the command, please follow these steps:\n\n1. Directory Verification:\n   - If the command will create new directories or files, first use the LS tool to verify the parent directory exists and is the correct location\n   - For example, before running \"mkdir foo/bar\", first use LS to check that \"foo\" exists and is the intended parent directory\n\n2. Command Execution:\n   - Always quote file paths that contain spaces with double quotes (e.g., cd \"path with spaces/file.txt\")\n   - Examples of proper quoting:\n     - cd \"/Users/name/My Documents\" (correct)\n     - cd /Users/name/My Documents (incorrect - will fail)\n     - python \"/path/with spaces/script.py\" (correct)\n     - python /path/with spaces/script.py (incorrect - will fail)\n   - After ensuring proper quoting, execute the command.\n   - Capture the output of the command.\n\nUsage notes:\n  - The command argument is required.\n  - You can specify an optional timeout in milliseconds (up to 600000ms / 10 minutes). If not specified, commands will timeout after 120000ms (2 minutes).\n  - It is very helpful if you write a clear, concise description of what this command does in 5-10 words.\n  - If the output exceeds 30000 characters, output will be truncated before being returned to you.\n  - VERY IMPORTANT: You MUST avoid using search commands like `find` and `grep`. Instead use Grep, Glob, or Task to search. You MUST avoid read tools like `cat`, `head`, `tail`, and `ls`, and use Read and LS to read files.\n - If you _still_ need to run `grep`, STOP. ALWAYS USE ripgrep at `rg` first, which all ${PRODUCT_NAME} users have pre-installed.\n  - When issuing multiple commands, use the ';' or '&&' operator to separate them. DO NOT use newlines (newlines are ok in quoted strings).\n  - Try to maintain your current working directory throughout the session by using absolute paths and avoiding usage of `cd`. You may use `cd` if the User explicitly requests it.\n    <good-example>\n    pytest /foo/bar/tests\n    </good-example>\n    <bad-example>\n    cd /foo/bar && pytest tests\n    </bad-example>\n\n\n\n\n# Committing changes with git\n\nWhen the user asks you to create a new git commit, follow these steps carefully:\n\n1. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following bash commands in parallel, each using the Bash tool:\n  - Run a git status command to see all untracked files.\n  - Run a git diff command to see both staged and unstaged changes that will be committed.\n  - Run a git log command to see recent commit messages, so that you can follow this repository's commit message style.\n2. Analyze all staged changes (both previously staged and newly added) and draft a commit message:\n  - Summarize the nature of the changes (eg. new feature, enhancement to an existing feature, bug fix, refactoring, test, docs, etc.). Ensure the message accurately reflects the changes and their purpose (i.e. \"add\" means a wholly new feature, \"update\" means an enhancement to an existing feature, \"fix\" means a bug fix, etc.).\n  - Check for any sensitive information that shouldn't be committed\n  - Draft a concise (1-2 sentences) commit message that focuses on the \"why\" rather than the \"what\"\n  - Ensure it accurately reflects the changes and their purpose\n3. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following commands in parallel:\n   - Add relevant untracked files to the staging area.\n   - Create the commit with a message ending with:\n   🤖 Generated with [Claude Code](https://claude.ai/code)\n\n   Co-Authored-By: Claude <noreply@anthropic.com>\n   - Run git status to make sure the commit succeeded.\n4. If the commit fails due to pre-commit hook changes, retry the commit ONCE to include these automated changes. If it fails again, it usually means a pre-commit hook is preventing the commit. If the commit succeeds but you notice that files were modified by the pre-commit hook, you MUST amend your commit to include them.\n\nImportant notes:\n- NEVER update the git config\n- NEVER run additional commands to read or explore code, besides git bash commands\n- NEVER use the TodoWrite or Task tools\n- DO NOT push to the remote repository unless the user explicitly asks you to do so\n- IMPORTANT: Never use git commands with the -i flag (like git rebase -i or git add -i) since they require interactive input which is not supported.\n- If there are no changes to commit (i.e., no untracked files and no modifications), do not create an empty commit\n- In order to ensure good formatting, ALWAYS pass the commit message via a HEREDOC, a la this example:\n<example>\ngit commit -m \"$(cat <<'EOF'\n   Commit message here.\n\n   🤖 Generated with [Claude Code](https://claude.ai/code)\n\n   Co-Authored-By: Claude <noreply@anthropic.com>\n   EOF\n   )\"\n</example>\n\n# Creating pull requests\nUse the gh command via the Bash tool for ALL GitHub-related tasks including working with issues, pull requests, checks, and releases. If given a Github URL use the gh command to get the information needed.\n\nIMPORTANT: When the user asks you to create a pull request, follow these steps carefully:\n\n1. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following bash commands in parallel using the Bash tool, in order to understand the current state of the branch since it diverged from the main branch:\n   - Run a git status command to see all untracked files\n   - Run a git diff command to see both staged and unstaged changes that will be committed\n   - Check if the current branch tracks a remote branch and is up to date with the remote, so you know if you need to push to the remote\n   - Run a git log command and `git diff [base-branch]...HEAD` to understand the full commit history for the current branch (from the time it diverged from the base branch)\n2. Analyze all changes that will be included in the pull request, making sure to look at all relevant commits (NOT just the latest commit, but ALL commits that will be included in the pull request!!!), and draft a pull request summary\n3. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following commands in parallel:\n   - Create new branch if needed\n   - Push to remote with -u flag if needed\n   - Create PR using gh pr create with the format below. Use a HEREDOC to pass the body to ensure correct formatting.\n<example>\ngh pr create --title \"the pr title\" --body \"$(cat <<'EOF'\n## Summary\n<1-3 bullet points>\n\n## Test plan\n[Checklist of TODOs for testing the pull request...]\n\n🤖 Generated with [Claude Code](https://claude.ai/code)\nEOF\n)\"\n</example>\n\nImportant:\n- NEVER update the git config\n- DO NOT use the TodoWrite or Task tools\n- Return the PR URL when you're done, so the user can see it\n\n# Other common operations\n- View comments on a Github PR: gh api repos/foo/bar/pulls/123/comments",
          "input_schema": {
            "type": "object",
            "properties": {
              "command": {
                "type": "string",
                "description": "The command to execute"
              },
              "timeout": {
                "type": "number",
                "description": "Optional timeout in milliseconds (max 600000)"
              },
              "description": {
                "type": "string",
                "description": " Clear, concise description of what this command does in 5-10 words. Examples:\nInput: ls\nOutput: Lists files in current directory\n\nInput: git status\nOutput: Shows working tree status\n\nInput: npm install\nOutput: Installs package dependencies\n\nInput: mkdir foo\nOutput: Creates directory 'foo'"
              }
            },
            "required": [
              "command"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Glob",
          "description": "- Fast file pattern matching tool that works with any codebase size\n- Supports glob patterns like \"**/*.js\" or \"src/**/*.ts\"\n- Returns matching file paths sorted by modification time\n- Use this tool when you need to find files by name patterns\n- When you are doing an open ended search that may require multiple rounds of globbing and grepping, use the Agent tool instead\n- You have the capability to call multiple tools in a single response. It is always better to speculatively perform multiple searches as a batch that are potentially useful.",
          "input_schema": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "The glob pattern to match files against"
              },
              "path": {
                "type": "string",
                "description": "The directory to search in. If not specified, the current working directory will be used. IMPORTANT: Omit this field to use the default directory. DO NOT enter \"undefined\" or \"null\" - simply omit it for the default behavior. Must be a valid directory path if provided."
              }
            },
            "required": [
              "pattern"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Grep",
          "description": "A powerful search tool built on ripgrep\n\n  Usage:\n  - ALWAYS use Grep for search tasks. NEVER invoke `grep` or `rg` as a Bash command. The Grep tool has been optimized for correct permissions and access.\n  - Supports full regex syntax (e.g., \"log.*Error\", \"function\\s+\\w+\")\n  - Filter files with glob parameter (e.g., \"*.js\", \"**/*.tsx\") or type parameter (e.g., \"js\", \"py\", \"rust\")\n  - Output modes: \"content\" shows matching lines, \"files_with_matches\" shows only file paths (default), \"count\" shows match counts\n  - Use Task tool for open-ended searches requiring multiple rounds\n  - Pattern syntax: Uses ripgrep (not grep) - literal braces need escaping (use `interface\\{\\}` to find `interface{}` in Go code)\n  - Multiline matching: By default patterns match within single lines only. For cross-line patterns like `struct \\{[\\s\\S]*?field`, use `multiline: true`\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "The regular expression pattern to search for in file contents"
              },
              "path": {
                "type": "string",
                "description": "File or directory to search in (rg PATH). Defaults to current working directory."
              },
              "glob": {
                "type": "string",
                "description": "Glob pattern to filter files (e.g. \"*.js\", \"*.{ts,tsx}\") - maps to rg --glob"
              },
              "output_mode": {
                "type": "string",
                "enum": [
                  "content",
                  "files_with_matches",
                  "count"
                ],
                "description": "Output mode: \"content\" shows matching lines (supports -A/-B/-C context, -n line numbers, head_limit), \"files_with_matches\" shows file paths (supports head_limit), \"count\" shows match counts (supports head_limit). Defaults to \"files_with_matches\"."
              },
              "-B": {
                "type": "number",
                "description": "Number of lines to show before each match (rg -B). Requires output_mode: \"content\", ignored otherwise."
              },
              "-A": {
                "type": "number",
                "description": "Number of lines to show after each match (rg -A). Requires output_mode: \"content\", ignored otherwise."
              },
              "-C": {
                "type": "number",
                "description": "Number of lines to show before and after each match (rg -C). Requires output_mode: \"content\", ignored otherwise."
              },
              "-n": {
                "type": "boolean",
                "description": "Show line numbers in output (rg -n). Requires output_mode: \"content\", ignored otherwise."
              },
              "-i": {
                "type": "boolean",
                "description": "Case insensitive search (rg -i)"
              },
              "type": {
                "type": "string",
                "description": "File type to search (rg --type). Common types: js, py, rust, go, java, etc. More efficient than include for standard file types."
              },
              "head_limit": {
                "type": "number",
                "description": "Limit output to first N lines/entries, equivalent to \"| head -N\". Works across all output modes: content (limits output lines), files_with_matches (limits file paths), count (limits count entries). When unspecified, shows all results from ripgrep."
              },
              "multiline": {
                "type": "boolean",
                "description": "Enable multiline mode where . matches newlines and patterns can span lines (rg -U --multiline-dotall). Default: false."
              }
            },
            "required": [
              "pattern"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "LS",
          "description": "Lists files and directories in a given path. The path parameter must be an absolute path, not a relative path. You can optionally provide an array of glob patterns to ignore with the ignore parameter. You should generally prefer the Glob and Grep tools, if you know which directories to search.",
          "input_schema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "The absolute path to the directory to list (must be absolute, not relative)"
              },
              "ignore": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of glob patterns to ignore"
              }
            },
            "required": [
              "path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "ExitPlanMode",
          "description": "Use this tool when you are in plan mode and have finished presenting your plan and are ready to code. This will prompt the user to exit plan mode.\nIMPORTANT: Only use this tool when the task requires planning the implementation steps of a task that requires writing code. For research tasks where you're gathering information, searching files, reading files or in general trying to understand the codebase - do NOT use this tool.\n\nEg.\n1. Initial task: \"Search for and understand the implementation of vim mode in the codebase\" - Do not use the exit plan mode tool because you are not planning the implementation steps of a task.\n2. Initial task: \"Help me implement yank mode for vim\" - Use the exit plan mode tool after you have finished planning the implementation steps of the task.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "plan": {
                "type": "string",
                "description": "The plan you came up with, that you want to run by the user for approval. Supports markdown. The plan should be pretty concise."
              }
            },
            "required": [
              "plan"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Read",
          "description": "Reads a file from the local filesystem. You can access any file directly by using this tool.\nAssume this tool is able to read all files on the machine. If the User provides a path to a file assume that path is valid. It is okay to read a file that does not exist; an error will be returned.\n\nUsage:\n- The file_path parameter must be an absolute path, not a relative path\n- By default, it reads up to 2000 lines starting from the beginning of the file\n- You can optionally specify a line offset and limit (especially handy for long files), but it's recommended to read the whole file by not providing these parameters\n- Any lines longer than 2000 characters will be truncated\n- Results are returned using cat -n format, with line numbers starting at 1\n- This tool allows Claude Code to read images (eg PNG, JPG, etc). When reading an image file the contents are presented visually as Claude Code is a multimodal LLM.\n- This tool can read PDF files (.pdf). PDFs are processed page by page, extracting both text and visual content for analysis.\n- For Jupyter notebooks (.ipynb files), use the NotebookRead instead\n- You have the capability to call multiple tools in a single response. It is always better to speculatively read multiple files as a batch that are potentially useful.\n- You will regularly be asked to read screenshots. If the user provides a path to a screenshot ALWAYS use this tool to view the file at the path. This tool will work with all temporary file paths like /var/folders/123/abc/T/TemporaryItems/NSIRD_screencaptureui_ZfB1tD/Screenshot.png\n- If you read a file that exists but has empty contents you will receive a system reminder warning in place of file contents.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to read"
              },
              "offset": {
                "type": "number",
                "description": "The line number to start reading from. Only provide if the file is too large to read at once"
              },
              "limit": {
                "type": "number",
                "description": "The number of lines to read. Only provide if the file is too large to read at once."
              }
            },
            "required": [
              "file_path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Edit",
          "description": "Performs exact string replacements in files.\n\nUsage:\n- You must use your `Read` tool at least once in the conversation before editing. This tool will error if you attempt an edit without reading the file.\n- When editing text from Read tool output, ensure you preserve the exact indentation (tabs/spaces) as it appears AFTER the line number prefix. The line number prefix format is: spaces + line number + tab. Everything after that tab is the actual file content to match. Never include any part of the line number prefix in the old_string or new_string.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- Only use emojis if the user explicitly requests it. Avoid adding emojis to files unless asked.\n- The edit will FAIL if `old_string` is not unique in the file. Either provide a larger string with more surrounding context to make it unique or use `replace_all` to change every instance of `old_string`.\n- Use `replace_all` for replacing and renaming strings across the file. This parameter is useful if you want to rename a variable for instance.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to modify"
              },
              "old_string": {
                "type": "string",
                "description": "The text to replace"
              },
              "new_string": {
                "type": "string",
                "description": "The text to replace it with (must be different from old_string)"
              },
              "replace_all": {
                "type": "boolean",
                "default": false,
                "description": "Replace all occurences of old_string (default false)"
              }
            },
            "required": [
              "file_path",
              "old_string",
              "new_string"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "MultiEdit",
          "description": "This is a tool for making multiple edits to a single file in one operation. It is built on top of the Edit tool and allows you to perform multiple find-and-replace operations efficiently. Prefer this tool over the Edit tool when you need to make multiple edits to the same file.\n\nBefore using this tool:\n\n1. Use the Read tool to understand the file's contents and context\n2. Verify the directory path is correct\n\nTo make multiple file edits, provide the following:\n1. file_path: The absolute path to the file to modify (must be absolute, not relative)\n2. edits: An array of edit operations to perform, where each edit contains:\n   - old_string: The text to replace (must match the file contents exactly, including all whitespace and indentation)\n   - new_string: The edited text to replace the old_string\n   - replace_all: Replace all occurences of old_string. This parameter is optional and defaults to false.\n\nIMPORTANT:\n- All edits are applied in sequence, in the order they are provided\n- Each edit operates on the result of the previous edit\n- All edits must be valid for the operation to succeed - if any edit fails, none will be applied\n- This tool is ideal when you need to make several changes to different parts of the same file\n- For Jupyter notebooks (.ipynb files), use the NotebookEdit instead\n\nCRITICAL REQUIREMENTS:\n1. All edits follow the same requirements as the single Edit tool\n2. The edits are atomic - either all succeed or none are applied\n3. Plan your edits carefully to avoid conflicts between sequential operations\n\nWARNING:\n- The tool will fail if edits.old_string doesn't match the file contents exactly (including whitespace)\n- The tool will fail if edits.old_string and edits.new_string are the same\n- Since edits are applied in sequence, ensure that earlier edits don't affect the text that later edits are trying to find\n\nWhen making edits:\n- Ensure all edits result in idiomatic, correct code\n- Do not leave the code in a broken state\n- Always use absolute file paths (starting with /)\n- Only use emojis if the user explicitly requests it. Avoid adding emojis to files unless asked.\n- Use replace_all for replacing and renaming strings across the file. This parameter is useful if you want to rename a variable for instance.\n\nIf you want to create a new file, use:\n- A new file path, including dir name if needed\n- First edit: empty old_string and the new file's contents as new_string\n- Subsequent edits: normal edit operations on the created content",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to modify"
              },
              "edits": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "old_string": {
                      "type": "string",
                      "description": "The text to replace"
                    },
                    "new_string": {
                      "type": "string",
                      "description": "The text to replace it with"
                    },
                    "replace_all": {
                      "type": "boolean",
                      "default": false,
                      "description": "Replace all occurences of old_string (default false)."
                    }
                  },
                  "required": [
                    "old_string",
                    "new_string"
                  ],
                  "additionalProperties": false
                },
                "minItems": 1,
                "description": "Array of edit operations to perform sequentially on the file"
              }
            },
            "required": [
              "file_path",
              "edits"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Write",
          "description": "Writes a file to the local filesystem.\n\nUsage:\n- This tool will overwrite the existing file if there is one at the provided path.\n- If this is an existing file, you MUST use the Read tool first to read the file's contents. This tool will fail if you did not read the file first.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- NEVER proactively create documentation files (*.md) or README files. Only create documentation files if explicitly requested by the User.\n- Only use emojis if the user explicitly requests it. Avoid writing emojis to files unless asked.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to write (must be absolute, not relative)"
              },
              "content": {
                "type": "string",
                "description": "The content to write to the file"
              }
            },
            "required": [
              "file_path",
              "content"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "NotebookRead",
          "description": "Reads a Jupyter notebook (.ipynb file) and returns all of the cells with their outputs. Jupyter notebooks are interactive documents that combine code, text, and visualizations, commonly used for data analysis and scientific computing. The notebook_path parameter must be an absolute path, not a relative path.",
          "input_schema": {
            "type": "object",
            "properties": {
              "notebook_path": {
                "type": "string",
                "description": "The absolute path to the Jupyter notebook file to read (must be absolute, not relative)"
              },
              "cell_id": {
                "type": "string",
                "description": "The ID of a specific cell to read. If not provided, all cells will be read."
              }
            },
            "required": [
              "notebook_path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "NotebookEdit",
          "description": "Completely replaces the contents of a specific cell in a Jupyter notebook (.ipynb file) with new source. Jupyter notebooks are interactive documents that combine code, text, and visualizations, commonly used for data analysis and scientific computing. The notebook_path parameter must be an absolute path, not a relative path. The cell_number is 0-indexed. Use edit_mode=insert to add a new cell at the index specified by cell_number. Use edit_mode=delete to delete the cell at the index specified by cell_number.",
          "input_schema": {
            "type": "object",
            "properties": {
              "notebook_path": {
                "type": "string",
                "description": "The absolute path to the Jupyter notebook file to edit (must be absolute, not relative)"
              },
              "cell_id": {
                "type": "string",
                "description": "The ID of the cell to edit. When inserting a new cell, the new cell will be inserted after the cell with this ID, or at the beginning if not specified."
              },
              "new_source": {
                "type": "string",
                "description": "The new source for the cell"
              },
              "cell_type": {
                "type": "string",
                "enum": [
                  "code",
                  "markdown"
                ],
                "description": "The type of the cell (code or markdown). If not specified, it defaults to the current cell type. If using edit_mode=insert, this is required."
              },
              "edit_mode": {
                "type": "string",
                "enum": [
                  "replace",
                  "insert",
                  "delete"
                ],
                "description": "The type of edit to make (replace, insert, delete). Defaults to replace."
              }
            },
            "required": [
              "notebook_path",
              "new_source"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "WebFetch",
          "description": "\n- Fetches content from a specified URL and processes it using an AI model\n- Takes a URL and a prompt as input\n- Fetches the URL content, converts HTML to markdown\n- Processes the content with the prompt using a small, fast model\n- Returns the model's response about the content\n- Use this tool when you need to retrieve and analyze web content\n\nUsage notes:\n  - IMPORTANT: If an MCP-provided web fetch tool is available, prefer using that tool instead of this one, as it may have fewer restrictions. All MCP-provided tools start with \"mcp__\".\n  - The URL must be a fully-formed valid URL\n  - HTTP URLs will be automatically upgraded to HTTPS\n  - The prompt should describe what information you want to extract from the page\n  - This tool is read-only and does not modify any files\n  - Results may be summarized if the content is very large\n  - Includes a self-cleaning 15-minute cache for faster responses when repeatedly accessing the same URL\n  - When a URL redirects to a different host, the tool will inform you and provide the redirect URL in a special format. You should then make a new WebFetch request with the redirect URL to fetch the content.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "format": "uri",
                "description": "The URL to fetch content from"
              },
              "prompt": {
                "type": "string",
                "description": "The prompt to run on the fetched content"
              }
            },
            "required": [
              "url",
              "prompt"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "TodoWrite",
          "description": "Use this tool to create and manage a structured task list for your current coding session. This helps you track progress, organize complex tasks, and demonstrate thoroughness to the user.\nIt also helps the user understand the progress of the task and overall progress of their requests.\n\n## When to Use This Tool\nUse this tool proactively in these scenarios:\n\n1. Complex multi-step tasks - When a task requires 3 or more distinct steps or actions\n2. Non-trivial and complex tasks - Tasks that require careful planning or multiple operations\n3. User explicitly requests todo list - When the user directly asks you to use the todo list\n4. User provides multiple tasks - When users provide a list of things to be done (numbered or comma-separated)\n5. After receiving new instructions - Immediately capture user requirements as todos\n6. When you start working on a task - Mark it as in_progress BEFORE beginning work. Ideally you should only have one todo as in_progress at a time\n7. After completing a task - Mark it as completed and add any new follow-up tasks discovered during implementation\n\n## When NOT to Use This Tool\n\nSkip using this tool when:\n1. There is only a single, straightforward task\n2. The task is trivial and tracking it provides no organizational benefit\n3. The task can be completed in less than 3 trivial steps\n4. The task is purely conversational or informational\n\nNOTE that you should not use this tool if there is only one trivial task to do. In this case you are better off just doing the task directly.\n\n## Examples of When to Use the Todo List\n\n<example>\nUser: I want to add a dark mode toggle to the application settings. Make sure you run the tests and build when you're done!\nAssistant: I'll help add a dark mode toggle to your application settings. Let me create a todo list to track this implementation.\n*Creates todo list with the following items:*\n1. Create dark mode toggle component in Settings page\n2. Add dark mode state management (context/store)\n3. Implement CSS-in-JS styles for dark theme\n4. Update existing components to support theme switching\n5. Run tests and build process, addressing any failures or errors that occur\n*Begins working on the first task*\n\n<reasoning>\nThe assistant used the todo list because:\n1. Adding dark mode is a multi-step feature requiring UI, state management, and styling changes\n2. The user explicitly requested tests and build be run afterward\n3. The assistant inferred that tests and build need to pass by adding \"Ensure tests and build succeed\" as the final task\n</reasoning>\n</example>\n\n<example>\nUser: Help me rename the function getCwd to getCurrentWorkingDirectory across my project\nAssistant: Let me first search through your codebase to find all occurrences of 'getCwd'.\n*Uses grep or search tools to locate all instances of getCwd in the codebase*\nAssistant: I've found 15 instances of 'getCwd' across 8 different files. Let me create a todo list to track these changes.\n*Creates todo list with specific items for each file that needs updating*\n\n<reasoning>\nThe assistant used the todo list because:\n1. First, the assistant searched to understand the scope of the task\n2. Upon finding multiple occurrences across different files, it determined this was a complex task with multiple steps\n3. The todo list helps ensure every instance is tracked and updated systematically\n4. This approach prevents missing any occurrences and maintains code consistency\n</reasoning>\n</example>\n\n\n<example>\nUser: I need to implement these features for my e-commerce site: user registration, product catalog, shopping cart, and checkout flow.\nAssistant: I'll help implement these features. First, let's add all the features to the todo list.\n*Creates a todo list breaking down each feature into specific tasks based on the project architecture*\nAssistant: Let's start with user registration. This will involve creating database models, API endpoints, and frontend forms that integrate with your existing authentication system.\n\n<reasoning>\nThe assistant used the todo list because:\n1. The user provided multiple complex features to implement in a comma separated list\n2. The todo list helps organize these large features into manageable tasks\n3. This approach allows for tracking progress across the entire implementation\n</reasoning>\n</example>\n\n<example>\nUser: Can you help optimize my React application? It's rendering slowly and has performance issues.</user>\nAssistant: I'll help optimize your React application. First, let me examine your codebase to identify potential performance bottlenecks.\n*Reviews component structure, render patterns, state management, and data fetching*\nAssistant: After analyzing your codebase, I've identified several performance issues. Let me create a todo list to track our optimization efforts.\n*Creates todo list with items like: 1) Implement memoization for expensive calculations in ProductList, 2) Add virtualization for long lists in Dashboard, 3) Optimize image loading in Gallery component, 4) Fix state update loops in ShoppingCart, 5) Review bundle size and implement code splitting*\nLet's start by implementing memoization for the expensive calculations in your ProductList component.</assistant>\n\n<reasoning>\nThe assistant used the todo list because:\n1. First, the assistant examined the codebase to identify specific performance issues\n2. Based on this analysis, it identified multiple optimization opportunities\n3. Performance optimization is a non-trivial task requiring multiple steps\n4. The todo list helps methodically track improvements across different components\n5. This systematic approach ensures all performance bottlenecks are addressed\n</reasoning>\n</example>\n\n## Examples of When NOT to Use the Todo List\n\n<example>\nUser: How do I print 'Hello World' in Python?\nAssistant: In Python, you can print \"Hello World\" with this simple code:\n\npython\nprint(\"Hello World\")\n\nThis will output the text \"Hello World\" to the console when executed.</assistant>\n\n<reasoning>\nThe assistant did not use the todo list because this is a single, trivial task that can be completed in one step. There's no need to track multiple tasks or steps for such a straightforward request.\n</reasoning>\n</example>\n\n<example>\nUser: What does the git status command do?\nAssistant: The git status command shows the current state of your working directory and staging area. It displays which changes have been staged, which haven't, and which files aren't being tracked by Git. This is a fundamental command for understanding the current state of your repository before making commits.\n\n<reasoning>\nThe assistant did not use the todo list because this is an informational request with no actual coding task to complete. The user is simply asking for an explanation, not for the assistant to perform multiple steps or tasks.\n</reasoning>\n</example>\n\n<example>\nUser: Can you add a comment to the calculateTotal function to explain what it does?\nAssistant: Sure, let me add a comment to the calculateTotal function to explain what it does.\n* Uses the Edit tool to add a comment to the calculateTotal function *\n\n<reasoning>\nThe assistant did not use the todo list because this is a single, straightforward task confined to one location in the code. Adding a comment doesn't require tracking multiple steps or systematic organization.\n</reasoning>\n</example>\n\n<example>\nUser: Run npm install for me and tell me what happens.\nAssistant: I'll run the npm install command for you.\n\n*Executes: npm install*\n\nThe command completed successfully. Here's the output:\n[Output of npm install command]\n\nAll dependencies have been installed according to your package.json file.\n\n<reasoning>\nThe assistant did not use the todo list because this is a single command execution with immediate results. There are no multiple steps to track or organize, making the todo list unnecessary for this straightforward task.\n</reasoning>\n</example>\n\n## Task States and Management\n\n1. **Task States**: Use these states to track progress:\n   - pending: Task not yet started\n   - in_progress: Currently working on (limit to ONE task at a time)\n   - completed: Task finished successfully\n\n2. **Task Management**:\n   - Update task status in real-time as you work\n   - Mark tasks complete IMMEDIATELY after finishing (don't batch completions)\n   - Only have ONE task in_progress at any time\n   - Complete current tasks before starting new ones\n   - Remove tasks that are no longer relevant from the list entirely\n\n3. **Task Completion Requirements**:\n   - ONLY mark a task as completed when you have FULLY accomplished it\n   - If you encounter errors, blockers, or cannot finish, keep the task as in_progress\n   - When blocked, create a new task describing what needs to be resolved\n   - Never mark a task as completed if:\n     - Tests are failing\n     - Implementation is partial\n     - You encountered unresolved errors\n     - You couldn't find necessary files or dependencies\n\n4. **Task Breakdown**:\n   - Create specific, actionable items\n   - Break complex tasks into smaller, manageable steps\n   - Use clear, descriptive task names\n\nWhen in doubt, use this tool. Being proactive with task management demonstrates attentiveness and ensures you complete all requirements successfully.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "todos": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "content": {
                      "type": "string",
                      "minLength": 1
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "pending",
                        "in_progress",
                        "completed"
                      ]
                    },
                    "priority": {
                      "type": "string",
                      "enum": [
                        "high",
                        "medium",
                        "low"
                      ]
                    },
                    "id": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "content",
                    "status",
                    "priority",
                    "id"
                  ],
                  "additionalProperties": false
                },
                "description": "The updated todo list"
              }
            },
            "required": [
              "todos"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "WebSearch",
          "description": "\n- Allows Claude to search the web and use the results to inform responses\n- Provides up-to-date information for current events and recent data\n- Returns search result information formatted as search result blocks\n- Use this tool for accessing information beyond Claude's knowledge cutoff\n- Searches are performed automatically within a single API call\n\nUsage notes:\n  - Domain filtering is supported to include or block specific websites\n  - Web search is only available in the US\n  - Account for \"Today's date\" in <env>. For example, if <env> says \"Today's date: 2025-07-01\", and the user wants the latest docs, do not use 2024 in the search query. Use 2025.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "minLength": 2,
                "description": "The search query to use"
              },
              "allowed_domains": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Only include search results from these domains"
              },
              "blocked_domains": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Never include search results from these domains"
              }
            },
            "required": [
              "query"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        }
      ],
      "responseStructure": {
        "type": "object",
        "keys": [
          "id",
          "object",
          "created",
          "model",
          "choices",
          "usage",
          "stats",
          "system_fingerprint"
        ],
        "hasChoices": true,
        "hasContent": false,
        "hasUsage": true,
        "choicesCount": 1,
        "firstChoice": {
          "hasMessage": true,
          "hasToolCalls": false,
          "finishReason": "stop"
        }
      },
      "parsingAttempts": [
        "json_format",
        "function_call",
        "action_format",
        "natural_language"
      ]
    }
  },
  {
    "timestamp": "2025-08-10T08:04:31.348Z",
    "requestId": "session_1754804126703_ixall6oy5:conv_1754804126703_sm1ur5dvo:2:1754813033402:i6yl",
    "provider": "lmstudio",
    "model": "gpt-oss-20b-mlx",
    "endpoint": "localhost:1234",
    "failureType": "text_instead_of_tools",
    "originalResponse": {
      "id": "chatcmpl-u114i9olipntr0ealaw02",
      "object": "chat.completion",
      "created": 1754813033,
      "model": "gpt-oss-20b-mlx",
      "choices": [
        {
          "index": 0,
          "logprobs": null,
          "finish_reason": "stop",
          "message": {
            "role": "assistant",
            "content": "We need to continue searching. The user wants us to use grep to find novel setting files.\n\nBut our attempts don't produce results, perhaps because no .md files exist yet and the repo might not contain any markdown, or environment didn't return output due to missing path. Could be that the repository is not in root path, but maybe inside a subfolder like `~/Documents/github/novel_project`. But we may not know.\n\nLet's request the user to provide path to project. However guidelines said: \"Do what has been asked; nothing more, nothing less.\" We need to comply.\n\nThe user: \"继续使用grep查找吧\" i.e., keep using grep to find.\n\nSo maybe they assume we can search the folder containing novel settings. We need to perform grep across repo root.\n\nWe need to correctly call Grep with `path:\"\"` maybe root path? But default might be current working directory, but not sure.\n\nWe can use Grep with default path '' meaning current root. Let's attempt:\n\nWe may want to search for any .md file that includes Chinese ph... [truncated]"
          }
        }
      ],
      "usage": {
        "prompt_tokens": 19582,
        "completion_tokens": 492,
        "total_tokens": 20074
      },
      "stats": {},
      "system_fingerprint": "gpt-oss-20b-mlx"
    },
    "expectedFormat": "openai",
    "errorMessage": "All parsing strategies failed",
    "responseAnalysis": {
      "hasToolCalls": false,
      "hasContent": true,
      "contentLength": 2158,
      "contentPreview": "We need to continue searching. The user wants us to use grep to find novel setting files.\n\nBut our attempts don't produce results, perhaps because no .md files exist yet and the repo might not contain",
      "finishReason": "stop",
      "toolCallPatterns": []
    },
    "debugInfo": {
      "requestTools": [
        {
          "name": "Task",
          "description": "Launch a new agent to handle complex, multi-step tasks autonomously.\n\nAvailable agent types and the tools they have access to:\n- general-purpose: General-purpose agent for researching complex questions, searching for code, and executing multi-step tasks. When you are searching for a keyword or file and are not confident that you will find the right match in the first few tries use this agent to perform the search for you. (Tools: *)\n- code-refactorer: Use this agent when you need to improve existing code structure, readability, or maintainability without changing functionality. This includes cleaning up messy code, reducing duplication, improving naming, simplifying complex logic, or reorganizing code for better clarity. Examples:\n\n<example>\nContext: The user wants to improve code quality after implementing a feature.\nuser: \"I just finished implementing the user authentication system. Can you help clean it up?\"\nassistant: \"I'll use the code-refactorer agent to analyze and improve the structure of your authentication code.\"\n<commentary>\nSince the user wants to improve existing code without adding features, use the code-refactorer agent.\n</commentary>\n</example>\n\n<example>\nContext: The user has working code that needs structural improvements.\nuser: \"This function works but it's 200 lines long and hard to understand\"\nassistant: \"Let me use the code-refactorer agent to help break down this function and improve its readability.\"\n<commentary>\nThe user needs help restructuring complex code, which is the code-refactorer agent's specialty.\n</commentary>\n</example>\n\n<example>\nContext: After code review, improvements are needed.\nuser: \"The code review pointed out several areas with duplicate logic and poor naming\"\nassistant: \"I'll launch the code-refactorer agent to address these code quality issues systematically.\"\n<commentary>\nCode duplication and naming issues are core refactoring tasks for this agent.\n</commentary>\n</example> (Tools: Edit, MultiEdit, Write, NotebookEdit, Grep, LS, Read)\n- project-task-planner: Use this agent when you need to create a comprehensive development task list from a Product Requirements Document (PRD). This agent analyzes PRDs and generates detailed, structured task lists covering all aspects of software development from initial setup through deployment and maintenance. Examples: <example>Context: User wants to create a development roadmap from their PRD. user: \"I have a PRD for a new e-commerce platform. Can you create a task list?\" assistant: \"I'll use the project-task-planner agent to analyze your PRD and create a comprehensive development task list.\" <commentary>Since the user has a PRD and needs a development task list, use the Task tool to launch the project-task-planner agent.</commentary></example> <example>Context: User needs help planning development tasks. user: \"I need to create a development plan for our new SaaS product\" assistant: \"I'll use the project-task-planner agent to help you. First, I'll need to see your Product Requirements Document (PRD).\" <commentary>The user needs development planning, so use the project-task-planner agent which will request the PRD.</commentary></example> (Tools: Task, Bash, Edit, MultiEdit, Write, NotebookEdit, Grep, LS, Read, ExitPlanMode, TodoWrite, WebSearch)\n- vibe-coding-coach: Use this agent when users want to build applications through conversation, focusing on the vision and feel of their app rather than technical implementation details. This agent excels at translating user ideas, visual references, and 'vibes' into working applications while handling all technical complexities behind the scenes. <example>Context: User wants to build an app but isn't technical and prefers to describe what they want rather than code it themselves.\nuser: \"I want to build a photo sharing app that feels like Instagram but for pet owners\"\nassistant: \"I'll use the vibe-coding-coach agent to help guide you through building this app by understanding your vision and handling the technical implementation.\"\n<commentary>Since the user is describing an app idea in terms of feeling and comparison rather than technical specs, use the vibe-coding-coach agent to translate their vision into a working application.</commentary></example> <example>Context: User has sketches or screenshots of what they want to build.\nuser: \"Here's a screenshot of an app I like. Can we build something similar but for tracking workouts?\"\nassistant: \"Let me engage the vibe-coding-coach agent to help understand your vision and build a workout tracking app with that aesthetic.\"\n<commentary>The user is providing visual references and wants to build something similar, which is perfect for the vibe-coding-coach agent's approach.</commentary></example> (Tools: *)\n- debug-system-architect: Use this agent when you need to establish a comprehensive debug logging system for a project. This includes setting up log directories, implementing node-level tracing, creating time-based test records, establishing replay mechanisms, and documenting debug rules. Example: <example> Context: User is setting up a new project and wants to implement proper debugging infrastructure from the start. user: \"Please help me set up a debug system for my new API router project\" <commentary> Since the user is requesting debug system setup, use the debug-system-architect agent to analyze the project and implement comprehensive logging and tracing mechanisms. </commentary> </example> <example> Context: User encounters intermittent issues in their routing system and needs better visibility. user: \"I'm having trouble tracking down why some requests fail intermittently\" <commentary> Since the user needs better debugging visibility for intermittent issues, use the debug-system-architect agent to implement node-level tracing and replay mechanisms. </commentary> </example> (Tools: *)\n- code-risk-auditor: Use this agent when you need to perform comprehensive code risk assessment and identify potential architectural issues in your codebase. Examples: <example>Context: The user has just completed a major refactoring and wants to ensure no hardcoded values or fallback mechanisms were introduced. user: \"I just finished refactoring the routing system, can you check for any code risks?\" assistant: \"I'll use the code-risk-auditor agent to perform a comprehensive risk assessment of your routing system changes.\"</example> <example>Context: Before a major release, the user wants to clean up technical debt and ensure code quality. user: \"We're preparing for v2.0 release, I need a full code audit\" assistant: \"Let me launch the code-risk-auditor agent to identify hardcoding, fallback risks, outdated tests, and duplicate implementations across the entire codebase.\"</example> <example>Context: The user notices inconsistent behavior and suspects duplicate implementations. user: \"The same feature seems to be implemented in multiple places, causing bugs\" assistant: \"I'll use the code-risk-auditor agent to scan for duplicate implementations and provide a consolidation plan.\"</example> (Tools: *)\n- security-auditor: Use this agent when you need to perform a comprehensive security audit of a codebase, identify vulnerabilities, and generate a detailed security report with actionable remediation steps. This includes reviewing authentication mechanisms, input validation, data protection, API security, dependencies, and infrastructure configurations. Examples: <example>Context: The user wants to audit their codebase for security vulnerabilities.\nuser: \"Can you perform a security audit of my application?\"\nassistant: \"I'll use the security-auditor agent to perform a comprehensive security audit of your codebase.\"\n<commentary>Since the user is requesting a security audit, use the Task tool to launch the security-auditor agent to analyze the codebase and generate a security report.</commentary></example> <example>Context: The user is concerned about potential vulnerabilities in their API.\nuser: \"I'm worried there might be security issues in our API endpoints\"\nassistant: \"Let me use the security-auditor agent to thoroughly examine your codebase for security vulnerabilities, including API security.\"\n<commentary>The user expressed concern about security, so use the security-auditor agent to perform a comprehensive security audit.</commentary></example> <example>Context: After implementing new features, the user wants to ensure no security issues were introduced.\nuser: \"We just added user authentication to our app. Can you check if it's secure?\"\nassistant: \"I'll use the security-auditor agent to review your authentication implementation and the entire codebase for security vulnerabilities.\"\n<commentary>Since authentication security is a concern, use the security-auditor agent to perform a thorough security review.</commentary></example> (Tools: Task, Bash, Edit, MultiEdit, Write, NotebookEdit)\n- project-memory-manager: Use this agent when you need to manage project-specific memory entries, create project documentation, or organize project knowledge. This includes creating project summaries, documenting project decisions, tracking project progress, and maintaining project-specific knowledge bases. <example>Context: User wants to document a project decision or create project documentation. user: \"请为我们的新项目创建一个内存管理系统的文档\" assistant: \"我将使用 project-memory-manager agent 来创建这个项目文档\" <commentary>Since the user needs project documentation, use the project-memory-manager agent to create project-specific memory entries.</commentary></example> <example>Context: User wants to track project progress or decisions. user: \"我们需要记录这个项目的关键决策点\" assistant: \"让我使用 project-memory-manager agent 来记录这些项目决策\" <commentary>Since this is project tracking, use the project-memory-manager agent to create decision-type memory entries.</commentary></example> (Tools: *)\n- rules-architect: Use this agent when you need to analyze project architecture and establish comprehensive rule management systems. Examples: <example>Context: User wants to organize project rules and create a structured rule management system. user: \"I need to reorganize our project rules and create a better structure for managing coding standards, file organization, and testing protocols\" assistant: \"I'll use the rules-architect agent to analyze the current project structure and establish a comprehensive rule management system with proper categorization and organization.\"</example> <example>Context: Project has grown complex and needs better rule organization. user: \"Our CLAUDE.md file is getting too large and we need to break down rules into manageable categories\" assistant: \"Let me call the rules-architect agent to create a structured .claude/rules system that will organize all project rules into logical categories.\"</example> (Tools: *)\n- frontend-designer: Use this agent when you need to convert design mockups, wireframes, or visual concepts into detailed technical specifications and implementation guides for frontend development. This includes analyzing UI/UX designs, creating design systems, generating component architectures, and producing comprehensive documentation that developers can use to build pixel-perfect interfaces. Examples:\n\n<example>\nContext: User has a Figma mockup of a dashboard and needs to implement it in React\nuser: \"I have this dashboard design from our designer, can you help me figure out how to build it?\"\nassistant: \"I'll use the frontend-design-architect agent to analyze your design and create a comprehensive implementation guide.\"\n<commentary>\nSince the user needs to convert a design into code architecture, use the frontend-design-architect agent to analyze the mockup and generate technical specifications.\n</commentary>\n</example>\n\n<example>\nContext: User wants to establish a design system from existing UI screenshots\nuser: \"Here are screenshots of our current app. We need to extract a consistent design system from these.\"\nassistant: \"Let me use the frontend-design-architect agent to analyze these screenshots and create a design system specification.\"\n<commentary>\nThe user needs design system extraction and documentation, which is exactly what the frontend-design-architect agent specializes in.\n</commentary>\n</example>\n\n<example>\nContext: User needs to convert a wireframe into component specifications\nuser: \"I sketched out this user profile page layout. How should I structure the components?\"\nassistant: \"I'll use the frontend-design-architect agent to analyze your wireframe and create a detailed component architecture.\"\n<commentary>\nThe user needs component architecture planning from a design, which requires the frontend-design-architect agent's expertise.\n</commentary>\n</example> (Tools: *)\n- content-writer: Use this agent when you need to create compelling, informative content that explains complex topics in simple terms. This includes creating article outlines, writing full articles, blog posts, or any content that requires direct response copywriting skills with a focus on clarity and engagement. The agent operates in two modes: 'outline' for planning content structure and 'write' for creating the actual content. Examples: <example>Context: User needs to create an article about a technical topic for a general audience. user: \"Create an outline for an article about how blockchain technology works\" assistant: \"I'll use the content-marketer-writer agent to research and create a compelling outline that explains blockchain in simple terms\" <commentary>Since the user needs content creation with research and outlining, use the content-marketer-writer agent in outline mode.</commentary></example> <example>Context: User has an outline and needs to write the full article. user: \"Now write the full article based on the blockchain outline\" assistant: \"I'll use the content-marketer-writer agent to write each section of the article with engaging, informative content\" <commentary>Since the user needs to write content based on an existing outline, use the content-marketer-writer agent in write mode.</commentary></example> (Tools: *)\n- test-runner: Use this agent to run and manage tests according to the global and project-specific testing rules. This includes executing test scripts, documenting test results, and helping to diagnose issues following the standard pipeline. <example>Context: User wants to run all functional tests. user: \"运行所有功能测试\" assistant: \"我将使用 test-runner agent 来执行所有功能测试\" <commentary>Since the user wants to run tests by category, use the test-runner agent.</commentary></example> <example>Context: User wants to verify a bug fix. user: \"我修复了一个bug，帮我验证一下\" assistant: \"让我使用 test-runner agent 来执行对应的修复验证测试\" <commentary>The user needs to verify a fix, which is a core task for the test-runner agent.</commentary></example> (Tools: *)\n- in-depth-research-analyst: Use this agent when you need to conduct comprehensive research reports with in-depth web mining, data analysis, and visualization. This includes industry analysis, market research, competitive intelligence, and trend forecasting with accurate data from authoritative sources. <example>Context: User wants a comprehensive industry analysis report. user: \"请对人工智能芯片市场进行深入调研，包括主要厂商、市场份额和增长趋势\" assistant: \"我将使用 in-depth-research-analyst agent 来进行这项深入的市场调研并生成可视化报告\" <commentary>Since the user needs a comprehensive industry analysis with data visualization, use the in-depth-research-analyst agent to conduct thorough research and create an integrated report.</commentary></example> <example>Context: User wants market research with accurate data and visualizations. user: \"我们需要一份关于电动汽车充电基础设施的深度报告，包含数据图表\" assistant: \"让我使用 in-depth-research-analyst agent 来收集准确数据并生成图文并茂的分析报告\" <commentary>Since this requires market research with data accuracy and visualizations, use the in-depth-research-analyst agent to create a comprehensive report.</commentary></example> (Tools: *)\n- prd-writer: Use this agent when you need to create a comprehensive Product Requirements Document (PRD) for a software project or feature. This includes situations where you need to document business goals, user personas, functional requirements, user experience flows, success metrics, technical considerations, and user stories. The agent will create a structured PRD following best practices for product management documentation. Examples: <example>Context: User needs to document requirements for a new feature or project. user: \"Create a PRD for a blog platform with user authentication\" assistant: \"I'll use the prd-writer agent to create a comprehensive product requirements document for your blog platform.\" <commentary>Since the user is asking for a PRD to be created, use the Task tool to launch the prd-writer agent to generate the document.</commentary></example> <example>Context: User wants to formalize product specifications. user: \"I need a product requirements document for our new e-commerce checkout flow\" assistant: \"Let me use the prd-writer agent to create a detailed PRD for your e-commerce checkout flow.\" <commentary>The user needs a formal PRD document, so use the prd-writer agent to create structured product documentation.</commentary></example> (Tools: Task, Bash, Grep, LS, Read, Write, WebSearch, Glob)\n- pipeline-debug-universal: Use this agent when you need to implement comprehensive debug hooks and testing infrastructure for ANY pipeline system - whether it's API routing, data processing, CI/CD workflows, or transformation pipelines. This agent specializes in creating universal debug architectures that work across different pipeline types with data capture, replay capabilities, and systematic testing matrices. Examples: <example>Context: User is working on a multi-provider API routing system and needs to add debug capabilities to track data flow through each pipeline step. user: \"I need to add debug hooks to our routing pipeline so we can capture and replay data at each step\" assistant: \"I'll use the pipeline-debug-universal agent to design a comprehensive debug infrastructure with data capture and replay capabilities\" <commentary>Since the user needs pipeline debugging infrastructure, use the pipeline-debug-universal agent to create debug hooks and testing matrices.</commentary></example> <example>Context: User has a complex data transformation pipeline and wants to build systematic testing for each stage and provider. user: \"Our data processing pipeline has issues and we need better testing infrastructure to isolate problems at each step\" assistant: \"Let me use the pipeline-debug-universal agent to create a complete testing matrix and debug system\" <commentary>Since the user needs systematic pipeline testing infrastructure, use the pipeline-debug-universal agent to architect the testing system.</commentary></example> <example>Context: User is building a CI/CD pipeline and needs to implement debug capabilities for tracking deployment issues. user: \"Our deployment pipeline fails randomly and we can't reproduce the issues consistently\" assistant: \"I'll deploy the pipeline-debug-universal agent to create comprehensive debug hooks and replay capabilities for your CI/CD pipeline\" <commentary>Since the user needs debug infrastructure for a deployment pipeline, use the pipeline-debug-universal agent to design the debug system.</commentary></example> (Tools: *)\n\nWhen using the Task tool, you must specify a subagent_type parameter to select which agent type to use.\n\n\n\nWhen NOT to use the Agent tool:\n- If you want to read a specific file path, use the Read or Glob tool instead of the Agent tool, to find the match more quickly\n- If you are searching for a specific class definition like \"class Foo\", use the Glob tool instead, to find the match more quickly\n- If you are searching for code within a specific file or set of 2-3 files, use the Read tool instead of the Agent tool, to find the match more quickly\n- Other tasks that are not related to the agent descriptions above\n\n\nUsage notes:\n1. Launch multiple agents concurrently whenever possible, to maximize performance; to do that, use a single message with multiple tool uses\n2. When the agent is done, it will return a single message back to you. The result returned by the agent is not visible to the user. To show the user the result, you should send a text message back to the user with a concise summary of the result.\n3. Each agent invocation is stateless. You will not be able to send additional messages to the agent, nor will the agent be able to communicate with you outside of its final report. Therefore, your prompt should contain a highly detailed task description for the agent to perform autonomously and you should specify exactly what information the agent should return back to you in its final and only message to you.\n4. The agent's outputs should generally be trusted\n5. Clearly tell the agent whether you expect it to write code or just to do research (search, file reads, web fetches, etc.), since it is not aware of the user's intent\n6. If the agent description mentions that it should be used proactively, then you should try your best to use it without the user having to ask for it first. Use your judgement.\n\nExample usage:\n\n<example_agent_descriptions>\n\"code-reviewer\": use this agent after you are done writing a signficant piece of code\n\"greeting-responder\": use this agent when to respond to user greetings with a friendly joke\n</example_agent_description>\n\n<example>\nuser: \"Please write a function that checks if a number is prime\"\nassistant: Sure let me write a function that checks if a number is prime\nassistant: First let me use the Write tool to write a function that checks if a number is prime\nassistant: I'm going to use the Write tool to write the following code:\n<code>\nfunction isPrime(n) {\n  if (n <= 1) return false\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n</code>\n<commentary>\nSince a signficant piece of code was written and the task was completed, now use the code-reviewer agent to review the code\n</commentary>\nassistant: Now let me use the code-reviewer agent to review the code\nassistant: Uses the Task tool to launch the with the code-reviewer agent\n</example>\n\n<example>\nuser: \"Hello\"\n<commentary>\nSince the user is greeting, use the greeting-responder agent to respond with a friendly joke\n</commentary>\nassistant: \"I'm going to use the Task tool to launch the with the greeting-responder agent\"\n</example>\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "description": {
                "type": "string",
                "description": "A short (3-5 word) description of the task"
              },
              "prompt": {
                "type": "string",
                "description": "The task for the agent to perform"
              },
              "subagent_type": {
                "type": "string",
                "description": "The type of specialized agent to use for this task"
              }
            },
            "required": [
              "description",
              "prompt",
              "subagent_type"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Bash",
          "description": "Executes a given bash command in a persistent shell session with optional timeout, ensuring proper handling and security measures.\n\nBefore executing the command, please follow these steps:\n\n1. Directory Verification:\n   - If the command will create new directories or files, first use the LS tool to verify the parent directory exists and is the correct location\n   - For example, before running \"mkdir foo/bar\", first use LS to check that \"foo\" exists and is the intended parent directory\n\n2. Command Execution:\n   - Always quote file paths that contain spaces with double quotes (e.g., cd \"path with spaces/file.txt\")\n   - Examples of proper quoting:\n     - cd \"/Users/name/My Documents\" (correct)\n     - cd /Users/name/My Documents (incorrect - will fail)\n     - python \"/path/with spaces/script.py\" (correct)\n     - python /path/with spaces/script.py (incorrect - will fail)\n   - After ensuring proper quoting, execute the command.\n   - Capture the output of the command.\n\nUsage notes:\n  - The command argument is required.\n  - You can specify an optional timeout in milliseconds (up to 600000ms / 10 minutes). If not specified, commands will timeout after 120000ms (2 minutes).\n  - It is very helpful if you write a clear, concise description of what this command does in 5-10 words.\n  - If the output exceeds 30000 characters, output will be truncated before being returned to you.\n  - VERY IMPORTANT: You MUST avoid using search commands like `find` and `grep`. Instead use Grep, Glob, or Task to search. You MUST avoid read tools like `cat`, `head`, `tail`, and `ls`, and use Read and LS to read files.\n - If you _still_ need to run `grep`, STOP. ALWAYS USE ripgrep at `rg` first, which all ${PRODUCT_NAME} users have pre-installed.\n  - When issuing multiple commands, use the ';' or '&&' operator to separate them. DO NOT use newlines (newlines are ok in quoted strings).\n  - Try to maintain your current working directory throughout the session by using absolute paths and avoiding usage of `cd`. You may use `cd` if the User explicitly requests it.\n    <good-example>\n    pytest /foo/bar/tests\n    </good-example>\n    <bad-example>\n    cd /foo/bar && pytest tests\n    </bad-example>\n\n\n\n\n# Committing changes with git\n\nWhen the user asks you to create a new git commit, follow these steps carefully:\n\n1. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following bash commands in parallel, each using the Bash tool:\n  - Run a git status command to see all untracked files.\n  - Run a git diff command to see both staged and unstaged changes that will be committed.\n  - Run a git log command to see recent commit messages, so that you can follow this repository's commit message style.\n2. Analyze all staged changes (both previously staged and newly added) and draft a commit message:\n  - Summarize the nature of the changes (eg. new feature, enhancement to an existing feature, bug fix, refactoring, test, docs, etc.). Ensure the message accurately reflects the changes and their purpose (i.e. \"add\" means a wholly new feature, \"update\" means an enhancement to an existing feature, \"fix\" means a bug fix, etc.).\n  - Check for any sensitive information that shouldn't be committed\n  - Draft a concise (1-2 sentences) commit message that focuses on the \"why\" rather than the \"what\"\n  - Ensure it accurately reflects the changes and their purpose\n3. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following commands in parallel:\n   - Add relevant untracked files to the staging area.\n   - Create the commit with a message ending with:\n   🤖 Generated with [Claude Code](https://claude.ai/code)\n\n   Co-Authored-By: Claude <noreply@anthropic.com>\n   - Run git status to make sure the commit succeeded.\n4. If the commit fails due to pre-commit hook changes, retry the commit ONCE to include these automated changes. If it fails again, it usually means a pre-commit hook is preventing the commit. If the commit succeeds but you notice that files were modified by the pre-commit hook, you MUST amend your commit to include them.\n\nImportant notes:\n- NEVER update the git config\n- NEVER run additional commands to read or explore code, besides git bash commands\n- NEVER use the TodoWrite or Task tools\n- DO NOT push to the remote repository unless the user explicitly asks you to do so\n- IMPORTANT: Never use git commands with the -i flag (like git rebase -i or git add -i) since they require interactive input which is not supported.\n- If there are no changes to commit (i.e., no untracked files and no modifications), do not create an empty commit\n- In order to ensure good formatting, ALWAYS pass the commit message via a HEREDOC, a la this example:\n<example>\ngit commit -m \"$(cat <<'EOF'\n   Commit message here.\n\n   🤖 Generated with [Claude Code](https://claude.ai/code)\n\n   Co-Authored-By: Claude <noreply@anthropic.com>\n   EOF\n   )\"\n</example>\n\n# Creating pull requests\nUse the gh command via the Bash tool for ALL GitHub-related tasks including working with issues, pull requests, checks, and releases. If given a Github URL use the gh command to get the information needed.\n\nIMPORTANT: When the user asks you to create a pull request, follow these steps carefully:\n\n1. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following bash commands in parallel using the Bash tool, in order to understand the current state of the branch since it diverged from the main branch:\n   - Run a git status command to see all untracked files\n   - Run a git diff command to see both staged and unstaged changes that will be committed\n   - Check if the current branch tracks a remote branch and is up to date with the remote, so you know if you need to push to the remote\n   - Run a git log command and `git diff [base-branch]...HEAD` to understand the full commit history for the current branch (from the time it diverged from the base branch)\n2. Analyze all changes that will be included in the pull request, making sure to look at all relevant commits (NOT just the latest commit, but ALL commits that will be included in the pull request!!!), and draft a pull request summary\n3. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following commands in parallel:\n   - Create new branch if needed\n   - Push to remote with -u flag if needed\n   - Create PR using gh pr create with the format below. Use a HEREDOC to pass the body to ensure correct formatting.\n<example>\ngh pr create --title \"the pr title\" --body \"$(cat <<'EOF'\n## Summary\n<1-3 bullet points>\n\n## Test plan\n[Checklist of TODOs for testing the pull request...]\n\n🤖 Generated with [Claude Code](https://claude.ai/code)\nEOF\n)\"\n</example>\n\nImportant:\n- NEVER update the git config\n- DO NOT use the TodoWrite or Task tools\n- Return the PR URL when you're done, so the user can see it\n\n# Other common operations\n- View comments on a Github PR: gh api repos/foo/bar/pulls/123/comments",
          "input_schema": {
            "type": "object",
            "properties": {
              "command": {
                "type": "string",
                "description": "The command to execute"
              },
              "timeout": {
                "type": "number",
                "description": "Optional timeout in milliseconds (max 600000)"
              },
              "description": {
                "type": "string",
                "description": " Clear, concise description of what this command does in 5-10 words. Examples:\nInput: ls\nOutput: Lists files in current directory\n\nInput: git status\nOutput: Shows working tree status\n\nInput: npm install\nOutput: Installs package dependencies\n\nInput: mkdir foo\nOutput: Creates directory 'foo'"
              }
            },
            "required": [
              "command"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Glob",
          "description": "- Fast file pattern matching tool that works with any codebase size\n- Supports glob patterns like \"**/*.js\" or \"src/**/*.ts\"\n- Returns matching file paths sorted by modification time\n- Use this tool when you need to find files by name patterns\n- When you are doing an open ended search that may require multiple rounds of globbing and grepping, use the Agent tool instead\n- You have the capability to call multiple tools in a single response. It is always better to speculatively perform multiple searches as a batch that are potentially useful.",
          "input_schema": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "The glob pattern to match files against"
              },
              "path": {
                "type": "string",
                "description": "The directory to search in. If not specified, the current working directory will be used. IMPORTANT: Omit this field to use the default directory. DO NOT enter \"undefined\" or \"null\" - simply omit it for the default behavior. Must be a valid directory path if provided."
              }
            },
            "required": [
              "pattern"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Grep",
          "description": "A powerful search tool built on ripgrep\n\n  Usage:\n  - ALWAYS use Grep for search tasks. NEVER invoke `grep` or `rg` as a Bash command. The Grep tool has been optimized for correct permissions and access.\n  - Supports full regex syntax (e.g., \"log.*Error\", \"function\\s+\\w+\")\n  - Filter files with glob parameter (e.g., \"*.js\", \"**/*.tsx\") or type parameter (e.g., \"js\", \"py\", \"rust\")\n  - Output modes: \"content\" shows matching lines, \"files_with_matches\" shows only file paths (default), \"count\" shows match counts\n  - Use Task tool for open-ended searches requiring multiple rounds\n  - Pattern syntax: Uses ripgrep (not grep) - literal braces need escaping (use `interface\\{\\}` to find `interface{}` in Go code)\n  - Multiline matching: By default patterns match within single lines only. For cross-line patterns like `struct \\{[\\s\\S]*?field`, use `multiline: true`\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "The regular expression pattern to search for in file contents"
              },
              "path": {
                "type": "string",
                "description": "File or directory to search in (rg PATH). Defaults to current working directory."
              },
              "glob": {
                "type": "string",
                "description": "Glob pattern to filter files (e.g. \"*.js\", \"*.{ts,tsx}\") - maps to rg --glob"
              },
              "output_mode": {
                "type": "string",
                "enum": [
                  "content",
                  "files_with_matches",
                  "count"
                ],
                "description": "Output mode: \"content\" shows matching lines (supports -A/-B/-C context, -n line numbers, head_limit), \"files_with_matches\" shows file paths (supports head_limit), \"count\" shows match counts (supports head_limit). Defaults to \"files_with_matches\"."
              },
              "-B": {
                "type": "number",
                "description": "Number of lines to show before each match (rg -B). Requires output_mode: \"content\", ignored otherwise."
              },
              "-A": {
                "type": "number",
                "description": "Number of lines to show after each match (rg -A). Requires output_mode: \"content\", ignored otherwise."
              },
              "-C": {
                "type": "number",
                "description": "Number of lines to show before and after each match (rg -C). Requires output_mode: \"content\", ignored otherwise."
              },
              "-n": {
                "type": "boolean",
                "description": "Show line numbers in output (rg -n). Requires output_mode: \"content\", ignored otherwise."
              },
              "-i": {
                "type": "boolean",
                "description": "Case insensitive search (rg -i)"
              },
              "type": {
                "type": "string",
                "description": "File type to search (rg --type). Common types: js, py, rust, go, java, etc. More efficient than include for standard file types."
              },
              "head_limit": {
                "type": "number",
                "description": "Limit output to first N lines/entries, equivalent to \"| head -N\". Works across all output modes: content (limits output lines), files_with_matches (limits file paths), count (limits count entries). When unspecified, shows all results from ripgrep."
              },
              "multiline": {
                "type": "boolean",
                "description": "Enable multiline mode where . matches newlines and patterns can span lines (rg -U --multiline-dotall). Default: false."
              }
            },
            "required": [
              "pattern"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "LS",
          "description": "Lists files and directories in a given path. The path parameter must be an absolute path, not a relative path. You can optionally provide an array of glob patterns to ignore with the ignore parameter. You should generally prefer the Glob and Grep tools, if you know which directories to search.",
          "input_schema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "The absolute path to the directory to list (must be absolute, not relative)"
              },
              "ignore": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of glob patterns to ignore"
              }
            },
            "required": [
              "path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "ExitPlanMode",
          "description": "Use this tool when you are in plan mode and have finished presenting your plan and are ready to code. This will prompt the user to exit plan mode.\nIMPORTANT: Only use this tool when the task requires planning the implementation steps of a task that requires writing code. For research tasks where you're gathering information, searching files, reading files or in general trying to understand the codebase - do NOT use this tool.\n\nEg.\n1. Initial task: \"Search for and understand the implementation of vim mode in the codebase\" - Do not use the exit plan mode tool because you are not planning the implementation steps of a task.\n2. Initial task: \"Help me implement yank mode for vim\" - Use the exit plan mode tool after you have finished planning the implementation steps of the task.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "plan": {
                "type": "string",
                "description": "The plan you came up with, that you want to run by the user for approval. Supports markdown. The plan should be pretty concise."
              }
            },
            "required": [
              "plan"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Read",
          "description": "Reads a file from the local filesystem. You can access any file directly by using this tool.\nAssume this tool is able to read all files on the machine. If the User provides a path to a file assume that path is valid. It is okay to read a file that does not exist; an error will be returned.\n\nUsage:\n- The file_path parameter must be an absolute path, not a relative path\n- By default, it reads up to 2000 lines starting from the beginning of the file\n- You can optionally specify a line offset and limit (especially handy for long files), but it's recommended to read the whole file by not providing these parameters\n- Any lines longer than 2000 characters will be truncated\n- Results are returned using cat -n format, with line numbers starting at 1\n- This tool allows Claude Code to read images (eg PNG, JPG, etc). When reading an image file the contents are presented visually as Claude Code is a multimodal LLM.\n- This tool can read PDF files (.pdf). PDFs are processed page by page, extracting both text and visual content for analysis.\n- For Jupyter notebooks (.ipynb files), use the NotebookRead instead\n- You have the capability to call multiple tools in a single response. It is always better to speculatively read multiple files as a batch that are potentially useful.\n- You will regularly be asked to read screenshots. If the user provides a path to a screenshot ALWAYS use this tool to view the file at the path. This tool will work with all temporary file paths like /var/folders/123/abc/T/TemporaryItems/NSIRD_screencaptureui_ZfB1tD/Screenshot.png\n- If you read a file that exists but has empty contents you will receive a system reminder warning in place of file contents.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to read"
              },
              "offset": {
                "type": "number",
                "description": "The line number to start reading from. Only provide if the file is too large to read at once"
              },
              "limit": {
                "type": "number",
                "description": "The number of lines to read. Only provide if the file is too large to read at once."
              }
            },
            "required": [
              "file_path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Edit",
          "description": "Performs exact string replacements in files.\n\nUsage:\n- You must use your `Read` tool at least once in the conversation before editing. This tool will error if you attempt an edit without reading the file.\n- When editing text from Read tool output, ensure you preserve the exact indentation (tabs/spaces) as it appears AFTER the line number prefix. The line number prefix format is: spaces + line number + tab. Everything after that tab is the actual file content to match. Never include any part of the line number prefix in the old_string or new_string.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- Only use emojis if the user explicitly requests it. Avoid adding emojis to files unless asked.\n- The edit will FAIL if `old_string` is not unique in the file. Either provide a larger string with more surrounding context to make it unique or use `replace_all` to change every instance of `old_string`.\n- Use `replace_all` for replacing and renaming strings across the file. This parameter is useful if you want to rename a variable for instance.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to modify"
              },
              "old_string": {
                "type": "string",
                "description": "The text to replace"
              },
              "new_string": {
                "type": "string",
                "description": "The text to replace it with (must be different from old_string)"
              },
              "replace_all": {
                "type": "boolean",
                "default": false,
                "description": "Replace all occurences of old_string (default false)"
              }
            },
            "required": [
              "file_path",
              "old_string",
              "new_string"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "MultiEdit",
          "description": "This is a tool for making multiple edits to a single file in one operation. It is built on top of the Edit tool and allows you to perform multiple find-and-replace operations efficiently. Prefer this tool over the Edit tool when you need to make multiple edits to the same file.\n\nBefore using this tool:\n\n1. Use the Read tool to understand the file's contents and context\n2. Verify the directory path is correct\n\nTo make multiple file edits, provide the following:\n1. file_path: The absolute path to the file to modify (must be absolute, not relative)\n2. edits: An array of edit operations to perform, where each edit contains:\n   - old_string: The text to replace (must match the file contents exactly, including all whitespace and indentation)\n   - new_string: The edited text to replace the old_string\n   - replace_all: Replace all occurences of old_string. This parameter is optional and defaults to false.\n\nIMPORTANT:\n- All edits are applied in sequence, in the order they are provided\n- Each edit operates on the result of the previous edit\n- All edits must be valid for the operation to succeed - if any edit fails, none will be applied\n- This tool is ideal when you need to make several changes to different parts of the same file\n- For Jupyter notebooks (.ipynb files), use the NotebookEdit instead\n\nCRITICAL REQUIREMENTS:\n1. All edits follow the same requirements as the single Edit tool\n2. The edits are atomic - either all succeed or none are applied\n3. Plan your edits carefully to avoid conflicts between sequential operations\n\nWARNING:\n- The tool will fail if edits.old_string doesn't match the file contents exactly (including whitespace)\n- The tool will fail if edits.old_string and edits.new_string are the same\n- Since edits are applied in sequence, ensure that earlier edits don't affect the text that later edits are trying to find\n\nWhen making edits:\n- Ensure all edits result in idiomatic, correct code\n- Do not leave the code in a broken state\n- Always use absolute file paths (starting with /)\n- Only use emojis if the user explicitly requests it. Avoid adding emojis to files unless asked.\n- Use replace_all for replacing and renaming strings across the file. This parameter is useful if you want to rename a variable for instance.\n\nIf you want to create a new file, use:\n- A new file path, including dir name if needed\n- First edit: empty old_string and the new file's contents as new_string\n- Subsequent edits: normal edit operations on the created content",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to modify"
              },
              "edits": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "old_string": {
                      "type": "string",
                      "description": "The text to replace"
                    },
                    "new_string": {
                      "type": "string",
                      "description": "The text to replace it with"
                    },
                    "replace_all": {
                      "type": "boolean",
                      "default": false,
                      "description": "Replace all occurences of old_string (default false)."
                    }
                  },
                  "required": [
                    "old_string",
                    "new_string"
                  ],
                  "additionalProperties": false
                },
                "minItems": 1,
                "description": "Array of edit operations to perform sequentially on the file"
              }
            },
            "required": [
              "file_path",
              "edits"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Write",
          "description": "Writes a file to the local filesystem.\n\nUsage:\n- This tool will overwrite the existing file if there is one at the provided path.\n- If this is an existing file, you MUST use the Read tool first to read the file's contents. This tool will fail if you did not read the file first.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- NEVER proactively create documentation files (*.md) or README files. Only create documentation files if explicitly requested by the User.\n- Only use emojis if the user explicitly requests it. Avoid writing emojis to files unless asked.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to write (must be absolute, not relative)"
              },
              "content": {
                "type": "string",
                "description": "The content to write to the file"
              }
            },
            "required": [
              "file_path",
              "content"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "NotebookRead",
          "description": "Reads a Jupyter notebook (.ipynb file) and returns all of the cells with their outputs. Jupyter notebooks are interactive documents that combine code, text, and visualizations, commonly used for data analysis and scientific computing. The notebook_path parameter must be an absolute path, not a relative path.",
          "input_schema": {
            "type": "object",
            "properties": {
              "notebook_path": {
                "type": "string",
                "description": "The absolute path to the Jupyter notebook file to read (must be absolute, not relative)"
              },
              "cell_id": {
                "type": "string",
                "description": "The ID of a specific cell to read. If not provided, all cells will be read."
              }
            },
            "required": [
              "notebook_path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "NotebookEdit",
          "description": "Completely replaces the contents of a specific cell in a Jupyter notebook (.ipynb file) with new source. Jupyter notebooks are interactive documents that combine code, text, and visualizations, commonly used for data analysis and scientific computing. The notebook_path parameter must be an absolute path, not a relative path. The cell_number is 0-indexed. Use edit_mode=insert to add a new cell at the index specified by cell_number. Use edit_mode=delete to delete the cell at the index specified by cell_number.",
          "input_schema": {
            "type": "object",
            "properties": {
              "notebook_path": {
                "type": "string",
                "description": "The absolute path to the Jupyter notebook file to edit (must be absolute, not relative)"
              },
              "cell_id": {
                "type": "string",
                "description": "The ID of the cell to edit. When inserting a new cell, the new cell will be inserted after the cell with this ID, or at the beginning if not specified."
              },
              "new_source": {
                "type": "string",
                "description": "The new source for the cell"
              },
              "cell_type": {
                "type": "string",
                "enum": [
                  "code",
                  "markdown"
                ],
                "description": "The type of the cell (code or markdown). If not specified, it defaults to the current cell type. If using edit_mode=insert, this is required."
              },
              "edit_mode": {
                "type": "string",
                "enum": [
                  "replace",
                  "insert",
                  "delete"
                ],
                "description": "The type of edit to make (replace, insert, delete). Defaults to replace."
              }
            },
            "required": [
              "notebook_path",
              "new_source"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "WebFetch",
          "description": "\n- Fetches content from a specified URL and processes it using an AI model\n- Takes a URL and a prompt as input\n- Fetches the URL content, converts HTML to markdown\n- Processes the content with the prompt using a small, fast model\n- Returns the model's response about the content\n- Use this tool when you need to retrieve and analyze web content\n\nUsage notes:\n  - IMPORTANT: If an MCP-provided web fetch tool is available, prefer using that tool instead of this one, as it may have fewer restrictions. All MCP-provided tools start with \"mcp__\".\n  - The URL must be a fully-formed valid URL\n  - HTTP URLs will be automatically upgraded to HTTPS\n  - The prompt should describe what information you want to extract from the page\n  - This tool is read-only and does not modify any files\n  - Results may be summarized if the content is very large\n  - Includes a self-cleaning 15-minute cache for faster responses when repeatedly accessing the same URL\n  - When a URL redirects to a different host, the tool will inform you and provide the redirect URL in a special format. You should then make a new WebFetch request with the redirect URL to fetch the content.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "format": "uri",
                "description": "The URL to fetch content from"
              },
              "prompt": {
                "type": "string",
                "description": "The prompt to run on the fetched content"
              }
            },
            "required": [
              "url",
              "prompt"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "TodoWrite",
          "description": "Use this tool to create and manage a structured task list for your current coding session. This helps you track progress, organize complex tasks, and demonstrate thoroughness to the user.\nIt also helps the user understand the progress of the task and overall progress of their requests.\n\n## When to Use This Tool\nUse this tool proactively in these scenarios:\n\n1. Complex multi-step tasks - When a task requires 3 or more distinct steps or actions\n2. Non-trivial and complex tasks - Tasks that require careful planning or multiple operations\n3. User explicitly requests todo list - When the user directly asks you to use the todo list\n4. User provides multiple tasks - When users provide a list of things to be done (numbered or comma-separated)\n5. After receiving new instructions - Immediately capture user requirements as todos\n6. When you start working on a task - Mark it as in_progress BEFORE beginning work. Ideally you should only have one todo as in_progress at a time\n7. After completing a task - Mark it as completed and add any new follow-up tasks discovered during implementation\n\n## When NOT to Use This Tool\n\nSkip using this tool when:\n1. There is only a single, straightforward task\n2. The task is trivial and tracking it provides no organizational benefit\n3. The task can be completed in less than 3 trivial steps\n4. The task is purely conversational or informational\n\nNOTE that you should not use this tool if there is only one trivial task to do. In this case you are better off just doing the task directly.\n\n## Examples of When to Use the Todo List\n\n<example>\nUser: I want to add a dark mode toggle to the application settings. Make sure you run the tests and build when you're done!\nAssistant: I'll help add a dark mode toggle to your application settings. Let me create a todo list to track this implementation.\n*Creates todo list with the following items:*\n1. Create dark mode toggle component in Settings page\n2. Add dark mode state management (context/store)\n3. Implement CSS-in-JS styles for dark theme\n4. Update existing components to support theme switching\n5. Run tests and build process, addressing any failures or errors that occur\n*Begins working on the first task*\n\n<reasoning>\nThe assistant used the todo list because:\n1. Adding dark mode is a multi-step feature requiring UI, state management, and styling changes\n2. The user explicitly requested tests and build be run afterward\n3. The assistant inferred that tests and build need to pass by adding \"Ensure tests and build succeed\" as the final task\n</reasoning>\n</example>\n\n<example>\nUser: Help me rename the function getCwd to getCurrentWorkingDirectory across my project\nAssistant: Let me first search through your codebase to find all occurrences of 'getCwd'.\n*Uses grep or search tools to locate all instances of getCwd in the codebase*\nAssistant: I've found 15 instances of 'getCwd' across 8 different files. Let me create a todo list to track these changes.\n*Creates todo list with specific items for each file that needs updating*\n\n<reasoning>\nThe assistant used the todo list because:\n1. First, the assistant searched to understand the scope of the task\n2. Upon finding multiple occurrences across different files, it determined this was a complex task with multiple steps\n3. The todo list helps ensure every instance is tracked and updated systematically\n4. This approach prevents missing any occurrences and maintains code consistency\n</reasoning>\n</example>\n\n\n<example>\nUser: I need to implement these features for my e-commerce site: user registration, product catalog, shopping cart, and checkout flow.\nAssistant: I'll help implement these features. First, let's add all the features to the todo list.\n*Creates a todo list breaking down each feature into specific tasks based on the project architecture*\nAssistant: Let's start with user registration. This will involve creating database models, API endpoints, and frontend forms that integrate with your existing authentication system.\n\n<reasoning>\nThe assistant used the todo list because:\n1. The user provided multiple complex features to implement in a comma separated list\n2. The todo list helps organize these large features into manageable tasks\n3. This approach allows for tracking progress across the entire implementation\n</reasoning>\n</example>\n\n<example>\nUser: Can you help optimize my React application? It's rendering slowly and has performance issues.</user>\nAssistant: I'll help optimize your React application. First, let me examine your codebase to identify potential performance bottlenecks.\n*Reviews component structure, render patterns, state management, and data fetching*\nAssistant: After analyzing your codebase, I've identified several performance issues. Let me create a todo list to track our optimization efforts.\n*Creates todo list with items like: 1) Implement memoization for expensive calculations in ProductList, 2) Add virtualization for long lists in Dashboard, 3) Optimize image loading in Gallery component, 4) Fix state update loops in ShoppingCart, 5) Review bundle size and implement code splitting*\nLet's start by implementing memoization for the expensive calculations in your ProductList component.</assistant>\n\n<reasoning>\nThe assistant used the todo list because:\n1. First, the assistant examined the codebase to identify specific performance issues\n2. Based on this analysis, it identified multiple optimization opportunities\n3. Performance optimization is a non-trivial task requiring multiple steps\n4. The todo list helps methodically track improvements across different components\n5. This systematic approach ensures all performance bottlenecks are addressed\n</reasoning>\n</example>\n\n## Examples of When NOT to Use the Todo List\n\n<example>\nUser: How do I print 'Hello World' in Python?\nAssistant: In Python, you can print \"Hello World\" with this simple code:\n\npython\nprint(\"Hello World\")\n\nThis will output the text \"Hello World\" to the console when executed.</assistant>\n\n<reasoning>\nThe assistant did not use the todo list because this is a single, trivial task that can be completed in one step. There's no need to track multiple tasks or steps for such a straightforward request.\n</reasoning>\n</example>\n\n<example>\nUser: What does the git status command do?\nAssistant: The git status command shows the current state of your working directory and staging area. It displays which changes have been staged, which haven't, and which files aren't being tracked by Git. This is a fundamental command for understanding the current state of your repository before making commits.\n\n<reasoning>\nThe assistant did not use the todo list because this is an informational request with no actual coding task to complete. The user is simply asking for an explanation, not for the assistant to perform multiple steps or tasks.\n</reasoning>\n</example>\n\n<example>\nUser: Can you add a comment to the calculateTotal function to explain what it does?\nAssistant: Sure, let me add a comment to the calculateTotal function to explain what it does.\n* Uses the Edit tool to add a comment to the calculateTotal function *\n\n<reasoning>\nThe assistant did not use the todo list because this is a single, straightforward task confined to one location in the code. Adding a comment doesn't require tracking multiple steps or systematic organization.\n</reasoning>\n</example>\n\n<example>\nUser: Run npm install for me and tell me what happens.\nAssistant: I'll run the npm install command for you.\n\n*Executes: npm install*\n\nThe command completed successfully. Here's the output:\n[Output of npm install command]\n\nAll dependencies have been installed according to your package.json file.\n\n<reasoning>\nThe assistant did not use the todo list because this is a single command execution with immediate results. There are no multiple steps to track or organize, making the todo list unnecessary for this straightforward task.\n</reasoning>\n</example>\n\n## Task States and Management\n\n1. **Task States**: Use these states to track progress:\n   - pending: Task not yet started\n   - in_progress: Currently working on (limit to ONE task at a time)\n   - completed: Task finished successfully\n\n2. **Task Management**:\n   - Update task status in real-time as you work\n   - Mark tasks complete IMMEDIATELY after finishing (don't batch completions)\n   - Only have ONE task in_progress at any time\n   - Complete current tasks before starting new ones\n   - Remove tasks that are no longer relevant from the list entirely\n\n3. **Task Completion Requirements**:\n   - ONLY mark a task as completed when you have FULLY accomplished it\n   - If you encounter errors, blockers, or cannot finish, keep the task as in_progress\n   - When blocked, create a new task describing what needs to be resolved\n   - Never mark a task as completed if:\n     - Tests are failing\n     - Implementation is partial\n     - You encountered unresolved errors\n     - You couldn't find necessary files or dependencies\n\n4. **Task Breakdown**:\n   - Create specific, actionable items\n   - Break complex tasks into smaller, manageable steps\n   - Use clear, descriptive task names\n\nWhen in doubt, use this tool. Being proactive with task management demonstrates attentiveness and ensures you complete all requirements successfully.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "todos": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "content": {
                      "type": "string",
                      "minLength": 1
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "pending",
                        "in_progress",
                        "completed"
                      ]
                    },
                    "priority": {
                      "type": "string",
                      "enum": [
                        "high",
                        "medium",
                        "low"
                      ]
                    },
                    "id": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "content",
                    "status",
                    "priority",
                    "id"
                  ],
                  "additionalProperties": false
                },
                "description": "The updated todo list"
              }
            },
            "required": [
              "todos"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "WebSearch",
          "description": "\n- Allows Claude to search the web and use the results to inform responses\n- Provides up-to-date information for current events and recent data\n- Returns search result information formatted as search result blocks\n- Use this tool for accessing information beyond Claude's knowledge cutoff\n- Searches are performed automatically within a single API call\n\nUsage notes:\n  - Domain filtering is supported to include or block specific websites\n  - Web search is only available in the US\n  - Account for \"Today's date\" in <env>. For example, if <env> says \"Today's date: 2025-07-01\", and the user wants the latest docs, do not use 2024 in the search query. Use 2025.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "minLength": 2,
                "description": "The search query to use"
              },
              "allowed_domains": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Only include search results from these domains"
              },
              "blocked_domains": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Never include search results from these domains"
              }
            },
            "required": [
              "query"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        }
      ],
      "responseStructure": {
        "type": "object",
        "keys": [
          "id",
          "object",
          "created",
          "model",
          "choices",
          "usage",
          "stats",
          "system_fingerprint"
        ],
        "hasChoices": true,
        "hasContent": false,
        "hasUsage": true,
        "choicesCount": 1,
        "firstChoice": {
          "hasMessage": true,
          "hasToolCalls": false,
          "finishReason": "stop"
        }
      },
      "parsingAttempts": [
        "json_format",
        "function_call",
        "action_format",
        "natural_language"
      ]
    }
  },
  {
    "timestamp": "2025-08-10T08:04:05.584Z",
    "requestId": "session_1754804126703_ixall6oy5:conv_1754804126703_sm1ur5dvo:1:1754813033320:lz3v",
    "provider": "lmstudio",
    "model": "gpt-oss-20b-mlx",
    "endpoint": "localhost:1234",
    "failureType": "text_instead_of_tools",
    "originalResponse": {
      "id": "chatcmpl-o9kgmi1ze8trw0ujjs4xi",
      "object": "chat.completion",
      "created": 1754813033,
      "model": "gpt-oss-20b-mlx",
      "choices": [
        {
          "index": 0,
          "logprobs": null,
          "finish_reason": "stop",
          "message": {
            "role": "assistant",
            "content": "User says \"继续使用grep查找吧\" meaning continue using grep to search. We need to decide what they want to find. They previously asked to \"继续使用grep查找吧\". We need context: earlier conversation? The user hasn't provided any prior context in this session. They just said \"继续使用grep查找吧\". Likely they want to search for something in the repo. But we don't know what pattern. Maybe they want to find a specific function or file. We need to ask clarifying question? The instruction says we should not ask for clarification unless necessary. But here it's ambiguous. We could interpret that they want to continue searching with grep for something unspecified. Maybe we should ask what pattern? But guidelines: \"If you are unsure, ask clarifying question.\" So we should ask what to grep for.我需要更多信息才能继续搜索。请告诉我您想用 `grep` 查找什么内容（例如关键字、文件名或正则表达式）？"
          }
        }
      ],
      "usage": {
        "prompt_tokens": 12440,
        "completion_tokens": 202,
        "total_tokens": 12642
      },
      "stats": {},
      "system_fingerprint": "gpt-oss-20b-mlx"
    },
    "expectedFormat": "openai",
    "errorMessage": "All parsing strategies failed",
    "responseAnalysis": {
      "hasToolCalls": false,
      "hasContent": true,
      "contentLength": 825,
      "contentPreview": "User says \"继续使用grep查找吧\" meaning continue using grep to search. We need to decide what they want to find. They previously asked to \"继续使用grep查找吧\". We need context: earlier conversation? The user hasn't ",
      "finishReason": "stop",
      "toolCallPatterns": []
    },
    "debugInfo": {
      "requestTools": [
        {
          "name": "Task",
          "description": "Launch a new agent to handle complex, multi-step tasks autonomously.\n\nAvailable agent types and the tools they have access to:\n- general-purpose: General-purpose agent for researching complex questions, searching for code, and executing multi-step tasks. When you are searching for a keyword or file and are not confident that you will find the right match in the first few tries use this agent to perform the search for you. (Tools: *)\n- code-refactorer: Use this agent when you need to improve existing code structure, readability, or maintainability without changing functionality. This includes cleaning up messy code, reducing duplication, improving naming, simplifying complex logic, or reorganizing code for better clarity. Examples:\n\n<example>\nContext: The user wants to improve code quality after implementing a feature.\nuser: \"I just finished implementing the user authentication system. Can you help clean it up?\"\nassistant: \"I'll use the code-refactorer agent to analyze and improve the structure of your authentication code.\"\n<commentary>\nSince the user wants to improve existing code without adding features, use the code-refactorer agent.\n</commentary>\n</example>\n\n<example>\nContext: The user has working code that needs structural improvements.\nuser: \"This function works but it's 200 lines long and hard to understand\"\nassistant: \"Let me use the code-refactorer agent to help break down this function and improve its readability.\"\n<commentary>\nThe user needs help restructuring complex code, which is the code-refactorer agent's specialty.\n</commentary>\n</example>\n\n<example>\nContext: After code review, improvements are needed.\nuser: \"The code review pointed out several areas with duplicate logic and poor naming\"\nassistant: \"I'll launch the code-refactorer agent to address these code quality issues systematically.\"\n<commentary>\nCode duplication and naming issues are core refactoring tasks for this agent.\n</commentary>\n</example> (Tools: Edit, MultiEdit, Write, NotebookEdit, Grep, LS, Read)\n- project-task-planner: Use this agent when you need to create a comprehensive development task list from a Product Requirements Document (PRD). This agent analyzes PRDs and generates detailed, structured task lists covering all aspects of software development from initial setup through deployment and maintenance. Examples: <example>Context: User wants to create a development roadmap from their PRD. user: \"I have a PRD for a new e-commerce platform. Can you create a task list?\" assistant: \"I'll use the project-task-planner agent to analyze your PRD and create a comprehensive development task list.\" <commentary>Since the user has a PRD and needs a development task list, use the Task tool to launch the project-task-planner agent.</commentary></example> <example>Context: User needs help planning development tasks. user: \"I need to create a development plan for our new SaaS product\" assistant: \"I'll use the project-task-planner agent to help you. First, I'll need to see your Product Requirements Document (PRD).\" <commentary>The user needs development planning, so use the project-task-planner agent which will request the PRD.</commentary></example> (Tools: Task, Bash, Edit, MultiEdit, Write, NotebookEdit, Grep, LS, Read, ExitPlanMode, TodoWrite, WebSearch)\n- vibe-coding-coach: Use this agent when users want to build applications through conversation, focusing on the vision and feel of their app rather than technical implementation details. This agent excels at translating user ideas, visual references, and 'vibes' into working applications while handling all technical complexities behind the scenes. <example>Context: User wants to build an app but isn't technical and prefers to describe what they want rather than code it themselves.\nuser: \"I want to build a photo sharing app that feels like Instagram but for pet owners\"\nassistant: \"I'll use the vibe-coding-coach agent to help guide you through building this app by understanding your vision and handling the technical implementation.\"\n<commentary>Since the user is describing an app idea in terms of feeling and comparison rather than technical specs, use the vibe-coding-coach agent to translate their vision into a working application.</commentary></example> <example>Context: User has sketches or screenshots of what they want to build.\nuser: \"Here's a screenshot of an app I like. Can we build something similar but for tracking workouts?\"\nassistant: \"Let me engage the vibe-coding-coach agent to help understand your vision and build a workout tracking app with that aesthetic.\"\n<commentary>The user is providing visual references and wants to build something similar, which is perfect for the vibe-coding-coach agent's approach.</commentary></example> (Tools: *)\n- debug-system-architect: Use this agent when you need to establish a comprehensive debug logging system for a project. This includes setting up log directories, implementing node-level tracing, creating time-based test records, establishing replay mechanisms, and documenting debug rules. Example: <example> Context: User is setting up a new project and wants to implement proper debugging infrastructure from the start. user: \"Please help me set up a debug system for my new API router project\" <commentary> Since the user is requesting debug system setup, use the debug-system-architect agent to analyze the project and implement comprehensive logging and tracing mechanisms. </commentary> </example> <example> Context: User encounters intermittent issues in their routing system and needs better visibility. user: \"I'm having trouble tracking down why some requests fail intermittently\" <commentary> Since the user needs better debugging visibility for intermittent issues, use the debug-system-architect agent to implement node-level tracing and replay mechanisms. </commentary> </example> (Tools: *)\n- code-risk-auditor: Use this agent when you need to perform comprehensive code risk assessment and identify potential architectural issues in your codebase. Examples: <example>Context: The user has just completed a major refactoring and wants to ensure no hardcoded values or fallback mechanisms were introduced. user: \"I just finished refactoring the routing system, can you check for any code risks?\" assistant: \"I'll use the code-risk-auditor agent to perform a comprehensive risk assessment of your routing system changes.\"</example> <example>Context: Before a major release, the user wants to clean up technical debt and ensure code quality. user: \"We're preparing for v2.0 release, I need a full code audit\" assistant: \"Let me launch the code-risk-auditor agent to identify hardcoding, fallback risks, outdated tests, and duplicate implementations across the entire codebase.\"</example> <example>Context: The user notices inconsistent behavior and suspects duplicate implementations. user: \"The same feature seems to be implemented in multiple places, causing bugs\" assistant: \"I'll use the code-risk-auditor agent to scan for duplicate implementations and provide a consolidation plan.\"</example> (Tools: *)\n- security-auditor: Use this agent when you need to perform a comprehensive security audit of a codebase, identify vulnerabilities, and generate a detailed security report with actionable remediation steps. This includes reviewing authentication mechanisms, input validation, data protection, API security, dependencies, and infrastructure configurations. Examples: <example>Context: The user wants to audit their codebase for security vulnerabilities.\nuser: \"Can you perform a security audit of my application?\"\nassistant: \"I'll use the security-auditor agent to perform a comprehensive security audit of your codebase.\"\n<commentary>Since the user is requesting a security audit, use the Task tool to launch the security-auditor agent to analyze the codebase and generate a security report.</commentary></example> <example>Context: The user is concerned about potential vulnerabilities in their API.\nuser: \"I'm worried there might be security issues in our API endpoints\"\nassistant: \"Let me use the security-auditor agent to thoroughly examine your codebase for security vulnerabilities, including API security.\"\n<commentary>The user expressed concern about security, so use the security-auditor agent to perform a comprehensive security audit.</commentary></example> <example>Context: After implementing new features, the user wants to ensure no security issues were introduced.\nuser: \"We just added user authentication to our app. Can you check if it's secure?\"\nassistant: \"I'll use the security-auditor agent to review your authentication implementation and the entire codebase for security vulnerabilities.\"\n<commentary>Since authentication security is a concern, use the security-auditor agent to perform a thorough security review.</commentary></example> (Tools: Task, Bash, Edit, MultiEdit, Write, NotebookEdit)\n- project-memory-manager: Use this agent when you need to manage project-specific memory entries, create project documentation, or organize project knowledge. This includes creating project summaries, documenting project decisions, tracking project progress, and maintaining project-specific knowledge bases. <example>Context: User wants to document a project decision or create project documentation. user: \"请为我们的新项目创建一个内存管理系统的文档\" assistant: \"我将使用 project-memory-manager agent 来创建这个项目文档\" <commentary>Since the user needs project documentation, use the project-memory-manager agent to create project-specific memory entries.</commentary></example> <example>Context: User wants to track project progress or decisions. user: \"我们需要记录这个项目的关键决策点\" assistant: \"让我使用 project-memory-manager agent 来记录这些项目决策\" <commentary>Since this is project tracking, use the project-memory-manager agent to create decision-type memory entries.</commentary></example> (Tools: *)\n- rules-architect: Use this agent when you need to analyze project architecture and establish comprehensive rule management systems. Examples: <example>Context: User wants to organize project rules and create a structured rule management system. user: \"I need to reorganize our project rules and create a better structure for managing coding standards, file organization, and testing protocols\" assistant: \"I'll use the rules-architect agent to analyze the current project structure and establish a comprehensive rule management system with proper categorization and organization.\"</example> <example>Context: Project has grown complex and needs better rule organization. user: \"Our CLAUDE.md file is getting too large and we need to break down rules into manageable categories\" assistant: \"Let me call the rules-architect agent to create a structured .claude/rules system that will organize all project rules into logical categories.\"</example> (Tools: *)\n- frontend-designer: Use this agent when you need to convert design mockups, wireframes, or visual concepts into detailed technical specifications and implementation guides for frontend development. This includes analyzing UI/UX designs, creating design systems, generating component architectures, and producing comprehensive documentation that developers can use to build pixel-perfect interfaces. Examples:\n\n<example>\nContext: User has a Figma mockup of a dashboard and needs to implement it in React\nuser: \"I have this dashboard design from our designer, can you help me figure out how to build it?\"\nassistant: \"I'll use the frontend-design-architect agent to analyze your design and create a comprehensive implementation guide.\"\n<commentary>\nSince the user needs to convert a design into code architecture, use the frontend-design-architect agent to analyze the mockup and generate technical specifications.\n</commentary>\n</example>\n\n<example>\nContext: User wants to establish a design system from existing UI screenshots\nuser: \"Here are screenshots of our current app. We need to extract a consistent design system from these.\"\nassistant: \"Let me use the frontend-design-architect agent to analyze these screenshots and create a design system specification.\"\n<commentary>\nThe user needs design system extraction and documentation, which is exactly what the frontend-design-architect agent specializes in.\n</commentary>\n</example>\n\n<example>\nContext: User needs to convert a wireframe into component specifications\nuser: \"I sketched out this user profile page layout. How should I structure the components?\"\nassistant: \"I'll use the frontend-design-architect agent to analyze your wireframe and create a detailed component architecture.\"\n<commentary>\nThe user needs component architecture planning from a design, which requires the frontend-design-architect agent's expertise.\n</commentary>\n</example> (Tools: *)\n- content-writer: Use this agent when you need to create compelling, informative content that explains complex topics in simple terms. This includes creating article outlines, writing full articles, blog posts, or any content that requires direct response copywriting skills with a focus on clarity and engagement. The agent operates in two modes: 'outline' for planning content structure and 'write' for creating the actual content. Examples: <example>Context: User needs to create an article about a technical topic for a general audience. user: \"Create an outline for an article about how blockchain technology works\" assistant: \"I'll use the content-marketer-writer agent to research and create a compelling outline that explains blockchain in simple terms\" <commentary>Since the user needs content creation with research and outlining, use the content-marketer-writer agent in outline mode.</commentary></example> <example>Context: User has an outline and needs to write the full article. user: \"Now write the full article based on the blockchain outline\" assistant: \"I'll use the content-marketer-writer agent to write each section of the article with engaging, informative content\" <commentary>Since the user needs to write content based on an existing outline, use the content-marketer-writer agent in write mode.</commentary></example> (Tools: *)\n- test-runner: Use this agent to run and manage tests according to the global and project-specific testing rules. This includes executing test scripts, documenting test results, and helping to diagnose issues following the standard pipeline. <example>Context: User wants to run all functional tests. user: \"运行所有功能测试\" assistant: \"我将使用 test-runner agent 来执行所有功能测试\" <commentary>Since the user wants to run tests by category, use the test-runner agent.</commentary></example> <example>Context: User wants to verify a bug fix. user: \"我修复了一个bug，帮我验证一下\" assistant: \"让我使用 test-runner agent 来执行对应的修复验证测试\" <commentary>The user needs to verify a fix, which is a core task for the test-runner agent.</commentary></example> (Tools: *)\n- in-depth-research-analyst: Use this agent when you need to conduct comprehensive research reports with in-depth web mining, data analysis, and visualization. This includes industry analysis, market research, competitive intelligence, and trend forecasting with accurate data from authoritative sources. <example>Context: User wants a comprehensive industry analysis report. user: \"请对人工智能芯片市场进行深入调研，包括主要厂商、市场份额和增长趋势\" assistant: \"我将使用 in-depth-research-analyst agent 来进行这项深入的市场调研并生成可视化报告\" <commentary>Since the user needs a comprehensive industry analysis with data visualization, use the in-depth-research-analyst agent to conduct thorough research and create an integrated report.</commentary></example> <example>Context: User wants market research with accurate data and visualizations. user: \"我们需要一份关于电动汽车充电基础设施的深度报告，包含数据图表\" assistant: \"让我使用 in-depth-research-analyst agent 来收集准确数据并生成图文并茂的分析报告\" <commentary>Since this requires market research with data accuracy and visualizations, use the in-depth-research-analyst agent to create a comprehensive report.</commentary></example> (Tools: *)\n- prd-writer: Use this agent when you need to create a comprehensive Product Requirements Document (PRD) for a software project or feature. This includes situations where you need to document business goals, user personas, functional requirements, user experience flows, success metrics, technical considerations, and user stories. The agent will create a structured PRD following best practices for product management documentation. Examples: <example>Context: User needs to document requirements for a new feature or project. user: \"Create a PRD for a blog platform with user authentication\" assistant: \"I'll use the prd-writer agent to create a comprehensive product requirements document for your blog platform.\" <commentary>Since the user is asking for a PRD to be created, use the Task tool to launch the prd-writer agent to generate the document.</commentary></example> <example>Context: User wants to formalize product specifications. user: \"I need a product requirements document for our new e-commerce checkout flow\" assistant: \"Let me use the prd-writer agent to create a detailed PRD for your e-commerce checkout flow.\" <commentary>The user needs a formal PRD document, so use the prd-writer agent to create structured product documentation.</commentary></example> (Tools: Task, Bash, Grep, LS, Read, Write, WebSearch, Glob)\n- pipeline-debug-universal: Use this agent when you need to implement comprehensive debug hooks and testing infrastructure for ANY pipeline system - whether it's API routing, data processing, CI/CD workflows, or transformation pipelines. This agent specializes in creating universal debug architectures that work across different pipeline types with data capture, replay capabilities, and systematic testing matrices. Examples: <example>Context: User is working on a multi-provider API routing system and needs to add debug capabilities to track data flow through each pipeline step. user: \"I need to add debug hooks to our routing pipeline so we can capture and replay data at each step\" assistant: \"I'll use the pipeline-debug-universal agent to design a comprehensive debug infrastructure with data capture and replay capabilities\" <commentary>Since the user needs pipeline debugging infrastructure, use the pipeline-debug-universal agent to create debug hooks and testing matrices.</commentary></example> <example>Context: User has a complex data transformation pipeline and wants to build systematic testing for each stage and provider. user: \"Our data processing pipeline has issues and we need better testing infrastructure to isolate problems at each step\" assistant: \"Let me use the pipeline-debug-universal agent to create a complete testing matrix and debug system\" <commentary>Since the user needs systematic pipeline testing infrastructure, use the pipeline-debug-universal agent to architect the testing system.</commentary></example> <example>Context: User is building a CI/CD pipeline and needs to implement debug capabilities for tracking deployment issues. user: \"Our deployment pipeline fails randomly and we can't reproduce the issues consistently\" assistant: \"I'll deploy the pipeline-debug-universal agent to create comprehensive debug hooks and replay capabilities for your CI/CD pipeline\" <commentary>Since the user needs debug infrastructure for a deployment pipeline, use the pipeline-debug-universal agent to design the debug system.</commentary></example> (Tools: *)\n\nWhen using the Task tool, you must specify a subagent_type parameter to select which agent type to use.\n\n\n\nWhen NOT to use the Agent tool:\n- If you want to read a specific file path, use the Read or Glob tool instead of the Agent tool, to find the match more quickly\n- If you are searching for a specific class definition like \"class Foo\", use the Glob tool instead, to find the match more quickly\n- If you are searching for code within a specific file or set of 2-3 files, use the Read tool instead of the Agent tool, to find the match more quickly\n- Other tasks that are not related to the agent descriptions above\n\n\nUsage notes:\n1. Launch multiple agents concurrently whenever possible, to maximize performance; to do that, use a single message with multiple tool uses\n2. When the agent is done, it will return a single message back to you. The result returned by the agent is not visible to the user. To show the user the result, you should send a text message back to the user with a concise summary of the result.\n3. Each agent invocation is stateless. You will not be able to send additional messages to the agent, nor will the agent be able to communicate with you outside of its final report. Therefore, your prompt should contain a highly detailed task description for the agent to perform autonomously and you should specify exactly what information the agent should return back to you in its final and only message to you.\n4. The agent's outputs should generally be trusted\n5. Clearly tell the agent whether you expect it to write code or just to do research (search, file reads, web fetches, etc.), since it is not aware of the user's intent\n6. If the agent description mentions that it should be used proactively, then you should try your best to use it without the user having to ask for it first. Use your judgement.\n\nExample usage:\n\n<example_agent_descriptions>\n\"code-reviewer\": use this agent after you are done writing a signficant piece of code\n\"greeting-responder\": use this agent when to respond to user greetings with a friendly joke\n</example_agent_description>\n\n<example>\nuser: \"Please write a function that checks if a number is prime\"\nassistant: Sure let me write a function that checks if a number is prime\nassistant: First let me use the Write tool to write a function that checks if a number is prime\nassistant: I'm going to use the Write tool to write the following code:\n<code>\nfunction isPrime(n) {\n  if (n <= 1) return false\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n</code>\n<commentary>\nSince a signficant piece of code was written and the task was completed, now use the code-reviewer agent to review the code\n</commentary>\nassistant: Now let me use the code-reviewer agent to review the code\nassistant: Uses the Task tool to launch the with the code-reviewer agent\n</example>\n\n<example>\nuser: \"Hello\"\n<commentary>\nSince the user is greeting, use the greeting-responder agent to respond with a friendly joke\n</commentary>\nassistant: \"I'm going to use the Task tool to launch the with the greeting-responder agent\"\n</example>\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "description": {
                "type": "string",
                "description": "A short (3-5 word) description of the task"
              },
              "prompt": {
                "type": "string",
                "description": "The task for the agent to perform"
              },
              "subagent_type": {
                "type": "string",
                "description": "The type of specialized agent to use for this task"
              }
            },
            "required": [
              "description",
              "prompt",
              "subagent_type"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Bash",
          "description": "Executes a given bash command in a persistent shell session with optional timeout, ensuring proper handling and security measures.\n\nBefore executing the command, please follow these steps:\n\n1. Directory Verification:\n   - If the command will create new directories or files, first use the LS tool to verify the parent directory exists and is the correct location\n   - For example, before running \"mkdir foo/bar\", first use LS to check that \"foo\" exists and is the intended parent directory\n\n2. Command Execution:\n   - Always quote file paths that contain spaces with double quotes (e.g., cd \"path with spaces/file.txt\")\n   - Examples of proper quoting:\n     - cd \"/Users/name/My Documents\" (correct)\n     - cd /Users/name/My Documents (incorrect - will fail)\n     - python \"/path/with spaces/script.py\" (correct)\n     - python /path/with spaces/script.py (incorrect - will fail)\n   - After ensuring proper quoting, execute the command.\n   - Capture the output of the command.\n\nUsage notes:\n  - The command argument is required.\n  - You can specify an optional timeout in milliseconds (up to 600000ms / 10 minutes). If not specified, commands will timeout after 120000ms (2 minutes).\n  - It is very helpful if you write a clear, concise description of what this command does in 5-10 words.\n  - If the output exceeds 30000 characters, output will be truncated before being returned to you.\n  - VERY IMPORTANT: You MUST avoid using search commands like `find` and `grep`. Instead use Grep, Glob, or Task to search. You MUST avoid read tools like `cat`, `head`, `tail`, and `ls`, and use Read and LS to read files.\n - If you _still_ need to run `grep`, STOP. ALWAYS USE ripgrep at `rg` first, which all ${PRODUCT_NAME} users have pre-installed.\n  - When issuing multiple commands, use the ';' or '&&' operator to separate them. DO NOT use newlines (newlines are ok in quoted strings).\n  - Try to maintain your current working directory throughout the session by using absolute paths and avoiding usage of `cd`. You may use `cd` if the User explicitly requests it.\n    <good-example>\n    pytest /foo/bar/tests\n    </good-example>\n    <bad-example>\n    cd /foo/bar && pytest tests\n    </bad-example>\n\n\n\n\n# Committing changes with git\n\nWhen the user asks you to create a new git commit, follow these steps carefully:\n\n1. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following bash commands in parallel, each using the Bash tool:\n  - Run a git status command to see all untracked files.\n  - Run a git diff command to see both staged and unstaged changes that will be committed.\n  - Run a git log command to see recent commit messages, so that you can follow this repository's commit message style.\n2. Analyze all staged changes (both previously staged and newly added) and draft a commit message:\n  - Summarize the nature of the changes (eg. new feature, enhancement to an existing feature, bug fix, refactoring, test, docs, etc.). Ensure the message accurately reflects the changes and their purpose (i.e. \"add\" means a wholly new feature, \"update\" means an enhancement to an existing feature, \"fix\" means a bug fix, etc.).\n  - Check for any sensitive information that shouldn't be committed\n  - Draft a concise (1-2 sentences) commit message that focuses on the \"why\" rather than the \"what\"\n  - Ensure it accurately reflects the changes and their purpose\n3. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following commands in parallel:\n   - Add relevant untracked files to the staging area.\n   - Create the commit with a message ending with:\n   🤖 Generated with [Claude Code](https://claude.ai/code)\n\n   Co-Authored-By: Claude <noreply@anthropic.com>\n   - Run git status to make sure the commit succeeded.\n4. If the commit fails due to pre-commit hook changes, retry the commit ONCE to include these automated changes. If it fails again, it usually means a pre-commit hook is preventing the commit. If the commit succeeds but you notice that files were modified by the pre-commit hook, you MUST amend your commit to include them.\n\nImportant notes:\n- NEVER update the git config\n- NEVER run additional commands to read or explore code, besides git bash commands\n- NEVER use the TodoWrite or Task tools\n- DO NOT push to the remote repository unless the user explicitly asks you to do so\n- IMPORTANT: Never use git commands with the -i flag (like git rebase -i or git add -i) since they require interactive input which is not supported.\n- If there are no changes to commit (i.e., no untracked files and no modifications), do not create an empty commit\n- In order to ensure good formatting, ALWAYS pass the commit message via a HEREDOC, a la this example:\n<example>\ngit commit -m \"$(cat <<'EOF'\n   Commit message here.\n\n   🤖 Generated with [Claude Code](https://claude.ai/code)\n\n   Co-Authored-By: Claude <noreply@anthropic.com>\n   EOF\n   )\"\n</example>\n\n# Creating pull requests\nUse the gh command via the Bash tool for ALL GitHub-related tasks including working with issues, pull requests, checks, and releases. If given a Github URL use the gh command to get the information needed.\n\nIMPORTANT: When the user asks you to create a pull request, follow these steps carefully:\n\n1. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following bash commands in parallel using the Bash tool, in order to understand the current state of the branch since it diverged from the main branch:\n   - Run a git status command to see all untracked files\n   - Run a git diff command to see both staged and unstaged changes that will be committed\n   - Check if the current branch tracks a remote branch and is up to date with the remote, so you know if you need to push to the remote\n   - Run a git log command and `git diff [base-branch]...HEAD` to understand the full commit history for the current branch (from the time it diverged from the base branch)\n2. Analyze all changes that will be included in the pull request, making sure to look at all relevant commits (NOT just the latest commit, but ALL commits that will be included in the pull request!!!), and draft a pull request summary\n3. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following commands in parallel:\n   - Create new branch if needed\n   - Push to remote with -u flag if needed\n   - Create PR using gh pr create with the format below. Use a HEREDOC to pass the body to ensure correct formatting.\n<example>\ngh pr create --title \"the pr title\" --body \"$(cat <<'EOF'\n## Summary\n<1-3 bullet points>\n\n## Test plan\n[Checklist of TODOs for testing the pull request...]\n\n🤖 Generated with [Claude Code](https://claude.ai/code)\nEOF\n)\"\n</example>\n\nImportant:\n- NEVER update the git config\n- DO NOT use the TodoWrite or Task tools\n- Return the PR URL when you're done, so the user can see it\n\n# Other common operations\n- View comments on a Github PR: gh api repos/foo/bar/pulls/123/comments",
          "input_schema": {
            "type": "object",
            "properties": {
              "command": {
                "type": "string",
                "description": "The command to execute"
              },
              "timeout": {
                "type": "number",
                "description": "Optional timeout in milliseconds (max 600000)"
              },
              "description": {
                "type": "string",
                "description": " Clear, concise description of what this command does in 5-10 words. Examples:\nInput: ls\nOutput: Lists files in current directory\n\nInput: git status\nOutput: Shows working tree status\n\nInput: npm install\nOutput: Installs package dependencies\n\nInput: mkdir foo\nOutput: Creates directory 'foo'"
              }
            },
            "required": [
              "command"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Glob",
          "description": "- Fast file pattern matching tool that works with any codebase size\n- Supports glob patterns like \"**/*.js\" or \"src/**/*.ts\"\n- Returns matching file paths sorted by modification time\n- Use this tool when you need to find files by name patterns\n- When you are doing an open ended search that may require multiple rounds of globbing and grepping, use the Agent tool instead\n- You have the capability to call multiple tools in a single response. It is always better to speculatively perform multiple searches as a batch that are potentially useful.",
          "input_schema": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "The glob pattern to match files against"
              },
              "path": {
                "type": "string",
                "description": "The directory to search in. If not specified, the current working directory will be used. IMPORTANT: Omit this field to use the default directory. DO NOT enter \"undefined\" or \"null\" - simply omit it for the default behavior. Must be a valid directory path if provided."
              }
            },
            "required": [
              "pattern"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Grep",
          "description": "A powerful search tool built on ripgrep\n\n  Usage:\n  - ALWAYS use Grep for search tasks. NEVER invoke `grep` or `rg` as a Bash command. The Grep tool has been optimized for correct permissions and access.\n  - Supports full regex syntax (e.g., \"log.*Error\", \"function\\s+\\w+\")\n  - Filter files with glob parameter (e.g., \"*.js\", \"**/*.tsx\") or type parameter (e.g., \"js\", \"py\", \"rust\")\n  - Output modes: \"content\" shows matching lines, \"files_with_matches\" shows only file paths (default), \"count\" shows match counts\n  - Use Task tool for open-ended searches requiring multiple rounds\n  - Pattern syntax: Uses ripgrep (not grep) - literal braces need escaping (use `interface\\{\\}` to find `interface{}` in Go code)\n  - Multiline matching: By default patterns match within single lines only. For cross-line patterns like `struct \\{[\\s\\S]*?field`, use `multiline: true`\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "The regular expression pattern to search for in file contents"
              },
              "path": {
                "type": "string",
                "description": "File or directory to search in (rg PATH). Defaults to current working directory."
              },
              "glob": {
                "type": "string",
                "description": "Glob pattern to filter files (e.g. \"*.js\", \"*.{ts,tsx}\") - maps to rg --glob"
              },
              "output_mode": {
                "type": "string",
                "enum": [
                  "content",
                  "files_with_matches",
                  "count"
                ],
                "description": "Output mode: \"content\" shows matching lines (supports -A/-B/-C context, -n line numbers, head_limit), \"files_with_matches\" shows file paths (supports head_limit), \"count\" shows match counts (supports head_limit). Defaults to \"files_with_matches\"."
              },
              "-B": {
                "type": "number",
                "description": "Number of lines to show before each match (rg -B). Requires output_mode: \"content\", ignored otherwise."
              },
              "-A": {
                "type": "number",
                "description": "Number of lines to show after each match (rg -A). Requires output_mode: \"content\", ignored otherwise."
              },
              "-C": {
                "type": "number",
                "description": "Number of lines to show before and after each match (rg -C). Requires output_mode: \"content\", ignored otherwise."
              },
              "-n": {
                "type": "boolean",
                "description": "Show line numbers in output (rg -n). Requires output_mode: \"content\", ignored otherwise."
              },
              "-i": {
                "type": "boolean",
                "description": "Case insensitive search (rg -i)"
              },
              "type": {
                "type": "string",
                "description": "File type to search (rg --type). Common types: js, py, rust, go, java, etc. More efficient than include for standard file types."
              },
              "head_limit": {
                "type": "number",
                "description": "Limit output to first N lines/entries, equivalent to \"| head -N\". Works across all output modes: content (limits output lines), files_with_matches (limits file paths), count (limits count entries). When unspecified, shows all results from ripgrep."
              },
              "multiline": {
                "type": "boolean",
                "description": "Enable multiline mode where . matches newlines and patterns can span lines (rg -U --multiline-dotall). Default: false."
              }
            },
            "required": [
              "pattern"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "LS",
          "description": "Lists files and directories in a given path. The path parameter must be an absolute path, not a relative path. You can optionally provide an array of glob patterns to ignore with the ignore parameter. You should generally prefer the Glob and Grep tools, if you know which directories to search.",
          "input_schema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "The absolute path to the directory to list (must be absolute, not relative)"
              },
              "ignore": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of glob patterns to ignore"
              }
            },
            "required": [
              "path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "ExitPlanMode",
          "description": "Use this tool when you are in plan mode and have finished presenting your plan and are ready to code. This will prompt the user to exit plan mode.\nIMPORTANT: Only use this tool when the task requires planning the implementation steps of a task that requires writing code. For research tasks where you're gathering information, searching files, reading files or in general trying to understand the codebase - do NOT use this tool.\n\nEg.\n1. Initial task: \"Search for and understand the implementation of vim mode in the codebase\" - Do not use the exit plan mode tool because you are not planning the implementation steps of a task.\n2. Initial task: \"Help me implement yank mode for vim\" - Use the exit plan mode tool after you have finished planning the implementation steps of the task.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "plan": {
                "type": "string",
                "description": "The plan you came up with, that you want to run by the user for approval. Supports markdown. The plan should be pretty concise."
              }
            },
            "required": [
              "plan"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Read",
          "description": "Reads a file from the local filesystem. You can access any file directly by using this tool.\nAssume this tool is able to read all files on the machine. If the User provides a path to a file assume that path is valid. It is okay to read a file that does not exist; an error will be returned.\n\nUsage:\n- The file_path parameter must be an absolute path, not a relative path\n- By default, it reads up to 2000 lines starting from the beginning of the file\n- You can optionally specify a line offset and limit (especially handy for long files), but it's recommended to read the whole file by not providing these parameters\n- Any lines longer than 2000 characters will be truncated\n- Results are returned using cat -n format, with line numbers starting at 1\n- This tool allows Claude Code to read images (eg PNG, JPG, etc). When reading an image file the contents are presented visually as Claude Code is a multimodal LLM.\n- This tool can read PDF files (.pdf). PDFs are processed page by page, extracting both text and visual content for analysis.\n- For Jupyter notebooks (.ipynb files), use the NotebookRead instead\n- You have the capability to call multiple tools in a single response. It is always better to speculatively read multiple files as a batch that are potentially useful.\n- You will regularly be asked to read screenshots. If the user provides a path to a screenshot ALWAYS use this tool to view the file at the path. This tool will work with all temporary file paths like /var/folders/123/abc/T/TemporaryItems/NSIRD_screencaptureui_ZfB1tD/Screenshot.png\n- If you read a file that exists but has empty contents you will receive a system reminder warning in place of file contents.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to read"
              },
              "offset": {
                "type": "number",
                "description": "The line number to start reading from. Only provide if the file is too large to read at once"
              },
              "limit": {
                "type": "number",
                "description": "The number of lines to read. Only provide if the file is too large to read at once."
              }
            },
            "required": [
              "file_path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Edit",
          "description": "Performs exact string replacements in files.\n\nUsage:\n- You must use your `Read` tool at least once in the conversation before editing. This tool will error if you attempt an edit without reading the file.\n- When editing text from Read tool output, ensure you preserve the exact indentation (tabs/spaces) as it appears AFTER the line number prefix. The line number prefix format is: spaces + line number + tab. Everything after that tab is the actual file content to match. Never include any part of the line number prefix in the old_string or new_string.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- Only use emojis if the user explicitly requests it. Avoid adding emojis to files unless asked.\n- The edit will FAIL if `old_string` is not unique in the file. Either provide a larger string with more surrounding context to make it unique or use `replace_all` to change every instance of `old_string`.\n- Use `replace_all` for replacing and renaming strings across the file. This parameter is useful if you want to rename a variable for instance.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to modify"
              },
              "old_string": {
                "type": "string",
                "description": "The text to replace"
              },
              "new_string": {
                "type": "string",
                "description": "The text to replace it with (must be different from old_string)"
              },
              "replace_all": {
                "type": "boolean",
                "default": false,
                "description": "Replace all occurences of old_string (default false)"
              }
            },
            "required": [
              "file_path",
              "old_string",
              "new_string"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "MultiEdit",
          "description": "This is a tool for making multiple edits to a single file in one operation. It is built on top of the Edit tool and allows you to perform multiple find-and-replace operations efficiently. Prefer this tool over the Edit tool when you need to make multiple edits to the same file.\n\nBefore using this tool:\n\n1. Use the Read tool to understand the file's contents and context\n2. Verify the directory path is correct\n\nTo make multiple file edits, provide the following:\n1. file_path: The absolute path to the file to modify (must be absolute, not relative)\n2. edits: An array of edit operations to perform, where each edit contains:\n   - old_string: The text to replace (must match the file contents exactly, including all whitespace and indentation)\n   - new_string: The edited text to replace the old_string\n   - replace_all: Replace all occurences of old_string. This parameter is optional and defaults to false.\n\nIMPORTANT:\n- All edits are applied in sequence, in the order they are provided\n- Each edit operates on the result of the previous edit\n- All edits must be valid for the operation to succeed - if any edit fails, none will be applied\n- This tool is ideal when you need to make several changes to different parts of the same file\n- For Jupyter notebooks (.ipynb files), use the NotebookEdit instead\n\nCRITICAL REQUIREMENTS:\n1. All edits follow the same requirements as the single Edit tool\n2. The edits are atomic - either all succeed or none are applied\n3. Plan your edits carefully to avoid conflicts between sequential operations\n\nWARNING:\n- The tool will fail if edits.old_string doesn't match the file contents exactly (including whitespace)\n- The tool will fail if edits.old_string and edits.new_string are the same\n- Since edits are applied in sequence, ensure that earlier edits don't affect the text that later edits are trying to find\n\nWhen making edits:\n- Ensure all edits result in idiomatic, correct code\n- Do not leave the code in a broken state\n- Always use absolute file paths (starting with /)\n- Only use emojis if the user explicitly requests it. Avoid adding emojis to files unless asked.\n- Use replace_all for replacing and renaming strings across the file. This parameter is useful if you want to rename a variable for instance.\n\nIf you want to create a new file, use:\n- A new file path, including dir name if needed\n- First edit: empty old_string and the new file's contents as new_string\n- Subsequent edits: normal edit operations on the created content",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to modify"
              },
              "edits": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "old_string": {
                      "type": "string",
                      "description": "The text to replace"
                    },
                    "new_string": {
                      "type": "string",
                      "description": "The text to replace it with"
                    },
                    "replace_all": {
                      "type": "boolean",
                      "default": false,
                      "description": "Replace all occurences of old_string (default false)."
                    }
                  },
                  "required": [
                    "old_string",
                    "new_string"
                  ],
                  "additionalProperties": false
                },
                "minItems": 1,
                "description": "Array of edit operations to perform sequentially on the file"
              }
            },
            "required": [
              "file_path",
              "edits"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Write",
          "description": "Writes a file to the local filesystem.\n\nUsage:\n- This tool will overwrite the existing file if there is one at the provided path.\n- If this is an existing file, you MUST use the Read tool first to read the file's contents. This tool will fail if you did not read the file first.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- NEVER proactively create documentation files (*.md) or README files. Only create documentation files if explicitly requested by the User.\n- Only use emojis if the user explicitly requests it. Avoid writing emojis to files unless asked.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to write (must be absolute, not relative)"
              },
              "content": {
                "type": "string",
                "description": "The content to write to the file"
              }
            },
            "required": [
              "file_path",
              "content"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "NotebookRead",
          "description": "Reads a Jupyter notebook (.ipynb file) and returns all of the cells with their outputs. Jupyter notebooks are interactive documents that combine code, text, and visualizations, commonly used for data analysis and scientific computing. The notebook_path parameter must be an absolute path, not a relative path.",
          "input_schema": {
            "type": "object",
            "properties": {
              "notebook_path": {
                "type": "string",
                "description": "The absolute path to the Jupyter notebook file to read (must be absolute, not relative)"
              },
              "cell_id": {
                "type": "string",
                "description": "The ID of a specific cell to read. If not provided, all cells will be read."
              }
            },
            "required": [
              "notebook_path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "NotebookEdit",
          "description": "Completely replaces the contents of a specific cell in a Jupyter notebook (.ipynb file) with new source. Jupyter notebooks are interactive documents that combine code, text, and visualizations, commonly used for data analysis and scientific computing. The notebook_path parameter must be an absolute path, not a relative path. The cell_number is 0-indexed. Use edit_mode=insert to add a new cell at the index specified by cell_number. Use edit_mode=delete to delete the cell at the index specified by cell_number.",
          "input_schema": {
            "type": "object",
            "properties": {
              "notebook_path": {
                "type": "string",
                "description": "The absolute path to the Jupyter notebook file to edit (must be absolute, not relative)"
              },
              "cell_id": {
                "type": "string",
                "description": "The ID of the cell to edit. When inserting a new cell, the new cell will be inserted after the cell with this ID, or at the beginning if not specified."
              },
              "new_source": {
                "type": "string",
                "description": "The new source for the cell"
              },
              "cell_type": {
                "type": "string",
                "enum": [
                  "code",
                  "markdown"
                ],
                "description": "The type of the cell (code or markdown). If not specified, it defaults to the current cell type. If using edit_mode=insert, this is required."
              },
              "edit_mode": {
                "type": "string",
                "enum": [
                  "replace",
                  "insert",
                  "delete"
                ],
                "description": "The type of edit to make (replace, insert, delete). Defaults to replace."
              }
            },
            "required": [
              "notebook_path",
              "new_source"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "WebFetch",
          "description": "\n- Fetches content from a specified URL and processes it using an AI model\n- Takes a URL and a prompt as input\n- Fetches the URL content, converts HTML to markdown\n- Processes the content with the prompt using a small, fast model\n- Returns the model's response about the content\n- Use this tool when you need to retrieve and analyze web content\n\nUsage notes:\n  - IMPORTANT: If an MCP-provided web fetch tool is available, prefer using that tool instead of this one, as it may have fewer restrictions. All MCP-provided tools start with \"mcp__\".\n  - The URL must be a fully-formed valid URL\n  - HTTP URLs will be automatically upgraded to HTTPS\n  - The prompt should describe what information you want to extract from the page\n  - This tool is read-only and does not modify any files\n  - Results may be summarized if the content is very large\n  - Includes a self-cleaning 15-minute cache for faster responses when repeatedly accessing the same URL\n  - When a URL redirects to a different host, the tool will inform you and provide the redirect URL in a special format. You should then make a new WebFetch request with the redirect URL to fetch the content.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "format": "uri",
                "description": "The URL to fetch content from"
              },
              "prompt": {
                "type": "string",
                "description": "The prompt to run on the fetched content"
              }
            },
            "required": [
              "url",
              "prompt"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "TodoWrite",
          "description": "Use this tool to create and manage a structured task list for your current coding session. This helps you track progress, organize complex tasks, and demonstrate thoroughness to the user.\nIt also helps the user understand the progress of the task and overall progress of their requests.\n\n## When to Use This Tool\nUse this tool proactively in these scenarios:\n\n1. Complex multi-step tasks - When a task requires 3 or more distinct steps or actions\n2. Non-trivial and complex tasks - Tasks that require careful planning or multiple operations\n3. User explicitly requests todo list - When the user directly asks you to use the todo list\n4. User provides multiple tasks - When users provide a list of things to be done (numbered or comma-separated)\n5. After receiving new instructions - Immediately capture user requirements as todos\n6. When you start working on a task - Mark it as in_progress BEFORE beginning work. Ideally you should only have one todo as in_progress at a time\n7. After completing a task - Mark it as completed and add any new follow-up tasks discovered during implementation\n\n## When NOT to Use This Tool\n\nSkip using this tool when:\n1. There is only a single, straightforward task\n2. The task is trivial and tracking it provides no organizational benefit\n3. The task can be completed in less than 3 trivial steps\n4. The task is purely conversational or informational\n\nNOTE that you should not use this tool if there is only one trivial task to do. In this case you are better off just doing the task directly.\n\n## Examples of When to Use the Todo List\n\n<example>\nUser: I want to add a dark mode toggle to the application settings. Make sure you run the tests and build when you're done!\nAssistant: I'll help add a dark mode toggle to your application settings. Let me create a todo list to track this implementation.\n*Creates todo list with the following items:*\n1. Create dark mode toggle component in Settings page\n2. Add dark mode state management (context/store)\n3. Implement CSS-in-JS styles for dark theme\n4. Update existing components to support theme switching\n5. Run tests and build process, addressing any failures or errors that occur\n*Begins working on the first task*\n\n<reasoning>\nThe assistant used the todo list because:\n1. Adding dark mode is a multi-step feature requiring UI, state management, and styling changes\n2. The user explicitly requested tests and build be run afterward\n3. The assistant inferred that tests and build need to pass by adding \"Ensure tests and build succeed\" as the final task\n</reasoning>\n</example>\n\n<example>\nUser: Help me rename the function getCwd to getCurrentWorkingDirectory across my project\nAssistant: Let me first search through your codebase to find all occurrences of 'getCwd'.\n*Uses grep or search tools to locate all instances of getCwd in the codebase*\nAssistant: I've found 15 instances of 'getCwd' across 8 different files. Let me create a todo list to track these changes.\n*Creates todo list with specific items for each file that needs updating*\n\n<reasoning>\nThe assistant used the todo list because:\n1. First, the assistant searched to understand the scope of the task\n2. Upon finding multiple occurrences across different files, it determined this was a complex task with multiple steps\n3. The todo list helps ensure every instance is tracked and updated systematically\n4. This approach prevents missing any occurrences and maintains code consistency\n</reasoning>\n</example>\n\n\n<example>\nUser: I need to implement these features for my e-commerce site: user registration, product catalog, shopping cart, and checkout flow.\nAssistant: I'll help implement these features. First, let's add all the features to the todo list.\n*Creates a todo list breaking down each feature into specific tasks based on the project architecture*\nAssistant: Let's start with user registration. This will involve creating database models, API endpoints, and frontend forms that integrate with your existing authentication system.\n\n<reasoning>\nThe assistant used the todo list because:\n1. The user provided multiple complex features to implement in a comma separated list\n2. The todo list helps organize these large features into manageable tasks\n3. This approach allows for tracking progress across the entire implementation\n</reasoning>\n</example>\n\n<example>\nUser: Can you help optimize my React application? It's rendering slowly and has performance issues.</user>\nAssistant: I'll help optimize your React application. First, let me examine your codebase to identify potential performance bottlenecks.\n*Reviews component structure, render patterns, state management, and data fetching*\nAssistant: After analyzing your codebase, I've identified several performance issues. Let me create a todo list to track our optimization efforts.\n*Creates todo list with items like: 1) Implement memoization for expensive calculations in ProductList, 2) Add virtualization for long lists in Dashboard, 3) Optimize image loading in Gallery component, 4) Fix state update loops in ShoppingCart, 5) Review bundle size and implement code splitting*\nLet's start by implementing memoization for the expensive calculations in your ProductList component.</assistant>\n\n<reasoning>\nThe assistant used the todo list because:\n1. First, the assistant examined the codebase to identify specific performance issues\n2. Based on this analysis, it identified multiple optimization opportunities\n3. Performance optimization is a non-trivial task requiring multiple steps\n4. The todo list helps methodically track improvements across different components\n5. This systematic approach ensures all performance bottlenecks are addressed\n</reasoning>\n</example>\n\n## Examples of When NOT to Use the Todo List\n\n<example>\nUser: How do I print 'Hello World' in Python?\nAssistant: In Python, you can print \"Hello World\" with this simple code:\n\npython\nprint(\"Hello World\")\n\nThis will output the text \"Hello World\" to the console when executed.</assistant>\n\n<reasoning>\nThe assistant did not use the todo list because this is a single, trivial task that can be completed in one step. There's no need to track multiple tasks or steps for such a straightforward request.\n</reasoning>\n</example>\n\n<example>\nUser: What does the git status command do?\nAssistant: The git status command shows the current state of your working directory and staging area. It displays which changes have been staged, which haven't, and which files aren't being tracked by Git. This is a fundamental command for understanding the current state of your repository before making commits.\n\n<reasoning>\nThe assistant did not use the todo list because this is an informational request with no actual coding task to complete. The user is simply asking for an explanation, not for the assistant to perform multiple steps or tasks.\n</reasoning>\n</example>\n\n<example>\nUser: Can you add a comment to the calculateTotal function to explain what it does?\nAssistant: Sure, let me add a comment to the calculateTotal function to explain what it does.\n* Uses the Edit tool to add a comment to the calculateTotal function *\n\n<reasoning>\nThe assistant did not use the todo list because this is a single, straightforward task confined to one location in the code. Adding a comment doesn't require tracking multiple steps or systematic organization.\n</reasoning>\n</example>\n\n<example>\nUser: Run npm install for me and tell me what happens.\nAssistant: I'll run the npm install command for you.\n\n*Executes: npm install*\n\nThe command completed successfully. Here's the output:\n[Output of npm install command]\n\nAll dependencies have been installed according to your package.json file.\n\n<reasoning>\nThe assistant did not use the todo list because this is a single command execution with immediate results. There are no multiple steps to track or organize, making the todo list unnecessary for this straightforward task.\n</reasoning>\n</example>\n\n## Task States and Management\n\n1. **Task States**: Use these states to track progress:\n   - pending: Task not yet started\n   - in_progress: Currently working on (limit to ONE task at a time)\n   - completed: Task finished successfully\n\n2. **Task Management**:\n   - Update task status in real-time as you work\n   - Mark tasks complete IMMEDIATELY after finishing (don't batch completions)\n   - Only have ONE task in_progress at any time\n   - Complete current tasks before starting new ones\n   - Remove tasks that are no longer relevant from the list entirely\n\n3. **Task Completion Requirements**:\n   - ONLY mark a task as completed when you have FULLY accomplished it\n   - If you encounter errors, blockers, or cannot finish, keep the task as in_progress\n   - When blocked, create a new task describing what needs to be resolved\n   - Never mark a task as completed if:\n     - Tests are failing\n     - Implementation is partial\n     - You encountered unresolved errors\n     - You couldn't find necessary files or dependencies\n\n4. **Task Breakdown**:\n   - Create specific, actionable items\n   - Break complex tasks into smaller, manageable steps\n   - Use clear, descriptive task names\n\nWhen in doubt, use this tool. Being proactive with task management demonstrates attentiveness and ensures you complete all requirements successfully.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "todos": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "content": {
                      "type": "string",
                      "minLength": 1
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "pending",
                        "in_progress",
                        "completed"
                      ]
                    },
                    "priority": {
                      "type": "string",
                      "enum": [
                        "high",
                        "medium",
                        "low"
                      ]
                    },
                    "id": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "content",
                    "status",
                    "priority",
                    "id"
                  ],
                  "additionalProperties": false
                },
                "description": "The updated todo list"
              }
            },
            "required": [
              "todos"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "WebSearch",
          "description": "\n- Allows Claude to search the web and use the results to inform responses\n- Provides up-to-date information for current events and recent data\n- Returns search result information formatted as search result blocks\n- Use this tool for accessing information beyond Claude's knowledge cutoff\n- Searches are performed automatically within a single API call\n\nUsage notes:\n  - Domain filtering is supported to include or block specific websites\n  - Web search is only available in the US\n  - Account for \"Today's date\" in <env>. For example, if <env> says \"Today's date: 2025-07-01\", and the user wants the latest docs, do not use 2024 in the search query. Use 2025.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "minLength": 2,
                "description": "The search query to use"
              },
              "allowed_domains": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Only include search results from these domains"
              },
              "blocked_domains": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Never include search results from these domains"
              }
            },
            "required": [
              "query"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        }
      ],
      "responseStructure": {
        "type": "object",
        "keys": [
          "id",
          "object",
          "created",
          "model",
          "choices",
          "usage",
          "stats",
          "system_fingerprint"
        ],
        "hasChoices": true,
        "hasContent": false,
        "hasUsage": true,
        "choicesCount": 1,
        "firstChoice": {
          "hasMessage": true,
          "hasToolCalls": false,
          "finishReason": "stop"
        }
      },
      "parsingAttempts": [
        "json_format",
        "function_call",
        "action_format",
        "natural_language"
      ]
    }
  },
  {
    "timestamp": "2025-08-10T06:56:01.666Z",
    "requestId": "session_1754804126703_ixall6oy5:conv_1754804126703_sm1ur5dvo:25:1754808941557:b23m",
    "provider": "lmstudio",
    "model": "gpt-oss-20b-mlx",
    "endpoint": "localhost:1234",
    "failureType": "text_instead_of_tools",
    "originalResponse": {
      "id": "chatcmpl-skgaamyfzrx92rddhrh9r",
      "object": "chat.completion",
      "created": 1754808941,
      "model": "gpt-oss-20b-mlx",
      "choices": [
        {
          "index": 0,
          "logprobs": null,
          "finish_reason": "stop",
          "message": {
            "role": "assistant",
            "content": "User says \"小说就是本项目\" meaning the novel is this project. So entire repo is a novel? The repository likely contains an interactive fiction or book content, but we need to find the novelty settings within repo. Let's traverse the codebase: earlier we saw no output of .md files. Perhaps there are none. The project may have not yet created docs for novel; we need to create missing .md documenting the setting. But guidelines: \"NEVER proactively create documentation files (*.md) or README files. Only create documentation files if explicitly requested by the User.\"\n\nUser explicitly wants to \"补齐文档\" lacking MD docs for novel settings. So allowed to create new .md files because requested by user. But we also might need to delete the \"汇总的人物档案\" file; maybe it's a file 'characters.md' or 'summary/character-summary.md'.\n\nSo steps:\n\n1. Find the \"personality archive\" file that has been deleted. Maybe exists but empty? They say \"删掉\", meaning removed already. We may need to recreate the missing documentat... [truncated]"
          }
        }
      ],
      "usage": {
        "prompt_tokens": 18393,
        "completion_tokens": 275,
        "total_tokens": 18668
      },
      "stats": {},
      "system_fingerprint": "gpt-oss-20b-mlx"
    },
    "expectedFormat": "openai",
    "errorMessage": "All parsing strategies failed",
    "responseAnalysis": {
      "hasToolCalls": false,
      "hasContent": true,
      "contentLength": 1283,
      "contentPreview": "User says \"小说就是本项目\" meaning the novel is this project. So entire repo is a novel? The repository likely contains an interactive fiction or book content, but we need to find the novelty settings within",
      "finishReason": "stop",
      "toolCallPatterns": []
    },
    "debugInfo": {
      "requestTools": [
        {
          "name": "Task",
          "description": "Launch a new agent to handle complex, multi-step tasks autonomously.\n\nAvailable agent types and the tools they have access to:\n- general-purpose: General-purpose agent for researching complex questions, searching for code, and executing multi-step tasks. When you are searching for a keyword or file and are not confident that you will find the right match in the first few tries use this agent to perform the search for you. (Tools: *)\n- code-refactorer: Use this agent when you need to improve existing code structure, readability, or maintainability without changing functionality. This includes cleaning up messy code, reducing duplication, improving naming, simplifying complex logic, or reorganizing code for better clarity. Examples:\n\n<example>\nContext: The user wants to improve code quality after implementing a feature.\nuser: \"I just finished implementing the user authentication system. Can you help clean it up?\"\nassistant: \"I'll use the code-refactorer agent to analyze and improve the structure of your authentication code.\"\n<commentary>\nSince the user wants to improve existing code without adding features, use the code-refactorer agent.\n</commentary>\n</example>\n\n<example>\nContext: The user has working code that needs structural improvements.\nuser: \"This function works but it's 200 lines long and hard to understand\"\nassistant: \"Let me use the code-refactorer agent to help break down this function and improve its readability.\"\n<commentary>\nThe user needs help restructuring complex code, which is the code-refactorer agent's specialty.\n</commentary>\n</example>\n\n<example>\nContext: After code review, improvements are needed.\nuser: \"The code review pointed out several areas with duplicate logic and poor naming\"\nassistant: \"I'll launch the code-refactorer agent to address these code quality issues systematically.\"\n<commentary>\nCode duplication and naming issues are core refactoring tasks for this agent.\n</commentary>\n</example> (Tools: Edit, MultiEdit, Write, NotebookEdit, Grep, LS, Read)\n- project-task-planner: Use this agent when you need to create a comprehensive development task list from a Product Requirements Document (PRD). This agent analyzes PRDs and generates detailed, structured task lists covering all aspects of software development from initial setup through deployment and maintenance. Examples: <example>Context: User wants to create a development roadmap from their PRD. user: \"I have a PRD for a new e-commerce platform. Can you create a task list?\" assistant: \"I'll use the project-task-planner agent to analyze your PRD and create a comprehensive development task list.\" <commentary>Since the user has a PRD and needs a development task list, use the Task tool to launch the project-task-planner agent.</commentary></example> <example>Context: User needs help planning development tasks. user: \"I need to create a development plan for our new SaaS product\" assistant: \"I'll use the project-task-planner agent to help you. First, I'll need to see your Product Requirements Document (PRD).\" <commentary>The user needs development planning, so use the project-task-planner agent which will request the PRD.</commentary></example> (Tools: Task, Bash, Edit, MultiEdit, Write, NotebookEdit, Grep, LS, Read, ExitPlanMode, TodoWrite, WebSearch)\n- vibe-coding-coach: Use this agent when users want to build applications through conversation, focusing on the vision and feel of their app rather than technical implementation details. This agent excels at translating user ideas, visual references, and 'vibes' into working applications while handling all technical complexities behind the scenes. <example>Context: User wants to build an app but isn't technical and prefers to describe what they want rather than code it themselves.\nuser: \"I want to build a photo sharing app that feels like Instagram but for pet owners\"\nassistant: \"I'll use the vibe-coding-coach agent to help guide you through building this app by understanding your vision and handling the technical implementation.\"\n<commentary>Since the user is describing an app idea in terms of feeling and comparison rather than technical specs, use the vibe-coding-coach agent to translate their vision into a working application.</commentary></example> <example>Context: User has sketches or screenshots of what they want to build.\nuser: \"Here's a screenshot of an app I like. Can we build something similar but for tracking workouts?\"\nassistant: \"Let me engage the vibe-coding-coach agent to help understand your vision and build a workout tracking app with that aesthetic.\"\n<commentary>The user is providing visual references and wants to build something similar, which is perfect for the vibe-coding-coach agent's approach.</commentary></example> (Tools: *)\n- debug-system-architect: Use this agent when you need to establish a comprehensive debug logging system for a project. This includes setting up log directories, implementing node-level tracing, creating time-based test records, establishing replay mechanisms, and documenting debug rules. Example: <example> Context: User is setting up a new project and wants to implement proper debugging infrastructure from the start. user: \"Please help me set up a debug system for my new API router project\" <commentary> Since the user is requesting debug system setup, use the debug-system-architect agent to analyze the project and implement comprehensive logging and tracing mechanisms. </commentary> </example> <example> Context: User encounters intermittent issues in their routing system and needs better visibility. user: \"I'm having trouble tracking down why some requests fail intermittently\" <commentary> Since the user needs better debugging visibility for intermittent issues, use the debug-system-architect agent to implement node-level tracing and replay mechanisms. </commentary> </example> (Tools: *)\n- code-risk-auditor: Use this agent when you need to perform comprehensive code risk assessment and identify potential architectural issues in your codebase. Examples: <example>Context: The user has just completed a major refactoring and wants to ensure no hardcoded values or fallback mechanisms were introduced. user: \"I just finished refactoring the routing system, can you check for any code risks?\" assistant: \"I'll use the code-risk-auditor agent to perform a comprehensive risk assessment of your routing system changes.\"</example> <example>Context: Before a major release, the user wants to clean up technical debt and ensure code quality. user: \"We're preparing for v2.0 release, I need a full code audit\" assistant: \"Let me launch the code-risk-auditor agent to identify hardcoding, fallback risks, outdated tests, and duplicate implementations across the entire codebase.\"</example> <example>Context: The user notices inconsistent behavior and suspects duplicate implementations. user: \"The same feature seems to be implemented in multiple places, causing bugs\" assistant: \"I'll use the code-risk-auditor agent to scan for duplicate implementations and provide a consolidation plan.\"</example> (Tools: *)\n- security-auditor: Use this agent when you need to perform a comprehensive security audit of a codebase, identify vulnerabilities, and generate a detailed security report with actionable remediation steps. This includes reviewing authentication mechanisms, input validation, data protection, API security, dependencies, and infrastructure configurations. Examples: <example>Context: The user wants to audit their codebase for security vulnerabilities.\nuser: \"Can you perform a security audit of my application?\"\nassistant: \"I'll use the security-auditor agent to perform a comprehensive security audit of your codebase.\"\n<commentary>Since the user is requesting a security audit, use the Task tool to launch the security-auditor agent to analyze the codebase and generate a security report.</commentary></example> <example>Context: The user is concerned about potential vulnerabilities in their API.\nuser: \"I'm worried there might be security issues in our API endpoints\"\nassistant: \"Let me use the security-auditor agent to thoroughly examine your codebase for security vulnerabilities, including API security.\"\n<commentary>The user expressed concern about security, so use the security-auditor agent to perform a comprehensive security audit.</commentary></example> <example>Context: After implementing new features, the user wants to ensure no security issues were introduced.\nuser: \"We just added user authentication to our app. Can you check if it's secure?\"\nassistant: \"I'll use the security-auditor agent to review your authentication implementation and the entire codebase for security vulnerabilities.\"\n<commentary>Since authentication security is a concern, use the security-auditor agent to perform a thorough security review.</commentary></example> (Tools: Task, Bash, Edit, MultiEdit, Write, NotebookEdit)\n- project-memory-manager: Use this agent when you need to manage project-specific memory entries, create project documentation, or organize project knowledge. This includes creating project summaries, documenting project decisions, tracking project progress, and maintaining project-specific knowledge bases. <example>Context: User wants to document a project decision or create project documentation. user: \"请为我们的新项目创建一个内存管理系统的文档\" assistant: \"我将使用 project-memory-manager agent 来创建这个项目文档\" <commentary>Since the user needs project documentation, use the project-memory-manager agent to create project-specific memory entries.</commentary></example> <example>Context: User wants to track project progress or decisions. user: \"我们需要记录这个项目的关键决策点\" assistant: \"让我使用 project-memory-manager agent 来记录这些项目决策\" <commentary>Since this is project tracking, use the project-memory-manager agent to create decision-type memory entries.</commentary></example> (Tools: *)\n- rules-architect: Use this agent when you need to analyze project architecture and establish comprehensive rule management systems. Examples: <example>Context: User wants to organize project rules and create a structured rule management system. user: \"I need to reorganize our project rules and create a better structure for managing coding standards, file organization, and testing protocols\" assistant: \"I'll use the rules-architect agent to analyze the current project structure and establish a comprehensive rule management system with proper categorization and organization.\"</example> <example>Context: Project has grown complex and needs better rule organization. user: \"Our CLAUDE.md file is getting too large and we need to break down rules into manageable categories\" assistant: \"Let me call the rules-architect agent to create a structured .claude/rules system that will organize all project rules into logical categories.\"</example> (Tools: *)\n- frontend-designer: Use this agent when you need to convert design mockups, wireframes, or visual concepts into detailed technical specifications and implementation guides for frontend development. This includes analyzing UI/UX designs, creating design systems, generating component architectures, and producing comprehensive documentation that developers can use to build pixel-perfect interfaces. Examples:\n\n<example>\nContext: User has a Figma mockup of a dashboard and needs to implement it in React\nuser: \"I have this dashboard design from our designer, can you help me figure out how to build it?\"\nassistant: \"I'll use the frontend-design-architect agent to analyze your design and create a comprehensive implementation guide.\"\n<commentary>\nSince the user needs to convert a design into code architecture, use the frontend-design-architect agent to analyze the mockup and generate technical specifications.\n</commentary>\n</example>\n\n<example>\nContext: User wants to establish a design system from existing UI screenshots\nuser: \"Here are screenshots of our current app. We need to extract a consistent design system from these.\"\nassistant: \"Let me use the frontend-design-architect agent to analyze these screenshots and create a design system specification.\"\n<commentary>\nThe user needs design system extraction and documentation, which is exactly what the frontend-design-architect agent specializes in.\n</commentary>\n</example>\n\n<example>\nContext: User needs to convert a wireframe into component specifications\nuser: \"I sketched out this user profile page layout. How should I structure the components?\"\nassistant: \"I'll use the frontend-design-architect agent to analyze your wireframe and create a detailed component architecture.\"\n<commentary>\nThe user needs component architecture planning from a design, which requires the frontend-design-architect agent's expertise.\n</commentary>\n</example> (Tools: *)\n- content-writer: Use this agent when you need to create compelling, informative content that explains complex topics in simple terms. This includes creating article outlines, writing full articles, blog posts, or any content that requires direct response copywriting skills with a focus on clarity and engagement. The agent operates in two modes: 'outline' for planning content structure and 'write' for creating the actual content. Examples: <example>Context: User needs to create an article about a technical topic for a general audience. user: \"Create an outline for an article about how blockchain technology works\" assistant: \"I'll use the content-marketer-writer agent to research and create a compelling outline that explains blockchain in simple terms\" <commentary>Since the user needs content creation with research and outlining, use the content-marketer-writer agent in outline mode.</commentary></example> <example>Context: User has an outline and needs to write the full article. user: \"Now write the full article based on the blockchain outline\" assistant: \"I'll use the content-marketer-writer agent to write each section of the article with engaging, informative content\" <commentary>Since the user needs to write content based on an existing outline, use the content-marketer-writer agent in write mode.</commentary></example> (Tools: *)\n- test-runner: Use this agent to run and manage tests according to the global and project-specific testing rules. This includes executing test scripts, documenting test results, and helping to diagnose issues following the standard pipeline. <example>Context: User wants to run all functional tests. user: \"运行所有功能测试\" assistant: \"我将使用 test-runner agent 来执行所有功能测试\" <commentary>Since the user wants to run tests by category, use the test-runner agent.</commentary></example> <example>Context: User wants to verify a bug fix. user: \"我修复了一个bug，帮我验证一下\" assistant: \"让我使用 test-runner agent 来执行对应的修复验证测试\" <commentary>The user needs to verify a fix, which is a core task for the test-runner agent.</commentary></example> (Tools: *)\n- in-depth-research-analyst: Use this agent when you need to conduct comprehensive research reports with in-depth web mining, data analysis, and visualization. This includes industry analysis, market research, competitive intelligence, and trend forecasting with accurate data from authoritative sources. <example>Context: User wants a comprehensive industry analysis report. user: \"请对人工智能芯片市场进行深入调研，包括主要厂商、市场份额和增长趋势\" assistant: \"我将使用 in-depth-research-analyst agent 来进行这项深入的市场调研并生成可视化报告\" <commentary>Since the user needs a comprehensive industry analysis with data visualization, use the in-depth-research-analyst agent to conduct thorough research and create an integrated report.</commentary></example> <example>Context: User wants market research with accurate data and visualizations. user: \"我们需要一份关于电动汽车充电基础设施的深度报告，包含数据图表\" assistant: \"让我使用 in-depth-research-analyst agent 来收集准确数据并生成图文并茂的分析报告\" <commentary>Since this requires market research with data accuracy and visualizations, use the in-depth-research-analyst agent to create a comprehensive report.</commentary></example> (Tools: *)\n- prd-writer: Use this agent when you need to create a comprehensive Product Requirements Document (PRD) for a software project or feature. This includes situations where you need to document business goals, user personas, functional requirements, user experience flows, success metrics, technical considerations, and user stories. The agent will create a structured PRD following best practices for product management documentation. Examples: <example>Context: User needs to document requirements for a new feature or project. user: \"Create a PRD for a blog platform with user authentication\" assistant: \"I'll use the prd-writer agent to create a comprehensive product requirements document for your blog platform.\" <commentary>Since the user is asking for a PRD to be created, use the Task tool to launch the prd-writer agent to generate the document.</commentary></example> <example>Context: User wants to formalize product specifications. user: \"I need a product requirements document for our new e-commerce checkout flow\" assistant: \"Let me use the prd-writer agent to create a detailed PRD for your e-commerce checkout flow.\" <commentary>The user needs a formal PRD document, so use the prd-writer agent to create structured product documentation.</commentary></example> (Tools: Task, Bash, Grep, LS, Read, Write, WebSearch, Glob)\n- pipeline-debug-universal: Use this agent when you need to implement comprehensive debug hooks and testing infrastructure for ANY pipeline system - whether it's API routing, data processing, CI/CD workflows, or transformation pipelines. This agent specializes in creating universal debug architectures that work across different pipeline types with data capture, replay capabilities, and systematic testing matrices. Examples: <example>Context: User is working on a multi-provider API routing system and needs to add debug capabilities to track data flow through each pipeline step. user: \"I need to add debug hooks to our routing pipeline so we can capture and replay data at each step\" assistant: \"I'll use the pipeline-debug-universal agent to design a comprehensive debug infrastructure with data capture and replay capabilities\" <commentary>Since the user needs pipeline debugging infrastructure, use the pipeline-debug-universal agent to create debug hooks and testing matrices.</commentary></example> <example>Context: User has a complex data transformation pipeline and wants to build systematic testing for each stage and provider. user: \"Our data processing pipeline has issues and we need better testing infrastructure to isolate problems at each step\" assistant: \"Let me use the pipeline-debug-universal agent to create a complete testing matrix and debug system\" <commentary>Since the user needs systematic pipeline testing infrastructure, use the pipeline-debug-universal agent to architect the testing system.</commentary></example> <example>Context: User is building a CI/CD pipeline and needs to implement debug capabilities for tracking deployment issues. user: \"Our deployment pipeline fails randomly and we can't reproduce the issues consistently\" assistant: \"I'll deploy the pipeline-debug-universal agent to create comprehensive debug hooks and replay capabilities for your CI/CD pipeline\" <commentary>Since the user needs debug infrastructure for a deployment pipeline, use the pipeline-debug-universal agent to design the debug system.</commentary></example> (Tools: *)\n\nWhen using the Task tool, you must specify a subagent_type parameter to select which agent type to use.\n\n\n\nWhen NOT to use the Agent tool:\n- If you want to read a specific file path, use the Read or Glob tool instead of the Agent tool, to find the match more quickly\n- If you are searching for a specific class definition like \"class Foo\", use the Glob tool instead, to find the match more quickly\n- If you are searching for code within a specific file or set of 2-3 files, use the Read tool instead of the Agent tool, to find the match more quickly\n- Other tasks that are not related to the agent descriptions above\n\n\nUsage notes:\n1. Launch multiple agents concurrently whenever possible, to maximize performance; to do that, use a single message with multiple tool uses\n2. When the agent is done, it will return a single message back to you. The result returned by the agent is not visible to the user. To show the user the result, you should send a text message back to the user with a concise summary of the result.\n3. Each agent invocation is stateless. You will not be able to send additional messages to the agent, nor will the agent be able to communicate with you outside of its final report. Therefore, your prompt should contain a highly detailed task description for the agent to perform autonomously and you should specify exactly what information the agent should return back to you in its final and only message to you.\n4. The agent's outputs should generally be trusted\n5. Clearly tell the agent whether you expect it to write code or just to do research (search, file reads, web fetches, etc.), since it is not aware of the user's intent\n6. If the agent description mentions that it should be used proactively, then you should try your best to use it without the user having to ask for it first. Use your judgement.\n\nExample usage:\n\n<example_agent_descriptions>\n\"code-reviewer\": use this agent after you are done writing a signficant piece of code\n\"greeting-responder\": use this agent when to respond to user greetings with a friendly joke\n</example_agent_description>\n\n<example>\nuser: \"Please write a function that checks if a number is prime\"\nassistant: Sure let me write a function that checks if a number is prime\nassistant: First let me use the Write tool to write a function that checks if a number is prime\nassistant: I'm going to use the Write tool to write the following code:\n<code>\nfunction isPrime(n) {\n  if (n <= 1) return false\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n</code>\n<commentary>\nSince a signficant piece of code was written and the task was completed, now use the code-reviewer agent to review the code\n</commentary>\nassistant: Now let me use the code-reviewer agent to review the code\nassistant: Uses the Task tool to launch the with the code-reviewer agent\n</example>\n\n<example>\nuser: \"Hello\"\n<commentary>\nSince the user is greeting, use the greeting-responder agent to respond with a friendly joke\n</commentary>\nassistant: \"I'm going to use the Task tool to launch the with the greeting-responder agent\"\n</example>\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "description": {
                "type": "string",
                "description": "A short (3-5 word) description of the task"
              },
              "prompt": {
                "type": "string",
                "description": "The task for the agent to perform"
              },
              "subagent_type": {
                "type": "string",
                "description": "The type of specialized agent to use for this task"
              }
            },
            "required": [
              "description",
              "prompt",
              "subagent_type"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Bash",
          "description": "Executes a given bash command in a persistent shell session with optional timeout, ensuring proper handling and security measures.\n\nBefore executing the command, please follow these steps:\n\n1. Directory Verification:\n   - If the command will create new directories or files, first use the LS tool to verify the parent directory exists and is the correct location\n   - For example, before running \"mkdir foo/bar\", first use LS to check that \"foo\" exists and is the intended parent directory\n\n2. Command Execution:\n   - Always quote file paths that contain spaces with double quotes (e.g., cd \"path with spaces/file.txt\")\n   - Examples of proper quoting:\n     - cd \"/Users/name/My Documents\" (correct)\n     - cd /Users/name/My Documents (incorrect - will fail)\n     - python \"/path/with spaces/script.py\" (correct)\n     - python /path/with spaces/script.py (incorrect - will fail)\n   - After ensuring proper quoting, execute the command.\n   - Capture the output of the command.\n\nUsage notes:\n  - The command argument is required.\n  - You can specify an optional timeout in milliseconds (up to 600000ms / 10 minutes). If not specified, commands will timeout after 120000ms (2 minutes).\n  - It is very helpful if you write a clear, concise description of what this command does in 5-10 words.\n  - If the output exceeds 30000 characters, output will be truncated before being returned to you.\n  - VERY IMPORTANT: You MUST avoid using search commands like `find` and `grep`. Instead use Grep, Glob, or Task to search. You MUST avoid read tools like `cat`, `head`, `tail`, and `ls`, and use Read and LS to read files.\n - If you _still_ need to run `grep`, STOP. ALWAYS USE ripgrep at `rg` first, which all ${PRODUCT_NAME} users have pre-installed.\n  - When issuing multiple commands, use the ';' or '&&' operator to separate them. DO NOT use newlines (newlines are ok in quoted strings).\n  - Try to maintain your current working directory throughout the session by using absolute paths and avoiding usage of `cd`. You may use `cd` if the User explicitly requests it.\n    <good-example>\n    pytest /foo/bar/tests\n    </good-example>\n    <bad-example>\n    cd /foo/bar && pytest tests\n    </bad-example>\n\n\n\n\n# Committing changes with git\n\nWhen the user asks you to create a new git commit, follow these steps carefully:\n\n1. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following bash commands in parallel, each using the Bash tool:\n  - Run a git status command to see all untracked files.\n  - Run a git diff command to see both staged and unstaged changes that will be committed.\n  - Run a git log command to see recent commit messages, so that you can follow this repository's commit message style.\n2. Analyze all staged changes (both previously staged and newly added) and draft a commit message:\n  - Summarize the nature of the changes (eg. new feature, enhancement to an existing feature, bug fix, refactoring, test, docs, etc.). Ensure the message accurately reflects the changes and their purpose (i.e. \"add\" means a wholly new feature, \"update\" means an enhancement to an existing feature, \"fix\" means a bug fix, etc.).\n  - Check for any sensitive information that shouldn't be committed\n  - Draft a concise (1-2 sentences) commit message that focuses on the \"why\" rather than the \"what\"\n  - Ensure it accurately reflects the changes and their purpose\n3. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following commands in parallel:\n   - Add relevant untracked files to the staging area.\n   - Create the commit with a message ending with:\n   🤖 Generated with [Claude Code](https://claude.ai/code)\n\n   Co-Authored-By: Claude <noreply@anthropic.com>\n   - Run git status to make sure the commit succeeded.\n4. If the commit fails due to pre-commit hook changes, retry the commit ONCE to include these automated changes. If it fails again, it usually means a pre-commit hook is preventing the commit. If the commit succeeds but you notice that files were modified by the pre-commit hook, you MUST amend your commit to include them.\n\nImportant notes:\n- NEVER update the git config\n- NEVER run additional commands to read or explore code, besides git bash commands\n- NEVER use the TodoWrite or Task tools\n- DO NOT push to the remote repository unless the user explicitly asks you to do so\n- IMPORTANT: Never use git commands with the -i flag (like git rebase -i or git add -i) since they require interactive input which is not supported.\n- If there are no changes to commit (i.e., no untracked files and no modifications), do not create an empty commit\n- In order to ensure good formatting, ALWAYS pass the commit message via a HEREDOC, a la this example:\n<example>\ngit commit -m \"$(cat <<'EOF'\n   Commit message here.\n\n   🤖 Generated with [Claude Code](https://claude.ai/code)\n\n   Co-Authored-By: Claude <noreply@anthropic.com>\n   EOF\n   )\"\n</example>\n\n# Creating pull requests\nUse the gh command via the Bash tool for ALL GitHub-related tasks including working with issues, pull requests, checks, and releases. If given a Github URL use the gh command to get the information needed.\n\nIMPORTANT: When the user asks you to create a pull request, follow these steps carefully:\n\n1. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following bash commands in parallel using the Bash tool, in order to understand the current state of the branch since it diverged from the main branch:\n   - Run a git status command to see all untracked files\n   - Run a git diff command to see both staged and unstaged changes that will be committed\n   - Check if the current branch tracks a remote branch and is up to date with the remote, so you know if you need to push to the remote\n   - Run a git log command and `git diff [base-branch]...HEAD` to understand the full commit history for the current branch (from the time it diverged from the base branch)\n2. Analyze all changes that will be included in the pull request, making sure to look at all relevant commits (NOT just the latest commit, but ALL commits that will be included in the pull request!!!), and draft a pull request summary\n3. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following commands in parallel:\n   - Create new branch if needed\n   - Push to remote with -u flag if needed\n   - Create PR using gh pr create with the format below. Use a HEREDOC to pass the body to ensure correct formatting.\n<example>\ngh pr create --title \"the pr title\" --body \"$(cat <<'EOF'\n## Summary\n<1-3 bullet points>\n\n## Test plan\n[Checklist of TODOs for testing the pull request...]\n\n🤖 Generated with [Claude Code](https://claude.ai/code)\nEOF\n)\"\n</example>\n\nImportant:\n- NEVER update the git config\n- DO NOT use the TodoWrite or Task tools\n- Return the PR URL when you're done, so the user can see it\n\n# Other common operations\n- View comments on a Github PR: gh api repos/foo/bar/pulls/123/comments",
          "input_schema": {
            "type": "object",
            "properties": {
              "command": {
                "type": "string",
                "description": "The command to execute"
              },
              "timeout": {
                "type": "number",
                "description": "Optional timeout in milliseconds (max 600000)"
              },
              "description": {
                "type": "string",
                "description": " Clear, concise description of what this command does in 5-10 words. Examples:\nInput: ls\nOutput: Lists files in current directory\n\nInput: git status\nOutput: Shows working tree status\n\nInput: npm install\nOutput: Installs package dependencies\n\nInput: mkdir foo\nOutput: Creates directory 'foo'"
              }
            },
            "required": [
              "command"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Glob",
          "description": "- Fast file pattern matching tool that works with any codebase size\n- Supports glob patterns like \"**/*.js\" or \"src/**/*.ts\"\n- Returns matching file paths sorted by modification time\n- Use this tool when you need to find files by name patterns\n- When you are doing an open ended search that may require multiple rounds of globbing and grepping, use the Agent tool instead\n- You have the capability to call multiple tools in a single response. It is always better to speculatively perform multiple searches as a batch that are potentially useful.",
          "input_schema": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "The glob pattern to match files against"
              },
              "path": {
                "type": "string",
                "description": "The directory to search in. If not specified, the current working directory will be used. IMPORTANT: Omit this field to use the default directory. DO NOT enter \"undefined\" or \"null\" - simply omit it for the default behavior. Must be a valid directory path if provided."
              }
            },
            "required": [
              "pattern"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Grep",
          "description": "A powerful search tool built on ripgrep\n\n  Usage:\n  - ALWAYS use Grep for search tasks. NEVER invoke `grep` or `rg` as a Bash command. The Grep tool has been optimized for correct permissions and access.\n  - Supports full regex syntax (e.g., \"log.*Error\", \"function\\s+\\w+\")\n  - Filter files with glob parameter (e.g., \"*.js\", \"**/*.tsx\") or type parameter (e.g., \"js\", \"py\", \"rust\")\n  - Output modes: \"content\" shows matching lines, \"files_with_matches\" shows only file paths (default), \"count\" shows match counts\n  - Use Task tool for open-ended searches requiring multiple rounds\n  - Pattern syntax: Uses ripgrep (not grep) - literal braces need escaping (use `interface\\{\\}` to find `interface{}` in Go code)\n  - Multiline matching: By default patterns match within single lines only. For cross-line patterns like `struct \\{[\\s\\S]*?field`, use `multiline: true`\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "The regular expression pattern to search for in file contents"
              },
              "path": {
                "type": "string",
                "description": "File or directory to search in (rg PATH). Defaults to current working directory."
              },
              "glob": {
                "type": "string",
                "description": "Glob pattern to filter files (e.g. \"*.js\", \"*.{ts,tsx}\") - maps to rg --glob"
              },
              "output_mode": {
                "type": "string",
                "enum": [
                  "content",
                  "files_with_matches",
                  "count"
                ],
                "description": "Output mode: \"content\" shows matching lines (supports -A/-B/-C context, -n line numbers, head_limit), \"files_with_matches\" shows file paths (supports head_limit), \"count\" shows match counts (supports head_limit). Defaults to \"files_with_matches\"."
              },
              "-B": {
                "type": "number",
                "description": "Number of lines to show before each match (rg -B). Requires output_mode: \"content\", ignored otherwise."
              },
              "-A": {
                "type": "number",
                "description": "Number of lines to show after each match (rg -A). Requires output_mode: \"content\", ignored otherwise."
              },
              "-C": {
                "type": "number",
                "description": "Number of lines to show before and after each match (rg -C). Requires output_mode: \"content\", ignored otherwise."
              },
              "-n": {
                "type": "boolean",
                "description": "Show line numbers in output (rg -n). Requires output_mode: \"content\", ignored otherwise."
              },
              "-i": {
                "type": "boolean",
                "description": "Case insensitive search (rg -i)"
              },
              "type": {
                "type": "string",
                "description": "File type to search (rg --type). Common types: js, py, rust, go, java, etc. More efficient than include for standard file types."
              },
              "head_limit": {
                "type": "number",
                "description": "Limit output to first N lines/entries, equivalent to \"| head -N\". Works across all output modes: content (limits output lines), files_with_matches (limits file paths), count (limits count entries). When unspecified, shows all results from ripgrep."
              },
              "multiline": {
                "type": "boolean",
                "description": "Enable multiline mode where . matches newlines and patterns can span lines (rg -U --multiline-dotall). Default: false."
              }
            },
            "required": [
              "pattern"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "LS",
          "description": "Lists files and directories in a given path. The path parameter must be an absolute path, not a relative path. You can optionally provide an array of glob patterns to ignore with the ignore parameter. You should generally prefer the Glob and Grep tools, if you know which directories to search.",
          "input_schema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "The absolute path to the directory to list (must be absolute, not relative)"
              },
              "ignore": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of glob patterns to ignore"
              }
            },
            "required": [
              "path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "ExitPlanMode",
          "description": "Use this tool when you are in plan mode and have finished presenting your plan and are ready to code. This will prompt the user to exit plan mode.\nIMPORTANT: Only use this tool when the task requires planning the implementation steps of a task that requires writing code. For research tasks where you're gathering information, searching files, reading files or in general trying to understand the codebase - do NOT use this tool.\n\nEg.\n1. Initial task: \"Search for and understand the implementation of vim mode in the codebase\" - Do not use the exit plan mode tool because you are not planning the implementation steps of a task.\n2. Initial task: \"Help me implement yank mode for vim\" - Use the exit plan mode tool after you have finished planning the implementation steps of the task.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "plan": {
                "type": "string",
                "description": "The plan you came up with, that you want to run by the user for approval. Supports markdown. The plan should be pretty concise."
              }
            },
            "required": [
              "plan"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Read",
          "description": "Reads a file from the local filesystem. You can access any file directly by using this tool.\nAssume this tool is able to read all files on the machine. If the User provides a path to a file assume that path is valid. It is okay to read a file that does not exist; an error will be returned.\n\nUsage:\n- The file_path parameter must be an absolute path, not a relative path\n- By default, it reads up to 2000 lines starting from the beginning of the file\n- You can optionally specify a line offset and limit (especially handy for long files), but it's recommended to read the whole file by not providing these parameters\n- Any lines longer than 2000 characters will be truncated\n- Results are returned using cat -n format, with line numbers starting at 1\n- This tool allows Claude Code to read images (eg PNG, JPG, etc). When reading an image file the contents are presented visually as Claude Code is a multimodal LLM.\n- This tool can read PDF files (.pdf). PDFs are processed page by page, extracting both text and visual content for analysis.\n- For Jupyter notebooks (.ipynb files), use the NotebookRead instead\n- You have the capability to call multiple tools in a single response. It is always better to speculatively read multiple files as a batch that are potentially useful.\n- You will regularly be asked to read screenshots. If the user provides a path to a screenshot ALWAYS use this tool to view the file at the path. This tool will work with all temporary file paths like /var/folders/123/abc/T/TemporaryItems/NSIRD_screencaptureui_ZfB1tD/Screenshot.png\n- If you read a file that exists but has empty contents you will receive a system reminder warning in place of file contents.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to read"
              },
              "offset": {
                "type": "number",
                "description": "The line number to start reading from. Only provide if the file is too large to read at once"
              },
              "limit": {
                "type": "number",
                "description": "The number of lines to read. Only provide if the file is too large to read at once."
              }
            },
            "required": [
              "file_path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Edit",
          "description": "Performs exact string replacements in files.\n\nUsage:\n- You must use your `Read` tool at least once in the conversation before editing. This tool will error if you attempt an edit without reading the file.\n- When editing text from Read tool output, ensure you preserve the exact indentation (tabs/spaces) as it appears AFTER the line number prefix. The line number prefix format is: spaces + line number + tab. Everything after that tab is the actual file content to match. Never include any part of the line number prefix in the old_string or new_string.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- Only use emojis if the user explicitly requests it. Avoid adding emojis to files unless asked.\n- The edit will FAIL if `old_string` is not unique in the file. Either provide a larger string with more surrounding context to make it unique or use `replace_all` to change every instance of `old_string`.\n- Use `replace_all` for replacing and renaming strings across the file. This parameter is useful if you want to rename a variable for instance.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to modify"
              },
              "old_string": {
                "type": "string",
                "description": "The text to replace"
              },
              "new_string": {
                "type": "string",
                "description": "The text to replace it with (must be different from old_string)"
              },
              "replace_all": {
                "type": "boolean",
                "default": false,
                "description": "Replace all occurences of old_string (default false)"
              }
            },
            "required": [
              "file_path",
              "old_string",
              "new_string"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "MultiEdit",
          "description": "This is a tool for making multiple edits to a single file in one operation. It is built on top of the Edit tool and allows you to perform multiple find-and-replace operations efficiently. Prefer this tool over the Edit tool when you need to make multiple edits to the same file.\n\nBefore using this tool:\n\n1. Use the Read tool to understand the file's contents and context\n2. Verify the directory path is correct\n\nTo make multiple file edits, provide the following:\n1. file_path: The absolute path to the file to modify (must be absolute, not relative)\n2. edits: An array of edit operations to perform, where each edit contains:\n   - old_string: The text to replace (must match the file contents exactly, including all whitespace and indentation)\n   - new_string: The edited text to replace the old_string\n   - replace_all: Replace all occurences of old_string. This parameter is optional and defaults to false.\n\nIMPORTANT:\n- All edits are applied in sequence, in the order they are provided\n- Each edit operates on the result of the previous edit\n- All edits must be valid for the operation to succeed - if any edit fails, none will be applied\n- This tool is ideal when you need to make several changes to different parts of the same file\n- For Jupyter notebooks (.ipynb files), use the NotebookEdit instead\n\nCRITICAL REQUIREMENTS:\n1. All edits follow the same requirements as the single Edit tool\n2. The edits are atomic - either all succeed or none are applied\n3. Plan your edits carefully to avoid conflicts between sequential operations\n\nWARNING:\n- The tool will fail if edits.old_string doesn't match the file contents exactly (including whitespace)\n- The tool will fail if edits.old_string and edits.new_string are the same\n- Since edits are applied in sequence, ensure that earlier edits don't affect the text that later edits are trying to find\n\nWhen making edits:\n- Ensure all edits result in idiomatic, correct code\n- Do not leave the code in a broken state\n- Always use absolute file paths (starting with /)\n- Only use emojis if the user explicitly requests it. Avoid adding emojis to files unless asked.\n- Use replace_all for replacing and renaming strings across the file. This parameter is useful if you want to rename a variable for instance.\n\nIf you want to create a new file, use:\n- A new file path, including dir name if needed\n- First edit: empty old_string and the new file's contents as new_string\n- Subsequent edits: normal edit operations on the created content",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to modify"
              },
              "edits": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "old_string": {
                      "type": "string",
                      "description": "The text to replace"
                    },
                    "new_string": {
                      "type": "string",
                      "description": "The text to replace it with"
                    },
                    "replace_all": {
                      "type": "boolean",
                      "default": false,
                      "description": "Replace all occurences of old_string (default false)."
                    }
                  },
                  "required": [
                    "old_string",
                    "new_string"
                  ],
                  "additionalProperties": false
                },
                "minItems": 1,
                "description": "Array of edit operations to perform sequentially on the file"
              }
            },
            "required": [
              "file_path",
              "edits"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Write",
          "description": "Writes a file to the local filesystem.\n\nUsage:\n- This tool will overwrite the existing file if there is one at the provided path.\n- If this is an existing file, you MUST use the Read tool first to read the file's contents. This tool will fail if you did not read the file first.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- NEVER proactively create documentation files (*.md) or README files. Only create documentation files if explicitly requested by the User.\n- Only use emojis if the user explicitly requests it. Avoid writing emojis to files unless asked.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to write (must be absolute, not relative)"
              },
              "content": {
                "type": "string",
                "description": "The content to write to the file"
              }
            },
            "required": [
              "file_path",
              "content"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "NotebookRead",
          "description": "Reads a Jupyter notebook (.ipynb file) and returns all of the cells with their outputs. Jupyter notebooks are interactive documents that combine code, text, and visualizations, commonly used for data analysis and scientific computing. The notebook_path parameter must be an absolute path, not a relative path.",
          "input_schema": {
            "type": "object",
            "properties": {
              "notebook_path": {
                "type": "string",
                "description": "The absolute path to the Jupyter notebook file to read (must be absolute, not relative)"
              },
              "cell_id": {
                "type": "string",
                "description": "The ID of a specific cell to read. If not provided, all cells will be read."
              }
            },
            "required": [
              "notebook_path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "NotebookEdit",
          "description": "Completely replaces the contents of a specific cell in a Jupyter notebook (.ipynb file) with new source. Jupyter notebooks are interactive documents that combine code, text, and visualizations, commonly used for data analysis and scientific computing. The notebook_path parameter must be an absolute path, not a relative path. The cell_number is 0-indexed. Use edit_mode=insert to add a new cell at the index specified by cell_number. Use edit_mode=delete to delete the cell at the index specified by cell_number.",
          "input_schema": {
            "type": "object",
            "properties": {
              "notebook_path": {
                "type": "string",
                "description": "The absolute path to the Jupyter notebook file to edit (must be absolute, not relative)"
              },
              "cell_id": {
                "type": "string",
                "description": "The ID of the cell to edit. When inserting a new cell, the new cell will be inserted after the cell with this ID, or at the beginning if not specified."
              },
              "new_source": {
                "type": "string",
                "description": "The new source for the cell"
              },
              "cell_type": {
                "type": "string",
                "enum": [
                  "code",
                  "markdown"
                ],
                "description": "The type of the cell (code or markdown). If not specified, it defaults to the current cell type. If using edit_mode=insert, this is required."
              },
              "edit_mode": {
                "type": "string",
                "enum": [
                  "replace",
                  "insert",
                  "delete"
                ],
                "description": "The type of edit to make (replace, insert, delete). Defaults to replace."
              }
            },
            "required": [
              "notebook_path",
              "new_source"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "WebFetch",
          "description": "\n- Fetches content from a specified URL and processes it using an AI model\n- Takes a URL and a prompt as input\n- Fetches the URL content, converts HTML to markdown\n- Processes the content with the prompt using a small, fast model\n- Returns the model's response about the content\n- Use this tool when you need to retrieve and analyze web content\n\nUsage notes:\n  - IMPORTANT: If an MCP-provided web fetch tool is available, prefer using that tool instead of this one, as it may have fewer restrictions. All MCP-provided tools start with \"mcp__\".\n  - The URL must be a fully-formed valid URL\n  - HTTP URLs will be automatically upgraded to HTTPS\n  - The prompt should describe what information you want to extract from the page\n  - This tool is read-only and does not modify any files\n  - Results may be summarized if the content is very large\n  - Includes a self-cleaning 15-minute cache for faster responses when repeatedly accessing the same URL\n  - When a URL redirects to a different host, the tool will inform you and provide the redirect URL in a special format. You should then make a new WebFetch request with the redirect URL to fetch the content.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "format": "uri",
                "description": "The URL to fetch content from"
              },
              "prompt": {
                "type": "string",
                "description": "The prompt to run on the fetched content"
              }
            },
            "required": [
              "url",
              "prompt"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "TodoWrite",
          "description": "Use this tool to create and manage a structured task list for your current coding session. This helps you track progress, organize complex tasks, and demonstrate thoroughness to the user.\nIt also helps the user understand the progress of the task and overall progress of their requests.\n\n## When to Use This Tool\nUse this tool proactively in these scenarios:\n\n1. Complex multi-step tasks - When a task requires 3 or more distinct steps or actions\n2. Non-trivial and complex tasks - Tasks that require careful planning or multiple operations\n3. User explicitly requests todo list - When the user directly asks you to use the todo list\n4. User provides multiple tasks - When users provide a list of things to be done (numbered or comma-separated)\n5. After receiving new instructions - Immediately capture user requirements as todos\n6. When you start working on a task - Mark it as in_progress BEFORE beginning work. Ideally you should only have one todo as in_progress at a time\n7. After completing a task - Mark it as completed and add any new follow-up tasks discovered during implementation\n\n## When NOT to Use This Tool\n\nSkip using this tool when:\n1. There is only a single, straightforward task\n2. The task is trivial and tracking it provides no organizational benefit\n3. The task can be completed in less than 3 trivial steps\n4. The task is purely conversational or informational\n\nNOTE that you should not use this tool if there is only one trivial task to do. In this case you are better off just doing the task directly.\n\n## Examples of When to Use the Todo List\n\n<example>\nUser: I want to add a dark mode toggle to the application settings. Make sure you run the tests and build when you're done!\nAssistant: I'll help add a dark mode toggle to your application settings. Let me create a todo list to track this implementation.\n*Creates todo list with the following items:*\n1. Create dark mode toggle component in Settings page\n2. Add dark mode state management (context/store)\n3. Implement CSS-in-JS styles for dark theme\n4. Update existing components to support theme switching\n5. Run tests and build process, addressing any failures or errors that occur\n*Begins working on the first task*\n\n<reasoning>\nThe assistant used the todo list because:\n1. Adding dark mode is a multi-step feature requiring UI, state management, and styling changes\n2. The user explicitly requested tests and build be run afterward\n3. The assistant inferred that tests and build need to pass by adding \"Ensure tests and build succeed\" as the final task\n</reasoning>\n</example>\n\n<example>\nUser: Help me rename the function getCwd to getCurrentWorkingDirectory across my project\nAssistant: Let me first search through your codebase to find all occurrences of 'getCwd'.\n*Uses grep or search tools to locate all instances of getCwd in the codebase*\nAssistant: I've found 15 instances of 'getCwd' across 8 different files. Let me create a todo list to track these changes.\n*Creates todo list with specific items for each file that needs updating*\n\n<reasoning>\nThe assistant used the todo list because:\n1. First, the assistant searched to understand the scope of the task\n2. Upon finding multiple occurrences across different files, it determined this was a complex task with multiple steps\n3. The todo list helps ensure every instance is tracked and updated systematically\n4. This approach prevents missing any occurrences and maintains code consistency\n</reasoning>\n</example>\n\n\n<example>\nUser: I need to implement these features for my e-commerce site: user registration, product catalog, shopping cart, and checkout flow.\nAssistant: I'll help implement these features. First, let's add all the features to the todo list.\n*Creates a todo list breaking down each feature into specific tasks based on the project architecture*\nAssistant: Let's start with user registration. This will involve creating database models, API endpoints, and frontend forms that integrate with your existing authentication system.\n\n<reasoning>\nThe assistant used the todo list because:\n1. The user provided multiple complex features to implement in a comma separated list\n2. The todo list helps organize these large features into manageable tasks\n3. This approach allows for tracking progress across the entire implementation\n</reasoning>\n</example>\n\n<example>\nUser: Can you help optimize my React application? It's rendering slowly and has performance issues.</user>\nAssistant: I'll help optimize your React application. First, let me examine your codebase to identify potential performance bottlenecks.\n*Reviews component structure, render patterns, state management, and data fetching*\nAssistant: After analyzing your codebase, I've identified several performance issues. Let me create a todo list to track our optimization efforts.\n*Creates todo list with items like: 1) Implement memoization for expensive calculations in ProductList, 2) Add virtualization for long lists in Dashboard, 3) Optimize image loading in Gallery component, 4) Fix state update loops in ShoppingCart, 5) Review bundle size and implement code splitting*\nLet's start by implementing memoization for the expensive calculations in your ProductList component.</assistant>\n\n<reasoning>\nThe assistant used the todo list because:\n1. First, the assistant examined the codebase to identify specific performance issues\n2. Based on this analysis, it identified multiple optimization opportunities\n3. Performance optimization is a non-trivial task requiring multiple steps\n4. The todo list helps methodically track improvements across different components\n5. This systematic approach ensures all performance bottlenecks are addressed\n</reasoning>\n</example>\n\n## Examples of When NOT to Use the Todo List\n\n<example>\nUser: How do I print 'Hello World' in Python?\nAssistant: In Python, you can print \"Hello World\" with this simple code:\n\npython\nprint(\"Hello World\")\n\nThis will output the text \"Hello World\" to the console when executed.</assistant>\n\n<reasoning>\nThe assistant did not use the todo list because this is a single, trivial task that can be completed in one step. There's no need to track multiple tasks or steps for such a straightforward request.\n</reasoning>\n</example>\n\n<example>\nUser: What does the git status command do?\nAssistant: The git status command shows the current state of your working directory and staging area. It displays which changes have been staged, which haven't, and which files aren't being tracked by Git. This is a fundamental command for understanding the current state of your repository before making commits.\n\n<reasoning>\nThe assistant did not use the todo list because this is an informational request with no actual coding task to complete. The user is simply asking for an explanation, not for the assistant to perform multiple steps or tasks.\n</reasoning>\n</example>\n\n<example>\nUser: Can you add a comment to the calculateTotal function to explain what it does?\nAssistant: Sure, let me add a comment to the calculateTotal function to explain what it does.\n* Uses the Edit tool to add a comment to the calculateTotal function *\n\n<reasoning>\nThe assistant did not use the todo list because this is a single, straightforward task confined to one location in the code. Adding a comment doesn't require tracking multiple steps or systematic organization.\n</reasoning>\n</example>\n\n<example>\nUser: Run npm install for me and tell me what happens.\nAssistant: I'll run the npm install command for you.\n\n*Executes: npm install*\n\nThe command completed successfully. Here's the output:\n[Output of npm install command]\n\nAll dependencies have been installed according to your package.json file.\n\n<reasoning>\nThe assistant did not use the todo list because this is a single command execution with immediate results. There are no multiple steps to track or organize, making the todo list unnecessary for this straightforward task.\n</reasoning>\n</example>\n\n## Task States and Management\n\n1. **Task States**: Use these states to track progress:\n   - pending: Task not yet started\n   - in_progress: Currently working on (limit to ONE task at a time)\n   - completed: Task finished successfully\n\n2. **Task Management**:\n   - Update task status in real-time as you work\n   - Mark tasks complete IMMEDIATELY after finishing (don't batch completions)\n   - Only have ONE task in_progress at any time\n   - Complete current tasks before starting new ones\n   - Remove tasks that are no longer relevant from the list entirely\n\n3. **Task Completion Requirements**:\n   - ONLY mark a task as completed when you have FULLY accomplished it\n   - If you encounter errors, blockers, or cannot finish, keep the task as in_progress\n   - When blocked, create a new task describing what needs to be resolved\n   - Never mark a task as completed if:\n     - Tests are failing\n     - Implementation is partial\n     - You encountered unresolved errors\n     - You couldn't find necessary files or dependencies\n\n4. **Task Breakdown**:\n   - Create specific, actionable items\n   - Break complex tasks into smaller, manageable steps\n   - Use clear, descriptive task names\n\nWhen in doubt, use this tool. Being proactive with task management demonstrates attentiveness and ensures you complete all requirements successfully.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "todos": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "content": {
                      "type": "string",
                      "minLength": 1
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "pending",
                        "in_progress",
                        "completed"
                      ]
                    },
                    "priority": {
                      "type": "string",
                      "enum": [
                        "high",
                        "medium",
                        "low"
                      ]
                    },
                    "id": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "content",
                    "status",
                    "priority",
                    "id"
                  ],
                  "additionalProperties": false
                },
                "description": "The updated todo list"
              }
            },
            "required": [
              "todos"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "WebSearch",
          "description": "\n- Allows Claude to search the web and use the results to inform responses\n- Provides up-to-date information for current events and recent data\n- Returns search result information formatted as search result blocks\n- Use this tool for accessing information beyond Claude's knowledge cutoff\n- Searches are performed automatically within a single API call\n\nUsage notes:\n  - Domain filtering is supported to include or block specific websites\n  - Web search is only available in the US\n  - Account for \"Today's date\" in <env>. For example, if <env> says \"Today's date: 2025-07-01\", and the user wants the latest docs, do not use 2024 in the search query. Use 2025.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "minLength": 2,
                "description": "The search query to use"
              },
              "allowed_domains": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Only include search results from these domains"
              },
              "blocked_domains": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Never include search results from these domains"
              }
            },
            "required": [
              "query"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        }
      ],
      "responseStructure": {
        "type": "object",
        "keys": [
          "id",
          "object",
          "created",
          "model",
          "choices",
          "usage",
          "stats",
          "system_fingerprint"
        ],
        "hasChoices": true,
        "hasContent": false,
        "hasUsage": true,
        "choicesCount": 1,
        "firstChoice": {
          "hasMessage": true,
          "hasToolCalls": false,
          "finishReason": "stop"
        }
      },
      "parsingAttempts": [
        "json_format",
        "function_call",
        "action_format",
        "natural_language"
      ]
    }
  },
  {
    "timestamp": "2025-08-10T06:53:58.559Z",
    "requestId": "session_1754804126703_ixall6oy5:conv_1754804126703_sm1ur5dvo:19:1754808825104:5znh",
    "provider": "lmstudio",
    "model": "gpt-oss-20b-mlx",
    "endpoint": "localhost:1234",
    "failureType": "text_instead_of_tools",
    "originalResponse": {
      "id": "chatcmpl-8vq5ytvvugiiih46s7sss",
      "object": "chat.completion",
      "created": 1754808825,
      "model": "gpt-oss-20b-mlx",
      "choices": [
        {
          "index": 0,
          "logprobs": null,
          "finish_reason": "stop",
          "message": {
            "role": "assistant",
            "content": "The user just ran a command and provided output. Likely they want to do something with these markdown files? The prompt: \"Command: find . -type f -name \"*.md\" Output: ...\" They might want to list or process. We need to respond appropriately. Maybe they want to see the content of a specific file? Or ask for something else. The user didn't specify a question. They just gave command and output. We need to ask clarifying question or provide next steps? According to guidelines, we should respond with a helpful action. We could ask what they want next: e.g., \"Would you like to view a specific file?\" Or maybe they want to create a table of contents? We can propose summarizing the markdown files. Let's ask clarifying question.It looks like you’ve listed all the Markdown files in the repository.  \nWhat would you like to do next? For example:\n\n- View or edit a specific file (just give the path).  \n- Generate a table‑of‑contents for all these files.  \n- Search within the Markdown content for a pa... [truncated]"
          }
        }
      ],
      "usage": {
        "prompt_tokens": 12916,
        "completion_tokens": 241,
        "total_tokens": 13157
      },
      "stats": {},
      "system_fingerprint": "gpt-oss-20b-mlx"
    },
    "expectedFormat": "openai",
    "errorMessage": "All parsing strategies failed",
    "responseAnalysis": {
      "hasToolCalls": false,
      "hasContent": true,
      "contentLength": 1087,
      "contentPreview": "The user just ran a command and provided output. Likely they want to do something with these markdown files? The prompt: \"Command: find . -type f -name \"*.md\" Output: ...\" They might want to list or p",
      "finishReason": "stop",
      "toolCallPatterns": []
    },
    "debugInfo": {
      "requestTools": [
        {
          "name": "Task",
          "description": "Launch a new agent to handle complex, multi-step tasks autonomously.\n\nAvailable agent types and the tools they have access to:\n- general-purpose: General-purpose agent for researching complex questions, searching for code, and executing multi-step tasks. When you are searching for a keyword or file and are not confident that you will find the right match in the first few tries use this agent to perform the search for you. (Tools: *)\n- code-refactorer: Use this agent when you need to improve existing code structure, readability, or maintainability without changing functionality. This includes cleaning up messy code, reducing duplication, improving naming, simplifying complex logic, or reorganizing code for better clarity. Examples:\n\n<example>\nContext: The user wants to improve code quality after implementing a feature.\nuser: \"I just finished implementing the user authentication system. Can you help clean it up?\"\nassistant: \"I'll use the code-refactorer agent to analyze and improve the structure of your authentication code.\"\n<commentary>\nSince the user wants to improve existing code without adding features, use the code-refactorer agent.\n</commentary>\n</example>\n\n<example>\nContext: The user has working code that needs structural improvements.\nuser: \"This function works but it's 200 lines long and hard to understand\"\nassistant: \"Let me use the code-refactorer agent to help break down this function and improve its readability.\"\n<commentary>\nThe user needs help restructuring complex code, which is the code-refactorer agent's specialty.\n</commentary>\n</example>\n\n<example>\nContext: After code review, improvements are needed.\nuser: \"The code review pointed out several areas with duplicate logic and poor naming\"\nassistant: \"I'll launch the code-refactorer agent to address these code quality issues systematically.\"\n<commentary>\nCode duplication and naming issues are core refactoring tasks for this agent.\n</commentary>\n</example> (Tools: Edit, MultiEdit, Write, NotebookEdit, Grep, LS, Read)\n- project-task-planner: Use this agent when you need to create a comprehensive development task list from a Product Requirements Document (PRD). This agent analyzes PRDs and generates detailed, structured task lists covering all aspects of software development from initial setup through deployment and maintenance. Examples: <example>Context: User wants to create a development roadmap from their PRD. user: \"I have a PRD for a new e-commerce platform. Can you create a task list?\" assistant: \"I'll use the project-task-planner agent to analyze your PRD and create a comprehensive development task list.\" <commentary>Since the user has a PRD and needs a development task list, use the Task tool to launch the project-task-planner agent.</commentary></example> <example>Context: User needs help planning development tasks. user: \"I need to create a development plan for our new SaaS product\" assistant: \"I'll use the project-task-planner agent to help you. First, I'll need to see your Product Requirements Document (PRD).\" <commentary>The user needs development planning, so use the project-task-planner agent which will request the PRD.</commentary></example> (Tools: Task, Bash, Edit, MultiEdit, Write, NotebookEdit, Grep, LS, Read, ExitPlanMode, TodoWrite, WebSearch)\n- vibe-coding-coach: Use this agent when users want to build applications through conversation, focusing on the vision and feel of their app rather than technical implementation details. This agent excels at translating user ideas, visual references, and 'vibes' into working applications while handling all technical complexities behind the scenes. <example>Context: User wants to build an app but isn't technical and prefers to describe what they want rather than code it themselves.\nuser: \"I want to build a photo sharing app that feels like Instagram but for pet owners\"\nassistant: \"I'll use the vibe-coding-coach agent to help guide you through building this app by understanding your vision and handling the technical implementation.\"\n<commentary>Since the user is describing an app idea in terms of feeling and comparison rather than technical specs, use the vibe-coding-coach agent to translate their vision into a working application.</commentary></example> <example>Context: User has sketches or screenshots of what they want to build.\nuser: \"Here's a screenshot of an app I like. Can we build something similar but for tracking workouts?\"\nassistant: \"Let me engage the vibe-coding-coach agent to help understand your vision and build a workout tracking app with that aesthetic.\"\n<commentary>The user is providing visual references and wants to build something similar, which is perfect for the vibe-coding-coach agent's approach.</commentary></example> (Tools: *)\n- debug-system-architect: Use this agent when you need to establish a comprehensive debug logging system for a project. This includes setting up log directories, implementing node-level tracing, creating time-based test records, establishing replay mechanisms, and documenting debug rules. Example: <example> Context: User is setting up a new project and wants to implement proper debugging infrastructure from the start. user: \"Please help me set up a debug system for my new API router project\" <commentary> Since the user is requesting debug system setup, use the debug-system-architect agent to analyze the project and implement comprehensive logging and tracing mechanisms. </commentary> </example> <example> Context: User encounters intermittent issues in their routing system and needs better visibility. user: \"I'm having trouble tracking down why some requests fail intermittently\" <commentary> Since the user needs better debugging visibility for intermittent issues, use the debug-system-architect agent to implement node-level tracing and replay mechanisms. </commentary> </example> (Tools: *)\n- code-risk-auditor: Use this agent when you need to perform comprehensive code risk assessment and identify potential architectural issues in your codebase. Examples: <example>Context: The user has just completed a major refactoring and wants to ensure no hardcoded values or fallback mechanisms were introduced. user: \"I just finished refactoring the routing system, can you check for any code risks?\" assistant: \"I'll use the code-risk-auditor agent to perform a comprehensive risk assessment of your routing system changes.\"</example> <example>Context: Before a major release, the user wants to clean up technical debt and ensure code quality. user: \"We're preparing for v2.0 release, I need a full code audit\" assistant: \"Let me launch the code-risk-auditor agent to identify hardcoding, fallback risks, outdated tests, and duplicate implementations across the entire codebase.\"</example> <example>Context: The user notices inconsistent behavior and suspects duplicate implementations. user: \"The same feature seems to be implemented in multiple places, causing bugs\" assistant: \"I'll use the code-risk-auditor agent to scan for duplicate implementations and provide a consolidation plan.\"</example> (Tools: *)\n- security-auditor: Use this agent when you need to perform a comprehensive security audit of a codebase, identify vulnerabilities, and generate a detailed security report with actionable remediation steps. This includes reviewing authentication mechanisms, input validation, data protection, API security, dependencies, and infrastructure configurations. Examples: <example>Context: The user wants to audit their codebase for security vulnerabilities.\nuser: \"Can you perform a security audit of my application?\"\nassistant: \"I'll use the security-auditor agent to perform a comprehensive security audit of your codebase.\"\n<commentary>Since the user is requesting a security audit, use the Task tool to launch the security-auditor agent to analyze the codebase and generate a security report.</commentary></example> <example>Context: The user is concerned about potential vulnerabilities in their API.\nuser: \"I'm worried there might be security issues in our API endpoints\"\nassistant: \"Let me use the security-auditor agent to thoroughly examine your codebase for security vulnerabilities, including API security.\"\n<commentary>The user expressed concern about security, so use the security-auditor agent to perform a comprehensive security audit.</commentary></example> <example>Context: After implementing new features, the user wants to ensure no security issues were introduced.\nuser: \"We just added user authentication to our app. Can you check if it's secure?\"\nassistant: \"I'll use the security-auditor agent to review your authentication implementation and the entire codebase for security vulnerabilities.\"\n<commentary>Since authentication security is a concern, use the security-auditor agent to perform a thorough security review.</commentary></example> (Tools: Task, Bash, Edit, MultiEdit, Write, NotebookEdit)\n- project-memory-manager: Use this agent when you need to manage project-specific memory entries, create project documentation, or organize project knowledge. This includes creating project summaries, documenting project decisions, tracking project progress, and maintaining project-specific knowledge bases. <example>Context: User wants to document a project decision or create project documentation. user: \"请为我们的新项目创建一个内存管理系统的文档\" assistant: \"我将使用 project-memory-manager agent 来创建这个项目文档\" <commentary>Since the user needs project documentation, use the project-memory-manager agent to create project-specific memory entries.</commentary></example> <example>Context: User wants to track project progress or decisions. user: \"我们需要记录这个项目的关键决策点\" assistant: \"让我使用 project-memory-manager agent 来记录这些项目决策\" <commentary>Since this is project tracking, use the project-memory-manager agent to create decision-type memory entries.</commentary></example> (Tools: *)\n- rules-architect: Use this agent when you need to analyze project architecture and establish comprehensive rule management systems. Examples: <example>Context: User wants to organize project rules and create a structured rule management system. user: \"I need to reorganize our project rules and create a better structure for managing coding standards, file organization, and testing protocols\" assistant: \"I'll use the rules-architect agent to analyze the current project structure and establish a comprehensive rule management system with proper categorization and organization.\"</example> <example>Context: Project has grown complex and needs better rule organization. user: \"Our CLAUDE.md file is getting too large and we need to break down rules into manageable categories\" assistant: \"Let me call the rules-architect agent to create a structured .claude/rules system that will organize all project rules into logical categories.\"</example> (Tools: *)\n- frontend-designer: Use this agent when you need to convert design mockups, wireframes, or visual concepts into detailed technical specifications and implementation guides for frontend development. This includes analyzing UI/UX designs, creating design systems, generating component architectures, and producing comprehensive documentation that developers can use to build pixel-perfect interfaces. Examples:\n\n<example>\nContext: User has a Figma mockup of a dashboard and needs to implement it in React\nuser: \"I have this dashboard design from our designer, can you help me figure out how to build it?\"\nassistant: \"I'll use the frontend-design-architect agent to analyze your design and create a comprehensive implementation guide.\"\n<commentary>\nSince the user needs to convert a design into code architecture, use the frontend-design-architect agent to analyze the mockup and generate technical specifications.\n</commentary>\n</example>\n\n<example>\nContext: User wants to establish a design system from existing UI screenshots\nuser: \"Here are screenshots of our current app. We need to extract a consistent design system from these.\"\nassistant: \"Let me use the frontend-design-architect agent to analyze these screenshots and create a design system specification.\"\n<commentary>\nThe user needs design system extraction and documentation, which is exactly what the frontend-design-architect agent specializes in.\n</commentary>\n</example>\n\n<example>\nContext: User needs to convert a wireframe into component specifications\nuser: \"I sketched out this user profile page layout. How should I structure the components?\"\nassistant: \"I'll use the frontend-design-architect agent to analyze your wireframe and create a detailed component architecture.\"\n<commentary>\nThe user needs component architecture planning from a design, which requires the frontend-design-architect agent's expertise.\n</commentary>\n</example> (Tools: *)\n- content-writer: Use this agent when you need to create compelling, informative content that explains complex topics in simple terms. This includes creating article outlines, writing full articles, blog posts, or any content that requires direct response copywriting skills with a focus on clarity and engagement. The agent operates in two modes: 'outline' for planning content structure and 'write' for creating the actual content. Examples: <example>Context: User needs to create an article about a technical topic for a general audience. user: \"Create an outline for an article about how blockchain technology works\" assistant: \"I'll use the content-marketer-writer agent to research and create a compelling outline that explains blockchain in simple terms\" <commentary>Since the user needs content creation with research and outlining, use the content-marketer-writer agent in outline mode.</commentary></example> <example>Context: User has an outline and needs to write the full article. user: \"Now write the full article based on the blockchain outline\" assistant: \"I'll use the content-marketer-writer agent to write each section of the article with engaging, informative content\" <commentary>Since the user needs to write content based on an existing outline, use the content-marketer-writer agent in write mode.</commentary></example> (Tools: *)\n- test-runner: Use this agent to run and manage tests according to the global and project-specific testing rules. This includes executing test scripts, documenting test results, and helping to diagnose issues following the standard pipeline. <example>Context: User wants to run all functional tests. user: \"运行所有功能测试\" assistant: \"我将使用 test-runner agent 来执行所有功能测试\" <commentary>Since the user wants to run tests by category, use the test-runner agent.</commentary></example> <example>Context: User wants to verify a bug fix. user: \"我修复了一个bug，帮我验证一下\" assistant: \"让我使用 test-runner agent 来执行对应的修复验证测试\" <commentary>The user needs to verify a fix, which is a core task for the test-runner agent.</commentary></example> (Tools: *)\n- in-depth-research-analyst: Use this agent when you need to conduct comprehensive research reports with in-depth web mining, data analysis, and visualization. This includes industry analysis, market research, competitive intelligence, and trend forecasting with accurate data from authoritative sources. <example>Context: User wants a comprehensive industry analysis report. user: \"请对人工智能芯片市场进行深入调研，包括主要厂商、市场份额和增长趋势\" assistant: \"我将使用 in-depth-research-analyst agent 来进行这项深入的市场调研并生成可视化报告\" <commentary>Since the user needs a comprehensive industry analysis with data visualization, use the in-depth-research-analyst agent to conduct thorough research and create an integrated report.</commentary></example> <example>Context: User wants market research with accurate data and visualizations. user: \"我们需要一份关于电动汽车充电基础设施的深度报告，包含数据图表\" assistant: \"让我使用 in-depth-research-analyst agent 来收集准确数据并生成图文并茂的分析报告\" <commentary>Since this requires market research with data accuracy and visualizations, use the in-depth-research-analyst agent to create a comprehensive report.</commentary></example> (Tools: *)\n- prd-writer: Use this agent when you need to create a comprehensive Product Requirements Document (PRD) for a software project or feature. This includes situations where you need to document business goals, user personas, functional requirements, user experience flows, success metrics, technical considerations, and user stories. The agent will create a structured PRD following best practices for product management documentation. Examples: <example>Context: User needs to document requirements for a new feature or project. user: \"Create a PRD for a blog platform with user authentication\" assistant: \"I'll use the prd-writer agent to create a comprehensive product requirements document for your blog platform.\" <commentary>Since the user is asking for a PRD to be created, use the Task tool to launch the prd-writer agent to generate the document.</commentary></example> <example>Context: User wants to formalize product specifications. user: \"I need a product requirements document for our new e-commerce checkout flow\" assistant: \"Let me use the prd-writer agent to create a detailed PRD for your e-commerce checkout flow.\" <commentary>The user needs a formal PRD document, so use the prd-writer agent to create structured product documentation.</commentary></example> (Tools: Task, Bash, Grep, LS, Read, Write, WebSearch, Glob)\n- pipeline-debug-universal: Use this agent when you need to implement comprehensive debug hooks and testing infrastructure for ANY pipeline system - whether it's API routing, data processing, CI/CD workflows, or transformation pipelines. This agent specializes in creating universal debug architectures that work across different pipeline types with data capture, replay capabilities, and systematic testing matrices. Examples: <example>Context: User is working on a multi-provider API routing system and needs to add debug capabilities to track data flow through each pipeline step. user: \"I need to add debug hooks to our routing pipeline so we can capture and replay data at each step\" assistant: \"I'll use the pipeline-debug-universal agent to design a comprehensive debug infrastructure with data capture and replay capabilities\" <commentary>Since the user needs pipeline debugging infrastructure, use the pipeline-debug-universal agent to create debug hooks and testing matrices.</commentary></example> <example>Context: User has a complex data transformation pipeline and wants to build systematic testing for each stage and provider. user: \"Our data processing pipeline has issues and we need better testing infrastructure to isolate problems at each step\" assistant: \"Let me use the pipeline-debug-universal agent to create a complete testing matrix and debug system\" <commentary>Since the user needs systematic pipeline testing infrastructure, use the pipeline-debug-universal agent to architect the testing system.</commentary></example> <example>Context: User is building a CI/CD pipeline and needs to implement debug capabilities for tracking deployment issues. user: \"Our deployment pipeline fails randomly and we can't reproduce the issues consistently\" assistant: \"I'll deploy the pipeline-debug-universal agent to create comprehensive debug hooks and replay capabilities for your CI/CD pipeline\" <commentary>Since the user needs debug infrastructure for a deployment pipeline, use the pipeline-debug-universal agent to design the debug system.</commentary></example> (Tools: *)\n\nWhen using the Task tool, you must specify a subagent_type parameter to select which agent type to use.\n\n\n\nWhen NOT to use the Agent tool:\n- If you want to read a specific file path, use the Read or Glob tool instead of the Agent tool, to find the match more quickly\n- If you are searching for a specific class definition like \"class Foo\", use the Glob tool instead, to find the match more quickly\n- If you are searching for code within a specific file or set of 2-3 files, use the Read tool instead of the Agent tool, to find the match more quickly\n- Other tasks that are not related to the agent descriptions above\n\n\nUsage notes:\n1. Launch multiple agents concurrently whenever possible, to maximize performance; to do that, use a single message with multiple tool uses\n2. When the agent is done, it will return a single message back to you. The result returned by the agent is not visible to the user. To show the user the result, you should send a text message back to the user with a concise summary of the result.\n3. Each agent invocation is stateless. You will not be able to send additional messages to the agent, nor will the agent be able to communicate with you outside of its final report. Therefore, your prompt should contain a highly detailed task description for the agent to perform autonomously and you should specify exactly what information the agent should return back to you in its final and only message to you.\n4. The agent's outputs should generally be trusted\n5. Clearly tell the agent whether you expect it to write code or just to do research (search, file reads, web fetches, etc.), since it is not aware of the user's intent\n6. If the agent description mentions that it should be used proactively, then you should try your best to use it without the user having to ask for it first. Use your judgement.\n\nExample usage:\n\n<example_agent_descriptions>\n\"code-reviewer\": use this agent after you are done writing a signficant piece of code\n\"greeting-responder\": use this agent when to respond to user greetings with a friendly joke\n</example_agent_description>\n\n<example>\nuser: \"Please write a function that checks if a number is prime\"\nassistant: Sure let me write a function that checks if a number is prime\nassistant: First let me use the Write tool to write a function that checks if a number is prime\nassistant: I'm going to use the Write tool to write the following code:\n<code>\nfunction isPrime(n) {\n  if (n <= 1) return false\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n</code>\n<commentary>\nSince a signficant piece of code was written and the task was completed, now use the code-reviewer agent to review the code\n</commentary>\nassistant: Now let me use the code-reviewer agent to review the code\nassistant: Uses the Task tool to launch the with the code-reviewer agent\n</example>\n\n<example>\nuser: \"Hello\"\n<commentary>\nSince the user is greeting, use the greeting-responder agent to respond with a friendly joke\n</commentary>\nassistant: \"I'm going to use the Task tool to launch the with the greeting-responder agent\"\n</example>\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "description": {
                "type": "string",
                "description": "A short (3-5 word) description of the task"
              },
              "prompt": {
                "type": "string",
                "description": "The task for the agent to perform"
              },
              "subagent_type": {
                "type": "string",
                "description": "The type of specialized agent to use for this task"
              }
            },
            "required": [
              "description",
              "prompt",
              "subagent_type"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Bash",
          "description": "Executes a given bash command in a persistent shell session with optional timeout, ensuring proper handling and security measures.\n\nBefore executing the command, please follow these steps:\n\n1. Directory Verification:\n   - If the command will create new directories or files, first use the LS tool to verify the parent directory exists and is the correct location\n   - For example, before running \"mkdir foo/bar\", first use LS to check that \"foo\" exists and is the intended parent directory\n\n2. Command Execution:\n   - Always quote file paths that contain spaces with double quotes (e.g., cd \"path with spaces/file.txt\")\n   - Examples of proper quoting:\n     - cd \"/Users/name/My Documents\" (correct)\n     - cd /Users/name/My Documents (incorrect - will fail)\n     - python \"/path/with spaces/script.py\" (correct)\n     - python /path/with spaces/script.py (incorrect - will fail)\n   - After ensuring proper quoting, execute the command.\n   - Capture the output of the command.\n\nUsage notes:\n  - The command argument is required.\n  - You can specify an optional timeout in milliseconds (up to 600000ms / 10 minutes). If not specified, commands will timeout after 120000ms (2 minutes).\n  - It is very helpful if you write a clear, concise description of what this command does in 5-10 words.\n  - If the output exceeds 30000 characters, output will be truncated before being returned to you.\n  - VERY IMPORTANT: You MUST avoid using search commands like `find` and `grep`. Instead use Grep, Glob, or Task to search. You MUST avoid read tools like `cat`, `head`, `tail`, and `ls`, and use Read and LS to read files.\n - If you _still_ need to run `grep`, STOP. ALWAYS USE ripgrep at `rg` first, which all ${PRODUCT_NAME} users have pre-installed.\n  - When issuing multiple commands, use the ';' or '&&' operator to separate them. DO NOT use newlines (newlines are ok in quoted strings).\n  - Try to maintain your current working directory throughout the session by using absolute paths and avoiding usage of `cd`. You may use `cd` if the User explicitly requests it.\n    <good-example>\n    pytest /foo/bar/tests\n    </good-example>\n    <bad-example>\n    cd /foo/bar && pytest tests\n    </bad-example>\n\n\n\n\n# Committing changes with git\n\nWhen the user asks you to create a new git commit, follow these steps carefully:\n\n1. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following bash commands in parallel, each using the Bash tool:\n  - Run a git status command to see all untracked files.\n  - Run a git diff command to see both staged and unstaged changes that will be committed.\n  - Run a git log command to see recent commit messages, so that you can follow this repository's commit message style.\n2. Analyze all staged changes (both previously staged and newly added) and draft a commit message:\n  - Summarize the nature of the changes (eg. new feature, enhancement to an existing feature, bug fix, refactoring, test, docs, etc.). Ensure the message accurately reflects the changes and their purpose (i.e. \"add\" means a wholly new feature, \"update\" means an enhancement to an existing feature, \"fix\" means a bug fix, etc.).\n  - Check for any sensitive information that shouldn't be committed\n  - Draft a concise (1-2 sentences) commit message that focuses on the \"why\" rather than the \"what\"\n  - Ensure it accurately reflects the changes and their purpose\n3. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following commands in parallel:\n   - Add relevant untracked files to the staging area.\n   - Create the commit with a message ending with:\n   🤖 Generated with [Claude Code](https://claude.ai/code)\n\n   Co-Authored-By: Claude <noreply@anthropic.com>\n   - Run git status to make sure the commit succeeded.\n4. If the commit fails due to pre-commit hook changes, retry the commit ONCE to include these automated changes. If it fails again, it usually means a pre-commit hook is preventing the commit. If the commit succeeds but you notice that files were modified by the pre-commit hook, you MUST amend your commit to include them.\n\nImportant notes:\n- NEVER update the git config\n- NEVER run additional commands to read or explore code, besides git bash commands\n- NEVER use the TodoWrite or Task tools\n- DO NOT push to the remote repository unless the user explicitly asks you to do so\n- IMPORTANT: Never use git commands with the -i flag (like git rebase -i or git add -i) since they require interactive input which is not supported.\n- If there are no changes to commit (i.e., no untracked files and no modifications), do not create an empty commit\n- In order to ensure good formatting, ALWAYS pass the commit message via a HEREDOC, a la this example:\n<example>\ngit commit -m \"$(cat <<'EOF'\n   Commit message here.\n\n   🤖 Generated with [Claude Code](https://claude.ai/code)\n\n   Co-Authored-By: Claude <noreply@anthropic.com>\n   EOF\n   )\"\n</example>\n\n# Creating pull requests\nUse the gh command via the Bash tool for ALL GitHub-related tasks including working with issues, pull requests, checks, and releases. If given a Github URL use the gh command to get the information needed.\n\nIMPORTANT: When the user asks you to create a pull request, follow these steps carefully:\n\n1. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following bash commands in parallel using the Bash tool, in order to understand the current state of the branch since it diverged from the main branch:\n   - Run a git status command to see all untracked files\n   - Run a git diff command to see both staged and unstaged changes that will be committed\n   - Check if the current branch tracks a remote branch and is up to date with the remote, so you know if you need to push to the remote\n   - Run a git log command and `git diff [base-branch]...HEAD` to understand the full commit history for the current branch (from the time it diverged from the base branch)\n2. Analyze all changes that will be included in the pull request, making sure to look at all relevant commits (NOT just the latest commit, but ALL commits that will be included in the pull request!!!), and draft a pull request summary\n3. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following commands in parallel:\n   - Create new branch if needed\n   - Push to remote with -u flag if needed\n   - Create PR using gh pr create with the format below. Use a HEREDOC to pass the body to ensure correct formatting.\n<example>\ngh pr create --title \"the pr title\" --body \"$(cat <<'EOF'\n## Summary\n<1-3 bullet points>\n\n## Test plan\n[Checklist of TODOs for testing the pull request...]\n\n🤖 Generated with [Claude Code](https://claude.ai/code)\nEOF\n)\"\n</example>\n\nImportant:\n- NEVER update the git config\n- DO NOT use the TodoWrite or Task tools\n- Return the PR URL when you're done, so the user can see it\n\n# Other common operations\n- View comments on a Github PR: gh api repos/foo/bar/pulls/123/comments",
          "input_schema": {
            "type": "object",
            "properties": {
              "command": {
                "type": "string",
                "description": "The command to execute"
              },
              "timeout": {
                "type": "number",
                "description": "Optional timeout in milliseconds (max 600000)"
              },
              "description": {
                "type": "string",
                "description": " Clear, concise description of what this command does in 5-10 words. Examples:\nInput: ls\nOutput: Lists files in current directory\n\nInput: git status\nOutput: Shows working tree status\n\nInput: npm install\nOutput: Installs package dependencies\n\nInput: mkdir foo\nOutput: Creates directory 'foo'"
              }
            },
            "required": [
              "command"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Glob",
          "description": "- Fast file pattern matching tool that works with any codebase size\n- Supports glob patterns like \"**/*.js\" or \"src/**/*.ts\"\n- Returns matching file paths sorted by modification time\n- Use this tool when you need to find files by name patterns\n- When you are doing an open ended search that may require multiple rounds of globbing and grepping, use the Agent tool instead\n- You have the capability to call multiple tools in a single response. It is always better to speculatively perform multiple searches as a batch that are potentially useful.",
          "input_schema": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "The glob pattern to match files against"
              },
              "path": {
                "type": "string",
                "description": "The directory to search in. If not specified, the current working directory will be used. IMPORTANT: Omit this field to use the default directory. DO NOT enter \"undefined\" or \"null\" - simply omit it for the default behavior. Must be a valid directory path if provided."
              }
            },
            "required": [
              "pattern"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Grep",
          "description": "A powerful search tool built on ripgrep\n\n  Usage:\n  - ALWAYS use Grep for search tasks. NEVER invoke `grep` or `rg` as a Bash command. The Grep tool has been optimized for correct permissions and access.\n  - Supports full regex syntax (e.g., \"log.*Error\", \"function\\s+\\w+\")\n  - Filter files with glob parameter (e.g., \"*.js\", \"**/*.tsx\") or type parameter (e.g., \"js\", \"py\", \"rust\")\n  - Output modes: \"content\" shows matching lines, \"files_with_matches\" shows only file paths (default), \"count\" shows match counts\n  - Use Task tool for open-ended searches requiring multiple rounds\n  - Pattern syntax: Uses ripgrep (not grep) - literal braces need escaping (use `interface\\{\\}` to find `interface{}` in Go code)\n  - Multiline matching: By default patterns match within single lines only. For cross-line patterns like `struct \\{[\\s\\S]*?field`, use `multiline: true`\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "The regular expression pattern to search for in file contents"
              },
              "path": {
                "type": "string",
                "description": "File or directory to search in (rg PATH). Defaults to current working directory."
              },
              "glob": {
                "type": "string",
                "description": "Glob pattern to filter files (e.g. \"*.js\", \"*.{ts,tsx}\") - maps to rg --glob"
              },
              "output_mode": {
                "type": "string",
                "enum": [
                  "content",
                  "files_with_matches",
                  "count"
                ],
                "description": "Output mode: \"content\" shows matching lines (supports -A/-B/-C context, -n line numbers, head_limit), \"files_with_matches\" shows file paths (supports head_limit), \"count\" shows match counts (supports head_limit). Defaults to \"files_with_matches\"."
              },
              "-B": {
                "type": "number",
                "description": "Number of lines to show before each match (rg -B). Requires output_mode: \"content\", ignored otherwise."
              },
              "-A": {
                "type": "number",
                "description": "Number of lines to show after each match (rg -A). Requires output_mode: \"content\", ignored otherwise."
              },
              "-C": {
                "type": "number",
                "description": "Number of lines to show before and after each match (rg -C). Requires output_mode: \"content\", ignored otherwise."
              },
              "-n": {
                "type": "boolean",
                "description": "Show line numbers in output (rg -n). Requires output_mode: \"content\", ignored otherwise."
              },
              "-i": {
                "type": "boolean",
                "description": "Case insensitive search (rg -i)"
              },
              "type": {
                "type": "string",
                "description": "File type to search (rg --type). Common types: js, py, rust, go, java, etc. More efficient than include for standard file types."
              },
              "head_limit": {
                "type": "number",
                "description": "Limit output to first N lines/entries, equivalent to \"| head -N\". Works across all output modes: content (limits output lines), files_with_matches (limits file paths), count (limits count entries). When unspecified, shows all results from ripgrep."
              },
              "multiline": {
                "type": "boolean",
                "description": "Enable multiline mode where . matches newlines and patterns can span lines (rg -U --multiline-dotall). Default: false."
              }
            },
            "required": [
              "pattern"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "LS",
          "description": "Lists files and directories in a given path. The path parameter must be an absolute path, not a relative path. You can optionally provide an array of glob patterns to ignore with the ignore parameter. You should generally prefer the Glob and Grep tools, if you know which directories to search.",
          "input_schema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "The absolute path to the directory to list (must be absolute, not relative)"
              },
              "ignore": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of glob patterns to ignore"
              }
            },
            "required": [
              "path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "ExitPlanMode",
          "description": "Use this tool when you are in plan mode and have finished presenting your plan and are ready to code. This will prompt the user to exit plan mode.\nIMPORTANT: Only use this tool when the task requires planning the implementation steps of a task that requires writing code. For research tasks where you're gathering information, searching files, reading files or in general trying to understand the codebase - do NOT use this tool.\n\nEg.\n1. Initial task: \"Search for and understand the implementation of vim mode in the codebase\" - Do not use the exit plan mode tool because you are not planning the implementation steps of a task.\n2. Initial task: \"Help me implement yank mode for vim\" - Use the exit plan mode tool after you have finished planning the implementation steps of the task.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "plan": {
                "type": "string",
                "description": "The plan you came up with, that you want to run by the user for approval. Supports markdown. The plan should be pretty concise."
              }
            },
            "required": [
              "plan"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Read",
          "description": "Reads a file from the local filesystem. You can access any file directly by using this tool.\nAssume this tool is able to read all files on the machine. If the User provides a path to a file assume that path is valid. It is okay to read a file that does not exist; an error will be returned.\n\nUsage:\n- The file_path parameter must be an absolute path, not a relative path\n- By default, it reads up to 2000 lines starting from the beginning of the file\n- You can optionally specify a line offset and limit (especially handy for long files), but it's recommended to read the whole file by not providing these parameters\n- Any lines longer than 2000 characters will be truncated\n- Results are returned using cat -n format, with line numbers starting at 1\n- This tool allows Claude Code to read images (eg PNG, JPG, etc). When reading an image file the contents are presented visually as Claude Code is a multimodal LLM.\n- This tool can read PDF files (.pdf). PDFs are processed page by page, extracting both text and visual content for analysis.\n- For Jupyter notebooks (.ipynb files), use the NotebookRead instead\n- You have the capability to call multiple tools in a single response. It is always better to speculatively read multiple files as a batch that are potentially useful.\n- You will regularly be asked to read screenshots. If the user provides a path to a screenshot ALWAYS use this tool to view the file at the path. This tool will work with all temporary file paths like /var/folders/123/abc/T/TemporaryItems/NSIRD_screencaptureui_ZfB1tD/Screenshot.png\n- If you read a file that exists but has empty contents you will receive a system reminder warning in place of file contents.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to read"
              },
              "offset": {
                "type": "number",
                "description": "The line number to start reading from. Only provide if the file is too large to read at once"
              },
              "limit": {
                "type": "number",
                "description": "The number of lines to read. Only provide if the file is too large to read at once."
              }
            },
            "required": [
              "file_path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Edit",
          "description": "Performs exact string replacements in files.\n\nUsage:\n- You must use your `Read` tool at least once in the conversation before editing. This tool will error if you attempt an edit without reading the file.\n- When editing text from Read tool output, ensure you preserve the exact indentation (tabs/spaces) as it appears AFTER the line number prefix. The line number prefix format is: spaces + line number + tab. Everything after that tab is the actual file content to match. Never include any part of the line number prefix in the old_string or new_string.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- Only use emojis if the user explicitly requests it. Avoid adding emojis to files unless asked.\n- The edit will FAIL if `old_string` is not unique in the file. Either provide a larger string with more surrounding context to make it unique or use `replace_all` to change every instance of `old_string`.\n- Use `replace_all` for replacing and renaming strings across the file. This parameter is useful if you want to rename a variable for instance.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to modify"
              },
              "old_string": {
                "type": "string",
                "description": "The text to replace"
              },
              "new_string": {
                "type": "string",
                "description": "The text to replace it with (must be different from old_string)"
              },
              "replace_all": {
                "type": "boolean",
                "default": false,
                "description": "Replace all occurences of old_string (default false)"
              }
            },
            "required": [
              "file_path",
              "old_string",
              "new_string"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "MultiEdit",
          "description": "This is a tool for making multiple edits to a single file in one operation. It is built on top of the Edit tool and allows you to perform multiple find-and-replace operations efficiently. Prefer this tool over the Edit tool when you need to make multiple edits to the same file.\n\nBefore using this tool:\n\n1. Use the Read tool to understand the file's contents and context\n2. Verify the directory path is correct\n\nTo make multiple file edits, provide the following:\n1. file_path: The absolute path to the file to modify (must be absolute, not relative)\n2. edits: An array of edit operations to perform, where each edit contains:\n   - old_string: The text to replace (must match the file contents exactly, including all whitespace and indentation)\n   - new_string: The edited text to replace the old_string\n   - replace_all: Replace all occurences of old_string. This parameter is optional and defaults to false.\n\nIMPORTANT:\n- All edits are applied in sequence, in the order they are provided\n- Each edit operates on the result of the previous edit\n- All edits must be valid for the operation to succeed - if any edit fails, none will be applied\n- This tool is ideal when you need to make several changes to different parts of the same file\n- For Jupyter notebooks (.ipynb files), use the NotebookEdit instead\n\nCRITICAL REQUIREMENTS:\n1. All edits follow the same requirements as the single Edit tool\n2. The edits are atomic - either all succeed or none are applied\n3. Plan your edits carefully to avoid conflicts between sequential operations\n\nWARNING:\n- The tool will fail if edits.old_string doesn't match the file contents exactly (including whitespace)\n- The tool will fail if edits.old_string and edits.new_string are the same\n- Since edits are applied in sequence, ensure that earlier edits don't affect the text that later edits are trying to find\n\nWhen making edits:\n- Ensure all edits result in idiomatic, correct code\n- Do not leave the code in a broken state\n- Always use absolute file paths (starting with /)\n- Only use emojis if the user explicitly requests it. Avoid adding emojis to files unless asked.\n- Use replace_all for replacing and renaming strings across the file. This parameter is useful if you want to rename a variable for instance.\n\nIf you want to create a new file, use:\n- A new file path, including dir name if needed\n- First edit: empty old_string and the new file's contents as new_string\n- Subsequent edits: normal edit operations on the created content",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to modify"
              },
              "edits": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "old_string": {
                      "type": "string",
                      "description": "The text to replace"
                    },
                    "new_string": {
                      "type": "string",
                      "description": "The text to replace it with"
                    },
                    "replace_all": {
                      "type": "boolean",
                      "default": false,
                      "description": "Replace all occurences of old_string (default false)."
                    }
                  },
                  "required": [
                    "old_string",
                    "new_string"
                  ],
                  "additionalProperties": false
                },
                "minItems": 1,
                "description": "Array of edit operations to perform sequentially on the file"
              }
            },
            "required": [
              "file_path",
              "edits"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Write",
          "description": "Writes a file to the local filesystem.\n\nUsage:\n- This tool will overwrite the existing file if there is one at the provided path.\n- If this is an existing file, you MUST use the Read tool first to read the file's contents. This tool will fail if you did not read the file first.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- NEVER proactively create documentation files (*.md) or README files. Only create documentation files if explicitly requested by the User.\n- Only use emojis if the user explicitly requests it. Avoid writing emojis to files unless asked.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to write (must be absolute, not relative)"
              },
              "content": {
                "type": "string",
                "description": "The content to write to the file"
              }
            },
            "required": [
              "file_path",
              "content"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "NotebookRead",
          "description": "Reads a Jupyter notebook (.ipynb file) and returns all of the cells with their outputs. Jupyter notebooks are interactive documents that combine code, text, and visualizations, commonly used for data analysis and scientific computing. The notebook_path parameter must be an absolute path, not a relative path.",
          "input_schema": {
            "type": "object",
            "properties": {
              "notebook_path": {
                "type": "string",
                "description": "The absolute path to the Jupyter notebook file to read (must be absolute, not relative)"
              },
              "cell_id": {
                "type": "string",
                "description": "The ID of a specific cell to read. If not provided, all cells will be read."
              }
            },
            "required": [
              "notebook_path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "NotebookEdit",
          "description": "Completely replaces the contents of a specific cell in a Jupyter notebook (.ipynb file) with new source. Jupyter notebooks are interactive documents that combine code, text, and visualizations, commonly used for data analysis and scientific computing. The notebook_path parameter must be an absolute path, not a relative path. The cell_number is 0-indexed. Use edit_mode=insert to add a new cell at the index specified by cell_number. Use edit_mode=delete to delete the cell at the index specified by cell_number.",
          "input_schema": {
            "type": "object",
            "properties": {
              "notebook_path": {
                "type": "string",
                "description": "The absolute path to the Jupyter notebook file to edit (must be absolute, not relative)"
              },
              "cell_id": {
                "type": "string",
                "description": "The ID of the cell to edit. When inserting a new cell, the new cell will be inserted after the cell with this ID, or at the beginning if not specified."
              },
              "new_source": {
                "type": "string",
                "description": "The new source for the cell"
              },
              "cell_type": {
                "type": "string",
                "enum": [
                  "code",
                  "markdown"
                ],
                "description": "The type of the cell (code or markdown). If not specified, it defaults to the current cell type. If using edit_mode=insert, this is required."
              },
              "edit_mode": {
                "type": "string",
                "enum": [
                  "replace",
                  "insert",
                  "delete"
                ],
                "description": "The type of edit to make (replace, insert, delete). Defaults to replace."
              }
            },
            "required": [
              "notebook_path",
              "new_source"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "WebFetch",
          "description": "\n- Fetches content from a specified URL and processes it using an AI model\n- Takes a URL and a prompt as input\n- Fetches the URL content, converts HTML to markdown\n- Processes the content with the prompt using a small, fast model\n- Returns the model's response about the content\n- Use this tool when you need to retrieve and analyze web content\n\nUsage notes:\n  - IMPORTANT: If an MCP-provided web fetch tool is available, prefer using that tool instead of this one, as it may have fewer restrictions. All MCP-provided tools start with \"mcp__\".\n  - The URL must be a fully-formed valid URL\n  - HTTP URLs will be automatically upgraded to HTTPS\n  - The prompt should describe what information you want to extract from the page\n  - This tool is read-only and does not modify any files\n  - Results may be summarized if the content is very large\n  - Includes a self-cleaning 15-minute cache for faster responses when repeatedly accessing the same URL\n  - When a URL redirects to a different host, the tool will inform you and provide the redirect URL in a special format. You should then make a new WebFetch request with the redirect URL to fetch the content.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "format": "uri",
                "description": "The URL to fetch content from"
              },
              "prompt": {
                "type": "string",
                "description": "The prompt to run on the fetched content"
              }
            },
            "required": [
              "url",
              "prompt"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "TodoWrite",
          "description": "Use this tool to create and manage a structured task list for your current coding session. This helps you track progress, organize complex tasks, and demonstrate thoroughness to the user.\nIt also helps the user understand the progress of the task and overall progress of their requests.\n\n## When to Use This Tool\nUse this tool proactively in these scenarios:\n\n1. Complex multi-step tasks - When a task requires 3 or more distinct steps or actions\n2. Non-trivial and complex tasks - Tasks that require careful planning or multiple operations\n3. User explicitly requests todo list - When the user directly asks you to use the todo list\n4. User provides multiple tasks - When users provide a list of things to be done (numbered or comma-separated)\n5. After receiving new instructions - Immediately capture user requirements as todos\n6. When you start working on a task - Mark it as in_progress BEFORE beginning work. Ideally you should only have one todo as in_progress at a time\n7. After completing a task - Mark it as completed and add any new follow-up tasks discovered during implementation\n\n## When NOT to Use This Tool\n\nSkip using this tool when:\n1. There is only a single, straightforward task\n2. The task is trivial and tracking it provides no organizational benefit\n3. The task can be completed in less than 3 trivial steps\n4. The task is purely conversational or informational\n\nNOTE that you should not use this tool if there is only one trivial task to do. In this case you are better off just doing the task directly.\n\n## Examples of When to Use the Todo List\n\n<example>\nUser: I want to add a dark mode toggle to the application settings. Make sure you run the tests and build when you're done!\nAssistant: I'll help add a dark mode toggle to your application settings. Let me create a todo list to track this implementation.\n*Creates todo list with the following items:*\n1. Create dark mode toggle component in Settings page\n2. Add dark mode state management (context/store)\n3. Implement CSS-in-JS styles for dark theme\n4. Update existing components to support theme switching\n5. Run tests and build process, addressing any failures or errors that occur\n*Begins working on the first task*\n\n<reasoning>\nThe assistant used the todo list because:\n1. Adding dark mode is a multi-step feature requiring UI, state management, and styling changes\n2. The user explicitly requested tests and build be run afterward\n3. The assistant inferred that tests and build need to pass by adding \"Ensure tests and build succeed\" as the final task\n</reasoning>\n</example>\n\n<example>\nUser: Help me rename the function getCwd to getCurrentWorkingDirectory across my project\nAssistant: Let me first search through your codebase to find all occurrences of 'getCwd'.\n*Uses grep or search tools to locate all instances of getCwd in the codebase*\nAssistant: I've found 15 instances of 'getCwd' across 8 different files. Let me create a todo list to track these changes.\n*Creates todo list with specific items for each file that needs updating*\n\n<reasoning>\nThe assistant used the todo list because:\n1. First, the assistant searched to understand the scope of the task\n2. Upon finding multiple occurrences across different files, it determined this was a complex task with multiple steps\n3. The todo list helps ensure every instance is tracked and updated systematically\n4. This approach prevents missing any occurrences and maintains code consistency\n</reasoning>\n</example>\n\n\n<example>\nUser: I need to implement these features for my e-commerce site: user registration, product catalog, shopping cart, and checkout flow.\nAssistant: I'll help implement these features. First, let's add all the features to the todo list.\n*Creates a todo list breaking down each feature into specific tasks based on the project architecture*\nAssistant: Let's start with user registration. This will involve creating database models, API endpoints, and frontend forms that integrate with your existing authentication system.\n\n<reasoning>\nThe assistant used the todo list because:\n1. The user provided multiple complex features to implement in a comma separated list\n2. The todo list helps organize these large features into manageable tasks\n3. This approach allows for tracking progress across the entire implementation\n</reasoning>\n</example>\n\n<example>\nUser: Can you help optimize my React application? It's rendering slowly and has performance issues.</user>\nAssistant: I'll help optimize your React application. First, let me examine your codebase to identify potential performance bottlenecks.\n*Reviews component structure, render patterns, state management, and data fetching*\nAssistant: After analyzing your codebase, I've identified several performance issues. Let me create a todo list to track our optimization efforts.\n*Creates todo list with items like: 1) Implement memoization for expensive calculations in ProductList, 2) Add virtualization for long lists in Dashboard, 3) Optimize image loading in Gallery component, 4) Fix state update loops in ShoppingCart, 5) Review bundle size and implement code splitting*\nLet's start by implementing memoization for the expensive calculations in your ProductList component.</assistant>\n\n<reasoning>\nThe assistant used the todo list because:\n1. First, the assistant examined the codebase to identify specific performance issues\n2. Based on this analysis, it identified multiple optimization opportunities\n3. Performance optimization is a non-trivial task requiring multiple steps\n4. The todo list helps methodically track improvements across different components\n5. This systematic approach ensures all performance bottlenecks are addressed\n</reasoning>\n</example>\n\n## Examples of When NOT to Use the Todo List\n\n<example>\nUser: How do I print 'Hello World' in Python?\nAssistant: In Python, you can print \"Hello World\" with this simple code:\n\npython\nprint(\"Hello World\")\n\nThis will output the text \"Hello World\" to the console when executed.</assistant>\n\n<reasoning>\nThe assistant did not use the todo list because this is a single, trivial task that can be completed in one step. There's no need to track multiple tasks or steps for such a straightforward request.\n</reasoning>\n</example>\n\n<example>\nUser: What does the git status command do?\nAssistant: The git status command shows the current state of your working directory and staging area. It displays which changes have been staged, which haven't, and which files aren't being tracked by Git. This is a fundamental command for understanding the current state of your repository before making commits.\n\n<reasoning>\nThe assistant did not use the todo list because this is an informational request with no actual coding task to complete. The user is simply asking for an explanation, not for the assistant to perform multiple steps or tasks.\n</reasoning>\n</example>\n\n<example>\nUser: Can you add a comment to the calculateTotal function to explain what it does?\nAssistant: Sure, let me add a comment to the calculateTotal function to explain what it does.\n* Uses the Edit tool to add a comment to the calculateTotal function *\n\n<reasoning>\nThe assistant did not use the todo list because this is a single, straightforward task confined to one location in the code. Adding a comment doesn't require tracking multiple steps or systematic organization.\n</reasoning>\n</example>\n\n<example>\nUser: Run npm install for me and tell me what happens.\nAssistant: I'll run the npm install command for you.\n\n*Executes: npm install*\n\nThe command completed successfully. Here's the output:\n[Output of npm install command]\n\nAll dependencies have been installed according to your package.json file.\n\n<reasoning>\nThe assistant did not use the todo list because this is a single command execution with immediate results. There are no multiple steps to track or organize, making the todo list unnecessary for this straightforward task.\n</reasoning>\n</example>\n\n## Task States and Management\n\n1. **Task States**: Use these states to track progress:\n   - pending: Task not yet started\n   - in_progress: Currently working on (limit to ONE task at a time)\n   - completed: Task finished successfully\n\n2. **Task Management**:\n   - Update task status in real-time as you work\n   - Mark tasks complete IMMEDIATELY after finishing (don't batch completions)\n   - Only have ONE task in_progress at any time\n   - Complete current tasks before starting new ones\n   - Remove tasks that are no longer relevant from the list entirely\n\n3. **Task Completion Requirements**:\n   - ONLY mark a task as completed when you have FULLY accomplished it\n   - If you encounter errors, blockers, or cannot finish, keep the task as in_progress\n   - When blocked, create a new task describing what needs to be resolved\n   - Never mark a task as completed if:\n     - Tests are failing\n     - Implementation is partial\n     - You encountered unresolved errors\n     - You couldn't find necessary files or dependencies\n\n4. **Task Breakdown**:\n   - Create specific, actionable items\n   - Break complex tasks into smaller, manageable steps\n   - Use clear, descriptive task names\n\nWhen in doubt, use this tool. Being proactive with task management demonstrates attentiveness and ensures you complete all requirements successfully.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "todos": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "content": {
                      "type": "string",
                      "minLength": 1
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "pending",
                        "in_progress",
                        "completed"
                      ]
                    },
                    "priority": {
                      "type": "string",
                      "enum": [
                        "high",
                        "medium",
                        "low"
                      ]
                    },
                    "id": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "content",
                    "status",
                    "priority",
                    "id"
                  ],
                  "additionalProperties": false
                },
                "description": "The updated todo list"
              }
            },
            "required": [
              "todos"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "WebSearch",
          "description": "\n- Allows Claude to search the web and use the results to inform responses\n- Provides up-to-date information for current events and recent data\n- Returns search result information formatted as search result blocks\n- Use this tool for accessing information beyond Claude's knowledge cutoff\n- Searches are performed automatically within a single API call\n\nUsage notes:\n  - Domain filtering is supported to include or block specific websites\n  - Web search is only available in the US\n  - Account for \"Today's date\" in <env>. For example, if <env> says \"Today's date: 2025-07-01\", and the user wants the latest docs, do not use 2024 in the search query. Use 2025.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "minLength": 2,
                "description": "The search query to use"
              },
              "allowed_domains": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Only include search results from these domains"
              },
              "blocked_domains": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Never include search results from these domains"
              }
            },
            "required": [
              "query"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        }
      ],
      "responseStructure": {
        "type": "object",
        "keys": [
          "id",
          "object",
          "created",
          "model",
          "choices",
          "usage",
          "stats",
          "system_fingerprint"
        ],
        "hasChoices": true,
        "hasContent": false,
        "hasUsage": true,
        "choicesCount": 1,
        "firstChoice": {
          "hasMessage": true,
          "hasToolCalls": false,
          "finishReason": "stop"
        }
      },
      "parsingAttempts": [
        "json_format",
        "function_call",
        "action_format",
        "natural_language"
      ]
    }
  },
  {
    "timestamp": "2025-08-10T06:50:05.905Z",
    "requestId": "session_1754804126703_ixall6oy5:conv_1754804126703_sm1ur5dvo:18:1754808595343:s804",
    "provider": "lmstudio",
    "model": "gpt-oss-20b-mlx",
    "endpoint": "localhost:1234",
    "failureType": "text_instead_of_tools",
    "originalResponse": {
      "id": "chatcmpl-tuksloz2zqjzagafeihzh",
      "object": "chat.completion",
      "created": 1754808595,
      "model": "gpt-oss-20b-mlx",
      "choices": [
        {
          "index": 0,
          "logprobs": null,
          "finish_reason": "stop",
          "message": {
            "role": "assistant",
            "content": "We need to determine the command prefix for \"find . -type f -name \"*.md\"\". According to policy, we need to extract the prefix. The examples show that for \"find ./src -type f -name \"*.ts\"\", the prefix is \"find\". So here it's also \"find\". There's no injection. So output: find.\n\nfind"
          }
        }
      ],
      "usage": {
        "prompt_tokens": 13041,
        "completion_tokens": 70,
        "total_tokens": 13111
      },
      "stats": {},
      "system_fingerprint": "gpt-oss-20b-mlx"
    },
    "expectedFormat": "openai",
    "errorMessage": "All parsing strategies failed",
    "responseAnalysis": {
      "hasToolCalls": false,
      "hasContent": true,
      "contentLength": 281,
      "contentPreview": "We need to determine the command prefix for \"find . -type f -name \"*.md\"\". According to policy, we need to extract the prefix. The examples show that for \"find ./src -type f -name \"*.ts\"\", the prefix ",
      "finishReason": "stop",
      "toolCallPatterns": []
    },
    "debugInfo": {
      "requestTools": [
        {
          "name": "Task",
          "description": "Launch a new agent to handle complex, multi-step tasks autonomously.\n\nAvailable agent types and the tools they have access to:\n- general-purpose: General-purpose agent for researching complex questions, searching for code, and executing multi-step tasks. When you are searching for a keyword or file and are not confident that you will find the right match in the first few tries use this agent to perform the search for you. (Tools: *)\n- code-refactorer: Use this agent when you need to improve existing code structure, readability, or maintainability without changing functionality. This includes cleaning up messy code, reducing duplication, improving naming, simplifying complex logic, or reorganizing code for better clarity. Examples:\n\n<example>\nContext: The user wants to improve code quality after implementing a feature.\nuser: \"I just finished implementing the user authentication system. Can you help clean it up?\"\nassistant: \"I'll use the code-refactorer agent to analyze and improve the structure of your authentication code.\"\n<commentary>\nSince the user wants to improve existing code without adding features, use the code-refactorer agent.\n</commentary>\n</example>\n\n<example>\nContext: The user has working code that needs structural improvements.\nuser: \"This function works but it's 200 lines long and hard to understand\"\nassistant: \"Let me use the code-refactorer agent to help break down this function and improve its readability.\"\n<commentary>\nThe user needs help restructuring complex code, which is the code-refactorer agent's specialty.\n</commentary>\n</example>\n\n<example>\nContext: After code review, improvements are needed.\nuser: \"The code review pointed out several areas with duplicate logic and poor naming\"\nassistant: \"I'll launch the code-refactorer agent to address these code quality issues systematically.\"\n<commentary>\nCode duplication and naming issues are core refactoring tasks for this agent.\n</commentary>\n</example> (Tools: Edit, MultiEdit, Write, NotebookEdit, Grep, LS, Read)\n- project-task-planner: Use this agent when you need to create a comprehensive development task list from a Product Requirements Document (PRD). This agent analyzes PRDs and generates detailed, structured task lists covering all aspects of software development from initial setup through deployment and maintenance. Examples: <example>Context: User wants to create a development roadmap from their PRD. user: \"I have a PRD for a new e-commerce platform. Can you create a task list?\" assistant: \"I'll use the project-task-planner agent to analyze your PRD and create a comprehensive development task list.\" <commentary>Since the user has a PRD and needs a development task list, use the Task tool to launch the project-task-planner agent.</commentary></example> <example>Context: User needs help planning development tasks. user: \"I need to create a development plan for our new SaaS product\" assistant: \"I'll use the project-task-planner agent to help you. First, I'll need to see your Product Requirements Document (PRD).\" <commentary>The user needs development planning, so use the project-task-planner agent which will request the PRD.</commentary></example> (Tools: Task, Bash, Edit, MultiEdit, Write, NotebookEdit, Grep, LS, Read, ExitPlanMode, TodoWrite, WebSearch)\n- vibe-coding-coach: Use this agent when users want to build applications through conversation, focusing on the vision and feel of their app rather than technical implementation details. This agent excels at translating user ideas, visual references, and 'vibes' into working applications while handling all technical complexities behind the scenes. <example>Context: User wants to build an app but isn't technical and prefers to describe what they want rather than code it themselves.\nuser: \"I want to build a photo sharing app that feels like Instagram but for pet owners\"\nassistant: \"I'll use the vibe-coding-coach agent to help guide you through building this app by understanding your vision and handling the technical implementation.\"\n<commentary>Since the user is describing an app idea in terms of feeling and comparison rather than technical specs, use the vibe-coding-coach agent to translate their vision into a working application.</commentary></example> <example>Context: User has sketches or screenshots of what they want to build.\nuser: \"Here's a screenshot of an app I like. Can we build something similar but for tracking workouts?\"\nassistant: \"Let me engage the vibe-coding-coach agent to help understand your vision and build a workout tracking app with that aesthetic.\"\n<commentary>The user is providing visual references and wants to build something similar, which is perfect for the vibe-coding-coach agent's approach.</commentary></example> (Tools: *)\n- debug-system-architect: Use this agent when you need to establish a comprehensive debug logging system for a project. This includes setting up log directories, implementing node-level tracing, creating time-based test records, establishing replay mechanisms, and documenting debug rules. Example: <example> Context: User is setting up a new project and wants to implement proper debugging infrastructure from the start. user: \"Please help me set up a debug system for my new API router project\" <commentary> Since the user is requesting debug system setup, use the debug-system-architect agent to analyze the project and implement comprehensive logging and tracing mechanisms. </commentary> </example> <example> Context: User encounters intermittent issues in their routing system and needs better visibility. user: \"I'm having trouble tracking down why some requests fail intermittently\" <commentary> Since the user needs better debugging visibility for intermittent issues, use the debug-system-architect agent to implement node-level tracing and replay mechanisms. </commentary> </example> (Tools: *)\n- code-risk-auditor: Use this agent when you need to perform comprehensive code risk assessment and identify potential architectural issues in your codebase. Examples: <example>Context: The user has just completed a major refactoring and wants to ensure no hardcoded values or fallback mechanisms were introduced. user: \"I just finished refactoring the routing system, can you check for any code risks?\" assistant: \"I'll use the code-risk-auditor agent to perform a comprehensive risk assessment of your routing system changes.\"</example> <example>Context: Before a major release, the user wants to clean up technical debt and ensure code quality. user: \"We're preparing for v2.0 release, I need a full code audit\" assistant: \"Let me launch the code-risk-auditor agent to identify hardcoding, fallback risks, outdated tests, and duplicate implementations across the entire codebase.\"</example> <example>Context: The user notices inconsistent behavior and suspects duplicate implementations. user: \"The same feature seems to be implemented in multiple places, causing bugs\" assistant: \"I'll use the code-risk-auditor agent to scan for duplicate implementations and provide a consolidation plan.\"</example> (Tools: *)\n- security-auditor: Use this agent when you need to perform a comprehensive security audit of a codebase, identify vulnerabilities, and generate a detailed security report with actionable remediation steps. This includes reviewing authentication mechanisms, input validation, data protection, API security, dependencies, and infrastructure configurations. Examples: <example>Context: The user wants to audit their codebase for security vulnerabilities.\nuser: \"Can you perform a security audit of my application?\"\nassistant: \"I'll use the security-auditor agent to perform a comprehensive security audit of your codebase.\"\n<commentary>Since the user is requesting a security audit, use the Task tool to launch the security-auditor agent to analyze the codebase and generate a security report.</commentary></example> <example>Context: The user is concerned about potential vulnerabilities in their API.\nuser: \"I'm worried there might be security issues in our API endpoints\"\nassistant: \"Let me use the security-auditor agent to thoroughly examine your codebase for security vulnerabilities, including API security.\"\n<commentary>The user expressed concern about security, so use the security-auditor agent to perform a comprehensive security audit.</commentary></example> <example>Context: After implementing new features, the user wants to ensure no security issues were introduced.\nuser: \"We just added user authentication to our app. Can you check if it's secure?\"\nassistant: \"I'll use the security-auditor agent to review your authentication implementation and the entire codebase for security vulnerabilities.\"\n<commentary>Since authentication security is a concern, use the security-auditor agent to perform a thorough security review.</commentary></example> (Tools: Task, Bash, Edit, MultiEdit, Write, NotebookEdit)\n- project-memory-manager: Use this agent when you need to manage project-specific memory entries, create project documentation, or organize project knowledge. This includes creating project summaries, documenting project decisions, tracking project progress, and maintaining project-specific knowledge bases. <example>Context: User wants to document a project decision or create project documentation. user: \"请为我们的新项目创建一个内存管理系统的文档\" assistant: \"我将使用 project-memory-manager agent 来创建这个项目文档\" <commentary>Since the user needs project documentation, use the project-memory-manager agent to create project-specific memory entries.</commentary></example> <example>Context: User wants to track project progress or decisions. user: \"我们需要记录这个项目的关键决策点\" assistant: \"让我使用 project-memory-manager agent 来记录这些项目决策\" <commentary>Since this is project tracking, use the project-memory-manager agent to create decision-type memory entries.</commentary></example> (Tools: *)\n- rules-architect: Use this agent when you need to analyze project architecture and establish comprehensive rule management systems. Examples: <example>Context: User wants to organize project rules and create a structured rule management system. user: \"I need to reorganize our project rules and create a better structure for managing coding standards, file organization, and testing protocols\" assistant: \"I'll use the rules-architect agent to analyze the current project structure and establish a comprehensive rule management system with proper categorization and organization.\"</example> <example>Context: Project has grown complex and needs better rule organization. user: \"Our CLAUDE.md file is getting too large and we need to break down rules into manageable categories\" assistant: \"Let me call the rules-architect agent to create a structured .claude/rules system that will organize all project rules into logical categories.\"</example> (Tools: *)\n- frontend-designer: Use this agent when you need to convert design mockups, wireframes, or visual concepts into detailed technical specifications and implementation guides for frontend development. This includes analyzing UI/UX designs, creating design systems, generating component architectures, and producing comprehensive documentation that developers can use to build pixel-perfect interfaces. Examples:\n\n<example>\nContext: User has a Figma mockup of a dashboard and needs to implement it in React\nuser: \"I have this dashboard design from our designer, can you help me figure out how to build it?\"\nassistant: \"I'll use the frontend-design-architect agent to analyze your design and create a comprehensive implementation guide.\"\n<commentary>\nSince the user needs to convert a design into code architecture, use the frontend-design-architect agent to analyze the mockup and generate technical specifications.\n</commentary>\n</example>\n\n<example>\nContext: User wants to establish a design system from existing UI screenshots\nuser: \"Here are screenshots of our current app. We need to extract a consistent design system from these.\"\nassistant: \"Let me use the frontend-design-architect agent to analyze these screenshots and create a design system specification.\"\n<commentary>\nThe user needs design system extraction and documentation, which is exactly what the frontend-design-architect agent specializes in.\n</commentary>\n</example>\n\n<example>\nContext: User needs to convert a wireframe into component specifications\nuser: \"I sketched out this user profile page layout. How should I structure the components?\"\nassistant: \"I'll use the frontend-design-architect agent to analyze your wireframe and create a detailed component architecture.\"\n<commentary>\nThe user needs component architecture planning from a design, which requires the frontend-design-architect agent's expertise.\n</commentary>\n</example> (Tools: *)\n- content-writer: Use this agent when you need to create compelling, informative content that explains complex topics in simple terms. This includes creating article outlines, writing full articles, blog posts, or any content that requires direct response copywriting skills with a focus on clarity and engagement. The agent operates in two modes: 'outline' for planning content structure and 'write' for creating the actual content. Examples: <example>Context: User needs to create an article about a technical topic for a general audience. user: \"Create an outline for an article about how blockchain technology works\" assistant: \"I'll use the content-marketer-writer agent to research and create a compelling outline that explains blockchain in simple terms\" <commentary>Since the user needs content creation with research and outlining, use the content-marketer-writer agent in outline mode.</commentary></example> <example>Context: User has an outline and needs to write the full article. user: \"Now write the full article based on the blockchain outline\" assistant: \"I'll use the content-marketer-writer agent to write each section of the article with engaging, informative content\" <commentary>Since the user needs to write content based on an existing outline, use the content-marketer-writer agent in write mode.</commentary></example> (Tools: *)\n- test-runner: Use this agent to run and manage tests according to the global and project-specific testing rules. This includes executing test scripts, documenting test results, and helping to diagnose issues following the standard pipeline. <example>Context: User wants to run all functional tests. user: \"运行所有功能测试\" assistant: \"我将使用 test-runner agent 来执行所有功能测试\" <commentary>Since the user wants to run tests by category, use the test-runner agent.</commentary></example> <example>Context: User wants to verify a bug fix. user: \"我修复了一个bug，帮我验证一下\" assistant: \"让我使用 test-runner agent 来执行对应的修复验证测试\" <commentary>The user needs to verify a fix, which is a core task for the test-runner agent.</commentary></example> (Tools: *)\n- in-depth-research-analyst: Use this agent when you need to conduct comprehensive research reports with in-depth web mining, data analysis, and visualization. This includes industry analysis, market research, competitive intelligence, and trend forecasting with accurate data from authoritative sources. <example>Context: User wants a comprehensive industry analysis report. user: \"请对人工智能芯片市场进行深入调研，包括主要厂商、市场份额和增长趋势\" assistant: \"我将使用 in-depth-research-analyst agent 来进行这项深入的市场调研并生成可视化报告\" <commentary>Since the user needs a comprehensive industry analysis with data visualization, use the in-depth-research-analyst agent to conduct thorough research and create an integrated report.</commentary></example> <example>Context: User wants market research with accurate data and visualizations. user: \"我们需要一份关于电动汽车充电基础设施的深度报告，包含数据图表\" assistant: \"让我使用 in-depth-research-analyst agent 来收集准确数据并生成图文并茂的分析报告\" <commentary>Since this requires market research with data accuracy and visualizations, use the in-depth-research-analyst agent to create a comprehensive report.</commentary></example> (Tools: *)\n- prd-writer: Use this agent when you need to create a comprehensive Product Requirements Document (PRD) for a software project or feature. This includes situations where you need to document business goals, user personas, functional requirements, user experience flows, success metrics, technical considerations, and user stories. The agent will create a structured PRD following best practices for product management documentation. Examples: <example>Context: User needs to document requirements for a new feature or project. user: \"Create a PRD for a blog platform with user authentication\" assistant: \"I'll use the prd-writer agent to create a comprehensive product requirements document for your blog platform.\" <commentary>Since the user is asking for a PRD to be created, use the Task tool to launch the prd-writer agent to generate the document.</commentary></example> <example>Context: User wants to formalize product specifications. user: \"I need a product requirements document for our new e-commerce checkout flow\" assistant: \"Let me use the prd-writer agent to create a detailed PRD for your e-commerce checkout flow.\" <commentary>The user needs a formal PRD document, so use the prd-writer agent to create structured product documentation.</commentary></example> (Tools: Task, Bash, Grep, LS, Read, Write, WebSearch, Glob)\n- pipeline-debug-universal: Use this agent when you need to implement comprehensive debug hooks and testing infrastructure for ANY pipeline system - whether it's API routing, data processing, CI/CD workflows, or transformation pipelines. This agent specializes in creating universal debug architectures that work across different pipeline types with data capture, replay capabilities, and systematic testing matrices. Examples: <example>Context: User is working on a multi-provider API routing system and needs to add debug capabilities to track data flow through each pipeline step. user: \"I need to add debug hooks to our routing pipeline so we can capture and replay data at each step\" assistant: \"I'll use the pipeline-debug-universal agent to design a comprehensive debug infrastructure with data capture and replay capabilities\" <commentary>Since the user needs pipeline debugging infrastructure, use the pipeline-debug-universal agent to create debug hooks and testing matrices.</commentary></example> <example>Context: User has a complex data transformation pipeline and wants to build systematic testing for each stage and provider. user: \"Our data processing pipeline has issues and we need better testing infrastructure to isolate problems at each step\" assistant: \"Let me use the pipeline-debug-universal agent to create a complete testing matrix and debug system\" <commentary>Since the user needs systematic pipeline testing infrastructure, use the pipeline-debug-universal agent to architect the testing system.</commentary></example> <example>Context: User is building a CI/CD pipeline and needs to implement debug capabilities for tracking deployment issues. user: \"Our deployment pipeline fails randomly and we can't reproduce the issues consistently\" assistant: \"I'll deploy the pipeline-debug-universal agent to create comprehensive debug hooks and replay capabilities for your CI/CD pipeline\" <commentary>Since the user needs debug infrastructure for a deployment pipeline, use the pipeline-debug-universal agent to design the debug system.</commentary></example> (Tools: *)\n\nWhen using the Task tool, you must specify a subagent_type parameter to select which agent type to use.\n\n\n\nWhen NOT to use the Agent tool:\n- If you want to read a specific file path, use the Read or Glob tool instead of the Agent tool, to find the match more quickly\n- If you are searching for a specific class definition like \"class Foo\", use the Glob tool instead, to find the match more quickly\n- If you are searching for code within a specific file or set of 2-3 files, use the Read tool instead of the Agent tool, to find the match more quickly\n- Other tasks that are not related to the agent descriptions above\n\n\nUsage notes:\n1. Launch multiple agents concurrently whenever possible, to maximize performance; to do that, use a single message with multiple tool uses\n2. When the agent is done, it will return a single message back to you. The result returned by the agent is not visible to the user. To show the user the result, you should send a text message back to the user with a concise summary of the result.\n3. Each agent invocation is stateless. You will not be able to send additional messages to the agent, nor will the agent be able to communicate with you outside of its final report. Therefore, your prompt should contain a highly detailed task description for the agent to perform autonomously and you should specify exactly what information the agent should return back to you in its final and only message to you.\n4. The agent's outputs should generally be trusted\n5. Clearly tell the agent whether you expect it to write code or just to do research (search, file reads, web fetches, etc.), since it is not aware of the user's intent\n6. If the agent description mentions that it should be used proactively, then you should try your best to use it without the user having to ask for it first. Use your judgement.\n\nExample usage:\n\n<example_agent_descriptions>\n\"code-reviewer\": use this agent after you are done writing a signficant piece of code\n\"greeting-responder\": use this agent when to respond to user greetings with a friendly joke\n</example_agent_description>\n\n<example>\nuser: \"Please write a function that checks if a number is prime\"\nassistant: Sure let me write a function that checks if a number is prime\nassistant: First let me use the Write tool to write a function that checks if a number is prime\nassistant: I'm going to use the Write tool to write the following code:\n<code>\nfunction isPrime(n) {\n  if (n <= 1) return false\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n</code>\n<commentary>\nSince a signficant piece of code was written and the task was completed, now use the code-reviewer agent to review the code\n</commentary>\nassistant: Now let me use the code-reviewer agent to review the code\nassistant: Uses the Task tool to launch the with the code-reviewer agent\n</example>\n\n<example>\nuser: \"Hello\"\n<commentary>\nSince the user is greeting, use the greeting-responder agent to respond with a friendly joke\n</commentary>\nassistant: \"I'm going to use the Task tool to launch the with the greeting-responder agent\"\n</example>\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "description": {
                "type": "string",
                "description": "A short (3-5 word) description of the task"
              },
              "prompt": {
                "type": "string",
                "description": "The task for the agent to perform"
              },
              "subagent_type": {
                "type": "string",
                "description": "The type of specialized agent to use for this task"
              }
            },
            "required": [
              "description",
              "prompt",
              "subagent_type"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Bash",
          "description": "Executes a given bash command in a persistent shell session with optional timeout, ensuring proper handling and security measures.\n\nBefore executing the command, please follow these steps:\n\n1. Directory Verification:\n   - If the command will create new directories or files, first use the LS tool to verify the parent directory exists and is the correct location\n   - For example, before running \"mkdir foo/bar\", first use LS to check that \"foo\" exists and is the intended parent directory\n\n2. Command Execution:\n   - Always quote file paths that contain spaces with double quotes (e.g., cd \"path with spaces/file.txt\")\n   - Examples of proper quoting:\n     - cd \"/Users/name/My Documents\" (correct)\n     - cd /Users/name/My Documents (incorrect - will fail)\n     - python \"/path/with spaces/script.py\" (correct)\n     - python /path/with spaces/script.py (incorrect - will fail)\n   - After ensuring proper quoting, execute the command.\n   - Capture the output of the command.\n\nUsage notes:\n  - The command argument is required.\n  - You can specify an optional timeout in milliseconds (up to 600000ms / 10 minutes). If not specified, commands will timeout after 120000ms (2 minutes).\n  - It is very helpful if you write a clear, concise description of what this command does in 5-10 words.\n  - If the output exceeds 30000 characters, output will be truncated before being returned to you.\n  - VERY IMPORTANT: You MUST avoid using search commands like `find` and `grep`. Instead use Grep, Glob, or Task to search. You MUST avoid read tools like `cat`, `head`, `tail`, and `ls`, and use Read and LS to read files.\n - If you _still_ need to run `grep`, STOP. ALWAYS USE ripgrep at `rg` first, which all ${PRODUCT_NAME} users have pre-installed.\n  - When issuing multiple commands, use the ';' or '&&' operator to separate them. DO NOT use newlines (newlines are ok in quoted strings).\n  - Try to maintain your current working directory throughout the session by using absolute paths and avoiding usage of `cd`. You may use `cd` if the User explicitly requests it.\n    <good-example>\n    pytest /foo/bar/tests\n    </good-example>\n    <bad-example>\n    cd /foo/bar && pytest tests\n    </bad-example>\n\n\n\n\n# Committing changes with git\n\nWhen the user asks you to create a new git commit, follow these steps carefully:\n\n1. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following bash commands in parallel, each using the Bash tool:\n  - Run a git status command to see all untracked files.\n  - Run a git diff command to see both staged and unstaged changes that will be committed.\n  - Run a git log command to see recent commit messages, so that you can follow this repository's commit message style.\n2. Analyze all staged changes (both previously staged and newly added) and draft a commit message:\n  - Summarize the nature of the changes (eg. new feature, enhancement to an existing feature, bug fix, refactoring, test, docs, etc.). Ensure the message accurately reflects the changes and their purpose (i.e. \"add\" means a wholly new feature, \"update\" means an enhancement to an existing feature, \"fix\" means a bug fix, etc.).\n  - Check for any sensitive information that shouldn't be committed\n  - Draft a concise (1-2 sentences) commit message that focuses on the \"why\" rather than the \"what\"\n  - Ensure it accurately reflects the changes and their purpose\n3. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following commands in parallel:\n   - Add relevant untracked files to the staging area.\n   - Create the commit with a message ending with:\n   🤖 Generated with [Claude Code](https://claude.ai/code)\n\n   Co-Authored-By: Claude <noreply@anthropic.com>\n   - Run git status to make sure the commit succeeded.\n4. If the commit fails due to pre-commit hook changes, retry the commit ONCE to include these automated changes. If it fails again, it usually means a pre-commit hook is preventing the commit. If the commit succeeds but you notice that files were modified by the pre-commit hook, you MUST amend your commit to include them.\n\nImportant notes:\n- NEVER update the git config\n- NEVER run additional commands to read or explore code, besides git bash commands\n- NEVER use the TodoWrite or Task tools\n- DO NOT push to the remote repository unless the user explicitly asks you to do so\n- IMPORTANT: Never use git commands with the -i flag (like git rebase -i or git add -i) since they require interactive input which is not supported.\n- If there are no changes to commit (i.e., no untracked files and no modifications), do not create an empty commit\n- In order to ensure good formatting, ALWAYS pass the commit message via a HEREDOC, a la this example:\n<example>\ngit commit -m \"$(cat <<'EOF'\n   Commit message here.\n\n   🤖 Generated with [Claude Code](https://claude.ai/code)\n\n   Co-Authored-By: Claude <noreply@anthropic.com>\n   EOF\n   )\"\n</example>\n\n# Creating pull requests\nUse the gh command via the Bash tool for ALL GitHub-related tasks including working with issues, pull requests, checks, and releases. If given a Github URL use the gh command to get the information needed.\n\nIMPORTANT: When the user asks you to create a pull request, follow these steps carefully:\n\n1. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following bash commands in parallel using the Bash tool, in order to understand the current state of the branch since it diverged from the main branch:\n   - Run a git status command to see all untracked files\n   - Run a git diff command to see both staged and unstaged changes that will be committed\n   - Check if the current branch tracks a remote branch and is up to date with the remote, so you know if you need to push to the remote\n   - Run a git log command and `git diff [base-branch]...HEAD` to understand the full commit history for the current branch (from the time it diverged from the base branch)\n2. Analyze all changes that will be included in the pull request, making sure to look at all relevant commits (NOT just the latest commit, but ALL commits that will be included in the pull request!!!), and draft a pull request summary\n3. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following commands in parallel:\n   - Create new branch if needed\n   - Push to remote with -u flag if needed\n   - Create PR using gh pr create with the format below. Use a HEREDOC to pass the body to ensure correct formatting.\n<example>\ngh pr create --title \"the pr title\" --body \"$(cat <<'EOF'\n## Summary\n<1-3 bullet points>\n\n## Test plan\n[Checklist of TODOs for testing the pull request...]\n\n🤖 Generated with [Claude Code](https://claude.ai/code)\nEOF\n)\"\n</example>\n\nImportant:\n- NEVER update the git config\n- DO NOT use the TodoWrite or Task tools\n- Return the PR URL when you're done, so the user can see it\n\n# Other common operations\n- View comments on a Github PR: gh api repos/foo/bar/pulls/123/comments",
          "input_schema": {
            "type": "object",
            "properties": {
              "command": {
                "type": "string",
                "description": "The command to execute"
              },
              "timeout": {
                "type": "number",
                "description": "Optional timeout in milliseconds (max 600000)"
              },
              "description": {
                "type": "string",
                "description": " Clear, concise description of what this command does in 5-10 words. Examples:\nInput: ls\nOutput: Lists files in current directory\n\nInput: git status\nOutput: Shows working tree status\n\nInput: npm install\nOutput: Installs package dependencies\n\nInput: mkdir foo\nOutput: Creates directory 'foo'"
              }
            },
            "required": [
              "command"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Glob",
          "description": "- Fast file pattern matching tool that works with any codebase size\n- Supports glob patterns like \"**/*.js\" or \"src/**/*.ts\"\n- Returns matching file paths sorted by modification time\n- Use this tool when you need to find files by name patterns\n- When you are doing an open ended search that may require multiple rounds of globbing and grepping, use the Agent tool instead\n- You have the capability to call multiple tools in a single response. It is always better to speculatively perform multiple searches as a batch that are potentially useful.",
          "input_schema": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "The glob pattern to match files against"
              },
              "path": {
                "type": "string",
                "description": "The directory to search in. If not specified, the current working directory will be used. IMPORTANT: Omit this field to use the default directory. DO NOT enter \"undefined\" or \"null\" - simply omit it for the default behavior. Must be a valid directory path if provided."
              }
            },
            "required": [
              "pattern"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Grep",
          "description": "A powerful search tool built on ripgrep\n\n  Usage:\n  - ALWAYS use Grep for search tasks. NEVER invoke `grep` or `rg` as a Bash command. The Grep tool has been optimized for correct permissions and access.\n  - Supports full regex syntax (e.g., \"log.*Error\", \"function\\s+\\w+\")\n  - Filter files with glob parameter (e.g., \"*.js\", \"**/*.tsx\") or type parameter (e.g., \"js\", \"py\", \"rust\")\n  - Output modes: \"content\" shows matching lines, \"files_with_matches\" shows only file paths (default), \"count\" shows match counts\n  - Use Task tool for open-ended searches requiring multiple rounds\n  - Pattern syntax: Uses ripgrep (not grep) - literal braces need escaping (use `interface\\{\\}` to find `interface{}` in Go code)\n  - Multiline matching: By default patterns match within single lines only. For cross-line patterns like `struct \\{[\\s\\S]*?field`, use `multiline: true`\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "The regular expression pattern to search for in file contents"
              },
              "path": {
                "type": "string",
                "description": "File or directory to search in (rg PATH). Defaults to current working directory."
              },
              "glob": {
                "type": "string",
                "description": "Glob pattern to filter files (e.g. \"*.js\", \"*.{ts,tsx}\") - maps to rg --glob"
              },
              "output_mode": {
                "type": "string",
                "enum": [
                  "content",
                  "files_with_matches",
                  "count"
                ],
                "description": "Output mode: \"content\" shows matching lines (supports -A/-B/-C context, -n line numbers, head_limit), \"files_with_matches\" shows file paths (supports head_limit), \"count\" shows match counts (supports head_limit). Defaults to \"files_with_matches\"."
              },
              "-B": {
                "type": "number",
                "description": "Number of lines to show before each match (rg -B). Requires output_mode: \"content\", ignored otherwise."
              },
              "-A": {
                "type": "number",
                "description": "Number of lines to show after each match (rg -A). Requires output_mode: \"content\", ignored otherwise."
              },
              "-C": {
                "type": "number",
                "description": "Number of lines to show before and after each match (rg -C). Requires output_mode: \"content\", ignored otherwise."
              },
              "-n": {
                "type": "boolean",
                "description": "Show line numbers in output (rg -n). Requires output_mode: \"content\", ignored otherwise."
              },
              "-i": {
                "type": "boolean",
                "description": "Case insensitive search (rg -i)"
              },
              "type": {
                "type": "string",
                "description": "File type to search (rg --type). Common types: js, py, rust, go, java, etc. More efficient than include for standard file types."
              },
              "head_limit": {
                "type": "number",
                "description": "Limit output to first N lines/entries, equivalent to \"| head -N\". Works across all output modes: content (limits output lines), files_with_matches (limits file paths), count (limits count entries). When unspecified, shows all results from ripgrep."
              },
              "multiline": {
                "type": "boolean",
                "description": "Enable multiline mode where . matches newlines and patterns can span lines (rg -U --multiline-dotall). Default: false."
              }
            },
            "required": [
              "pattern"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "LS",
          "description": "Lists files and directories in a given path. The path parameter must be an absolute path, not a relative path. You can optionally provide an array of glob patterns to ignore with the ignore parameter. You should generally prefer the Glob and Grep tools, if you know which directories to search.",
          "input_schema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "The absolute path to the directory to list (must be absolute, not relative)"
              },
              "ignore": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of glob patterns to ignore"
              }
            },
            "required": [
              "path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "ExitPlanMode",
          "description": "Use this tool when you are in plan mode and have finished presenting your plan and are ready to code. This will prompt the user to exit plan mode.\nIMPORTANT: Only use this tool when the task requires planning the implementation steps of a task that requires writing code. For research tasks where you're gathering information, searching files, reading files or in general trying to understand the codebase - do NOT use this tool.\n\nEg.\n1. Initial task: \"Search for and understand the implementation of vim mode in the codebase\" - Do not use the exit plan mode tool because you are not planning the implementation steps of a task.\n2. Initial task: \"Help me implement yank mode for vim\" - Use the exit plan mode tool after you have finished planning the implementation steps of the task.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "plan": {
                "type": "string",
                "description": "The plan you came up with, that you want to run by the user for approval. Supports markdown. The plan should be pretty concise."
              }
            },
            "required": [
              "plan"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Read",
          "description": "Reads a file from the local filesystem. You can access any file directly by using this tool.\nAssume this tool is able to read all files on the machine. If the User provides a path to a file assume that path is valid. It is okay to read a file that does not exist; an error will be returned.\n\nUsage:\n- The file_path parameter must be an absolute path, not a relative path\n- By default, it reads up to 2000 lines starting from the beginning of the file\n- You can optionally specify a line offset and limit (especially handy for long files), but it's recommended to read the whole file by not providing these parameters\n- Any lines longer than 2000 characters will be truncated\n- Results are returned using cat -n format, with line numbers starting at 1\n- This tool allows Claude Code to read images (eg PNG, JPG, etc). When reading an image file the contents are presented visually as Claude Code is a multimodal LLM.\n- This tool can read PDF files (.pdf). PDFs are processed page by page, extracting both text and visual content for analysis.\n- For Jupyter notebooks (.ipynb files), use the NotebookRead instead\n- You have the capability to call multiple tools in a single response. It is always better to speculatively read multiple files as a batch that are potentially useful.\n- You will regularly be asked to read screenshots. If the user provides a path to a screenshot ALWAYS use this tool to view the file at the path. This tool will work with all temporary file paths like /var/folders/123/abc/T/TemporaryItems/NSIRD_screencaptureui_ZfB1tD/Screenshot.png\n- If you read a file that exists but has empty contents you will receive a system reminder warning in place of file contents.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to read"
              },
              "offset": {
                "type": "number",
                "description": "The line number to start reading from. Only provide if the file is too large to read at once"
              },
              "limit": {
                "type": "number",
                "description": "The number of lines to read. Only provide if the file is too large to read at once."
              }
            },
            "required": [
              "file_path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Edit",
          "description": "Performs exact string replacements in files.\n\nUsage:\n- You must use your `Read` tool at least once in the conversation before editing. This tool will error if you attempt an edit without reading the file.\n- When editing text from Read tool output, ensure you preserve the exact indentation (tabs/spaces) as it appears AFTER the line number prefix. The line number prefix format is: spaces + line number + tab. Everything after that tab is the actual file content to match. Never include any part of the line number prefix in the old_string or new_string.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- Only use emojis if the user explicitly requests it. Avoid adding emojis to files unless asked.\n- The edit will FAIL if `old_string` is not unique in the file. Either provide a larger string with more surrounding context to make it unique or use `replace_all` to change every instance of `old_string`.\n- Use `replace_all` for replacing and renaming strings across the file. This parameter is useful if you want to rename a variable for instance.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to modify"
              },
              "old_string": {
                "type": "string",
                "description": "The text to replace"
              },
              "new_string": {
                "type": "string",
                "description": "The text to replace it with (must be different from old_string)"
              },
              "replace_all": {
                "type": "boolean",
                "default": false,
                "description": "Replace all occurences of old_string (default false)"
              }
            },
            "required": [
              "file_path",
              "old_string",
              "new_string"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "MultiEdit",
          "description": "This is a tool for making multiple edits to a single file in one operation. It is built on top of the Edit tool and allows you to perform multiple find-and-replace operations efficiently. Prefer this tool over the Edit tool when you need to make multiple edits to the same file.\n\nBefore using this tool:\n\n1. Use the Read tool to understand the file's contents and context\n2. Verify the directory path is correct\n\nTo make multiple file edits, provide the following:\n1. file_path: The absolute path to the file to modify (must be absolute, not relative)\n2. edits: An array of edit operations to perform, where each edit contains:\n   - old_string: The text to replace (must match the file contents exactly, including all whitespace and indentation)\n   - new_string: The edited text to replace the old_string\n   - replace_all: Replace all occurences of old_string. This parameter is optional and defaults to false.\n\nIMPORTANT:\n- All edits are applied in sequence, in the order they are provided\n- Each edit operates on the result of the previous edit\n- All edits must be valid for the operation to succeed - if any edit fails, none will be applied\n- This tool is ideal when you need to make several changes to different parts of the same file\n- For Jupyter notebooks (.ipynb files), use the NotebookEdit instead\n\nCRITICAL REQUIREMENTS:\n1. All edits follow the same requirements as the single Edit tool\n2. The edits are atomic - either all succeed or none are applied\n3. Plan your edits carefully to avoid conflicts between sequential operations\n\nWARNING:\n- The tool will fail if edits.old_string doesn't match the file contents exactly (including whitespace)\n- The tool will fail if edits.old_string and edits.new_string are the same\n- Since edits are applied in sequence, ensure that earlier edits don't affect the text that later edits are trying to find\n\nWhen making edits:\n- Ensure all edits result in idiomatic, correct code\n- Do not leave the code in a broken state\n- Always use absolute file paths (starting with /)\n- Only use emojis if the user explicitly requests it. Avoid adding emojis to files unless asked.\n- Use replace_all for replacing and renaming strings across the file. This parameter is useful if you want to rename a variable for instance.\n\nIf you want to create a new file, use:\n- A new file path, including dir name if needed\n- First edit: empty old_string and the new file's contents as new_string\n- Subsequent edits: normal edit operations on the created content",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to modify"
              },
              "edits": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "old_string": {
                      "type": "string",
                      "description": "The text to replace"
                    },
                    "new_string": {
                      "type": "string",
                      "description": "The text to replace it with"
                    },
                    "replace_all": {
                      "type": "boolean",
                      "default": false,
                      "description": "Replace all occurences of old_string (default false)."
                    }
                  },
                  "required": [
                    "old_string",
                    "new_string"
                  ],
                  "additionalProperties": false
                },
                "minItems": 1,
                "description": "Array of edit operations to perform sequentially on the file"
              }
            },
            "required": [
              "file_path",
              "edits"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Write",
          "description": "Writes a file to the local filesystem.\n\nUsage:\n- This tool will overwrite the existing file if there is one at the provided path.\n- If this is an existing file, you MUST use the Read tool first to read the file's contents. This tool will fail if you did not read the file first.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- NEVER proactively create documentation files (*.md) or README files. Only create documentation files if explicitly requested by the User.\n- Only use emojis if the user explicitly requests it. Avoid writing emojis to files unless asked.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to write (must be absolute, not relative)"
              },
              "content": {
                "type": "string",
                "description": "The content to write to the file"
              }
            },
            "required": [
              "file_path",
              "content"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "NotebookRead",
          "description": "Reads a Jupyter notebook (.ipynb file) and returns all of the cells with their outputs. Jupyter notebooks are interactive documents that combine code, text, and visualizations, commonly used for data analysis and scientific computing. The notebook_path parameter must be an absolute path, not a relative path.",
          "input_schema": {
            "type": "object",
            "properties": {
              "notebook_path": {
                "type": "string",
                "description": "The absolute path to the Jupyter notebook file to read (must be absolute, not relative)"
              },
              "cell_id": {
                "type": "string",
                "description": "The ID of a specific cell to read. If not provided, all cells will be read."
              }
            },
            "required": [
              "notebook_path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "NotebookEdit",
          "description": "Completely replaces the contents of a specific cell in a Jupyter notebook (.ipynb file) with new source. Jupyter notebooks are interactive documents that combine code, text, and visualizations, commonly used for data analysis and scientific computing. The notebook_path parameter must be an absolute path, not a relative path. The cell_number is 0-indexed. Use edit_mode=insert to add a new cell at the index specified by cell_number. Use edit_mode=delete to delete the cell at the index specified by cell_number.",
          "input_schema": {
            "type": "object",
            "properties": {
              "notebook_path": {
                "type": "string",
                "description": "The absolute path to the Jupyter notebook file to edit (must be absolute, not relative)"
              },
              "cell_id": {
                "type": "string",
                "description": "The ID of the cell to edit. When inserting a new cell, the new cell will be inserted after the cell with this ID, or at the beginning if not specified."
              },
              "new_source": {
                "type": "string",
                "description": "The new source for the cell"
              },
              "cell_type": {
                "type": "string",
                "enum": [
                  "code",
                  "markdown"
                ],
                "description": "The type of the cell (code or markdown). If not specified, it defaults to the current cell type. If using edit_mode=insert, this is required."
              },
              "edit_mode": {
                "type": "string",
                "enum": [
                  "replace",
                  "insert",
                  "delete"
                ],
                "description": "The type of edit to make (replace, insert, delete). Defaults to replace."
              }
            },
            "required": [
              "notebook_path",
              "new_source"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "WebFetch",
          "description": "\n- Fetches content from a specified URL and processes it using an AI model\n- Takes a URL and a prompt as input\n- Fetches the URL content, converts HTML to markdown\n- Processes the content with the prompt using a small, fast model\n- Returns the model's response about the content\n- Use this tool when you need to retrieve and analyze web content\n\nUsage notes:\n  - IMPORTANT: If an MCP-provided web fetch tool is available, prefer using that tool instead of this one, as it may have fewer restrictions. All MCP-provided tools start with \"mcp__\".\n  - The URL must be a fully-formed valid URL\n  - HTTP URLs will be automatically upgraded to HTTPS\n  - The prompt should describe what information you want to extract from the page\n  - This tool is read-only and does not modify any files\n  - Results may be summarized if the content is very large\n  - Includes a self-cleaning 15-minute cache for faster responses when repeatedly accessing the same URL\n  - When a URL redirects to a different host, the tool will inform you and provide the redirect URL in a special format. You should then make a new WebFetch request with the redirect URL to fetch the content.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "format": "uri",
                "description": "The URL to fetch content from"
              },
              "prompt": {
                "type": "string",
                "description": "The prompt to run on the fetched content"
              }
            },
            "required": [
              "url",
              "prompt"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "TodoWrite",
          "description": "Use this tool to create and manage a structured task list for your current coding session. This helps you track progress, organize complex tasks, and demonstrate thoroughness to the user.\nIt also helps the user understand the progress of the task and overall progress of their requests.\n\n## When to Use This Tool\nUse this tool proactively in these scenarios:\n\n1. Complex multi-step tasks - When a task requires 3 or more distinct steps or actions\n2. Non-trivial and complex tasks - Tasks that require careful planning or multiple operations\n3. User explicitly requests todo list - When the user directly asks you to use the todo list\n4. User provides multiple tasks - When users provide a list of things to be done (numbered or comma-separated)\n5. After receiving new instructions - Immediately capture user requirements as todos\n6. When you start working on a task - Mark it as in_progress BEFORE beginning work. Ideally you should only have one todo as in_progress at a time\n7. After completing a task - Mark it as completed and add any new follow-up tasks discovered during implementation\n\n## When NOT to Use This Tool\n\nSkip using this tool when:\n1. There is only a single, straightforward task\n2. The task is trivial and tracking it provides no organizational benefit\n3. The task can be completed in less than 3 trivial steps\n4. The task is purely conversational or informational\n\nNOTE that you should not use this tool if there is only one trivial task to do. In this case you are better off just doing the task directly.\n\n## Examples of When to Use the Todo List\n\n<example>\nUser: I want to add a dark mode toggle to the application settings. Make sure you run the tests and build when you're done!\nAssistant: I'll help add a dark mode toggle to your application settings. Let me create a todo list to track this implementation.\n*Creates todo list with the following items:*\n1. Create dark mode toggle component in Settings page\n2. Add dark mode state management (context/store)\n3. Implement CSS-in-JS styles for dark theme\n4. Update existing components to support theme switching\n5. Run tests and build process, addressing any failures or errors that occur\n*Begins working on the first task*\n\n<reasoning>\nThe assistant used the todo list because:\n1. Adding dark mode is a multi-step feature requiring UI, state management, and styling changes\n2. The user explicitly requested tests and build be run afterward\n3. The assistant inferred that tests and build need to pass by adding \"Ensure tests and build succeed\" as the final task\n</reasoning>\n</example>\n\n<example>\nUser: Help me rename the function getCwd to getCurrentWorkingDirectory across my project\nAssistant: Let me first search through your codebase to find all occurrences of 'getCwd'.\n*Uses grep or search tools to locate all instances of getCwd in the codebase*\nAssistant: I've found 15 instances of 'getCwd' across 8 different files. Let me create a todo list to track these changes.\n*Creates todo list with specific items for each file that needs updating*\n\n<reasoning>\nThe assistant used the todo list because:\n1. First, the assistant searched to understand the scope of the task\n2. Upon finding multiple occurrences across different files, it determined this was a complex task with multiple steps\n3. The todo list helps ensure every instance is tracked and updated systematically\n4. This approach prevents missing any occurrences and maintains code consistency\n</reasoning>\n</example>\n\n\n<example>\nUser: I need to implement these features for my e-commerce site: user registration, product catalog, shopping cart, and checkout flow.\nAssistant: I'll help implement these features. First, let's add all the features to the todo list.\n*Creates a todo list breaking down each feature into specific tasks based on the project architecture*\nAssistant: Let's start with user registration. This will involve creating database models, API endpoints, and frontend forms that integrate with your existing authentication system.\n\n<reasoning>\nThe assistant used the todo list because:\n1. The user provided multiple complex features to implement in a comma separated list\n2. The todo list helps organize these large features into manageable tasks\n3. This approach allows for tracking progress across the entire implementation\n</reasoning>\n</example>\n\n<example>\nUser: Can you help optimize my React application? It's rendering slowly and has performance issues.</user>\nAssistant: I'll help optimize your React application. First, let me examine your codebase to identify potential performance bottlenecks.\n*Reviews component structure, render patterns, state management, and data fetching*\nAssistant: After analyzing your codebase, I've identified several performance issues. Let me create a todo list to track our optimization efforts.\n*Creates todo list with items like: 1) Implement memoization for expensive calculations in ProductList, 2) Add virtualization for long lists in Dashboard, 3) Optimize image loading in Gallery component, 4) Fix state update loops in ShoppingCart, 5) Review bundle size and implement code splitting*\nLet's start by implementing memoization for the expensive calculations in your ProductList component.</assistant>\n\n<reasoning>\nThe assistant used the todo list because:\n1. First, the assistant examined the codebase to identify specific performance issues\n2. Based on this analysis, it identified multiple optimization opportunities\n3. Performance optimization is a non-trivial task requiring multiple steps\n4. The todo list helps methodically track improvements across different components\n5. This systematic approach ensures all performance bottlenecks are addressed\n</reasoning>\n</example>\n\n## Examples of When NOT to Use the Todo List\n\n<example>\nUser: How do I print 'Hello World' in Python?\nAssistant: In Python, you can print \"Hello World\" with this simple code:\n\npython\nprint(\"Hello World\")\n\nThis will output the text \"Hello World\" to the console when executed.</assistant>\n\n<reasoning>\nThe assistant did not use the todo list because this is a single, trivial task that can be completed in one step. There's no need to track multiple tasks or steps for such a straightforward request.\n</reasoning>\n</example>\n\n<example>\nUser: What does the git status command do?\nAssistant: The git status command shows the current state of your working directory and staging area. It displays which changes have been staged, which haven't, and which files aren't being tracked by Git. This is a fundamental command for understanding the current state of your repository before making commits.\n\n<reasoning>\nThe assistant did not use the todo list because this is an informational request with no actual coding task to complete. The user is simply asking for an explanation, not for the assistant to perform multiple steps or tasks.\n</reasoning>\n</example>\n\n<example>\nUser: Can you add a comment to the calculateTotal function to explain what it does?\nAssistant: Sure, let me add a comment to the calculateTotal function to explain what it does.\n* Uses the Edit tool to add a comment to the calculateTotal function *\n\n<reasoning>\nThe assistant did not use the todo list because this is a single, straightforward task confined to one location in the code. Adding a comment doesn't require tracking multiple steps or systematic organization.\n</reasoning>\n</example>\n\n<example>\nUser: Run npm install for me and tell me what happens.\nAssistant: I'll run the npm install command for you.\n\n*Executes: npm install*\n\nThe command completed successfully. Here's the output:\n[Output of npm install command]\n\nAll dependencies have been installed according to your package.json file.\n\n<reasoning>\nThe assistant did not use the todo list because this is a single command execution with immediate results. There are no multiple steps to track or organize, making the todo list unnecessary for this straightforward task.\n</reasoning>\n</example>\n\n## Task States and Management\n\n1. **Task States**: Use these states to track progress:\n   - pending: Task not yet started\n   - in_progress: Currently working on (limit to ONE task at a time)\n   - completed: Task finished successfully\n\n2. **Task Management**:\n   - Update task status in real-time as you work\n   - Mark tasks complete IMMEDIATELY after finishing (don't batch completions)\n   - Only have ONE task in_progress at any time\n   - Complete current tasks before starting new ones\n   - Remove tasks that are no longer relevant from the list entirely\n\n3. **Task Completion Requirements**:\n   - ONLY mark a task as completed when you have FULLY accomplished it\n   - If you encounter errors, blockers, or cannot finish, keep the task as in_progress\n   - When blocked, create a new task describing what needs to be resolved\n   - Never mark a task as completed if:\n     - Tests are failing\n     - Implementation is partial\n     - You encountered unresolved errors\n     - You couldn't find necessary files or dependencies\n\n4. **Task Breakdown**:\n   - Create specific, actionable items\n   - Break complex tasks into smaller, manageable steps\n   - Use clear, descriptive task names\n\nWhen in doubt, use this tool. Being proactive with task management demonstrates attentiveness and ensures you complete all requirements successfully.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "todos": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "content": {
                      "type": "string",
                      "minLength": 1
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "pending",
                        "in_progress",
                        "completed"
                      ]
                    },
                    "priority": {
                      "type": "string",
                      "enum": [
                        "high",
                        "medium",
                        "low"
                      ]
                    },
                    "id": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "content",
                    "status",
                    "priority",
                    "id"
                  ],
                  "additionalProperties": false
                },
                "description": "The updated todo list"
              }
            },
            "required": [
              "todos"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "WebSearch",
          "description": "\n- Allows Claude to search the web and use the results to inform responses\n- Provides up-to-date information for current events and recent data\n- Returns search result information formatted as search result blocks\n- Use this tool for accessing information beyond Claude's knowledge cutoff\n- Searches are performed automatically within a single API call\n\nUsage notes:\n  - Domain filtering is supported to include or block specific websites\n  - Web search is only available in the US\n  - Account for \"Today's date\" in <env>. For example, if <env> says \"Today's date: 2025-07-01\", and the user wants the latest docs, do not use 2024 in the search query. Use 2025.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "minLength": 2,
                "description": "The search query to use"
              },
              "allowed_domains": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Only include search results from these domains"
              },
              "blocked_domains": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Never include search results from these domains"
              }
            },
            "required": [
              "query"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        }
      ],
      "responseStructure": {
        "type": "object",
        "keys": [
          "id",
          "object",
          "created",
          "model",
          "choices",
          "usage",
          "stats",
          "system_fingerprint"
        ],
        "hasChoices": true,
        "hasContent": false,
        "hasUsage": true,
        "choicesCount": 1,
        "firstChoice": {
          "hasMessage": true,
          "hasToolCalls": false,
          "finishReason": "stop"
        }
      },
      "parsingAttempts": [
        "json_format",
        "function_call",
        "action_format",
        "natural_language"
      ]
    }
  },
  {
    "timestamp": "2025-08-10T06:49:17.973Z",
    "requestId": "session_1754804126703_ixall6oy5:conv_1754804126703_sm1ur5dvo:15:1754808545118:hkb6",
    "provider": "lmstudio",
    "model": "gpt-oss-20b-mlx",
    "endpoint": "localhost:1234",
    "failureType": "text_instead_of_tools",
    "originalResponse": {
      "id": "chatcmpl-laj1gqdihbpabvgo0d98d",
      "object": "chat.completion",
      "created": 1754808545,
      "model": "gpt-oss-20b-mlx",
      "choices": [
        {
          "index": 0,
          "logprobs": null,
          "finish_reason": "stop",
          "message": {
            "role": "assistant",
            "content": "User says: \"小说就是本项目\" which translates to \"The novel is this project\". Likely they want a story? They might be saying the novel is the project. Maybe they want to write a novel about this project? Or maybe they are saying \"novel is the project\" meaning they want to create a novel. The user didn't specify further. We need to ask clarifying question? But guidelines: respond appropriately. They might want a novel about the project. We can ask for more details or propose to write a short story. Let's respond asking what kind of novel, genre, length, etc.看起来您想把“小说”与本项目结合起来。能否再多说一点：\n\n- 您想写的是哪种类型的小说（科幻、悬疑、爱情等）？\n- 目标读者是谁？想要多长（短篇、中篇、完整小说）？\n- 是否需要把项目中的某些技术细节或情节融入故事？\n\n有了这些信息，我就能帮您构思大纲、角色设定，甚至直接写一段开头。请告诉我更多细节吧！"
          }
        }
      ],
      "usage": {
        "prompt_tokens": 12438,
        "completion_tokens": 240,
        "total_tokens": 12678
      },
      "stats": {},
      "system_fingerprint": "gpt-oss-20b-mlx"
    },
    "expectedFormat": "openai",
    "errorMessage": "All parsing strategies failed",
    "responseAnalysis": {
      "hasToolCalls": false,
      "hasContent": true,
      "contentLength": 707,
      "contentPreview": "User says: \"小说就是本项目\" which translates to \"The novel is this project\". Likely they want a story? They might be saying the novel is the project. Maybe they want to write a novel about this project? Or m",
      "finishReason": "stop",
      "toolCallPatterns": []
    },
    "debugInfo": {
      "requestTools": [
        {
          "name": "Task",
          "description": "Launch a new agent to handle complex, multi-step tasks autonomously.\n\nAvailable agent types and the tools they have access to:\n- general-purpose: General-purpose agent for researching complex questions, searching for code, and executing multi-step tasks. When you are searching for a keyword or file and are not confident that you will find the right match in the first few tries use this agent to perform the search for you. (Tools: *)\n- code-refactorer: Use this agent when you need to improve existing code structure, readability, or maintainability without changing functionality. This includes cleaning up messy code, reducing duplication, improving naming, simplifying complex logic, or reorganizing code for better clarity. Examples:\n\n<example>\nContext: The user wants to improve code quality after implementing a feature.\nuser: \"I just finished implementing the user authentication system. Can you help clean it up?\"\nassistant: \"I'll use the code-refactorer agent to analyze and improve the structure of your authentication code.\"\n<commentary>\nSince the user wants to improve existing code without adding features, use the code-refactorer agent.\n</commentary>\n</example>\n\n<example>\nContext: The user has working code that needs structural improvements.\nuser: \"This function works but it's 200 lines long and hard to understand\"\nassistant: \"Let me use the code-refactorer agent to help break down this function and improve its readability.\"\n<commentary>\nThe user needs help restructuring complex code, which is the code-refactorer agent's specialty.\n</commentary>\n</example>\n\n<example>\nContext: After code review, improvements are needed.\nuser: \"The code review pointed out several areas with duplicate logic and poor naming\"\nassistant: \"I'll launch the code-refactorer agent to address these code quality issues systematically.\"\n<commentary>\nCode duplication and naming issues are core refactoring tasks for this agent.\n</commentary>\n</example> (Tools: Edit, MultiEdit, Write, NotebookEdit, Grep, LS, Read)\n- project-task-planner: Use this agent when you need to create a comprehensive development task list from a Product Requirements Document (PRD). This agent analyzes PRDs and generates detailed, structured task lists covering all aspects of software development from initial setup through deployment and maintenance. Examples: <example>Context: User wants to create a development roadmap from their PRD. user: \"I have a PRD for a new e-commerce platform. Can you create a task list?\" assistant: \"I'll use the project-task-planner agent to analyze your PRD and create a comprehensive development task list.\" <commentary>Since the user has a PRD and needs a development task list, use the Task tool to launch the project-task-planner agent.</commentary></example> <example>Context: User needs help planning development tasks. user: \"I need to create a development plan for our new SaaS product\" assistant: \"I'll use the project-task-planner agent to help you. First, I'll need to see your Product Requirements Document (PRD).\" <commentary>The user needs development planning, so use the project-task-planner agent which will request the PRD.</commentary></example> (Tools: Task, Bash, Edit, MultiEdit, Write, NotebookEdit, Grep, LS, Read, ExitPlanMode, TodoWrite, WebSearch)\n- vibe-coding-coach: Use this agent when users want to build applications through conversation, focusing on the vision and feel of their app rather than technical implementation details. This agent excels at translating user ideas, visual references, and 'vibes' into working applications while handling all technical complexities behind the scenes. <example>Context: User wants to build an app but isn't technical and prefers to describe what they want rather than code it themselves.\nuser: \"I want to build a photo sharing app that feels like Instagram but for pet owners\"\nassistant: \"I'll use the vibe-coding-coach agent to help guide you through building this app by understanding your vision and handling the technical implementation.\"\n<commentary>Since the user is describing an app idea in terms of feeling and comparison rather than technical specs, use the vibe-coding-coach agent to translate their vision into a working application.</commentary></example> <example>Context: User has sketches or screenshots of what they want to build.\nuser: \"Here's a screenshot of an app I like. Can we build something similar but for tracking workouts?\"\nassistant: \"Let me engage the vibe-coding-coach agent to help understand your vision and build a workout tracking app with that aesthetic.\"\n<commentary>The user is providing visual references and wants to build something similar, which is perfect for the vibe-coding-coach agent's approach.</commentary></example> (Tools: *)\n- debug-system-architect: Use this agent when you need to establish a comprehensive debug logging system for a project. This includes setting up log directories, implementing node-level tracing, creating time-based test records, establishing replay mechanisms, and documenting debug rules. Example: <example> Context: User is setting up a new project and wants to implement proper debugging infrastructure from the start. user: \"Please help me set up a debug system for my new API router project\" <commentary> Since the user is requesting debug system setup, use the debug-system-architect agent to analyze the project and implement comprehensive logging and tracing mechanisms. </commentary> </example> <example> Context: User encounters intermittent issues in their routing system and needs better visibility. user: \"I'm having trouble tracking down why some requests fail intermittently\" <commentary> Since the user needs better debugging visibility for intermittent issues, use the debug-system-architect agent to implement node-level tracing and replay mechanisms. </commentary> </example> (Tools: *)\n- code-risk-auditor: Use this agent when you need to perform comprehensive code risk assessment and identify potential architectural issues in your codebase. Examples: <example>Context: The user has just completed a major refactoring and wants to ensure no hardcoded values or fallback mechanisms were introduced. user: \"I just finished refactoring the routing system, can you check for any code risks?\" assistant: \"I'll use the code-risk-auditor agent to perform a comprehensive risk assessment of your routing system changes.\"</example> <example>Context: Before a major release, the user wants to clean up technical debt and ensure code quality. user: \"We're preparing for v2.0 release, I need a full code audit\" assistant: \"Let me launch the code-risk-auditor agent to identify hardcoding, fallback risks, outdated tests, and duplicate implementations across the entire codebase.\"</example> <example>Context: The user notices inconsistent behavior and suspects duplicate implementations. user: \"The same feature seems to be implemented in multiple places, causing bugs\" assistant: \"I'll use the code-risk-auditor agent to scan for duplicate implementations and provide a consolidation plan.\"</example> (Tools: *)\n- security-auditor: Use this agent when you need to perform a comprehensive security audit of a codebase, identify vulnerabilities, and generate a detailed security report with actionable remediation steps. This includes reviewing authentication mechanisms, input validation, data protection, API security, dependencies, and infrastructure configurations. Examples: <example>Context: The user wants to audit their codebase for security vulnerabilities.\nuser: \"Can you perform a security audit of my application?\"\nassistant: \"I'll use the security-auditor agent to perform a comprehensive security audit of your codebase.\"\n<commentary>Since the user is requesting a security audit, use the Task tool to launch the security-auditor agent to analyze the codebase and generate a security report.</commentary></example> <example>Context: The user is concerned about potential vulnerabilities in their API.\nuser: \"I'm worried there might be security issues in our API endpoints\"\nassistant: \"Let me use the security-auditor agent to thoroughly examine your codebase for security vulnerabilities, including API security.\"\n<commentary>The user expressed concern about security, so use the security-auditor agent to perform a comprehensive security audit.</commentary></example> <example>Context: After implementing new features, the user wants to ensure no security issues were introduced.\nuser: \"We just added user authentication to our app. Can you check if it's secure?\"\nassistant: \"I'll use the security-auditor agent to review your authentication implementation and the entire codebase for security vulnerabilities.\"\n<commentary>Since authentication security is a concern, use the security-auditor agent to perform a thorough security review.</commentary></example> (Tools: Task, Bash, Edit, MultiEdit, Write, NotebookEdit)\n- project-memory-manager: Use this agent when you need to manage project-specific memory entries, create project documentation, or organize project knowledge. This includes creating project summaries, documenting project decisions, tracking project progress, and maintaining project-specific knowledge bases. <example>Context: User wants to document a project decision or create project documentation. user: \"请为我们的新项目创建一个内存管理系统的文档\" assistant: \"我将使用 project-memory-manager agent 来创建这个项目文档\" <commentary>Since the user needs project documentation, use the project-memory-manager agent to create project-specific memory entries.</commentary></example> <example>Context: User wants to track project progress or decisions. user: \"我们需要记录这个项目的关键决策点\" assistant: \"让我使用 project-memory-manager agent 来记录这些项目决策\" <commentary>Since this is project tracking, use the project-memory-manager agent to create decision-type memory entries.</commentary></example> (Tools: *)\n- rules-architect: Use this agent when you need to analyze project architecture and establish comprehensive rule management systems. Examples: <example>Context: User wants to organize project rules and create a structured rule management system. user: \"I need to reorganize our project rules and create a better structure for managing coding standards, file organization, and testing protocols\" assistant: \"I'll use the rules-architect agent to analyze the current project structure and establish a comprehensive rule management system with proper categorization and organization.\"</example> <example>Context: Project has grown complex and needs better rule organization. user: \"Our CLAUDE.md file is getting too large and we need to break down rules into manageable categories\" assistant: \"Let me call the rules-architect agent to create a structured .claude/rules system that will organize all project rules into logical categories.\"</example> (Tools: *)\n- frontend-designer: Use this agent when you need to convert design mockups, wireframes, or visual concepts into detailed technical specifications and implementation guides for frontend development. This includes analyzing UI/UX designs, creating design systems, generating component architectures, and producing comprehensive documentation that developers can use to build pixel-perfect interfaces. Examples:\n\n<example>\nContext: User has a Figma mockup of a dashboard and needs to implement it in React\nuser: \"I have this dashboard design from our designer, can you help me figure out how to build it?\"\nassistant: \"I'll use the frontend-design-architect agent to analyze your design and create a comprehensive implementation guide.\"\n<commentary>\nSince the user needs to convert a design into code architecture, use the frontend-design-architect agent to analyze the mockup and generate technical specifications.\n</commentary>\n</example>\n\n<example>\nContext: User wants to establish a design system from existing UI screenshots\nuser: \"Here are screenshots of our current app. We need to extract a consistent design system from these.\"\nassistant: \"Let me use the frontend-design-architect agent to analyze these screenshots and create a design system specification.\"\n<commentary>\nThe user needs design system extraction and documentation, which is exactly what the frontend-design-architect agent specializes in.\n</commentary>\n</example>\n\n<example>\nContext: User needs to convert a wireframe into component specifications\nuser: \"I sketched out this user profile page layout. How should I structure the components?\"\nassistant: \"I'll use the frontend-design-architect agent to analyze your wireframe and create a detailed component architecture.\"\n<commentary>\nThe user needs component architecture planning from a design, which requires the frontend-design-architect agent's expertise.\n</commentary>\n</example> (Tools: *)\n- content-writer: Use this agent when you need to create compelling, informative content that explains complex topics in simple terms. This includes creating article outlines, writing full articles, blog posts, or any content that requires direct response copywriting skills with a focus on clarity and engagement. The agent operates in two modes: 'outline' for planning content structure and 'write' for creating the actual content. Examples: <example>Context: User needs to create an article about a technical topic for a general audience. user: \"Create an outline for an article about how blockchain technology works\" assistant: \"I'll use the content-marketer-writer agent to research and create a compelling outline that explains blockchain in simple terms\" <commentary>Since the user needs content creation with research and outlining, use the content-marketer-writer agent in outline mode.</commentary></example> <example>Context: User has an outline and needs to write the full article. user: \"Now write the full article based on the blockchain outline\" assistant: \"I'll use the content-marketer-writer agent to write each section of the article with engaging, informative content\" <commentary>Since the user needs to write content based on an existing outline, use the content-marketer-writer agent in write mode.</commentary></example> (Tools: *)\n- test-runner: Use this agent to run and manage tests according to the global and project-specific testing rules. This includes executing test scripts, documenting test results, and helping to diagnose issues following the standard pipeline. <example>Context: User wants to run all functional tests. user: \"运行所有功能测试\" assistant: \"我将使用 test-runner agent 来执行所有功能测试\" <commentary>Since the user wants to run tests by category, use the test-runner agent.</commentary></example> <example>Context: User wants to verify a bug fix. user: \"我修复了一个bug，帮我验证一下\" assistant: \"让我使用 test-runner agent 来执行对应的修复验证测试\" <commentary>The user needs to verify a fix, which is a core task for the test-runner agent.</commentary></example> (Tools: *)\n- in-depth-research-analyst: Use this agent when you need to conduct comprehensive research reports with in-depth web mining, data analysis, and visualization. This includes industry analysis, market research, competitive intelligence, and trend forecasting with accurate data from authoritative sources. <example>Context: User wants a comprehensive industry analysis report. user: \"请对人工智能芯片市场进行深入调研，包括主要厂商、市场份额和增长趋势\" assistant: \"我将使用 in-depth-research-analyst agent 来进行这项深入的市场调研并生成可视化报告\" <commentary>Since the user needs a comprehensive industry analysis with data visualization, use the in-depth-research-analyst agent to conduct thorough research and create an integrated report.</commentary></example> <example>Context: User wants market research with accurate data and visualizations. user: \"我们需要一份关于电动汽车充电基础设施的深度报告，包含数据图表\" assistant: \"让我使用 in-depth-research-analyst agent 来收集准确数据并生成图文并茂的分析报告\" <commentary>Since this requires market research with data accuracy and visualizations, use the in-depth-research-analyst agent to create a comprehensive report.</commentary></example> (Tools: *)\n- prd-writer: Use this agent when you need to create a comprehensive Product Requirements Document (PRD) for a software project or feature. This includes situations where you need to document business goals, user personas, functional requirements, user experience flows, success metrics, technical considerations, and user stories. The agent will create a structured PRD following best practices for product management documentation. Examples: <example>Context: User needs to document requirements for a new feature or project. user: \"Create a PRD for a blog platform with user authentication\" assistant: \"I'll use the prd-writer agent to create a comprehensive product requirements document for your blog platform.\" <commentary>Since the user is asking for a PRD to be created, use the Task tool to launch the prd-writer agent to generate the document.</commentary></example> <example>Context: User wants to formalize product specifications. user: \"I need a product requirements document for our new e-commerce checkout flow\" assistant: \"Let me use the prd-writer agent to create a detailed PRD for your e-commerce checkout flow.\" <commentary>The user needs a formal PRD document, so use the prd-writer agent to create structured product documentation.</commentary></example> (Tools: Task, Bash, Grep, LS, Read, Write, WebSearch, Glob)\n- pipeline-debug-universal: Use this agent when you need to implement comprehensive debug hooks and testing infrastructure for ANY pipeline system - whether it's API routing, data processing, CI/CD workflows, or transformation pipelines. This agent specializes in creating universal debug architectures that work across different pipeline types with data capture, replay capabilities, and systematic testing matrices. Examples: <example>Context: User is working on a multi-provider API routing system and needs to add debug capabilities to track data flow through each pipeline step. user: \"I need to add debug hooks to our routing pipeline so we can capture and replay data at each step\" assistant: \"I'll use the pipeline-debug-universal agent to design a comprehensive debug infrastructure with data capture and replay capabilities\" <commentary>Since the user needs pipeline debugging infrastructure, use the pipeline-debug-universal agent to create debug hooks and testing matrices.</commentary></example> <example>Context: User has a complex data transformation pipeline and wants to build systematic testing for each stage and provider. user: \"Our data processing pipeline has issues and we need better testing infrastructure to isolate problems at each step\" assistant: \"Let me use the pipeline-debug-universal agent to create a complete testing matrix and debug system\" <commentary>Since the user needs systematic pipeline testing infrastructure, use the pipeline-debug-universal agent to architect the testing system.</commentary></example> <example>Context: User is building a CI/CD pipeline and needs to implement debug capabilities for tracking deployment issues. user: \"Our deployment pipeline fails randomly and we can't reproduce the issues consistently\" assistant: \"I'll deploy the pipeline-debug-universal agent to create comprehensive debug hooks and replay capabilities for your CI/CD pipeline\" <commentary>Since the user needs debug infrastructure for a deployment pipeline, use the pipeline-debug-universal agent to design the debug system.</commentary></example> (Tools: *)\n\nWhen using the Task tool, you must specify a subagent_type parameter to select which agent type to use.\n\n\n\nWhen NOT to use the Agent tool:\n- If you want to read a specific file path, use the Read or Glob tool instead of the Agent tool, to find the match more quickly\n- If you are searching for a specific class definition like \"class Foo\", use the Glob tool instead, to find the match more quickly\n- If you are searching for code within a specific file or set of 2-3 files, use the Read tool instead of the Agent tool, to find the match more quickly\n- Other tasks that are not related to the agent descriptions above\n\n\nUsage notes:\n1. Launch multiple agents concurrently whenever possible, to maximize performance; to do that, use a single message with multiple tool uses\n2. When the agent is done, it will return a single message back to you. The result returned by the agent is not visible to the user. To show the user the result, you should send a text message back to the user with a concise summary of the result.\n3. Each agent invocation is stateless. You will not be able to send additional messages to the agent, nor will the agent be able to communicate with you outside of its final report. Therefore, your prompt should contain a highly detailed task description for the agent to perform autonomously and you should specify exactly what information the agent should return back to you in its final and only message to you.\n4. The agent's outputs should generally be trusted\n5. Clearly tell the agent whether you expect it to write code or just to do research (search, file reads, web fetches, etc.), since it is not aware of the user's intent\n6. If the agent description mentions that it should be used proactively, then you should try your best to use it without the user having to ask for it first. Use your judgement.\n\nExample usage:\n\n<example_agent_descriptions>\n\"code-reviewer\": use this agent after you are done writing a signficant piece of code\n\"greeting-responder\": use this agent when to respond to user greetings with a friendly joke\n</example_agent_description>\n\n<example>\nuser: \"Please write a function that checks if a number is prime\"\nassistant: Sure let me write a function that checks if a number is prime\nassistant: First let me use the Write tool to write a function that checks if a number is prime\nassistant: I'm going to use the Write tool to write the following code:\n<code>\nfunction isPrime(n) {\n  if (n <= 1) return false\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n</code>\n<commentary>\nSince a signficant piece of code was written and the task was completed, now use the code-reviewer agent to review the code\n</commentary>\nassistant: Now let me use the code-reviewer agent to review the code\nassistant: Uses the Task tool to launch the with the code-reviewer agent\n</example>\n\n<example>\nuser: \"Hello\"\n<commentary>\nSince the user is greeting, use the greeting-responder agent to respond with a friendly joke\n</commentary>\nassistant: \"I'm going to use the Task tool to launch the with the greeting-responder agent\"\n</example>\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "description": {
                "type": "string",
                "description": "A short (3-5 word) description of the task"
              },
              "prompt": {
                "type": "string",
                "description": "The task for the agent to perform"
              },
              "subagent_type": {
                "type": "string",
                "description": "The type of specialized agent to use for this task"
              }
            },
            "required": [
              "description",
              "prompt",
              "subagent_type"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Bash",
          "description": "Executes a given bash command in a persistent shell session with optional timeout, ensuring proper handling and security measures.\n\nBefore executing the command, please follow these steps:\n\n1. Directory Verification:\n   - If the command will create new directories or files, first use the LS tool to verify the parent directory exists and is the correct location\n   - For example, before running \"mkdir foo/bar\", first use LS to check that \"foo\" exists and is the intended parent directory\n\n2. Command Execution:\n   - Always quote file paths that contain spaces with double quotes (e.g., cd \"path with spaces/file.txt\")\n   - Examples of proper quoting:\n     - cd \"/Users/name/My Documents\" (correct)\n     - cd /Users/name/My Documents (incorrect - will fail)\n     - python \"/path/with spaces/script.py\" (correct)\n     - python /path/with spaces/script.py (incorrect - will fail)\n   - After ensuring proper quoting, execute the command.\n   - Capture the output of the command.\n\nUsage notes:\n  - The command argument is required.\n  - You can specify an optional timeout in milliseconds (up to 600000ms / 10 minutes). If not specified, commands will timeout after 120000ms (2 minutes).\n  - It is very helpful if you write a clear, concise description of what this command does in 5-10 words.\n  - If the output exceeds 30000 characters, output will be truncated before being returned to you.\n  - VERY IMPORTANT: You MUST avoid using search commands like `find` and `grep`. Instead use Grep, Glob, or Task to search. You MUST avoid read tools like `cat`, `head`, `tail`, and `ls`, and use Read and LS to read files.\n - If you _still_ need to run `grep`, STOP. ALWAYS USE ripgrep at `rg` first, which all ${PRODUCT_NAME} users have pre-installed.\n  - When issuing multiple commands, use the ';' or '&&' operator to separate them. DO NOT use newlines (newlines are ok in quoted strings).\n  - Try to maintain your current working directory throughout the session by using absolute paths and avoiding usage of `cd`. You may use `cd` if the User explicitly requests it.\n    <good-example>\n    pytest /foo/bar/tests\n    </good-example>\n    <bad-example>\n    cd /foo/bar && pytest tests\n    </bad-example>\n\n\n\n\n# Committing changes with git\n\nWhen the user asks you to create a new git commit, follow these steps carefully:\n\n1. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following bash commands in parallel, each using the Bash tool:\n  - Run a git status command to see all untracked files.\n  - Run a git diff command to see both staged and unstaged changes that will be committed.\n  - Run a git log command to see recent commit messages, so that you can follow this repository's commit message style.\n2. Analyze all staged changes (both previously staged and newly added) and draft a commit message:\n  - Summarize the nature of the changes (eg. new feature, enhancement to an existing feature, bug fix, refactoring, test, docs, etc.). Ensure the message accurately reflects the changes and their purpose (i.e. \"add\" means a wholly new feature, \"update\" means an enhancement to an existing feature, \"fix\" means a bug fix, etc.).\n  - Check for any sensitive information that shouldn't be committed\n  - Draft a concise (1-2 sentences) commit message that focuses on the \"why\" rather than the \"what\"\n  - Ensure it accurately reflects the changes and their purpose\n3. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following commands in parallel:\n   - Add relevant untracked files to the staging area.\n   - Create the commit with a message ending with:\n   🤖 Generated with [Claude Code](https://claude.ai/code)\n\n   Co-Authored-By: Claude <noreply@anthropic.com>\n   - Run git status to make sure the commit succeeded.\n4. If the commit fails due to pre-commit hook changes, retry the commit ONCE to include these automated changes. If it fails again, it usually means a pre-commit hook is preventing the commit. If the commit succeeds but you notice that files were modified by the pre-commit hook, you MUST amend your commit to include them.\n\nImportant notes:\n- NEVER update the git config\n- NEVER run additional commands to read or explore code, besides git bash commands\n- NEVER use the TodoWrite or Task tools\n- DO NOT push to the remote repository unless the user explicitly asks you to do so\n- IMPORTANT: Never use git commands with the -i flag (like git rebase -i or git add -i) since they require interactive input which is not supported.\n- If there are no changes to commit (i.e., no untracked files and no modifications), do not create an empty commit\n- In order to ensure good formatting, ALWAYS pass the commit message via a HEREDOC, a la this example:\n<example>\ngit commit -m \"$(cat <<'EOF'\n   Commit message here.\n\n   🤖 Generated with [Claude Code](https://claude.ai/code)\n\n   Co-Authored-By: Claude <noreply@anthropic.com>\n   EOF\n   )\"\n</example>\n\n# Creating pull requests\nUse the gh command via the Bash tool for ALL GitHub-related tasks including working with issues, pull requests, checks, and releases. If given a Github URL use the gh command to get the information needed.\n\nIMPORTANT: When the user asks you to create a pull request, follow these steps carefully:\n\n1. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following bash commands in parallel using the Bash tool, in order to understand the current state of the branch since it diverged from the main branch:\n   - Run a git status command to see all untracked files\n   - Run a git diff command to see both staged and unstaged changes that will be committed\n   - Check if the current branch tracks a remote branch and is up to date with the remote, so you know if you need to push to the remote\n   - Run a git log command and `git diff [base-branch]...HEAD` to understand the full commit history for the current branch (from the time it diverged from the base branch)\n2. Analyze all changes that will be included in the pull request, making sure to look at all relevant commits (NOT just the latest commit, but ALL commits that will be included in the pull request!!!), and draft a pull request summary\n3. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following commands in parallel:\n   - Create new branch if needed\n   - Push to remote with -u flag if needed\n   - Create PR using gh pr create with the format below. Use a HEREDOC to pass the body to ensure correct formatting.\n<example>\ngh pr create --title \"the pr title\" --body \"$(cat <<'EOF'\n## Summary\n<1-3 bullet points>\n\n## Test plan\n[Checklist of TODOs for testing the pull request...]\n\n🤖 Generated with [Claude Code](https://claude.ai/code)\nEOF\n)\"\n</example>\n\nImportant:\n- NEVER update the git config\n- DO NOT use the TodoWrite or Task tools\n- Return the PR URL when you're done, so the user can see it\n\n# Other common operations\n- View comments on a Github PR: gh api repos/foo/bar/pulls/123/comments",
          "input_schema": {
            "type": "object",
            "properties": {
              "command": {
                "type": "string",
                "description": "The command to execute"
              },
              "timeout": {
                "type": "number",
                "description": "Optional timeout in milliseconds (max 600000)"
              },
              "description": {
                "type": "string",
                "description": " Clear, concise description of what this command does in 5-10 words. Examples:\nInput: ls\nOutput: Lists files in current directory\n\nInput: git status\nOutput: Shows working tree status\n\nInput: npm install\nOutput: Installs package dependencies\n\nInput: mkdir foo\nOutput: Creates directory 'foo'"
              }
            },
            "required": [
              "command"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Glob",
          "description": "- Fast file pattern matching tool that works with any codebase size\n- Supports glob patterns like \"**/*.js\" or \"src/**/*.ts\"\n- Returns matching file paths sorted by modification time\n- Use this tool when you need to find files by name patterns\n- When you are doing an open ended search that may require multiple rounds of globbing and grepping, use the Agent tool instead\n- You have the capability to call multiple tools in a single response. It is always better to speculatively perform multiple searches as a batch that are potentially useful.",
          "input_schema": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "The glob pattern to match files against"
              },
              "path": {
                "type": "string",
                "description": "The directory to search in. If not specified, the current working directory will be used. IMPORTANT: Omit this field to use the default directory. DO NOT enter \"undefined\" or \"null\" - simply omit it for the default behavior. Must be a valid directory path if provided."
              }
            },
            "required": [
              "pattern"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Grep",
          "description": "A powerful search tool built on ripgrep\n\n  Usage:\n  - ALWAYS use Grep for search tasks. NEVER invoke `grep` or `rg` as a Bash command. The Grep tool has been optimized for correct permissions and access.\n  - Supports full regex syntax (e.g., \"log.*Error\", \"function\\s+\\w+\")\n  - Filter files with glob parameter (e.g., \"*.js\", \"**/*.tsx\") or type parameter (e.g., \"js\", \"py\", \"rust\")\n  - Output modes: \"content\" shows matching lines, \"files_with_matches\" shows only file paths (default), \"count\" shows match counts\n  - Use Task tool for open-ended searches requiring multiple rounds\n  - Pattern syntax: Uses ripgrep (not grep) - literal braces need escaping (use `interface\\{\\}` to find `interface{}` in Go code)\n  - Multiline matching: By default patterns match within single lines only. For cross-line patterns like `struct \\{[\\s\\S]*?field`, use `multiline: true`\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "The regular expression pattern to search for in file contents"
              },
              "path": {
                "type": "string",
                "description": "File or directory to search in (rg PATH). Defaults to current working directory."
              },
              "glob": {
                "type": "string",
                "description": "Glob pattern to filter files (e.g. \"*.js\", \"*.{ts,tsx}\") - maps to rg --glob"
              },
              "output_mode": {
                "type": "string",
                "enum": [
                  "content",
                  "files_with_matches",
                  "count"
                ],
                "description": "Output mode: \"content\" shows matching lines (supports -A/-B/-C context, -n line numbers, head_limit), \"files_with_matches\" shows file paths (supports head_limit), \"count\" shows match counts (supports head_limit). Defaults to \"files_with_matches\"."
              },
              "-B": {
                "type": "number",
                "description": "Number of lines to show before each match (rg -B). Requires output_mode: \"content\", ignored otherwise."
              },
              "-A": {
                "type": "number",
                "description": "Number of lines to show after each match (rg -A). Requires output_mode: \"content\", ignored otherwise."
              },
              "-C": {
                "type": "number",
                "description": "Number of lines to show before and after each match (rg -C). Requires output_mode: \"content\", ignored otherwise."
              },
              "-n": {
                "type": "boolean",
                "description": "Show line numbers in output (rg -n). Requires output_mode: \"content\", ignored otherwise."
              },
              "-i": {
                "type": "boolean",
                "description": "Case insensitive search (rg -i)"
              },
              "type": {
                "type": "string",
                "description": "File type to search (rg --type). Common types: js, py, rust, go, java, etc. More efficient than include for standard file types."
              },
              "head_limit": {
                "type": "number",
                "description": "Limit output to first N lines/entries, equivalent to \"| head -N\". Works across all output modes: content (limits output lines), files_with_matches (limits file paths), count (limits count entries). When unspecified, shows all results from ripgrep."
              },
              "multiline": {
                "type": "boolean",
                "description": "Enable multiline mode where . matches newlines and patterns can span lines (rg -U --multiline-dotall). Default: false."
              }
            },
            "required": [
              "pattern"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "LS",
          "description": "Lists files and directories in a given path. The path parameter must be an absolute path, not a relative path. You can optionally provide an array of glob patterns to ignore with the ignore parameter. You should generally prefer the Glob and Grep tools, if you know which directories to search.",
          "input_schema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "The absolute path to the directory to list (must be absolute, not relative)"
              },
              "ignore": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of glob patterns to ignore"
              }
            },
            "required": [
              "path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "ExitPlanMode",
          "description": "Use this tool when you are in plan mode and have finished presenting your plan and are ready to code. This will prompt the user to exit plan mode.\nIMPORTANT: Only use this tool when the task requires planning the implementation steps of a task that requires writing code. For research tasks where you're gathering information, searching files, reading files or in general trying to understand the codebase - do NOT use this tool.\n\nEg.\n1. Initial task: \"Search for and understand the implementation of vim mode in the codebase\" - Do not use the exit plan mode tool because you are not planning the implementation steps of a task.\n2. Initial task: \"Help me implement yank mode for vim\" - Use the exit plan mode tool after you have finished planning the implementation steps of the task.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "plan": {
                "type": "string",
                "description": "The plan you came up with, that you want to run by the user for approval. Supports markdown. The plan should be pretty concise."
              }
            },
            "required": [
              "plan"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Read",
          "description": "Reads a file from the local filesystem. You can access any file directly by using this tool.\nAssume this tool is able to read all files on the machine. If the User provides a path to a file assume that path is valid. It is okay to read a file that does not exist; an error will be returned.\n\nUsage:\n- The file_path parameter must be an absolute path, not a relative path\n- By default, it reads up to 2000 lines starting from the beginning of the file\n- You can optionally specify a line offset and limit (especially handy for long files), but it's recommended to read the whole file by not providing these parameters\n- Any lines longer than 2000 characters will be truncated\n- Results are returned using cat -n format, with line numbers starting at 1\n- This tool allows Claude Code to read images (eg PNG, JPG, etc). When reading an image file the contents are presented visually as Claude Code is a multimodal LLM.\n- This tool can read PDF files (.pdf). PDFs are processed page by page, extracting both text and visual content for analysis.\n- For Jupyter notebooks (.ipynb files), use the NotebookRead instead\n- You have the capability to call multiple tools in a single response. It is always better to speculatively read multiple files as a batch that are potentially useful.\n- You will regularly be asked to read screenshots. If the user provides a path to a screenshot ALWAYS use this tool to view the file at the path. This tool will work with all temporary file paths like /var/folders/123/abc/T/TemporaryItems/NSIRD_screencaptureui_ZfB1tD/Screenshot.png\n- If you read a file that exists but has empty contents you will receive a system reminder warning in place of file contents.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to read"
              },
              "offset": {
                "type": "number",
                "description": "The line number to start reading from. Only provide if the file is too large to read at once"
              },
              "limit": {
                "type": "number",
                "description": "The number of lines to read. Only provide if the file is too large to read at once."
              }
            },
            "required": [
              "file_path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Edit",
          "description": "Performs exact string replacements in files.\n\nUsage:\n- You must use your `Read` tool at least once in the conversation before editing. This tool will error if you attempt an edit without reading the file.\n- When editing text from Read tool output, ensure you preserve the exact indentation (tabs/spaces) as it appears AFTER the line number prefix. The line number prefix format is: spaces + line number + tab. Everything after that tab is the actual file content to match. Never include any part of the line number prefix in the old_string or new_string.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- Only use emojis if the user explicitly requests it. Avoid adding emojis to files unless asked.\n- The edit will FAIL if `old_string` is not unique in the file. Either provide a larger string with more surrounding context to make it unique or use `replace_all` to change every instance of `old_string`.\n- Use `replace_all` for replacing and renaming strings across the file. This parameter is useful if you want to rename a variable for instance.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to modify"
              },
              "old_string": {
                "type": "string",
                "description": "The text to replace"
              },
              "new_string": {
                "type": "string",
                "description": "The text to replace it with (must be different from old_string)"
              },
              "replace_all": {
                "type": "boolean",
                "default": false,
                "description": "Replace all occurences of old_string (default false)"
              }
            },
            "required": [
              "file_path",
              "old_string",
              "new_string"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "MultiEdit",
          "description": "This is a tool for making multiple edits to a single file in one operation. It is built on top of the Edit tool and allows you to perform multiple find-and-replace operations efficiently. Prefer this tool over the Edit tool when you need to make multiple edits to the same file.\n\nBefore using this tool:\n\n1. Use the Read tool to understand the file's contents and context\n2. Verify the directory path is correct\n\nTo make multiple file edits, provide the following:\n1. file_path: The absolute path to the file to modify (must be absolute, not relative)\n2. edits: An array of edit operations to perform, where each edit contains:\n   - old_string: The text to replace (must match the file contents exactly, including all whitespace and indentation)\n   - new_string: The edited text to replace the old_string\n   - replace_all: Replace all occurences of old_string. This parameter is optional and defaults to false.\n\nIMPORTANT:\n- All edits are applied in sequence, in the order they are provided\n- Each edit operates on the result of the previous edit\n- All edits must be valid for the operation to succeed - if any edit fails, none will be applied\n- This tool is ideal when you need to make several changes to different parts of the same file\n- For Jupyter notebooks (.ipynb files), use the NotebookEdit instead\n\nCRITICAL REQUIREMENTS:\n1. All edits follow the same requirements as the single Edit tool\n2. The edits are atomic - either all succeed or none are applied\n3. Plan your edits carefully to avoid conflicts between sequential operations\n\nWARNING:\n- The tool will fail if edits.old_string doesn't match the file contents exactly (including whitespace)\n- The tool will fail if edits.old_string and edits.new_string are the same\n- Since edits are applied in sequence, ensure that earlier edits don't affect the text that later edits are trying to find\n\nWhen making edits:\n- Ensure all edits result in idiomatic, correct code\n- Do not leave the code in a broken state\n- Always use absolute file paths (starting with /)\n- Only use emojis if the user explicitly requests it. Avoid adding emojis to files unless asked.\n- Use replace_all for replacing and renaming strings across the file. This parameter is useful if you want to rename a variable for instance.\n\nIf you want to create a new file, use:\n- A new file path, including dir name if needed\n- First edit: empty old_string and the new file's contents as new_string\n- Subsequent edits: normal edit operations on the created content",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to modify"
              },
              "edits": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "old_string": {
                      "type": "string",
                      "description": "The text to replace"
                    },
                    "new_string": {
                      "type": "string",
                      "description": "The text to replace it with"
                    },
                    "replace_all": {
                      "type": "boolean",
                      "default": false,
                      "description": "Replace all occurences of old_string (default false)."
                    }
                  },
                  "required": [
                    "old_string",
                    "new_string"
                  ],
                  "additionalProperties": false
                },
                "minItems": 1,
                "description": "Array of edit operations to perform sequentially on the file"
              }
            },
            "required": [
              "file_path",
              "edits"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Write",
          "description": "Writes a file to the local filesystem.\n\nUsage:\n- This tool will overwrite the existing file if there is one at the provided path.\n- If this is an existing file, you MUST use the Read tool first to read the file's contents. This tool will fail if you did not read the file first.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- NEVER proactively create documentation files (*.md) or README files. Only create documentation files if explicitly requested by the User.\n- Only use emojis if the user explicitly requests it. Avoid writing emojis to files unless asked.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to write (must be absolute, not relative)"
              },
              "content": {
                "type": "string",
                "description": "The content to write to the file"
              }
            },
            "required": [
              "file_path",
              "content"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "NotebookRead",
          "description": "Reads a Jupyter notebook (.ipynb file) and returns all of the cells with their outputs. Jupyter notebooks are interactive documents that combine code, text, and visualizations, commonly used for data analysis and scientific computing. The notebook_path parameter must be an absolute path, not a relative path.",
          "input_schema": {
            "type": "object",
            "properties": {
              "notebook_path": {
                "type": "string",
                "description": "The absolute path to the Jupyter notebook file to read (must be absolute, not relative)"
              },
              "cell_id": {
                "type": "string",
                "description": "The ID of a specific cell to read. If not provided, all cells will be read."
              }
            },
            "required": [
              "notebook_path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "NotebookEdit",
          "description": "Completely replaces the contents of a specific cell in a Jupyter notebook (.ipynb file) with new source. Jupyter notebooks are interactive documents that combine code, text, and visualizations, commonly used for data analysis and scientific computing. The notebook_path parameter must be an absolute path, not a relative path. The cell_number is 0-indexed. Use edit_mode=insert to add a new cell at the index specified by cell_number. Use edit_mode=delete to delete the cell at the index specified by cell_number.",
          "input_schema": {
            "type": "object",
            "properties": {
              "notebook_path": {
                "type": "string",
                "description": "The absolute path to the Jupyter notebook file to edit (must be absolute, not relative)"
              },
              "cell_id": {
                "type": "string",
                "description": "The ID of the cell to edit. When inserting a new cell, the new cell will be inserted after the cell with this ID, or at the beginning if not specified."
              },
              "new_source": {
                "type": "string",
                "description": "The new source for the cell"
              },
              "cell_type": {
                "type": "string",
                "enum": [
                  "code",
                  "markdown"
                ],
                "description": "The type of the cell (code or markdown). If not specified, it defaults to the current cell type. If using edit_mode=insert, this is required."
              },
              "edit_mode": {
                "type": "string",
                "enum": [
                  "replace",
                  "insert",
                  "delete"
                ],
                "description": "The type of edit to make (replace, insert, delete). Defaults to replace."
              }
            },
            "required": [
              "notebook_path",
              "new_source"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "WebFetch",
          "description": "\n- Fetches content from a specified URL and processes it using an AI model\n- Takes a URL and a prompt as input\n- Fetches the URL content, converts HTML to markdown\n- Processes the content with the prompt using a small, fast model\n- Returns the model's response about the content\n- Use this tool when you need to retrieve and analyze web content\n\nUsage notes:\n  - IMPORTANT: If an MCP-provided web fetch tool is available, prefer using that tool instead of this one, as it may have fewer restrictions. All MCP-provided tools start with \"mcp__\".\n  - The URL must be a fully-formed valid URL\n  - HTTP URLs will be automatically upgraded to HTTPS\n  - The prompt should describe what information you want to extract from the page\n  - This tool is read-only and does not modify any files\n  - Results may be summarized if the content is very large\n  - Includes a self-cleaning 15-minute cache for faster responses when repeatedly accessing the same URL\n  - When a URL redirects to a different host, the tool will inform you and provide the redirect URL in a special format. You should then make a new WebFetch request with the redirect URL to fetch the content.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "format": "uri",
                "description": "The URL to fetch content from"
              },
              "prompt": {
                "type": "string",
                "description": "The prompt to run on the fetched content"
              }
            },
            "required": [
              "url",
              "prompt"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "TodoWrite",
          "description": "Use this tool to create and manage a structured task list for your current coding session. This helps you track progress, organize complex tasks, and demonstrate thoroughness to the user.\nIt also helps the user understand the progress of the task and overall progress of their requests.\n\n## When to Use This Tool\nUse this tool proactively in these scenarios:\n\n1. Complex multi-step tasks - When a task requires 3 or more distinct steps or actions\n2. Non-trivial and complex tasks - Tasks that require careful planning or multiple operations\n3. User explicitly requests todo list - When the user directly asks you to use the todo list\n4. User provides multiple tasks - When users provide a list of things to be done (numbered or comma-separated)\n5. After receiving new instructions - Immediately capture user requirements as todos\n6. When you start working on a task - Mark it as in_progress BEFORE beginning work. Ideally you should only have one todo as in_progress at a time\n7. After completing a task - Mark it as completed and add any new follow-up tasks discovered during implementation\n\n## When NOT to Use This Tool\n\nSkip using this tool when:\n1. There is only a single, straightforward task\n2. The task is trivial and tracking it provides no organizational benefit\n3. The task can be completed in less than 3 trivial steps\n4. The task is purely conversational or informational\n\nNOTE that you should not use this tool if there is only one trivial task to do. In this case you are better off just doing the task directly.\n\n## Examples of When to Use the Todo List\n\n<example>\nUser: I want to add a dark mode toggle to the application settings. Make sure you run the tests and build when you're done!\nAssistant: I'll help add a dark mode toggle to your application settings. Let me create a todo list to track this implementation.\n*Creates todo list with the following items:*\n1. Create dark mode toggle component in Settings page\n2. Add dark mode state management (context/store)\n3. Implement CSS-in-JS styles for dark theme\n4. Update existing components to support theme switching\n5. Run tests and build process, addressing any failures or errors that occur\n*Begins working on the first task*\n\n<reasoning>\nThe assistant used the todo list because:\n1. Adding dark mode is a multi-step feature requiring UI, state management, and styling changes\n2. The user explicitly requested tests and build be run afterward\n3. The assistant inferred that tests and build need to pass by adding \"Ensure tests and build succeed\" as the final task\n</reasoning>\n</example>\n\n<example>\nUser: Help me rename the function getCwd to getCurrentWorkingDirectory across my project\nAssistant: Let me first search through your codebase to find all occurrences of 'getCwd'.\n*Uses grep or search tools to locate all instances of getCwd in the codebase*\nAssistant: I've found 15 instances of 'getCwd' across 8 different files. Let me create a todo list to track these changes.\n*Creates todo list with specific items for each file that needs updating*\n\n<reasoning>\nThe assistant used the todo list because:\n1. First, the assistant searched to understand the scope of the task\n2. Upon finding multiple occurrences across different files, it determined this was a complex task with multiple steps\n3. The todo list helps ensure every instance is tracked and updated systematically\n4. This approach prevents missing any occurrences and maintains code consistency\n</reasoning>\n</example>\n\n\n<example>\nUser: I need to implement these features for my e-commerce site: user registration, product catalog, shopping cart, and checkout flow.\nAssistant: I'll help implement these features. First, let's add all the features to the todo list.\n*Creates a todo list breaking down each feature into specific tasks based on the project architecture*\nAssistant: Let's start with user registration. This will involve creating database models, API endpoints, and frontend forms that integrate with your existing authentication system.\n\n<reasoning>\nThe assistant used the todo list because:\n1. The user provided multiple complex features to implement in a comma separated list\n2. The todo list helps organize these large features into manageable tasks\n3. This approach allows for tracking progress across the entire implementation\n</reasoning>\n</example>\n\n<example>\nUser: Can you help optimize my React application? It's rendering slowly and has performance issues.</user>\nAssistant: I'll help optimize your React application. First, let me examine your codebase to identify potential performance bottlenecks.\n*Reviews component structure, render patterns, state management, and data fetching*\nAssistant: After analyzing your codebase, I've identified several performance issues. Let me create a todo list to track our optimization efforts.\n*Creates todo list with items like: 1) Implement memoization for expensive calculations in ProductList, 2) Add virtualization for long lists in Dashboard, 3) Optimize image loading in Gallery component, 4) Fix state update loops in ShoppingCart, 5) Review bundle size and implement code splitting*\nLet's start by implementing memoization for the expensive calculations in your ProductList component.</assistant>\n\n<reasoning>\nThe assistant used the todo list because:\n1. First, the assistant examined the codebase to identify specific performance issues\n2. Based on this analysis, it identified multiple optimization opportunities\n3. Performance optimization is a non-trivial task requiring multiple steps\n4. The todo list helps methodically track improvements across different components\n5. This systematic approach ensures all performance bottlenecks are addressed\n</reasoning>\n</example>\n\n## Examples of When NOT to Use the Todo List\n\n<example>\nUser: How do I print 'Hello World' in Python?\nAssistant: In Python, you can print \"Hello World\" with this simple code:\n\npython\nprint(\"Hello World\")\n\nThis will output the text \"Hello World\" to the console when executed.</assistant>\n\n<reasoning>\nThe assistant did not use the todo list because this is a single, trivial task that can be completed in one step. There's no need to track multiple tasks or steps for such a straightforward request.\n</reasoning>\n</example>\n\n<example>\nUser: What does the git status command do?\nAssistant: The git status command shows the current state of your working directory and staging area. It displays which changes have been staged, which haven't, and which files aren't being tracked by Git. This is a fundamental command for understanding the current state of your repository before making commits.\n\n<reasoning>\nThe assistant did not use the todo list because this is an informational request with no actual coding task to complete. The user is simply asking for an explanation, not for the assistant to perform multiple steps or tasks.\n</reasoning>\n</example>\n\n<example>\nUser: Can you add a comment to the calculateTotal function to explain what it does?\nAssistant: Sure, let me add a comment to the calculateTotal function to explain what it does.\n* Uses the Edit tool to add a comment to the calculateTotal function *\n\n<reasoning>\nThe assistant did not use the todo list because this is a single, straightforward task confined to one location in the code. Adding a comment doesn't require tracking multiple steps or systematic organization.\n</reasoning>\n</example>\n\n<example>\nUser: Run npm install for me and tell me what happens.\nAssistant: I'll run the npm install command for you.\n\n*Executes: npm install*\n\nThe command completed successfully. Here's the output:\n[Output of npm install command]\n\nAll dependencies have been installed according to your package.json file.\n\n<reasoning>\nThe assistant did not use the todo list because this is a single command execution with immediate results. There are no multiple steps to track or organize, making the todo list unnecessary for this straightforward task.\n</reasoning>\n</example>\n\n## Task States and Management\n\n1. **Task States**: Use these states to track progress:\n   - pending: Task not yet started\n   - in_progress: Currently working on (limit to ONE task at a time)\n   - completed: Task finished successfully\n\n2. **Task Management**:\n   - Update task status in real-time as you work\n   - Mark tasks complete IMMEDIATELY after finishing (don't batch completions)\n   - Only have ONE task in_progress at any time\n   - Complete current tasks before starting new ones\n   - Remove tasks that are no longer relevant from the list entirely\n\n3. **Task Completion Requirements**:\n   - ONLY mark a task as completed when you have FULLY accomplished it\n   - If you encounter errors, blockers, or cannot finish, keep the task as in_progress\n   - When blocked, create a new task describing what needs to be resolved\n   - Never mark a task as completed if:\n     - Tests are failing\n     - Implementation is partial\n     - You encountered unresolved errors\n     - You couldn't find necessary files or dependencies\n\n4. **Task Breakdown**:\n   - Create specific, actionable items\n   - Break complex tasks into smaller, manageable steps\n   - Use clear, descriptive task names\n\nWhen in doubt, use this tool. Being proactive with task management demonstrates attentiveness and ensures you complete all requirements successfully.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "todos": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "content": {
                      "type": "string",
                      "minLength": 1
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "pending",
                        "in_progress",
                        "completed"
                      ]
                    },
                    "priority": {
                      "type": "string",
                      "enum": [
                        "high",
                        "medium",
                        "low"
                      ]
                    },
                    "id": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "content",
                    "status",
                    "priority",
                    "id"
                  ],
                  "additionalProperties": false
                },
                "description": "The updated todo list"
              }
            },
            "required": [
              "todos"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "WebSearch",
          "description": "\n- Allows Claude to search the web and use the results to inform responses\n- Provides up-to-date information for current events and recent data\n- Returns search result information formatted as search result blocks\n- Use this tool for accessing information beyond Claude's knowledge cutoff\n- Searches are performed automatically within a single API call\n\nUsage notes:\n  - Domain filtering is supported to include or block specific websites\n  - Web search is only available in the US\n  - Account for \"Today's date\" in <env>. For example, if <env> says \"Today's date: 2025-07-01\", and the user wants the latest docs, do not use 2024 in the search query. Use 2025.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "minLength": 2,
                "description": "The search query to use"
              },
              "allowed_domains": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Only include search results from these domains"
              },
              "blocked_domains": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Never include search results from these domains"
              }
            },
            "required": [
              "query"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        }
      ],
      "responseStructure": {
        "type": "object",
        "keys": [
          "id",
          "object",
          "created",
          "model",
          "choices",
          "usage",
          "stats",
          "system_fingerprint"
        ],
        "hasChoices": true,
        "hasContent": false,
        "hasUsage": true,
        "choicesCount": 1,
        "firstChoice": {
          "hasMessage": true,
          "hasToolCalls": false,
          "finishReason": "stop"
        }
      },
      "parsingAttempts": [
        "json_format",
        "function_call",
        "action_format",
        "natural_language"
      ]
    }
  },
  {
    "timestamp": "2025-08-10T06:46:11.733Z",
    "requestId": "session_1754804126703_ixall6oy5:conv_1754804126703_sm1ur5dvo:14:1754808345025:id32",
    "provider": "lmstudio",
    "model": "gpt-oss-20b-mlx",
    "endpoint": "localhost:1234",
    "failureType": "text_instead_of_tools",
    "originalResponse": {
      "id": "chatcmpl-6t7sb7kzffolu5d1oysq",
      "object": "chat.completion",
      "created": 1754808345,
      "model": "gpt-oss-20b-mlx",
      "choices": [
        {
          "index": 0,
          "logprobs": null,
          "finish_reason": "stop",
          "message": {
            "role": "assistant",
            "content": "The user says: \"你需要阅读项目规则，然后查看确实的小说设定，然后补齐文档\". They want us to read the project rules, then verify what novel settings exist in the project and supplement missing md documents.\n\nNeed to locate novel- related directories. Let's search patterns: maybe there is a directory \"novel\" or \"故事\".\n\nWe need to scan the project. The repository root might be /Users/fanzhang/Documents/github/<project-name> (maybe with novel). As ChatGPT, but we need to locate the relevant folder.\n\nThe user didn't provide path. Possibly the project under /Users/fanzhang/Documents/github has multiple sub-projects. We need to know which is novel.\n\nWe can search in this path for md docs with contents like \"novel\" or \"故事\". But our earlier CLI didn't return output. Maybe there's no such file.\n\nBut maybe the repository is not present. It's a large repo with tests etc, but maybe no novel content.\n\nWe can deduce from the system instructions that the project has test scripts etc. But it's a code base for software.\n\nMaybe user ... [truncated]"
          }
        }
      ],
      "usage": {
        "prompt_tokens": 16688,
        "completion_tokens": 747,
        "total_tokens": 17435
      },
      "stats": {},
      "system_fingerprint": "gpt-oss-20b-mlx"
    },
    "expectedFormat": "openai",
    "errorMessage": "All parsing strategies failed",
    "responseAnalysis": {
      "hasToolCalls": false,
      "hasContent": true,
      "contentLength": 2534,
      "contentPreview": "The user says: \"你需要阅读项目规则，然后查看确实的小说设定，然后补齐文档\". They want us to read the project rules, then verify what novel settings exist in the project and supplement missing md documents.\n\nNeed to locate novel- ",
      "finishReason": "stop",
      "toolCallPatterns": []
    },
    "debugInfo": {
      "requestTools": [
        {
          "name": "Task",
          "description": "Launch a new agent to handle complex, multi-step tasks autonomously.\n\nAvailable agent types and the tools they have access to:\n- general-purpose: General-purpose agent for researching complex questions, searching for code, and executing multi-step tasks. When you are searching for a keyword or file and are not confident that you will find the right match in the first few tries use this agent to perform the search for you. (Tools: *)\n- code-refactorer: Use this agent when you need to improve existing code structure, readability, or maintainability without changing functionality. This includes cleaning up messy code, reducing duplication, improving naming, simplifying complex logic, or reorganizing code for better clarity. Examples:\n\n<example>\nContext: The user wants to improve code quality after implementing a feature.\nuser: \"I just finished implementing the user authentication system. Can you help clean it up?\"\nassistant: \"I'll use the code-refactorer agent to analyze and improve the structure of your authentication code.\"\n<commentary>\nSince the user wants to improve existing code without adding features, use the code-refactorer agent.\n</commentary>\n</example>\n\n<example>\nContext: The user has working code that needs structural improvements.\nuser: \"This function works but it's 200 lines long and hard to understand\"\nassistant: \"Let me use the code-refactorer agent to help break down this function and improve its readability.\"\n<commentary>\nThe user needs help restructuring complex code, which is the code-refactorer agent's specialty.\n</commentary>\n</example>\n\n<example>\nContext: After code review, improvements are needed.\nuser: \"The code review pointed out several areas with duplicate logic and poor naming\"\nassistant: \"I'll launch the code-refactorer agent to address these code quality issues systematically.\"\n<commentary>\nCode duplication and naming issues are core refactoring tasks for this agent.\n</commentary>\n</example> (Tools: Edit, MultiEdit, Write, NotebookEdit, Grep, LS, Read)\n- project-task-planner: Use this agent when you need to create a comprehensive development task list from a Product Requirements Document (PRD). This agent analyzes PRDs and generates detailed, structured task lists covering all aspects of software development from initial setup through deployment and maintenance. Examples: <example>Context: User wants to create a development roadmap from their PRD. user: \"I have a PRD for a new e-commerce platform. Can you create a task list?\" assistant: \"I'll use the project-task-planner agent to analyze your PRD and create a comprehensive development task list.\" <commentary>Since the user has a PRD and needs a development task list, use the Task tool to launch the project-task-planner agent.</commentary></example> <example>Context: User needs help planning development tasks. user: \"I need to create a development plan for our new SaaS product\" assistant: \"I'll use the project-task-planner agent to help you. First, I'll need to see your Product Requirements Document (PRD).\" <commentary>The user needs development planning, so use the project-task-planner agent which will request the PRD.</commentary></example> (Tools: Task, Bash, Edit, MultiEdit, Write, NotebookEdit, Grep, LS, Read, ExitPlanMode, TodoWrite, WebSearch)\n- vibe-coding-coach: Use this agent when users want to build applications through conversation, focusing on the vision and feel of their app rather than technical implementation details. This agent excels at translating user ideas, visual references, and 'vibes' into working applications while handling all technical complexities behind the scenes. <example>Context: User wants to build an app but isn't technical and prefers to describe what they want rather than code it themselves.\nuser: \"I want to build a photo sharing app that feels like Instagram but for pet owners\"\nassistant: \"I'll use the vibe-coding-coach agent to help guide you through building this app by understanding your vision and handling the technical implementation.\"\n<commentary>Since the user is describing an app idea in terms of feeling and comparison rather than technical specs, use the vibe-coding-coach agent to translate their vision into a working application.</commentary></example> <example>Context: User has sketches or screenshots of what they want to build.\nuser: \"Here's a screenshot of an app I like. Can we build something similar but for tracking workouts?\"\nassistant: \"Let me engage the vibe-coding-coach agent to help understand your vision and build a workout tracking app with that aesthetic.\"\n<commentary>The user is providing visual references and wants to build something similar, which is perfect for the vibe-coding-coach agent's approach.</commentary></example> (Tools: *)\n- debug-system-architect: Use this agent when you need to establish a comprehensive debug logging system for a project. This includes setting up log directories, implementing node-level tracing, creating time-based test records, establishing replay mechanisms, and documenting debug rules. Example: <example> Context: User is setting up a new project and wants to implement proper debugging infrastructure from the start. user: \"Please help me set up a debug system for my new API router project\" <commentary> Since the user is requesting debug system setup, use the debug-system-architect agent to analyze the project and implement comprehensive logging and tracing mechanisms. </commentary> </example> <example> Context: User encounters intermittent issues in their routing system and needs better visibility. user: \"I'm having trouble tracking down why some requests fail intermittently\" <commentary> Since the user needs better debugging visibility for intermittent issues, use the debug-system-architect agent to implement node-level tracing and replay mechanisms. </commentary> </example> (Tools: *)\n- code-risk-auditor: Use this agent when you need to perform comprehensive code risk assessment and identify potential architectural issues in your codebase. Examples: <example>Context: The user has just completed a major refactoring and wants to ensure no hardcoded values or fallback mechanisms were introduced. user: \"I just finished refactoring the routing system, can you check for any code risks?\" assistant: \"I'll use the code-risk-auditor agent to perform a comprehensive risk assessment of your routing system changes.\"</example> <example>Context: Before a major release, the user wants to clean up technical debt and ensure code quality. user: \"We're preparing for v2.0 release, I need a full code audit\" assistant: \"Let me launch the code-risk-auditor agent to identify hardcoding, fallback risks, outdated tests, and duplicate implementations across the entire codebase.\"</example> <example>Context: The user notices inconsistent behavior and suspects duplicate implementations. user: \"The same feature seems to be implemented in multiple places, causing bugs\" assistant: \"I'll use the code-risk-auditor agent to scan for duplicate implementations and provide a consolidation plan.\"</example> (Tools: *)\n- security-auditor: Use this agent when you need to perform a comprehensive security audit of a codebase, identify vulnerabilities, and generate a detailed security report with actionable remediation steps. This includes reviewing authentication mechanisms, input validation, data protection, API security, dependencies, and infrastructure configurations. Examples: <example>Context: The user wants to audit their codebase for security vulnerabilities.\nuser: \"Can you perform a security audit of my application?\"\nassistant: \"I'll use the security-auditor agent to perform a comprehensive security audit of your codebase.\"\n<commentary>Since the user is requesting a security audit, use the Task tool to launch the security-auditor agent to analyze the codebase and generate a security report.</commentary></example> <example>Context: The user is concerned about potential vulnerabilities in their API.\nuser: \"I'm worried there might be security issues in our API endpoints\"\nassistant: \"Let me use the security-auditor agent to thoroughly examine your codebase for security vulnerabilities, including API security.\"\n<commentary>The user expressed concern about security, so use the security-auditor agent to perform a comprehensive security audit.</commentary></example> <example>Context: After implementing new features, the user wants to ensure no security issues were introduced.\nuser: \"We just added user authentication to our app. Can you check if it's secure?\"\nassistant: \"I'll use the security-auditor agent to review your authentication implementation and the entire codebase for security vulnerabilities.\"\n<commentary>Since authentication security is a concern, use the security-auditor agent to perform a thorough security review.</commentary></example> (Tools: Task, Bash, Edit, MultiEdit, Write, NotebookEdit)\n- project-memory-manager: Use this agent when you need to manage project-specific memory entries, create project documentation, or organize project knowledge. This includes creating project summaries, documenting project decisions, tracking project progress, and maintaining project-specific knowledge bases. <example>Context: User wants to document a project decision or create project documentation. user: \"请为我们的新项目创建一个内存管理系统的文档\" assistant: \"我将使用 project-memory-manager agent 来创建这个项目文档\" <commentary>Since the user needs project documentation, use the project-memory-manager agent to create project-specific memory entries.</commentary></example> <example>Context: User wants to track project progress or decisions. user: \"我们需要记录这个项目的关键决策点\" assistant: \"让我使用 project-memory-manager agent 来记录这些项目决策\" <commentary>Since this is project tracking, use the project-memory-manager agent to create decision-type memory entries.</commentary></example> (Tools: *)\n- rules-architect: Use this agent when you need to analyze project architecture and establish comprehensive rule management systems. Examples: <example>Context: User wants to organize project rules and create a structured rule management system. user: \"I need to reorganize our project rules and create a better structure for managing coding standards, file organization, and testing protocols\" assistant: \"I'll use the rules-architect agent to analyze the current project structure and establish a comprehensive rule management system with proper categorization and organization.\"</example> <example>Context: Project has grown complex and needs better rule organization. user: \"Our CLAUDE.md file is getting too large and we need to break down rules into manageable categories\" assistant: \"Let me call the rules-architect agent to create a structured .claude/rules system that will organize all project rules into logical categories.\"</example> (Tools: *)\n- frontend-designer: Use this agent when you need to convert design mockups, wireframes, or visual concepts into detailed technical specifications and implementation guides for frontend development. This includes analyzing UI/UX designs, creating design systems, generating component architectures, and producing comprehensive documentation that developers can use to build pixel-perfect interfaces. Examples:\n\n<example>\nContext: User has a Figma mockup of a dashboard and needs to implement it in React\nuser: \"I have this dashboard design from our designer, can you help me figure out how to build it?\"\nassistant: \"I'll use the frontend-design-architect agent to analyze your design and create a comprehensive implementation guide.\"\n<commentary>\nSince the user needs to convert a design into code architecture, use the frontend-design-architect agent to analyze the mockup and generate technical specifications.\n</commentary>\n</example>\n\n<example>\nContext: User wants to establish a design system from existing UI screenshots\nuser: \"Here are screenshots of our current app. We need to extract a consistent design system from these.\"\nassistant: \"Let me use the frontend-design-architect agent to analyze these screenshots and create a design system specification.\"\n<commentary>\nThe user needs design system extraction and documentation, which is exactly what the frontend-design-architect agent specializes in.\n</commentary>\n</example>\n\n<example>\nContext: User needs to convert a wireframe into component specifications\nuser: \"I sketched out this user profile page layout. How should I structure the components?\"\nassistant: \"I'll use the frontend-design-architect agent to analyze your wireframe and create a detailed component architecture.\"\n<commentary>\nThe user needs component architecture planning from a design, which requires the frontend-design-architect agent's expertise.\n</commentary>\n</example> (Tools: *)\n- content-writer: Use this agent when you need to create compelling, informative content that explains complex topics in simple terms. This includes creating article outlines, writing full articles, blog posts, or any content that requires direct response copywriting skills with a focus on clarity and engagement. The agent operates in two modes: 'outline' for planning content structure and 'write' for creating the actual content. Examples: <example>Context: User needs to create an article about a technical topic for a general audience. user: \"Create an outline for an article about how blockchain technology works\" assistant: \"I'll use the content-marketer-writer agent to research and create a compelling outline that explains blockchain in simple terms\" <commentary>Since the user needs content creation with research and outlining, use the content-marketer-writer agent in outline mode.</commentary></example> <example>Context: User has an outline and needs to write the full article. user: \"Now write the full article based on the blockchain outline\" assistant: \"I'll use the content-marketer-writer agent to write each section of the article with engaging, informative content\" <commentary>Since the user needs to write content based on an existing outline, use the content-marketer-writer agent in write mode.</commentary></example> (Tools: *)\n- test-runner: Use this agent to run and manage tests according to the global and project-specific testing rules. This includes executing test scripts, documenting test results, and helping to diagnose issues following the standard pipeline. <example>Context: User wants to run all functional tests. user: \"运行所有功能测试\" assistant: \"我将使用 test-runner agent 来执行所有功能测试\" <commentary>Since the user wants to run tests by category, use the test-runner agent.</commentary></example> <example>Context: User wants to verify a bug fix. user: \"我修复了一个bug，帮我验证一下\" assistant: \"让我使用 test-runner agent 来执行对应的修复验证测试\" <commentary>The user needs to verify a fix, which is a core task for the test-runner agent.</commentary></example> (Tools: *)\n- in-depth-research-analyst: Use this agent when you need to conduct comprehensive research reports with in-depth web mining, data analysis, and visualization. This includes industry analysis, market research, competitive intelligence, and trend forecasting with accurate data from authoritative sources. <example>Context: User wants a comprehensive industry analysis report. user: \"请对人工智能芯片市场进行深入调研，包括主要厂商、市场份额和增长趋势\" assistant: \"我将使用 in-depth-research-analyst agent 来进行这项深入的市场调研并生成可视化报告\" <commentary>Since the user needs a comprehensive industry analysis with data visualization, use the in-depth-research-analyst agent to conduct thorough research and create an integrated report.</commentary></example> <example>Context: User wants market research with accurate data and visualizations. user: \"我们需要一份关于电动汽车充电基础设施的深度报告，包含数据图表\" assistant: \"让我使用 in-depth-research-analyst agent 来收集准确数据并生成图文并茂的分析报告\" <commentary>Since this requires market research with data accuracy and visualizations, use the in-depth-research-analyst agent to create a comprehensive report.</commentary></example> (Tools: *)\n- prd-writer: Use this agent when you need to create a comprehensive Product Requirements Document (PRD) for a software project or feature. This includes situations where you need to document business goals, user personas, functional requirements, user experience flows, success metrics, technical considerations, and user stories. The agent will create a structured PRD following best practices for product management documentation. Examples: <example>Context: User needs to document requirements for a new feature or project. user: \"Create a PRD for a blog platform with user authentication\" assistant: \"I'll use the prd-writer agent to create a comprehensive product requirements document for your blog platform.\" <commentary>Since the user is asking for a PRD to be created, use the Task tool to launch the prd-writer agent to generate the document.</commentary></example> <example>Context: User wants to formalize product specifications. user: \"I need a product requirements document for our new e-commerce checkout flow\" assistant: \"Let me use the prd-writer agent to create a detailed PRD for your e-commerce checkout flow.\" <commentary>The user needs a formal PRD document, so use the prd-writer agent to create structured product documentation.</commentary></example> (Tools: Task, Bash, Grep, LS, Read, Write, WebSearch, Glob)\n- pipeline-debug-universal: Use this agent when you need to implement comprehensive debug hooks and testing infrastructure for ANY pipeline system - whether it's API routing, data processing, CI/CD workflows, or transformation pipelines. This agent specializes in creating universal debug architectures that work across different pipeline types with data capture, replay capabilities, and systematic testing matrices. Examples: <example>Context: User is working on a multi-provider API routing system and needs to add debug capabilities to track data flow through each pipeline step. user: \"I need to add debug hooks to our routing pipeline so we can capture and replay data at each step\" assistant: \"I'll use the pipeline-debug-universal agent to design a comprehensive debug infrastructure with data capture and replay capabilities\" <commentary>Since the user needs pipeline debugging infrastructure, use the pipeline-debug-universal agent to create debug hooks and testing matrices.</commentary></example> <example>Context: User has a complex data transformation pipeline and wants to build systematic testing for each stage and provider. user: \"Our data processing pipeline has issues and we need better testing infrastructure to isolate problems at each step\" assistant: \"Let me use the pipeline-debug-universal agent to create a complete testing matrix and debug system\" <commentary>Since the user needs systematic pipeline testing infrastructure, use the pipeline-debug-universal agent to architect the testing system.</commentary></example> <example>Context: User is building a CI/CD pipeline and needs to implement debug capabilities for tracking deployment issues. user: \"Our deployment pipeline fails randomly and we can't reproduce the issues consistently\" assistant: \"I'll deploy the pipeline-debug-universal agent to create comprehensive debug hooks and replay capabilities for your CI/CD pipeline\" <commentary>Since the user needs debug infrastructure for a deployment pipeline, use the pipeline-debug-universal agent to design the debug system.</commentary></example> (Tools: *)\n\nWhen using the Task tool, you must specify a subagent_type parameter to select which agent type to use.\n\n\n\nWhen NOT to use the Agent tool:\n- If you want to read a specific file path, use the Read or Glob tool instead of the Agent tool, to find the match more quickly\n- If you are searching for a specific class definition like \"class Foo\", use the Glob tool instead, to find the match more quickly\n- If you are searching for code within a specific file or set of 2-3 files, use the Read tool instead of the Agent tool, to find the match more quickly\n- Other tasks that are not related to the agent descriptions above\n\n\nUsage notes:\n1. Launch multiple agents concurrently whenever possible, to maximize performance; to do that, use a single message with multiple tool uses\n2. When the agent is done, it will return a single message back to you. The result returned by the agent is not visible to the user. To show the user the result, you should send a text message back to the user with a concise summary of the result.\n3. Each agent invocation is stateless. You will not be able to send additional messages to the agent, nor will the agent be able to communicate with you outside of its final report. Therefore, your prompt should contain a highly detailed task description for the agent to perform autonomously and you should specify exactly what information the agent should return back to you in its final and only message to you.\n4. The agent's outputs should generally be trusted\n5. Clearly tell the agent whether you expect it to write code or just to do research (search, file reads, web fetches, etc.), since it is not aware of the user's intent\n6. If the agent description mentions that it should be used proactively, then you should try your best to use it without the user having to ask for it first. Use your judgement.\n\nExample usage:\n\n<example_agent_descriptions>\n\"code-reviewer\": use this agent after you are done writing a signficant piece of code\n\"greeting-responder\": use this agent when to respond to user greetings with a friendly joke\n</example_agent_description>\n\n<example>\nuser: \"Please write a function that checks if a number is prime\"\nassistant: Sure let me write a function that checks if a number is prime\nassistant: First let me use the Write tool to write a function that checks if a number is prime\nassistant: I'm going to use the Write tool to write the following code:\n<code>\nfunction isPrime(n) {\n  if (n <= 1) return false\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n</code>\n<commentary>\nSince a signficant piece of code was written and the task was completed, now use the code-reviewer agent to review the code\n</commentary>\nassistant: Now let me use the code-reviewer agent to review the code\nassistant: Uses the Task tool to launch the with the code-reviewer agent\n</example>\n\n<example>\nuser: \"Hello\"\n<commentary>\nSince the user is greeting, use the greeting-responder agent to respond with a friendly joke\n</commentary>\nassistant: \"I'm going to use the Task tool to launch the with the greeting-responder agent\"\n</example>\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "description": {
                "type": "string",
                "description": "A short (3-5 word) description of the task"
              },
              "prompt": {
                "type": "string",
                "description": "The task for the agent to perform"
              },
              "subagent_type": {
                "type": "string",
                "description": "The type of specialized agent to use for this task"
              }
            },
            "required": [
              "description",
              "prompt",
              "subagent_type"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Bash",
          "description": "Executes a given bash command in a persistent shell session with optional timeout, ensuring proper handling and security measures.\n\nBefore executing the command, please follow these steps:\n\n1. Directory Verification:\n   - If the command will create new directories or files, first use the LS tool to verify the parent directory exists and is the correct location\n   - For example, before running \"mkdir foo/bar\", first use LS to check that \"foo\" exists and is the intended parent directory\n\n2. Command Execution:\n   - Always quote file paths that contain spaces with double quotes (e.g., cd \"path with spaces/file.txt\")\n   - Examples of proper quoting:\n     - cd \"/Users/name/My Documents\" (correct)\n     - cd /Users/name/My Documents (incorrect - will fail)\n     - python \"/path/with spaces/script.py\" (correct)\n     - python /path/with spaces/script.py (incorrect - will fail)\n   - After ensuring proper quoting, execute the command.\n   - Capture the output of the command.\n\nUsage notes:\n  - The command argument is required.\n  - You can specify an optional timeout in milliseconds (up to 600000ms / 10 minutes). If not specified, commands will timeout after 120000ms (2 minutes).\n  - It is very helpful if you write a clear, concise description of what this command does in 5-10 words.\n  - If the output exceeds 30000 characters, output will be truncated before being returned to you.\n  - VERY IMPORTANT: You MUST avoid using search commands like `find` and `grep`. Instead use Grep, Glob, or Task to search. You MUST avoid read tools like `cat`, `head`, `tail`, and `ls`, and use Read and LS to read files.\n - If you _still_ need to run `grep`, STOP. ALWAYS USE ripgrep at `rg` first, which all ${PRODUCT_NAME} users have pre-installed.\n  - When issuing multiple commands, use the ';' or '&&' operator to separate them. DO NOT use newlines (newlines are ok in quoted strings).\n  - Try to maintain your current working directory throughout the session by using absolute paths and avoiding usage of `cd`. You may use `cd` if the User explicitly requests it.\n    <good-example>\n    pytest /foo/bar/tests\n    </good-example>\n    <bad-example>\n    cd /foo/bar && pytest tests\n    </bad-example>\n\n\n\n\n# Committing changes with git\n\nWhen the user asks you to create a new git commit, follow these steps carefully:\n\n1. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following bash commands in parallel, each using the Bash tool:\n  - Run a git status command to see all untracked files.\n  - Run a git diff command to see both staged and unstaged changes that will be committed.\n  - Run a git log command to see recent commit messages, so that you can follow this repository's commit message style.\n2. Analyze all staged changes (both previously staged and newly added) and draft a commit message:\n  - Summarize the nature of the changes (eg. new feature, enhancement to an existing feature, bug fix, refactoring, test, docs, etc.). Ensure the message accurately reflects the changes and their purpose (i.e. \"add\" means a wholly new feature, \"update\" means an enhancement to an existing feature, \"fix\" means a bug fix, etc.).\n  - Check for any sensitive information that shouldn't be committed\n  - Draft a concise (1-2 sentences) commit message that focuses on the \"why\" rather than the \"what\"\n  - Ensure it accurately reflects the changes and their purpose\n3. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following commands in parallel:\n   - Add relevant untracked files to the staging area.\n   - Create the commit with a message ending with:\n   🤖 Generated with [Claude Code](https://claude.ai/code)\n\n   Co-Authored-By: Claude <noreply@anthropic.com>\n   - Run git status to make sure the commit succeeded.\n4. If the commit fails due to pre-commit hook changes, retry the commit ONCE to include these automated changes. If it fails again, it usually means a pre-commit hook is preventing the commit. If the commit succeeds but you notice that files were modified by the pre-commit hook, you MUST amend your commit to include them.\n\nImportant notes:\n- NEVER update the git config\n- NEVER run additional commands to read or explore code, besides git bash commands\n- NEVER use the TodoWrite or Task tools\n- DO NOT push to the remote repository unless the user explicitly asks you to do so\n- IMPORTANT: Never use git commands with the -i flag (like git rebase -i or git add -i) since they require interactive input which is not supported.\n- If there are no changes to commit (i.e., no untracked files and no modifications), do not create an empty commit\n- In order to ensure good formatting, ALWAYS pass the commit message via a HEREDOC, a la this example:\n<example>\ngit commit -m \"$(cat <<'EOF'\n   Commit message here.\n\n   🤖 Generated with [Claude Code](https://claude.ai/code)\n\n   Co-Authored-By: Claude <noreply@anthropic.com>\n   EOF\n   )\"\n</example>\n\n# Creating pull requests\nUse the gh command via the Bash tool for ALL GitHub-related tasks including working with issues, pull requests, checks, and releases. If given a Github URL use the gh command to get the information needed.\n\nIMPORTANT: When the user asks you to create a pull request, follow these steps carefully:\n\n1. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following bash commands in parallel using the Bash tool, in order to understand the current state of the branch since it diverged from the main branch:\n   - Run a git status command to see all untracked files\n   - Run a git diff command to see both staged and unstaged changes that will be committed\n   - Check if the current branch tracks a remote branch and is up to date with the remote, so you know if you need to push to the remote\n   - Run a git log command and `git diff [base-branch]...HEAD` to understand the full commit history for the current branch (from the time it diverged from the base branch)\n2. Analyze all changes that will be included in the pull request, making sure to look at all relevant commits (NOT just the latest commit, but ALL commits that will be included in the pull request!!!), and draft a pull request summary\n3. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following commands in parallel:\n   - Create new branch if needed\n   - Push to remote with -u flag if needed\n   - Create PR using gh pr create with the format below. Use a HEREDOC to pass the body to ensure correct formatting.\n<example>\ngh pr create --title \"the pr title\" --body \"$(cat <<'EOF'\n## Summary\n<1-3 bullet points>\n\n## Test plan\n[Checklist of TODOs for testing the pull request...]\n\n🤖 Generated with [Claude Code](https://claude.ai/code)\nEOF\n)\"\n</example>\n\nImportant:\n- NEVER update the git config\n- DO NOT use the TodoWrite or Task tools\n- Return the PR URL when you're done, so the user can see it\n\n# Other common operations\n- View comments on a Github PR: gh api repos/foo/bar/pulls/123/comments",
          "input_schema": {
            "type": "object",
            "properties": {
              "command": {
                "type": "string",
                "description": "The command to execute"
              },
              "timeout": {
                "type": "number",
                "description": "Optional timeout in milliseconds (max 600000)"
              },
              "description": {
                "type": "string",
                "description": " Clear, concise description of what this command does in 5-10 words. Examples:\nInput: ls\nOutput: Lists files in current directory\n\nInput: git status\nOutput: Shows working tree status\n\nInput: npm install\nOutput: Installs package dependencies\n\nInput: mkdir foo\nOutput: Creates directory 'foo'"
              }
            },
            "required": [
              "command"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Glob",
          "description": "- Fast file pattern matching tool that works with any codebase size\n- Supports glob patterns like \"**/*.js\" or \"src/**/*.ts\"\n- Returns matching file paths sorted by modification time\n- Use this tool when you need to find files by name patterns\n- When you are doing an open ended search that may require multiple rounds of globbing and grepping, use the Agent tool instead\n- You have the capability to call multiple tools in a single response. It is always better to speculatively perform multiple searches as a batch that are potentially useful.",
          "input_schema": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "The glob pattern to match files against"
              },
              "path": {
                "type": "string",
                "description": "The directory to search in. If not specified, the current working directory will be used. IMPORTANT: Omit this field to use the default directory. DO NOT enter \"undefined\" or \"null\" - simply omit it for the default behavior. Must be a valid directory path if provided."
              }
            },
            "required": [
              "pattern"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Grep",
          "description": "A powerful search tool built on ripgrep\n\n  Usage:\n  - ALWAYS use Grep for search tasks. NEVER invoke `grep` or `rg` as a Bash command. The Grep tool has been optimized for correct permissions and access.\n  - Supports full regex syntax (e.g., \"log.*Error\", \"function\\s+\\w+\")\n  - Filter files with glob parameter (e.g., \"*.js\", \"**/*.tsx\") or type parameter (e.g., \"js\", \"py\", \"rust\")\n  - Output modes: \"content\" shows matching lines, \"files_with_matches\" shows only file paths (default), \"count\" shows match counts\n  - Use Task tool for open-ended searches requiring multiple rounds\n  - Pattern syntax: Uses ripgrep (not grep) - literal braces need escaping (use `interface\\{\\}` to find `interface{}` in Go code)\n  - Multiline matching: By default patterns match within single lines only. For cross-line patterns like `struct \\{[\\s\\S]*?field`, use `multiline: true`\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "The regular expression pattern to search for in file contents"
              },
              "path": {
                "type": "string",
                "description": "File or directory to search in (rg PATH). Defaults to current working directory."
              },
              "glob": {
                "type": "string",
                "description": "Glob pattern to filter files (e.g. \"*.js\", \"*.{ts,tsx}\") - maps to rg --glob"
              },
              "output_mode": {
                "type": "string",
                "enum": [
                  "content",
                  "files_with_matches",
                  "count"
                ],
                "description": "Output mode: \"content\" shows matching lines (supports -A/-B/-C context, -n line numbers, head_limit), \"files_with_matches\" shows file paths (supports head_limit), \"count\" shows match counts (supports head_limit). Defaults to \"files_with_matches\"."
              },
              "-B": {
                "type": "number",
                "description": "Number of lines to show before each match (rg -B). Requires output_mode: \"content\", ignored otherwise."
              },
              "-A": {
                "type": "number",
                "description": "Number of lines to show after each match (rg -A). Requires output_mode: \"content\", ignored otherwise."
              },
              "-C": {
                "type": "number",
                "description": "Number of lines to show before and after each match (rg -C). Requires output_mode: \"content\", ignored otherwise."
              },
              "-n": {
                "type": "boolean",
                "description": "Show line numbers in output (rg -n). Requires output_mode: \"content\", ignored otherwise."
              },
              "-i": {
                "type": "boolean",
                "description": "Case insensitive search (rg -i)"
              },
              "type": {
                "type": "string",
                "description": "File type to search (rg --type). Common types: js, py, rust, go, java, etc. More efficient than include for standard file types."
              },
              "head_limit": {
                "type": "number",
                "description": "Limit output to first N lines/entries, equivalent to \"| head -N\". Works across all output modes: content (limits output lines), files_with_matches (limits file paths), count (limits count entries). When unspecified, shows all results from ripgrep."
              },
              "multiline": {
                "type": "boolean",
                "description": "Enable multiline mode where . matches newlines and patterns can span lines (rg -U --multiline-dotall). Default: false."
              }
            },
            "required": [
              "pattern"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "LS",
          "description": "Lists files and directories in a given path. The path parameter must be an absolute path, not a relative path. You can optionally provide an array of glob patterns to ignore with the ignore parameter. You should generally prefer the Glob and Grep tools, if you know which directories to search.",
          "input_schema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "The absolute path to the directory to list (must be absolute, not relative)"
              },
              "ignore": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of glob patterns to ignore"
              }
            },
            "required": [
              "path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "ExitPlanMode",
          "description": "Use this tool when you are in plan mode and have finished presenting your plan and are ready to code. This will prompt the user to exit plan mode.\nIMPORTANT: Only use this tool when the task requires planning the implementation steps of a task that requires writing code. For research tasks where you're gathering information, searching files, reading files or in general trying to understand the codebase - do NOT use this tool.\n\nEg.\n1. Initial task: \"Search for and understand the implementation of vim mode in the codebase\" - Do not use the exit plan mode tool because you are not planning the implementation steps of a task.\n2. Initial task: \"Help me implement yank mode for vim\" - Use the exit plan mode tool after you have finished planning the implementation steps of the task.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "plan": {
                "type": "string",
                "description": "The plan you came up with, that you want to run by the user for approval. Supports markdown. The plan should be pretty concise."
              }
            },
            "required": [
              "plan"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Read",
          "description": "Reads a file from the local filesystem. You can access any file directly by using this tool.\nAssume this tool is able to read all files on the machine. If the User provides a path to a file assume that path is valid. It is okay to read a file that does not exist; an error will be returned.\n\nUsage:\n- The file_path parameter must be an absolute path, not a relative path\n- By default, it reads up to 2000 lines starting from the beginning of the file\n- You can optionally specify a line offset and limit (especially handy for long files), but it's recommended to read the whole file by not providing these parameters\n- Any lines longer than 2000 characters will be truncated\n- Results are returned using cat -n format, with line numbers starting at 1\n- This tool allows Claude Code to read images (eg PNG, JPG, etc). When reading an image file the contents are presented visually as Claude Code is a multimodal LLM.\n- This tool can read PDF files (.pdf). PDFs are processed page by page, extracting both text and visual content for analysis.\n- For Jupyter notebooks (.ipynb files), use the NotebookRead instead\n- You have the capability to call multiple tools in a single response. It is always better to speculatively read multiple files as a batch that are potentially useful.\n- You will regularly be asked to read screenshots. If the user provides a path to a screenshot ALWAYS use this tool to view the file at the path. This tool will work with all temporary file paths like /var/folders/123/abc/T/TemporaryItems/NSIRD_screencaptureui_ZfB1tD/Screenshot.png\n- If you read a file that exists but has empty contents you will receive a system reminder warning in place of file contents.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to read"
              },
              "offset": {
                "type": "number",
                "description": "The line number to start reading from. Only provide if the file is too large to read at once"
              },
              "limit": {
                "type": "number",
                "description": "The number of lines to read. Only provide if the file is too large to read at once."
              }
            },
            "required": [
              "file_path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Edit",
          "description": "Performs exact string replacements in files.\n\nUsage:\n- You must use your `Read` tool at least once in the conversation before editing. This tool will error if you attempt an edit without reading the file.\n- When editing text from Read tool output, ensure you preserve the exact indentation (tabs/spaces) as it appears AFTER the line number prefix. The line number prefix format is: spaces + line number + tab. Everything after that tab is the actual file content to match. Never include any part of the line number prefix in the old_string or new_string.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- Only use emojis if the user explicitly requests it. Avoid adding emojis to files unless asked.\n- The edit will FAIL if `old_string` is not unique in the file. Either provide a larger string with more surrounding context to make it unique or use `replace_all` to change every instance of `old_string`.\n- Use `replace_all` for replacing and renaming strings across the file. This parameter is useful if you want to rename a variable for instance.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to modify"
              },
              "old_string": {
                "type": "string",
                "description": "The text to replace"
              },
              "new_string": {
                "type": "string",
                "description": "The text to replace it with (must be different from old_string)"
              },
              "replace_all": {
                "type": "boolean",
                "default": false,
                "description": "Replace all occurences of old_string (default false)"
              }
            },
            "required": [
              "file_path",
              "old_string",
              "new_string"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "MultiEdit",
          "description": "This is a tool for making multiple edits to a single file in one operation. It is built on top of the Edit tool and allows you to perform multiple find-and-replace operations efficiently. Prefer this tool over the Edit tool when you need to make multiple edits to the same file.\n\nBefore using this tool:\n\n1. Use the Read tool to understand the file's contents and context\n2. Verify the directory path is correct\n\nTo make multiple file edits, provide the following:\n1. file_path: The absolute path to the file to modify (must be absolute, not relative)\n2. edits: An array of edit operations to perform, where each edit contains:\n   - old_string: The text to replace (must match the file contents exactly, including all whitespace and indentation)\n   - new_string: The edited text to replace the old_string\n   - replace_all: Replace all occurences of old_string. This parameter is optional and defaults to false.\n\nIMPORTANT:\n- All edits are applied in sequence, in the order they are provided\n- Each edit operates on the result of the previous edit\n- All edits must be valid for the operation to succeed - if any edit fails, none will be applied\n- This tool is ideal when you need to make several changes to different parts of the same file\n- For Jupyter notebooks (.ipynb files), use the NotebookEdit instead\n\nCRITICAL REQUIREMENTS:\n1. All edits follow the same requirements as the single Edit tool\n2. The edits are atomic - either all succeed or none are applied\n3. Plan your edits carefully to avoid conflicts between sequential operations\n\nWARNING:\n- The tool will fail if edits.old_string doesn't match the file contents exactly (including whitespace)\n- The tool will fail if edits.old_string and edits.new_string are the same\n- Since edits are applied in sequence, ensure that earlier edits don't affect the text that later edits are trying to find\n\nWhen making edits:\n- Ensure all edits result in idiomatic, correct code\n- Do not leave the code in a broken state\n- Always use absolute file paths (starting with /)\n- Only use emojis if the user explicitly requests it. Avoid adding emojis to files unless asked.\n- Use replace_all for replacing and renaming strings across the file. This parameter is useful if you want to rename a variable for instance.\n\nIf you want to create a new file, use:\n- A new file path, including dir name if needed\n- First edit: empty old_string and the new file's contents as new_string\n- Subsequent edits: normal edit operations on the created content",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to modify"
              },
              "edits": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "old_string": {
                      "type": "string",
                      "description": "The text to replace"
                    },
                    "new_string": {
                      "type": "string",
                      "description": "The text to replace it with"
                    },
                    "replace_all": {
                      "type": "boolean",
                      "default": false,
                      "description": "Replace all occurences of old_string (default false)."
                    }
                  },
                  "required": [
                    "old_string",
                    "new_string"
                  ],
                  "additionalProperties": false
                },
                "minItems": 1,
                "description": "Array of edit operations to perform sequentially on the file"
              }
            },
            "required": [
              "file_path",
              "edits"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Write",
          "description": "Writes a file to the local filesystem.\n\nUsage:\n- This tool will overwrite the existing file if there is one at the provided path.\n- If this is an existing file, you MUST use the Read tool first to read the file's contents. This tool will fail if you did not read the file first.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- NEVER proactively create documentation files (*.md) or README files. Only create documentation files if explicitly requested by the User.\n- Only use emojis if the user explicitly requests it. Avoid writing emojis to files unless asked.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to write (must be absolute, not relative)"
              },
              "content": {
                "type": "string",
                "description": "The content to write to the file"
              }
            },
            "required": [
              "file_path",
              "content"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "NotebookRead",
          "description": "Reads a Jupyter notebook (.ipynb file) and returns all of the cells with their outputs. Jupyter notebooks are interactive documents that combine code, text, and visualizations, commonly used for data analysis and scientific computing. The notebook_path parameter must be an absolute path, not a relative path.",
          "input_schema": {
            "type": "object",
            "properties": {
              "notebook_path": {
                "type": "string",
                "description": "The absolute path to the Jupyter notebook file to read (must be absolute, not relative)"
              },
              "cell_id": {
                "type": "string",
                "description": "The ID of a specific cell to read. If not provided, all cells will be read."
              }
            },
            "required": [
              "notebook_path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "NotebookEdit",
          "description": "Completely replaces the contents of a specific cell in a Jupyter notebook (.ipynb file) with new source. Jupyter notebooks are interactive documents that combine code, text, and visualizations, commonly used for data analysis and scientific computing. The notebook_path parameter must be an absolute path, not a relative path. The cell_number is 0-indexed. Use edit_mode=insert to add a new cell at the index specified by cell_number. Use edit_mode=delete to delete the cell at the index specified by cell_number.",
          "input_schema": {
            "type": "object",
            "properties": {
              "notebook_path": {
                "type": "string",
                "description": "The absolute path to the Jupyter notebook file to edit (must be absolute, not relative)"
              },
              "cell_id": {
                "type": "string",
                "description": "The ID of the cell to edit. When inserting a new cell, the new cell will be inserted after the cell with this ID, or at the beginning if not specified."
              },
              "new_source": {
                "type": "string",
                "description": "The new source for the cell"
              },
              "cell_type": {
                "type": "string",
                "enum": [
                  "code",
                  "markdown"
                ],
                "description": "The type of the cell (code or markdown). If not specified, it defaults to the current cell type. If using edit_mode=insert, this is required."
              },
              "edit_mode": {
                "type": "string",
                "enum": [
                  "replace",
                  "insert",
                  "delete"
                ],
                "description": "The type of edit to make (replace, insert, delete). Defaults to replace."
              }
            },
            "required": [
              "notebook_path",
              "new_source"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "WebFetch",
          "description": "\n- Fetches content from a specified URL and processes it using an AI model\n- Takes a URL and a prompt as input\n- Fetches the URL content, converts HTML to markdown\n- Processes the content with the prompt using a small, fast model\n- Returns the model's response about the content\n- Use this tool when you need to retrieve and analyze web content\n\nUsage notes:\n  - IMPORTANT: If an MCP-provided web fetch tool is available, prefer using that tool instead of this one, as it may have fewer restrictions. All MCP-provided tools start with \"mcp__\".\n  - The URL must be a fully-formed valid URL\n  - HTTP URLs will be automatically upgraded to HTTPS\n  - The prompt should describe what information you want to extract from the page\n  - This tool is read-only and does not modify any files\n  - Results may be summarized if the content is very large\n  - Includes a self-cleaning 15-minute cache for faster responses when repeatedly accessing the same URL\n  - When a URL redirects to a different host, the tool will inform you and provide the redirect URL in a special format. You should then make a new WebFetch request with the redirect URL to fetch the content.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "format": "uri",
                "description": "The URL to fetch content from"
              },
              "prompt": {
                "type": "string",
                "description": "The prompt to run on the fetched content"
              }
            },
            "required": [
              "url",
              "prompt"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "TodoWrite",
          "description": "Use this tool to create and manage a structured task list for your current coding session. This helps you track progress, organize complex tasks, and demonstrate thoroughness to the user.\nIt also helps the user understand the progress of the task and overall progress of their requests.\n\n## When to Use This Tool\nUse this tool proactively in these scenarios:\n\n1. Complex multi-step tasks - When a task requires 3 or more distinct steps or actions\n2. Non-trivial and complex tasks - Tasks that require careful planning or multiple operations\n3. User explicitly requests todo list - When the user directly asks you to use the todo list\n4. User provides multiple tasks - When users provide a list of things to be done (numbered or comma-separated)\n5. After receiving new instructions - Immediately capture user requirements as todos\n6. When you start working on a task - Mark it as in_progress BEFORE beginning work. Ideally you should only have one todo as in_progress at a time\n7. After completing a task - Mark it as completed and add any new follow-up tasks discovered during implementation\n\n## When NOT to Use This Tool\n\nSkip using this tool when:\n1. There is only a single, straightforward task\n2. The task is trivial and tracking it provides no organizational benefit\n3. The task can be completed in less than 3 trivial steps\n4. The task is purely conversational or informational\n\nNOTE that you should not use this tool if there is only one trivial task to do. In this case you are better off just doing the task directly.\n\n## Examples of When to Use the Todo List\n\n<example>\nUser: I want to add a dark mode toggle to the application settings. Make sure you run the tests and build when you're done!\nAssistant: I'll help add a dark mode toggle to your application settings. Let me create a todo list to track this implementation.\n*Creates todo list with the following items:*\n1. Create dark mode toggle component in Settings page\n2. Add dark mode state management (context/store)\n3. Implement CSS-in-JS styles for dark theme\n4. Update existing components to support theme switching\n5. Run tests and build process, addressing any failures or errors that occur\n*Begins working on the first task*\n\n<reasoning>\nThe assistant used the todo list because:\n1. Adding dark mode is a multi-step feature requiring UI, state management, and styling changes\n2. The user explicitly requested tests and build be run afterward\n3. The assistant inferred that tests and build need to pass by adding \"Ensure tests and build succeed\" as the final task\n</reasoning>\n</example>\n\n<example>\nUser: Help me rename the function getCwd to getCurrentWorkingDirectory across my project\nAssistant: Let me first search through your codebase to find all occurrences of 'getCwd'.\n*Uses grep or search tools to locate all instances of getCwd in the codebase*\nAssistant: I've found 15 instances of 'getCwd' across 8 different files. Let me create a todo list to track these changes.\n*Creates todo list with specific items for each file that needs updating*\n\n<reasoning>\nThe assistant used the todo list because:\n1. First, the assistant searched to understand the scope of the task\n2. Upon finding multiple occurrences across different files, it determined this was a complex task with multiple steps\n3. The todo list helps ensure every instance is tracked and updated systematically\n4. This approach prevents missing any occurrences and maintains code consistency\n</reasoning>\n</example>\n\n\n<example>\nUser: I need to implement these features for my e-commerce site: user registration, product catalog, shopping cart, and checkout flow.\nAssistant: I'll help implement these features. First, let's add all the features to the todo list.\n*Creates a todo list breaking down each feature into specific tasks based on the project architecture*\nAssistant: Let's start with user registration. This will involve creating database models, API endpoints, and frontend forms that integrate with your existing authentication system.\n\n<reasoning>\nThe assistant used the todo list because:\n1. The user provided multiple complex features to implement in a comma separated list\n2. The todo list helps organize these large features into manageable tasks\n3. This approach allows for tracking progress across the entire implementation\n</reasoning>\n</example>\n\n<example>\nUser: Can you help optimize my React application? It's rendering slowly and has performance issues.</user>\nAssistant: I'll help optimize your React application. First, let me examine your codebase to identify potential performance bottlenecks.\n*Reviews component structure, render patterns, state management, and data fetching*\nAssistant: After analyzing your codebase, I've identified several performance issues. Let me create a todo list to track our optimization efforts.\n*Creates todo list with items like: 1) Implement memoization for expensive calculations in ProductList, 2) Add virtualization for long lists in Dashboard, 3) Optimize image loading in Gallery component, 4) Fix state update loops in ShoppingCart, 5) Review bundle size and implement code splitting*\nLet's start by implementing memoization for the expensive calculations in your ProductList component.</assistant>\n\n<reasoning>\nThe assistant used the todo list because:\n1. First, the assistant examined the codebase to identify specific performance issues\n2. Based on this analysis, it identified multiple optimization opportunities\n3. Performance optimization is a non-trivial task requiring multiple steps\n4. The todo list helps methodically track improvements across different components\n5. This systematic approach ensures all performance bottlenecks are addressed\n</reasoning>\n</example>\n\n## Examples of When NOT to Use the Todo List\n\n<example>\nUser: How do I print 'Hello World' in Python?\nAssistant: In Python, you can print \"Hello World\" with this simple code:\n\npython\nprint(\"Hello World\")\n\nThis will output the text \"Hello World\" to the console when executed.</assistant>\n\n<reasoning>\nThe assistant did not use the todo list because this is a single, trivial task that can be completed in one step. There's no need to track multiple tasks or steps for such a straightforward request.\n</reasoning>\n</example>\n\n<example>\nUser: What does the git status command do?\nAssistant: The git status command shows the current state of your working directory and staging area. It displays which changes have been staged, which haven't, and which files aren't being tracked by Git. This is a fundamental command for understanding the current state of your repository before making commits.\n\n<reasoning>\nThe assistant did not use the todo list because this is an informational request with no actual coding task to complete. The user is simply asking for an explanation, not for the assistant to perform multiple steps or tasks.\n</reasoning>\n</example>\n\n<example>\nUser: Can you add a comment to the calculateTotal function to explain what it does?\nAssistant: Sure, let me add a comment to the calculateTotal function to explain what it does.\n* Uses the Edit tool to add a comment to the calculateTotal function *\n\n<reasoning>\nThe assistant did not use the todo list because this is a single, straightforward task confined to one location in the code. Adding a comment doesn't require tracking multiple steps or systematic organization.\n</reasoning>\n</example>\n\n<example>\nUser: Run npm install for me and tell me what happens.\nAssistant: I'll run the npm install command for you.\n\n*Executes: npm install*\n\nThe command completed successfully. Here's the output:\n[Output of npm install command]\n\nAll dependencies have been installed according to your package.json file.\n\n<reasoning>\nThe assistant did not use the todo list because this is a single command execution with immediate results. There are no multiple steps to track or organize, making the todo list unnecessary for this straightforward task.\n</reasoning>\n</example>\n\n## Task States and Management\n\n1. **Task States**: Use these states to track progress:\n   - pending: Task not yet started\n   - in_progress: Currently working on (limit to ONE task at a time)\n   - completed: Task finished successfully\n\n2. **Task Management**:\n   - Update task status in real-time as you work\n   - Mark tasks complete IMMEDIATELY after finishing (don't batch completions)\n   - Only have ONE task in_progress at any time\n   - Complete current tasks before starting new ones\n   - Remove tasks that are no longer relevant from the list entirely\n\n3. **Task Completion Requirements**:\n   - ONLY mark a task as completed when you have FULLY accomplished it\n   - If you encounter errors, blockers, or cannot finish, keep the task as in_progress\n   - When blocked, create a new task describing what needs to be resolved\n   - Never mark a task as completed if:\n     - Tests are failing\n     - Implementation is partial\n     - You encountered unresolved errors\n     - You couldn't find necessary files or dependencies\n\n4. **Task Breakdown**:\n   - Create specific, actionable items\n   - Break complex tasks into smaller, manageable steps\n   - Use clear, descriptive task names\n\nWhen in doubt, use this tool. Being proactive with task management demonstrates attentiveness and ensures you complete all requirements successfully.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "todos": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "content": {
                      "type": "string",
                      "minLength": 1
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "pending",
                        "in_progress",
                        "completed"
                      ]
                    },
                    "priority": {
                      "type": "string",
                      "enum": [
                        "high",
                        "medium",
                        "low"
                      ]
                    },
                    "id": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "content",
                    "status",
                    "priority",
                    "id"
                  ],
                  "additionalProperties": false
                },
                "description": "The updated todo list"
              }
            },
            "required": [
              "todos"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "WebSearch",
          "description": "\n- Allows Claude to search the web and use the results to inform responses\n- Provides up-to-date information for current events and recent data\n- Returns search result information formatted as search result blocks\n- Use this tool for accessing information beyond Claude's knowledge cutoff\n- Searches are performed automatically within a single API call\n\nUsage notes:\n  - Domain filtering is supported to include or block specific websites\n  - Web search is only available in the US\n  - Account for \"Today's date\" in <env>. For example, if <env> says \"Today's date: 2025-07-01\", and the user wants the latest docs, do not use 2024 in the search query. Use 2025.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "minLength": 2,
                "description": "The search query to use"
              },
              "allowed_domains": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Only include search results from these domains"
              },
              "blocked_domains": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Never include search results from these domains"
              }
            },
            "required": [
              "query"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        }
      ],
      "responseStructure": {
        "type": "object",
        "keys": [
          "id",
          "object",
          "created",
          "model",
          "choices",
          "usage",
          "stats",
          "system_fingerprint"
        ],
        "hasChoices": true,
        "hasContent": false,
        "hasUsage": true,
        "choicesCount": 1,
        "firstChoice": {
          "hasMessage": true,
          "hasToolCalls": false,
          "finishReason": "stop"
        }
      },
      "parsingAttempts": [
        "json_format",
        "function_call",
        "action_format",
        "natural_language"
      ]
    }
  },
  {
    "timestamp": "2025-08-10T06:45:12.750Z",
    "requestId": "session_1754804126703_ixall6oy5:conv_1754804126703_sm1ur5dvo:11:1754808290052:5mr5",
    "provider": "lmstudio",
    "model": "gpt-oss-20b-mlx",
    "endpoint": "localhost:1234",
    "failureType": "text_instead_of_tools",
    "originalResponse": {
      "id": "chatcmpl-1deup26ql9dx0kkmtnozbf",
      "object": "chat.completion",
      "created": 1754808290,
      "model": "gpt-oss-20b-mlx",
      "choices": [
        {
          "index": 0,
          "logprobs": null,
          "finish_reason": "stop",
          "message": {
            "role": "assistant",
            "content": "User says: they want us to read the project rules then check actual novel setting and fill in docs. They likely refer to project with some novel generation script or something.\n\nWe need to inspect the repository for any documentation related to \"novel\" or \"小说\". We need to see what \"项目规则\" refer to? They previously posted CLAUDE.md which contains general guidelines for codebase, scripts etc. But not specific to novel.\n\nMaybe the repository has a folder for \"Novel\" project, with some other docs. But we didn't see output due to tool lacking full path.\n\nWe should ask user for the folder structure or check repository root with file tree. Let's list. We tried LS but got no output. Maybe the repo is not at /Users/fanzhang/Documents/github but some other path. The actual working directory might be the root of code.\n\nWe can use \"Get the current working directory\" perhaps. But environment not provided function. We might need to ask user for repository root path.\n\nBut we can use \"Grep\" with no pat... [truncated]"
          }
        }
      ],
      "usage": {
        "prompt_tokens": 16688,
        "completion_tokens": 542,
        "total_tokens": 17230
      },
      "stats": {},
      "system_fingerprint": "gpt-oss-20b-mlx"
    },
    "expectedFormat": "openai",
    "errorMessage": "All parsing strategies failed",
    "responseAnalysis": {
      "hasToolCalls": false,
      "hasContent": true,
      "contentLength": 1963,
      "contentPreview": "User says: they want us to read the project rules then check actual novel setting and fill in docs. They likely refer to project with some novel generation script or something.\n\nWe need to inspect the",
      "finishReason": "stop",
      "toolCallPatterns": []
    },
    "debugInfo": {
      "requestTools": [
        {
          "name": "Task",
          "description": "Launch a new agent to handle complex, multi-step tasks autonomously.\n\nAvailable agent types and the tools they have access to:\n- general-purpose: General-purpose agent for researching complex questions, searching for code, and executing multi-step tasks. When you are searching for a keyword or file and are not confident that you will find the right match in the first few tries use this agent to perform the search for you. (Tools: *)\n- code-refactorer: Use this agent when you need to improve existing code structure, readability, or maintainability without changing functionality. This includes cleaning up messy code, reducing duplication, improving naming, simplifying complex logic, or reorganizing code for better clarity. Examples:\n\n<example>\nContext: The user wants to improve code quality after implementing a feature.\nuser: \"I just finished implementing the user authentication system. Can you help clean it up?\"\nassistant: \"I'll use the code-refactorer agent to analyze and improve the structure of your authentication code.\"\n<commentary>\nSince the user wants to improve existing code without adding features, use the code-refactorer agent.\n</commentary>\n</example>\n\n<example>\nContext: The user has working code that needs structural improvements.\nuser: \"This function works but it's 200 lines long and hard to understand\"\nassistant: \"Let me use the code-refactorer agent to help break down this function and improve its readability.\"\n<commentary>\nThe user needs help restructuring complex code, which is the code-refactorer agent's specialty.\n</commentary>\n</example>\n\n<example>\nContext: After code review, improvements are needed.\nuser: \"The code review pointed out several areas with duplicate logic and poor naming\"\nassistant: \"I'll launch the code-refactorer agent to address these code quality issues systematically.\"\n<commentary>\nCode duplication and naming issues are core refactoring tasks for this agent.\n</commentary>\n</example> (Tools: Edit, MultiEdit, Write, NotebookEdit, Grep, LS, Read)\n- project-task-planner: Use this agent when you need to create a comprehensive development task list from a Product Requirements Document (PRD). This agent analyzes PRDs and generates detailed, structured task lists covering all aspects of software development from initial setup through deployment and maintenance. Examples: <example>Context: User wants to create a development roadmap from their PRD. user: \"I have a PRD for a new e-commerce platform. Can you create a task list?\" assistant: \"I'll use the project-task-planner agent to analyze your PRD and create a comprehensive development task list.\" <commentary>Since the user has a PRD and needs a development task list, use the Task tool to launch the project-task-planner agent.</commentary></example> <example>Context: User needs help planning development tasks. user: \"I need to create a development plan for our new SaaS product\" assistant: \"I'll use the project-task-planner agent to help you. First, I'll need to see your Product Requirements Document (PRD).\" <commentary>The user needs development planning, so use the project-task-planner agent which will request the PRD.</commentary></example> (Tools: Task, Bash, Edit, MultiEdit, Write, NotebookEdit, Grep, LS, Read, ExitPlanMode, TodoWrite, WebSearch)\n- vibe-coding-coach: Use this agent when users want to build applications through conversation, focusing on the vision and feel of their app rather than technical implementation details. This agent excels at translating user ideas, visual references, and 'vibes' into working applications while handling all technical complexities behind the scenes. <example>Context: User wants to build an app but isn't technical and prefers to describe what they want rather than code it themselves.\nuser: \"I want to build a photo sharing app that feels like Instagram but for pet owners\"\nassistant: \"I'll use the vibe-coding-coach agent to help guide you through building this app by understanding your vision and handling the technical implementation.\"\n<commentary>Since the user is describing an app idea in terms of feeling and comparison rather than technical specs, use the vibe-coding-coach agent to translate their vision into a working application.</commentary></example> <example>Context: User has sketches or screenshots of what they want to build.\nuser: \"Here's a screenshot of an app I like. Can we build something similar but for tracking workouts?\"\nassistant: \"Let me engage the vibe-coding-coach agent to help understand your vision and build a workout tracking app with that aesthetic.\"\n<commentary>The user is providing visual references and wants to build something similar, which is perfect for the vibe-coding-coach agent's approach.</commentary></example> (Tools: *)\n- debug-system-architect: Use this agent when you need to establish a comprehensive debug logging system for a project. This includes setting up log directories, implementing node-level tracing, creating time-based test records, establishing replay mechanisms, and documenting debug rules. Example: <example> Context: User is setting up a new project and wants to implement proper debugging infrastructure from the start. user: \"Please help me set up a debug system for my new API router project\" <commentary> Since the user is requesting debug system setup, use the debug-system-architect agent to analyze the project and implement comprehensive logging and tracing mechanisms. </commentary> </example> <example> Context: User encounters intermittent issues in their routing system and needs better visibility. user: \"I'm having trouble tracking down why some requests fail intermittently\" <commentary> Since the user needs better debugging visibility for intermittent issues, use the debug-system-architect agent to implement node-level tracing and replay mechanisms. </commentary> </example> (Tools: *)\n- code-risk-auditor: Use this agent when you need to perform comprehensive code risk assessment and identify potential architectural issues in your codebase. Examples: <example>Context: The user has just completed a major refactoring and wants to ensure no hardcoded values or fallback mechanisms were introduced. user: \"I just finished refactoring the routing system, can you check for any code risks?\" assistant: \"I'll use the code-risk-auditor agent to perform a comprehensive risk assessment of your routing system changes.\"</example> <example>Context: Before a major release, the user wants to clean up technical debt and ensure code quality. user: \"We're preparing for v2.0 release, I need a full code audit\" assistant: \"Let me launch the code-risk-auditor agent to identify hardcoding, fallback risks, outdated tests, and duplicate implementations across the entire codebase.\"</example> <example>Context: The user notices inconsistent behavior and suspects duplicate implementations. user: \"The same feature seems to be implemented in multiple places, causing bugs\" assistant: \"I'll use the code-risk-auditor agent to scan for duplicate implementations and provide a consolidation plan.\"</example> (Tools: *)\n- security-auditor: Use this agent when you need to perform a comprehensive security audit of a codebase, identify vulnerabilities, and generate a detailed security report with actionable remediation steps. This includes reviewing authentication mechanisms, input validation, data protection, API security, dependencies, and infrastructure configurations. Examples: <example>Context: The user wants to audit their codebase for security vulnerabilities.\nuser: \"Can you perform a security audit of my application?\"\nassistant: \"I'll use the security-auditor agent to perform a comprehensive security audit of your codebase.\"\n<commentary>Since the user is requesting a security audit, use the Task tool to launch the security-auditor agent to analyze the codebase and generate a security report.</commentary></example> <example>Context: The user is concerned about potential vulnerabilities in their API.\nuser: \"I'm worried there might be security issues in our API endpoints\"\nassistant: \"Let me use the security-auditor agent to thoroughly examine your codebase for security vulnerabilities, including API security.\"\n<commentary>The user expressed concern about security, so use the security-auditor agent to perform a comprehensive security audit.</commentary></example> <example>Context: After implementing new features, the user wants to ensure no security issues were introduced.\nuser: \"We just added user authentication to our app. Can you check if it's secure?\"\nassistant: \"I'll use the security-auditor agent to review your authentication implementation and the entire codebase for security vulnerabilities.\"\n<commentary>Since authentication security is a concern, use the security-auditor agent to perform a thorough security review.</commentary></example> (Tools: Task, Bash, Edit, MultiEdit, Write, NotebookEdit)\n- project-memory-manager: Use this agent when you need to manage project-specific memory entries, create project documentation, or organize project knowledge. This includes creating project summaries, documenting project decisions, tracking project progress, and maintaining project-specific knowledge bases. <example>Context: User wants to document a project decision or create project documentation. user: \"请为我们的新项目创建一个内存管理系统的文档\" assistant: \"我将使用 project-memory-manager agent 来创建这个项目文档\" <commentary>Since the user needs project documentation, use the project-memory-manager agent to create project-specific memory entries.</commentary></example> <example>Context: User wants to track project progress or decisions. user: \"我们需要记录这个项目的关键决策点\" assistant: \"让我使用 project-memory-manager agent 来记录这些项目决策\" <commentary>Since this is project tracking, use the project-memory-manager agent to create decision-type memory entries.</commentary></example> (Tools: *)\n- rules-architect: Use this agent when you need to analyze project architecture and establish comprehensive rule management systems. Examples: <example>Context: User wants to organize project rules and create a structured rule management system. user: \"I need to reorganize our project rules and create a better structure for managing coding standards, file organization, and testing protocols\" assistant: \"I'll use the rules-architect agent to analyze the current project structure and establish a comprehensive rule management system with proper categorization and organization.\"</example> <example>Context: Project has grown complex and needs better rule organization. user: \"Our CLAUDE.md file is getting too large and we need to break down rules into manageable categories\" assistant: \"Let me call the rules-architect agent to create a structured .claude/rules system that will organize all project rules into logical categories.\"</example> (Tools: *)\n- frontend-designer: Use this agent when you need to convert design mockups, wireframes, or visual concepts into detailed technical specifications and implementation guides for frontend development. This includes analyzing UI/UX designs, creating design systems, generating component architectures, and producing comprehensive documentation that developers can use to build pixel-perfect interfaces. Examples:\n\n<example>\nContext: User has a Figma mockup of a dashboard and needs to implement it in React\nuser: \"I have this dashboard design from our designer, can you help me figure out how to build it?\"\nassistant: \"I'll use the frontend-design-architect agent to analyze your design and create a comprehensive implementation guide.\"\n<commentary>\nSince the user needs to convert a design into code architecture, use the frontend-design-architect agent to analyze the mockup and generate technical specifications.\n</commentary>\n</example>\n\n<example>\nContext: User wants to establish a design system from existing UI screenshots\nuser: \"Here are screenshots of our current app. We need to extract a consistent design system from these.\"\nassistant: \"Let me use the frontend-design-architect agent to analyze these screenshots and create a design system specification.\"\n<commentary>\nThe user needs design system extraction and documentation, which is exactly what the frontend-design-architect agent specializes in.\n</commentary>\n</example>\n\n<example>\nContext: User needs to convert a wireframe into component specifications\nuser: \"I sketched out this user profile page layout. How should I structure the components?\"\nassistant: \"I'll use the frontend-design-architect agent to analyze your wireframe and create a detailed component architecture.\"\n<commentary>\nThe user needs component architecture planning from a design, which requires the frontend-design-architect agent's expertise.\n</commentary>\n</example> (Tools: *)\n- content-writer: Use this agent when you need to create compelling, informative content that explains complex topics in simple terms. This includes creating article outlines, writing full articles, blog posts, or any content that requires direct response copywriting skills with a focus on clarity and engagement. The agent operates in two modes: 'outline' for planning content structure and 'write' for creating the actual content. Examples: <example>Context: User needs to create an article about a technical topic for a general audience. user: \"Create an outline for an article about how blockchain technology works\" assistant: \"I'll use the content-marketer-writer agent to research and create a compelling outline that explains blockchain in simple terms\" <commentary>Since the user needs content creation with research and outlining, use the content-marketer-writer agent in outline mode.</commentary></example> <example>Context: User has an outline and needs to write the full article. user: \"Now write the full article based on the blockchain outline\" assistant: \"I'll use the content-marketer-writer agent to write each section of the article with engaging, informative content\" <commentary>Since the user needs to write content based on an existing outline, use the content-marketer-writer agent in write mode.</commentary></example> (Tools: *)\n- test-runner: Use this agent to run and manage tests according to the global and project-specific testing rules. This includes executing test scripts, documenting test results, and helping to diagnose issues following the standard pipeline. <example>Context: User wants to run all functional tests. user: \"运行所有功能测试\" assistant: \"我将使用 test-runner agent 来执行所有功能测试\" <commentary>Since the user wants to run tests by category, use the test-runner agent.</commentary></example> <example>Context: User wants to verify a bug fix. user: \"我修复了一个bug，帮我验证一下\" assistant: \"让我使用 test-runner agent 来执行对应的修复验证测试\" <commentary>The user needs to verify a fix, which is a core task for the test-runner agent.</commentary></example> (Tools: *)\n- in-depth-research-analyst: Use this agent when you need to conduct comprehensive research reports with in-depth web mining, data analysis, and visualization. This includes industry analysis, market research, competitive intelligence, and trend forecasting with accurate data from authoritative sources. <example>Context: User wants a comprehensive industry analysis report. user: \"请对人工智能芯片市场进行深入调研，包括主要厂商、市场份额和增长趋势\" assistant: \"我将使用 in-depth-research-analyst agent 来进行这项深入的市场调研并生成可视化报告\" <commentary>Since the user needs a comprehensive industry analysis with data visualization, use the in-depth-research-analyst agent to conduct thorough research and create an integrated report.</commentary></example> <example>Context: User wants market research with accurate data and visualizations. user: \"我们需要一份关于电动汽车充电基础设施的深度报告，包含数据图表\" assistant: \"让我使用 in-depth-research-analyst agent 来收集准确数据并生成图文并茂的分析报告\" <commentary>Since this requires market research with data accuracy and visualizations, use the in-depth-research-analyst agent to create a comprehensive report.</commentary></example> (Tools: *)\n- prd-writer: Use this agent when you need to create a comprehensive Product Requirements Document (PRD) for a software project or feature. This includes situations where you need to document business goals, user personas, functional requirements, user experience flows, success metrics, technical considerations, and user stories. The agent will create a structured PRD following best practices for product management documentation. Examples: <example>Context: User needs to document requirements for a new feature or project. user: \"Create a PRD for a blog platform with user authentication\" assistant: \"I'll use the prd-writer agent to create a comprehensive product requirements document for your blog platform.\" <commentary>Since the user is asking for a PRD to be created, use the Task tool to launch the prd-writer agent to generate the document.</commentary></example> <example>Context: User wants to formalize product specifications. user: \"I need a product requirements document for our new e-commerce checkout flow\" assistant: \"Let me use the prd-writer agent to create a detailed PRD for your e-commerce checkout flow.\" <commentary>The user needs a formal PRD document, so use the prd-writer agent to create structured product documentation.</commentary></example> (Tools: Task, Bash, Grep, LS, Read, Write, WebSearch, Glob)\n- pipeline-debug-universal: Use this agent when you need to implement comprehensive debug hooks and testing infrastructure for ANY pipeline system - whether it's API routing, data processing, CI/CD workflows, or transformation pipelines. This agent specializes in creating universal debug architectures that work across different pipeline types with data capture, replay capabilities, and systematic testing matrices. Examples: <example>Context: User is working on a multi-provider API routing system and needs to add debug capabilities to track data flow through each pipeline step. user: \"I need to add debug hooks to our routing pipeline so we can capture and replay data at each step\" assistant: \"I'll use the pipeline-debug-universal agent to design a comprehensive debug infrastructure with data capture and replay capabilities\" <commentary>Since the user needs pipeline debugging infrastructure, use the pipeline-debug-universal agent to create debug hooks and testing matrices.</commentary></example> <example>Context: User has a complex data transformation pipeline and wants to build systematic testing for each stage and provider. user: \"Our data processing pipeline has issues and we need better testing infrastructure to isolate problems at each step\" assistant: \"Let me use the pipeline-debug-universal agent to create a complete testing matrix and debug system\" <commentary>Since the user needs systematic pipeline testing infrastructure, use the pipeline-debug-universal agent to architect the testing system.</commentary></example> <example>Context: User is building a CI/CD pipeline and needs to implement debug capabilities for tracking deployment issues. user: \"Our deployment pipeline fails randomly and we can't reproduce the issues consistently\" assistant: \"I'll deploy the pipeline-debug-universal agent to create comprehensive debug hooks and replay capabilities for your CI/CD pipeline\" <commentary>Since the user needs debug infrastructure for a deployment pipeline, use the pipeline-debug-universal agent to design the debug system.</commentary></example> (Tools: *)\n\nWhen using the Task tool, you must specify a subagent_type parameter to select which agent type to use.\n\n\n\nWhen NOT to use the Agent tool:\n- If you want to read a specific file path, use the Read or Glob tool instead of the Agent tool, to find the match more quickly\n- If you are searching for a specific class definition like \"class Foo\", use the Glob tool instead, to find the match more quickly\n- If you are searching for code within a specific file or set of 2-3 files, use the Read tool instead of the Agent tool, to find the match more quickly\n- Other tasks that are not related to the agent descriptions above\n\n\nUsage notes:\n1. Launch multiple agents concurrently whenever possible, to maximize performance; to do that, use a single message with multiple tool uses\n2. When the agent is done, it will return a single message back to you. The result returned by the agent is not visible to the user. To show the user the result, you should send a text message back to the user with a concise summary of the result.\n3. Each agent invocation is stateless. You will not be able to send additional messages to the agent, nor will the agent be able to communicate with you outside of its final report. Therefore, your prompt should contain a highly detailed task description for the agent to perform autonomously and you should specify exactly what information the agent should return back to you in its final and only message to you.\n4. The agent's outputs should generally be trusted\n5. Clearly tell the agent whether you expect it to write code or just to do research (search, file reads, web fetches, etc.), since it is not aware of the user's intent\n6. If the agent description mentions that it should be used proactively, then you should try your best to use it without the user having to ask for it first. Use your judgement.\n\nExample usage:\n\n<example_agent_descriptions>\n\"code-reviewer\": use this agent after you are done writing a signficant piece of code\n\"greeting-responder\": use this agent when to respond to user greetings with a friendly joke\n</example_agent_description>\n\n<example>\nuser: \"Please write a function that checks if a number is prime\"\nassistant: Sure let me write a function that checks if a number is prime\nassistant: First let me use the Write tool to write a function that checks if a number is prime\nassistant: I'm going to use the Write tool to write the following code:\n<code>\nfunction isPrime(n) {\n  if (n <= 1) return false\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n</code>\n<commentary>\nSince a signficant piece of code was written and the task was completed, now use the code-reviewer agent to review the code\n</commentary>\nassistant: Now let me use the code-reviewer agent to review the code\nassistant: Uses the Task tool to launch the with the code-reviewer agent\n</example>\n\n<example>\nuser: \"Hello\"\n<commentary>\nSince the user is greeting, use the greeting-responder agent to respond with a friendly joke\n</commentary>\nassistant: \"I'm going to use the Task tool to launch the with the greeting-responder agent\"\n</example>\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "description": {
                "type": "string",
                "description": "A short (3-5 word) description of the task"
              },
              "prompt": {
                "type": "string",
                "description": "The task for the agent to perform"
              },
              "subagent_type": {
                "type": "string",
                "description": "The type of specialized agent to use for this task"
              }
            },
            "required": [
              "description",
              "prompt",
              "subagent_type"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Bash",
          "description": "Executes a given bash command in a persistent shell session with optional timeout, ensuring proper handling and security measures.\n\nBefore executing the command, please follow these steps:\n\n1. Directory Verification:\n   - If the command will create new directories or files, first use the LS tool to verify the parent directory exists and is the correct location\n   - For example, before running \"mkdir foo/bar\", first use LS to check that \"foo\" exists and is the intended parent directory\n\n2. Command Execution:\n   - Always quote file paths that contain spaces with double quotes (e.g., cd \"path with spaces/file.txt\")\n   - Examples of proper quoting:\n     - cd \"/Users/name/My Documents\" (correct)\n     - cd /Users/name/My Documents (incorrect - will fail)\n     - python \"/path/with spaces/script.py\" (correct)\n     - python /path/with spaces/script.py (incorrect - will fail)\n   - After ensuring proper quoting, execute the command.\n   - Capture the output of the command.\n\nUsage notes:\n  - The command argument is required.\n  - You can specify an optional timeout in milliseconds (up to 600000ms / 10 minutes). If not specified, commands will timeout after 120000ms (2 minutes).\n  - It is very helpful if you write a clear, concise description of what this command does in 5-10 words.\n  - If the output exceeds 30000 characters, output will be truncated before being returned to you.\n  - VERY IMPORTANT: You MUST avoid using search commands like `find` and `grep`. Instead use Grep, Glob, or Task to search. You MUST avoid read tools like `cat`, `head`, `tail`, and `ls`, and use Read and LS to read files.\n - If you _still_ need to run `grep`, STOP. ALWAYS USE ripgrep at `rg` first, which all ${PRODUCT_NAME} users have pre-installed.\n  - When issuing multiple commands, use the ';' or '&&' operator to separate them. DO NOT use newlines (newlines are ok in quoted strings).\n  - Try to maintain your current working directory throughout the session by using absolute paths and avoiding usage of `cd`. You may use `cd` if the User explicitly requests it.\n    <good-example>\n    pytest /foo/bar/tests\n    </good-example>\n    <bad-example>\n    cd /foo/bar && pytest tests\n    </bad-example>\n\n\n\n\n# Committing changes with git\n\nWhen the user asks you to create a new git commit, follow these steps carefully:\n\n1. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following bash commands in parallel, each using the Bash tool:\n  - Run a git status command to see all untracked files.\n  - Run a git diff command to see both staged and unstaged changes that will be committed.\n  - Run a git log command to see recent commit messages, so that you can follow this repository's commit message style.\n2. Analyze all staged changes (both previously staged and newly added) and draft a commit message:\n  - Summarize the nature of the changes (eg. new feature, enhancement to an existing feature, bug fix, refactoring, test, docs, etc.). Ensure the message accurately reflects the changes and their purpose (i.e. \"add\" means a wholly new feature, \"update\" means an enhancement to an existing feature, \"fix\" means a bug fix, etc.).\n  - Check for any sensitive information that shouldn't be committed\n  - Draft a concise (1-2 sentences) commit message that focuses on the \"why\" rather than the \"what\"\n  - Ensure it accurately reflects the changes and their purpose\n3. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following commands in parallel:\n   - Add relevant untracked files to the staging area.\n   - Create the commit with a message ending with:\n   🤖 Generated with [Claude Code](https://claude.ai/code)\n\n   Co-Authored-By: Claude <noreply@anthropic.com>\n   - Run git status to make sure the commit succeeded.\n4. If the commit fails due to pre-commit hook changes, retry the commit ONCE to include these automated changes. If it fails again, it usually means a pre-commit hook is preventing the commit. If the commit succeeds but you notice that files were modified by the pre-commit hook, you MUST amend your commit to include them.\n\nImportant notes:\n- NEVER update the git config\n- NEVER run additional commands to read or explore code, besides git bash commands\n- NEVER use the TodoWrite or Task tools\n- DO NOT push to the remote repository unless the user explicitly asks you to do so\n- IMPORTANT: Never use git commands with the -i flag (like git rebase -i or git add -i) since they require interactive input which is not supported.\n- If there are no changes to commit (i.e., no untracked files and no modifications), do not create an empty commit\n- In order to ensure good formatting, ALWAYS pass the commit message via a HEREDOC, a la this example:\n<example>\ngit commit -m \"$(cat <<'EOF'\n   Commit message here.\n\n   🤖 Generated with [Claude Code](https://claude.ai/code)\n\n   Co-Authored-By: Claude <noreply@anthropic.com>\n   EOF\n   )\"\n</example>\n\n# Creating pull requests\nUse the gh command via the Bash tool for ALL GitHub-related tasks including working with issues, pull requests, checks, and releases. If given a Github URL use the gh command to get the information needed.\n\nIMPORTANT: When the user asks you to create a pull request, follow these steps carefully:\n\n1. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following bash commands in parallel using the Bash tool, in order to understand the current state of the branch since it diverged from the main branch:\n   - Run a git status command to see all untracked files\n   - Run a git diff command to see both staged and unstaged changes that will be committed\n   - Check if the current branch tracks a remote branch and is up to date with the remote, so you know if you need to push to the remote\n   - Run a git log command and `git diff [base-branch]...HEAD` to understand the full commit history for the current branch (from the time it diverged from the base branch)\n2. Analyze all changes that will be included in the pull request, making sure to look at all relevant commits (NOT just the latest commit, but ALL commits that will be included in the pull request!!!), and draft a pull request summary\n3. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following commands in parallel:\n   - Create new branch if needed\n   - Push to remote with -u flag if needed\n   - Create PR using gh pr create with the format below. Use a HEREDOC to pass the body to ensure correct formatting.\n<example>\ngh pr create --title \"the pr title\" --body \"$(cat <<'EOF'\n## Summary\n<1-3 bullet points>\n\n## Test plan\n[Checklist of TODOs for testing the pull request...]\n\n🤖 Generated with [Claude Code](https://claude.ai/code)\nEOF\n)\"\n</example>\n\nImportant:\n- NEVER update the git config\n- DO NOT use the TodoWrite or Task tools\n- Return the PR URL when you're done, so the user can see it\n\n# Other common operations\n- View comments on a Github PR: gh api repos/foo/bar/pulls/123/comments",
          "input_schema": {
            "type": "object",
            "properties": {
              "command": {
                "type": "string",
                "description": "The command to execute"
              },
              "timeout": {
                "type": "number",
                "description": "Optional timeout in milliseconds (max 600000)"
              },
              "description": {
                "type": "string",
                "description": " Clear, concise description of what this command does in 5-10 words. Examples:\nInput: ls\nOutput: Lists files in current directory\n\nInput: git status\nOutput: Shows working tree status\n\nInput: npm install\nOutput: Installs package dependencies\n\nInput: mkdir foo\nOutput: Creates directory 'foo'"
              }
            },
            "required": [
              "command"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Glob",
          "description": "- Fast file pattern matching tool that works with any codebase size\n- Supports glob patterns like \"**/*.js\" or \"src/**/*.ts\"\n- Returns matching file paths sorted by modification time\n- Use this tool when you need to find files by name patterns\n- When you are doing an open ended search that may require multiple rounds of globbing and grepping, use the Agent tool instead\n- You have the capability to call multiple tools in a single response. It is always better to speculatively perform multiple searches as a batch that are potentially useful.",
          "input_schema": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "The glob pattern to match files against"
              },
              "path": {
                "type": "string",
                "description": "The directory to search in. If not specified, the current working directory will be used. IMPORTANT: Omit this field to use the default directory. DO NOT enter \"undefined\" or \"null\" - simply omit it for the default behavior. Must be a valid directory path if provided."
              }
            },
            "required": [
              "pattern"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Grep",
          "description": "A powerful search tool built on ripgrep\n\n  Usage:\n  - ALWAYS use Grep for search tasks. NEVER invoke `grep` or `rg` as a Bash command. The Grep tool has been optimized for correct permissions and access.\n  - Supports full regex syntax (e.g., \"log.*Error\", \"function\\s+\\w+\")\n  - Filter files with glob parameter (e.g., \"*.js\", \"**/*.tsx\") or type parameter (e.g., \"js\", \"py\", \"rust\")\n  - Output modes: \"content\" shows matching lines, \"files_with_matches\" shows only file paths (default), \"count\" shows match counts\n  - Use Task tool for open-ended searches requiring multiple rounds\n  - Pattern syntax: Uses ripgrep (not grep) - literal braces need escaping (use `interface\\{\\}` to find `interface{}` in Go code)\n  - Multiline matching: By default patterns match within single lines only. For cross-line patterns like `struct \\{[\\s\\S]*?field`, use `multiline: true`\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "The regular expression pattern to search for in file contents"
              },
              "path": {
                "type": "string",
                "description": "File or directory to search in (rg PATH). Defaults to current working directory."
              },
              "glob": {
                "type": "string",
                "description": "Glob pattern to filter files (e.g. \"*.js\", \"*.{ts,tsx}\") - maps to rg --glob"
              },
              "output_mode": {
                "type": "string",
                "enum": [
                  "content",
                  "files_with_matches",
                  "count"
                ],
                "description": "Output mode: \"content\" shows matching lines (supports -A/-B/-C context, -n line numbers, head_limit), \"files_with_matches\" shows file paths (supports head_limit), \"count\" shows match counts (supports head_limit). Defaults to \"files_with_matches\"."
              },
              "-B": {
                "type": "number",
                "description": "Number of lines to show before each match (rg -B). Requires output_mode: \"content\", ignored otherwise."
              },
              "-A": {
                "type": "number",
                "description": "Number of lines to show after each match (rg -A). Requires output_mode: \"content\", ignored otherwise."
              },
              "-C": {
                "type": "number",
                "description": "Number of lines to show before and after each match (rg -C). Requires output_mode: \"content\", ignored otherwise."
              },
              "-n": {
                "type": "boolean",
                "description": "Show line numbers in output (rg -n). Requires output_mode: \"content\", ignored otherwise."
              },
              "-i": {
                "type": "boolean",
                "description": "Case insensitive search (rg -i)"
              },
              "type": {
                "type": "string",
                "description": "File type to search (rg --type). Common types: js, py, rust, go, java, etc. More efficient than include for standard file types."
              },
              "head_limit": {
                "type": "number",
                "description": "Limit output to first N lines/entries, equivalent to \"| head -N\". Works across all output modes: content (limits output lines), files_with_matches (limits file paths), count (limits count entries). When unspecified, shows all results from ripgrep."
              },
              "multiline": {
                "type": "boolean",
                "description": "Enable multiline mode where . matches newlines and patterns can span lines (rg -U --multiline-dotall). Default: false."
              }
            },
            "required": [
              "pattern"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "LS",
          "description": "Lists files and directories in a given path. The path parameter must be an absolute path, not a relative path. You can optionally provide an array of glob patterns to ignore with the ignore parameter. You should generally prefer the Glob and Grep tools, if you know which directories to search.",
          "input_schema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "The absolute path to the directory to list (must be absolute, not relative)"
              },
              "ignore": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of glob patterns to ignore"
              }
            },
            "required": [
              "path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "ExitPlanMode",
          "description": "Use this tool when you are in plan mode and have finished presenting your plan and are ready to code. This will prompt the user to exit plan mode.\nIMPORTANT: Only use this tool when the task requires planning the implementation steps of a task that requires writing code. For research tasks where you're gathering information, searching files, reading files or in general trying to understand the codebase - do NOT use this tool.\n\nEg.\n1. Initial task: \"Search for and understand the implementation of vim mode in the codebase\" - Do not use the exit plan mode tool because you are not planning the implementation steps of a task.\n2. Initial task: \"Help me implement yank mode for vim\" - Use the exit plan mode tool after you have finished planning the implementation steps of the task.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "plan": {
                "type": "string",
                "description": "The plan you came up with, that you want to run by the user for approval. Supports markdown. The plan should be pretty concise."
              }
            },
            "required": [
              "plan"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Read",
          "description": "Reads a file from the local filesystem. You can access any file directly by using this tool.\nAssume this tool is able to read all files on the machine. If the User provides a path to a file assume that path is valid. It is okay to read a file that does not exist; an error will be returned.\n\nUsage:\n- The file_path parameter must be an absolute path, not a relative path\n- By default, it reads up to 2000 lines starting from the beginning of the file\n- You can optionally specify a line offset and limit (especially handy for long files), but it's recommended to read the whole file by not providing these parameters\n- Any lines longer than 2000 characters will be truncated\n- Results are returned using cat -n format, with line numbers starting at 1\n- This tool allows Claude Code to read images (eg PNG, JPG, etc). When reading an image file the contents are presented visually as Claude Code is a multimodal LLM.\n- This tool can read PDF files (.pdf). PDFs are processed page by page, extracting both text and visual content for analysis.\n- For Jupyter notebooks (.ipynb files), use the NotebookRead instead\n- You have the capability to call multiple tools in a single response. It is always better to speculatively read multiple files as a batch that are potentially useful.\n- You will regularly be asked to read screenshots. If the user provides a path to a screenshot ALWAYS use this tool to view the file at the path. This tool will work with all temporary file paths like /var/folders/123/abc/T/TemporaryItems/NSIRD_screencaptureui_ZfB1tD/Screenshot.png\n- If you read a file that exists but has empty contents you will receive a system reminder warning in place of file contents.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to read"
              },
              "offset": {
                "type": "number",
                "description": "The line number to start reading from. Only provide if the file is too large to read at once"
              },
              "limit": {
                "type": "number",
                "description": "The number of lines to read. Only provide if the file is too large to read at once."
              }
            },
            "required": [
              "file_path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Edit",
          "description": "Performs exact string replacements in files.\n\nUsage:\n- You must use your `Read` tool at least once in the conversation before editing. This tool will error if you attempt an edit without reading the file.\n- When editing text from Read tool output, ensure you preserve the exact indentation (tabs/spaces) as it appears AFTER the line number prefix. The line number prefix format is: spaces + line number + tab. Everything after that tab is the actual file content to match. Never include any part of the line number prefix in the old_string or new_string.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- Only use emojis if the user explicitly requests it. Avoid adding emojis to files unless asked.\n- The edit will FAIL if `old_string` is not unique in the file. Either provide a larger string with more surrounding context to make it unique or use `replace_all` to change every instance of `old_string`.\n- Use `replace_all` for replacing and renaming strings across the file. This parameter is useful if you want to rename a variable for instance.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to modify"
              },
              "old_string": {
                "type": "string",
                "description": "The text to replace"
              },
              "new_string": {
                "type": "string",
                "description": "The text to replace it with (must be different from old_string)"
              },
              "replace_all": {
                "type": "boolean",
                "default": false,
                "description": "Replace all occurences of old_string (default false)"
              }
            },
            "required": [
              "file_path",
              "old_string",
              "new_string"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "MultiEdit",
          "description": "This is a tool for making multiple edits to a single file in one operation. It is built on top of the Edit tool and allows you to perform multiple find-and-replace operations efficiently. Prefer this tool over the Edit tool when you need to make multiple edits to the same file.\n\nBefore using this tool:\n\n1. Use the Read tool to understand the file's contents and context\n2. Verify the directory path is correct\n\nTo make multiple file edits, provide the following:\n1. file_path: The absolute path to the file to modify (must be absolute, not relative)\n2. edits: An array of edit operations to perform, where each edit contains:\n   - old_string: The text to replace (must match the file contents exactly, including all whitespace and indentation)\n   - new_string: The edited text to replace the old_string\n   - replace_all: Replace all occurences of old_string. This parameter is optional and defaults to false.\n\nIMPORTANT:\n- All edits are applied in sequence, in the order they are provided\n- Each edit operates on the result of the previous edit\n- All edits must be valid for the operation to succeed - if any edit fails, none will be applied\n- This tool is ideal when you need to make several changes to different parts of the same file\n- For Jupyter notebooks (.ipynb files), use the NotebookEdit instead\n\nCRITICAL REQUIREMENTS:\n1. All edits follow the same requirements as the single Edit tool\n2. The edits are atomic - either all succeed or none are applied\n3. Plan your edits carefully to avoid conflicts between sequential operations\n\nWARNING:\n- The tool will fail if edits.old_string doesn't match the file contents exactly (including whitespace)\n- The tool will fail if edits.old_string and edits.new_string are the same\n- Since edits are applied in sequence, ensure that earlier edits don't affect the text that later edits are trying to find\n\nWhen making edits:\n- Ensure all edits result in idiomatic, correct code\n- Do not leave the code in a broken state\n- Always use absolute file paths (starting with /)\n- Only use emojis if the user explicitly requests it. Avoid adding emojis to files unless asked.\n- Use replace_all for replacing and renaming strings across the file. This parameter is useful if you want to rename a variable for instance.\n\nIf you want to create a new file, use:\n- A new file path, including dir name if needed\n- First edit: empty old_string and the new file's contents as new_string\n- Subsequent edits: normal edit operations on the created content",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to modify"
              },
              "edits": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "old_string": {
                      "type": "string",
                      "description": "The text to replace"
                    },
                    "new_string": {
                      "type": "string",
                      "description": "The text to replace it with"
                    },
                    "replace_all": {
                      "type": "boolean",
                      "default": false,
                      "description": "Replace all occurences of old_string (default false)."
                    }
                  },
                  "required": [
                    "old_string",
                    "new_string"
                  ],
                  "additionalProperties": false
                },
                "minItems": 1,
                "description": "Array of edit operations to perform sequentially on the file"
              }
            },
            "required": [
              "file_path",
              "edits"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Write",
          "description": "Writes a file to the local filesystem.\n\nUsage:\n- This tool will overwrite the existing file if there is one at the provided path.\n- If this is an existing file, you MUST use the Read tool first to read the file's contents. This tool will fail if you did not read the file first.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- NEVER proactively create documentation files (*.md) or README files. Only create documentation files if explicitly requested by the User.\n- Only use emojis if the user explicitly requests it. Avoid writing emojis to files unless asked.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to write (must be absolute, not relative)"
              },
              "content": {
                "type": "string",
                "description": "The content to write to the file"
              }
            },
            "required": [
              "file_path",
              "content"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "NotebookRead",
          "description": "Reads a Jupyter notebook (.ipynb file) and returns all of the cells with their outputs. Jupyter notebooks are interactive documents that combine code, text, and visualizations, commonly used for data analysis and scientific computing. The notebook_path parameter must be an absolute path, not a relative path.",
          "input_schema": {
            "type": "object",
            "properties": {
              "notebook_path": {
                "type": "string",
                "description": "The absolute path to the Jupyter notebook file to read (must be absolute, not relative)"
              },
              "cell_id": {
                "type": "string",
                "description": "The ID of a specific cell to read. If not provided, all cells will be read."
              }
            },
            "required": [
              "notebook_path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "NotebookEdit",
          "description": "Completely replaces the contents of a specific cell in a Jupyter notebook (.ipynb file) with new source. Jupyter notebooks are interactive documents that combine code, text, and visualizations, commonly used for data analysis and scientific computing. The notebook_path parameter must be an absolute path, not a relative path. The cell_number is 0-indexed. Use edit_mode=insert to add a new cell at the index specified by cell_number. Use edit_mode=delete to delete the cell at the index specified by cell_number.",
          "input_schema": {
            "type": "object",
            "properties": {
              "notebook_path": {
                "type": "string",
                "description": "The absolute path to the Jupyter notebook file to edit (must be absolute, not relative)"
              },
              "cell_id": {
                "type": "string",
                "description": "The ID of the cell to edit. When inserting a new cell, the new cell will be inserted after the cell with this ID, or at the beginning if not specified."
              },
              "new_source": {
                "type": "string",
                "description": "The new source for the cell"
              },
              "cell_type": {
                "type": "string",
                "enum": [
                  "code",
                  "markdown"
                ],
                "description": "The type of the cell (code or markdown). If not specified, it defaults to the current cell type. If using edit_mode=insert, this is required."
              },
              "edit_mode": {
                "type": "string",
                "enum": [
                  "replace",
                  "insert",
                  "delete"
                ],
                "description": "The type of edit to make (replace, insert, delete). Defaults to replace."
              }
            },
            "required": [
              "notebook_path",
              "new_source"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "WebFetch",
          "description": "\n- Fetches content from a specified URL and processes it using an AI model\n- Takes a URL and a prompt as input\n- Fetches the URL content, converts HTML to markdown\n- Processes the content with the prompt using a small, fast model\n- Returns the model's response about the content\n- Use this tool when you need to retrieve and analyze web content\n\nUsage notes:\n  - IMPORTANT: If an MCP-provided web fetch tool is available, prefer using that tool instead of this one, as it may have fewer restrictions. All MCP-provided tools start with \"mcp__\".\n  - The URL must be a fully-formed valid URL\n  - HTTP URLs will be automatically upgraded to HTTPS\n  - The prompt should describe what information you want to extract from the page\n  - This tool is read-only and does not modify any files\n  - Results may be summarized if the content is very large\n  - Includes a self-cleaning 15-minute cache for faster responses when repeatedly accessing the same URL\n  - When a URL redirects to a different host, the tool will inform you and provide the redirect URL in a special format. You should then make a new WebFetch request with the redirect URL to fetch the content.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "format": "uri",
                "description": "The URL to fetch content from"
              },
              "prompt": {
                "type": "string",
                "description": "The prompt to run on the fetched content"
              }
            },
            "required": [
              "url",
              "prompt"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "TodoWrite",
          "description": "Use this tool to create and manage a structured task list for your current coding session. This helps you track progress, organize complex tasks, and demonstrate thoroughness to the user.\nIt also helps the user understand the progress of the task and overall progress of their requests.\n\n## When to Use This Tool\nUse this tool proactively in these scenarios:\n\n1. Complex multi-step tasks - When a task requires 3 or more distinct steps or actions\n2. Non-trivial and complex tasks - Tasks that require careful planning or multiple operations\n3. User explicitly requests todo list - When the user directly asks you to use the todo list\n4. User provides multiple tasks - When users provide a list of things to be done (numbered or comma-separated)\n5. After receiving new instructions - Immediately capture user requirements as todos\n6. When you start working on a task - Mark it as in_progress BEFORE beginning work. Ideally you should only have one todo as in_progress at a time\n7. After completing a task - Mark it as completed and add any new follow-up tasks discovered during implementation\n\n## When NOT to Use This Tool\n\nSkip using this tool when:\n1. There is only a single, straightforward task\n2. The task is trivial and tracking it provides no organizational benefit\n3. The task can be completed in less than 3 trivial steps\n4. The task is purely conversational or informational\n\nNOTE that you should not use this tool if there is only one trivial task to do. In this case you are better off just doing the task directly.\n\n## Examples of When to Use the Todo List\n\n<example>\nUser: I want to add a dark mode toggle to the application settings. Make sure you run the tests and build when you're done!\nAssistant: I'll help add a dark mode toggle to your application settings. Let me create a todo list to track this implementation.\n*Creates todo list with the following items:*\n1. Create dark mode toggle component in Settings page\n2. Add dark mode state management (context/store)\n3. Implement CSS-in-JS styles for dark theme\n4. Update existing components to support theme switching\n5. Run tests and build process, addressing any failures or errors that occur\n*Begins working on the first task*\n\n<reasoning>\nThe assistant used the todo list because:\n1. Adding dark mode is a multi-step feature requiring UI, state management, and styling changes\n2. The user explicitly requested tests and build be run afterward\n3. The assistant inferred that tests and build need to pass by adding \"Ensure tests and build succeed\" as the final task\n</reasoning>\n</example>\n\n<example>\nUser: Help me rename the function getCwd to getCurrentWorkingDirectory across my project\nAssistant: Let me first search through your codebase to find all occurrences of 'getCwd'.\n*Uses grep or search tools to locate all instances of getCwd in the codebase*\nAssistant: I've found 15 instances of 'getCwd' across 8 different files. Let me create a todo list to track these changes.\n*Creates todo list with specific items for each file that needs updating*\n\n<reasoning>\nThe assistant used the todo list because:\n1. First, the assistant searched to understand the scope of the task\n2. Upon finding multiple occurrences across different files, it determined this was a complex task with multiple steps\n3. The todo list helps ensure every instance is tracked and updated systematically\n4. This approach prevents missing any occurrences and maintains code consistency\n</reasoning>\n</example>\n\n\n<example>\nUser: I need to implement these features for my e-commerce site: user registration, product catalog, shopping cart, and checkout flow.\nAssistant: I'll help implement these features. First, let's add all the features to the todo list.\n*Creates a todo list breaking down each feature into specific tasks based on the project architecture*\nAssistant: Let's start with user registration. This will involve creating database models, API endpoints, and frontend forms that integrate with your existing authentication system.\n\n<reasoning>\nThe assistant used the todo list because:\n1. The user provided multiple complex features to implement in a comma separated list\n2. The todo list helps organize these large features into manageable tasks\n3. This approach allows for tracking progress across the entire implementation\n</reasoning>\n</example>\n\n<example>\nUser: Can you help optimize my React application? It's rendering slowly and has performance issues.</user>\nAssistant: I'll help optimize your React application. First, let me examine your codebase to identify potential performance bottlenecks.\n*Reviews component structure, render patterns, state management, and data fetching*\nAssistant: After analyzing your codebase, I've identified several performance issues. Let me create a todo list to track our optimization efforts.\n*Creates todo list with items like: 1) Implement memoization for expensive calculations in ProductList, 2) Add virtualization for long lists in Dashboard, 3) Optimize image loading in Gallery component, 4) Fix state update loops in ShoppingCart, 5) Review bundle size and implement code splitting*\nLet's start by implementing memoization for the expensive calculations in your ProductList component.</assistant>\n\n<reasoning>\nThe assistant used the todo list because:\n1. First, the assistant examined the codebase to identify specific performance issues\n2. Based on this analysis, it identified multiple optimization opportunities\n3. Performance optimization is a non-trivial task requiring multiple steps\n4. The todo list helps methodically track improvements across different components\n5. This systematic approach ensures all performance bottlenecks are addressed\n</reasoning>\n</example>\n\n## Examples of When NOT to Use the Todo List\n\n<example>\nUser: How do I print 'Hello World' in Python?\nAssistant: In Python, you can print \"Hello World\" with this simple code:\n\npython\nprint(\"Hello World\")\n\nThis will output the text \"Hello World\" to the console when executed.</assistant>\n\n<reasoning>\nThe assistant did not use the todo list because this is a single, trivial task that can be completed in one step. There's no need to track multiple tasks or steps for such a straightforward request.\n</reasoning>\n</example>\n\n<example>\nUser: What does the git status command do?\nAssistant: The git status command shows the current state of your working directory and staging area. It displays which changes have been staged, which haven't, and which files aren't being tracked by Git. This is a fundamental command for understanding the current state of your repository before making commits.\n\n<reasoning>\nThe assistant did not use the todo list because this is an informational request with no actual coding task to complete. The user is simply asking for an explanation, not for the assistant to perform multiple steps or tasks.\n</reasoning>\n</example>\n\n<example>\nUser: Can you add a comment to the calculateTotal function to explain what it does?\nAssistant: Sure, let me add a comment to the calculateTotal function to explain what it does.\n* Uses the Edit tool to add a comment to the calculateTotal function *\n\n<reasoning>\nThe assistant did not use the todo list because this is a single, straightforward task confined to one location in the code. Adding a comment doesn't require tracking multiple steps or systematic organization.\n</reasoning>\n</example>\n\n<example>\nUser: Run npm install for me and tell me what happens.\nAssistant: I'll run the npm install command for you.\n\n*Executes: npm install*\n\nThe command completed successfully. Here's the output:\n[Output of npm install command]\n\nAll dependencies have been installed according to your package.json file.\n\n<reasoning>\nThe assistant did not use the todo list because this is a single command execution with immediate results. There are no multiple steps to track or organize, making the todo list unnecessary for this straightforward task.\n</reasoning>\n</example>\n\n## Task States and Management\n\n1. **Task States**: Use these states to track progress:\n   - pending: Task not yet started\n   - in_progress: Currently working on (limit to ONE task at a time)\n   - completed: Task finished successfully\n\n2. **Task Management**:\n   - Update task status in real-time as you work\n   - Mark tasks complete IMMEDIATELY after finishing (don't batch completions)\n   - Only have ONE task in_progress at any time\n   - Complete current tasks before starting new ones\n   - Remove tasks that are no longer relevant from the list entirely\n\n3. **Task Completion Requirements**:\n   - ONLY mark a task as completed when you have FULLY accomplished it\n   - If you encounter errors, blockers, or cannot finish, keep the task as in_progress\n   - When blocked, create a new task describing what needs to be resolved\n   - Never mark a task as completed if:\n     - Tests are failing\n     - Implementation is partial\n     - You encountered unresolved errors\n     - You couldn't find necessary files or dependencies\n\n4. **Task Breakdown**:\n   - Create specific, actionable items\n   - Break complex tasks into smaller, manageable steps\n   - Use clear, descriptive task names\n\nWhen in doubt, use this tool. Being proactive with task management demonstrates attentiveness and ensures you complete all requirements successfully.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "todos": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "content": {
                      "type": "string",
                      "minLength": 1
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "pending",
                        "in_progress",
                        "completed"
                      ]
                    },
                    "priority": {
                      "type": "string",
                      "enum": [
                        "high",
                        "medium",
                        "low"
                      ]
                    },
                    "id": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "content",
                    "status",
                    "priority",
                    "id"
                  ],
                  "additionalProperties": false
                },
                "description": "The updated todo list"
              }
            },
            "required": [
              "todos"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "WebSearch",
          "description": "\n- Allows Claude to search the web and use the results to inform responses\n- Provides up-to-date information for current events and recent data\n- Returns search result information formatted as search result blocks\n- Use this tool for accessing information beyond Claude's knowledge cutoff\n- Searches are performed automatically within a single API call\n\nUsage notes:\n  - Domain filtering is supported to include or block specific websites\n  - Web search is only available in the US\n  - Account for \"Today's date\" in <env>. For example, if <env> says \"Today's date: 2025-07-01\", and the user wants the latest docs, do not use 2024 in the search query. Use 2025.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "minLength": 2,
                "description": "The search query to use"
              },
              "allowed_domains": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Only include search results from these domains"
              },
              "blocked_domains": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Never include search results from these domains"
              }
            },
            "required": [
              "query"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        }
      ],
      "responseStructure": {
        "type": "object",
        "keys": [
          "id",
          "object",
          "created",
          "model",
          "choices",
          "usage",
          "stats",
          "system_fingerprint"
        ],
        "hasChoices": true,
        "hasContent": false,
        "hasUsage": true,
        "choicesCount": 1,
        "firstChoice": {
          "hasMessage": true,
          "hasToolCalls": false,
          "finishReason": "stop"
        }
      },
      "parsingAttempts": [
        "json_format",
        "function_call",
        "action_format",
        "natural_language"
      ]
    }
  },
  {
    "timestamp": "2025-08-10T06:38:51.749Z",
    "requestId": "session_1754804126703_ixall6oy5:conv_1754804126703_sm1ur5dvo:5:1754807909223:bh8b",
    "provider": "lmstudio",
    "model": "gpt-oss-20b-mlx",
    "endpoint": "localhost:1234",
    "failureType": "text_instead_of_tools",
    "originalResponse": {
      "id": "chatcmpl-z2cdkain04pogrc0epwxp",
      "object": "chat.completion",
      "created": 1754807909,
      "model": "gpt-oss-20b-mlx",
      "choices": [
        {
          "index": 0,
          "logprobs": null,
          "finish_reason": "stop",
          "message": {
            "role": "assistant",
            "content": "We need to inspect the directory. Since we don't have actual filesystem output, but the tool can't list all? The commands used didn't produce visible output. \"LS\" on root of \"/Users/fanzhang/Documents/github\" returned maybe nothing? But we didn't see output. Possibly because we are in a container environment that can't access actual user file system? As ChatGPT, we might not get real data unless tool returns something. The tool responses contain no output because maybe the file system is empty or path not present.\n\nBut we should try again maybe specify `path` relative to repo in the environment. The repository might be under some path, like \"/\"? But we are not sure.\n\nIn previous tasks, the repository base is at /Users/fanzhang/Documents/github. But maybe actual path we are working on is different.\n\nLet's attempt to look for subdirectories manually using \"Grep\" but maybe the repository has many .md files.\n\nBut we cannot actually see output. Could be that nothing matched or path not foun... [truncated]"
          }
        }
      ],
      "usage": {
        "prompt_tokens": 15978,
        "completion_tokens": 575,
        "total_tokens": 16553
      },
      "stats": {},
      "system_fingerprint": "gpt-oss-20b-mlx"
    },
    "expectedFormat": "openai",
    "errorMessage": "All parsing strategies failed",
    "responseAnalysis": {
      "hasToolCalls": false,
      "hasContent": true,
      "contentLength": 2317,
      "contentPreview": "We need to inspect the directory. Since we don't have actual filesystem output, but the tool can't list all? The commands used didn't produce visible output. \"LS\" on root of \"/Users/fanzhang/Documents",
      "finishReason": "stop",
      "toolCallPatterns": []
    },
    "debugInfo": {
      "requestTools": [
        {
          "name": "Task",
          "description": "Launch a new agent to handle complex, multi-step tasks autonomously.\n\nAvailable agent types and the tools they have access to:\n- general-purpose: General-purpose agent for researching complex questions, searching for code, and executing multi-step tasks. When you are searching for a keyword or file and are not confident that you will find the right match in the first few tries use this agent to perform the search for you. (Tools: *)\n- code-refactorer: Use this agent when you need to improve existing code structure, readability, or maintainability without changing functionality. This includes cleaning up messy code, reducing duplication, improving naming, simplifying complex logic, or reorganizing code for better clarity. Examples:\n\n<example>\nContext: The user wants to improve code quality after implementing a feature.\nuser: \"I just finished implementing the user authentication system. Can you help clean it up?\"\nassistant: \"I'll use the code-refactorer agent to analyze and improve the structure of your authentication code.\"\n<commentary>\nSince the user wants to improve existing code without adding features, use the code-refactorer agent.\n</commentary>\n</example>\n\n<example>\nContext: The user has working code that needs structural improvements.\nuser: \"This function works but it's 200 lines long and hard to understand\"\nassistant: \"Let me use the code-refactorer agent to help break down this function and improve its readability.\"\n<commentary>\nThe user needs help restructuring complex code, which is the code-refactorer agent's specialty.\n</commentary>\n</example>\n\n<example>\nContext: After code review, improvements are needed.\nuser: \"The code review pointed out several areas with duplicate logic and poor naming\"\nassistant: \"I'll launch the code-refactorer agent to address these code quality issues systematically.\"\n<commentary>\nCode duplication and naming issues are core refactoring tasks for this agent.\n</commentary>\n</example> (Tools: Edit, MultiEdit, Write, NotebookEdit, Grep, LS, Read)\n- project-task-planner: Use this agent when you need to create a comprehensive development task list from a Product Requirements Document (PRD). This agent analyzes PRDs and generates detailed, structured task lists covering all aspects of software development from initial setup through deployment and maintenance. Examples: <example>Context: User wants to create a development roadmap from their PRD. user: \"I have a PRD for a new e-commerce platform. Can you create a task list?\" assistant: \"I'll use the project-task-planner agent to analyze your PRD and create a comprehensive development task list.\" <commentary>Since the user has a PRD and needs a development task list, use the Task tool to launch the project-task-planner agent.</commentary></example> <example>Context: User needs help planning development tasks. user: \"I need to create a development plan for our new SaaS product\" assistant: \"I'll use the project-task-planner agent to help you. First, I'll need to see your Product Requirements Document (PRD).\" <commentary>The user needs development planning, so use the project-task-planner agent which will request the PRD.</commentary></example> (Tools: Task, Bash, Edit, MultiEdit, Write, NotebookEdit, Grep, LS, Read, ExitPlanMode, TodoWrite, WebSearch)\n- vibe-coding-coach: Use this agent when users want to build applications through conversation, focusing on the vision and feel of their app rather than technical implementation details. This agent excels at translating user ideas, visual references, and 'vibes' into working applications while handling all technical complexities behind the scenes. <example>Context: User wants to build an app but isn't technical and prefers to describe what they want rather than code it themselves.\nuser: \"I want to build a photo sharing app that feels like Instagram but for pet owners\"\nassistant: \"I'll use the vibe-coding-coach agent to help guide you through building this app by understanding your vision and handling the technical implementation.\"\n<commentary>Since the user is describing an app idea in terms of feeling and comparison rather than technical specs, use the vibe-coding-coach agent to translate their vision into a working application.</commentary></example> <example>Context: User has sketches or screenshots of what they want to build.\nuser: \"Here's a screenshot of an app I like. Can we build something similar but for tracking workouts?\"\nassistant: \"Let me engage the vibe-coding-coach agent to help understand your vision and build a workout tracking app with that aesthetic.\"\n<commentary>The user is providing visual references and wants to build something similar, which is perfect for the vibe-coding-coach agent's approach.</commentary></example> (Tools: *)\n- debug-system-architect: Use this agent when you need to establish a comprehensive debug logging system for a project. This includes setting up log directories, implementing node-level tracing, creating time-based test records, establishing replay mechanisms, and documenting debug rules. Example: <example> Context: User is setting up a new project and wants to implement proper debugging infrastructure from the start. user: \"Please help me set up a debug system for my new API router project\" <commentary> Since the user is requesting debug system setup, use the debug-system-architect agent to analyze the project and implement comprehensive logging and tracing mechanisms. </commentary> </example> <example> Context: User encounters intermittent issues in their routing system and needs better visibility. user: \"I'm having trouble tracking down why some requests fail intermittently\" <commentary> Since the user needs better debugging visibility for intermittent issues, use the debug-system-architect agent to implement node-level tracing and replay mechanisms. </commentary> </example> (Tools: *)\n- code-risk-auditor: Use this agent when you need to perform comprehensive code risk assessment and identify potential architectural issues in your codebase. Examples: <example>Context: The user has just completed a major refactoring and wants to ensure no hardcoded values or fallback mechanisms were introduced. user: \"I just finished refactoring the routing system, can you check for any code risks?\" assistant: \"I'll use the code-risk-auditor agent to perform a comprehensive risk assessment of your routing system changes.\"</example> <example>Context: Before a major release, the user wants to clean up technical debt and ensure code quality. user: \"We're preparing for v2.0 release, I need a full code audit\" assistant: \"Let me launch the code-risk-auditor agent to identify hardcoding, fallback risks, outdated tests, and duplicate implementations across the entire codebase.\"</example> <example>Context: The user notices inconsistent behavior and suspects duplicate implementations. user: \"The same feature seems to be implemented in multiple places, causing bugs\" assistant: \"I'll use the code-risk-auditor agent to scan for duplicate implementations and provide a consolidation plan.\"</example> (Tools: *)\n- security-auditor: Use this agent when you need to perform a comprehensive security audit of a codebase, identify vulnerabilities, and generate a detailed security report with actionable remediation steps. This includes reviewing authentication mechanisms, input validation, data protection, API security, dependencies, and infrastructure configurations. Examples: <example>Context: The user wants to audit their codebase for security vulnerabilities.\nuser: \"Can you perform a security audit of my application?\"\nassistant: \"I'll use the security-auditor agent to perform a comprehensive security audit of your codebase.\"\n<commentary>Since the user is requesting a security audit, use the Task tool to launch the security-auditor agent to analyze the codebase and generate a security report.</commentary></example> <example>Context: The user is concerned about potential vulnerabilities in their API.\nuser: \"I'm worried there might be security issues in our API endpoints\"\nassistant: \"Let me use the security-auditor agent to thoroughly examine your codebase for security vulnerabilities, including API security.\"\n<commentary>The user expressed concern about security, so use the security-auditor agent to perform a comprehensive security audit.</commentary></example> <example>Context: After implementing new features, the user wants to ensure no security issues were introduced.\nuser: \"We just added user authentication to our app. Can you check if it's secure?\"\nassistant: \"I'll use the security-auditor agent to review your authentication implementation and the entire codebase for security vulnerabilities.\"\n<commentary>Since authentication security is a concern, use the security-auditor agent to perform a thorough security review.</commentary></example> (Tools: Task, Bash, Edit, MultiEdit, Write, NotebookEdit)\n- project-memory-manager: Use this agent when you need to manage project-specific memory entries, create project documentation, or organize project knowledge. This includes creating project summaries, documenting project decisions, tracking project progress, and maintaining project-specific knowledge bases. <example>Context: User wants to document a project decision or create project documentation. user: \"请为我们的新项目创建一个内存管理系统的文档\" assistant: \"我将使用 project-memory-manager agent 来创建这个项目文档\" <commentary>Since the user needs project documentation, use the project-memory-manager agent to create project-specific memory entries.</commentary></example> <example>Context: User wants to track project progress or decisions. user: \"我们需要记录这个项目的关键决策点\" assistant: \"让我使用 project-memory-manager agent 来记录这些项目决策\" <commentary>Since this is project tracking, use the project-memory-manager agent to create decision-type memory entries.</commentary></example> (Tools: *)\n- rules-architect: Use this agent when you need to analyze project architecture and establish comprehensive rule management systems. Examples: <example>Context: User wants to organize project rules and create a structured rule management system. user: \"I need to reorganize our project rules and create a better structure for managing coding standards, file organization, and testing protocols\" assistant: \"I'll use the rules-architect agent to analyze the current project structure and establish a comprehensive rule management system with proper categorization and organization.\"</example> <example>Context: Project has grown complex and needs better rule organization. user: \"Our CLAUDE.md file is getting too large and we need to break down rules into manageable categories\" assistant: \"Let me call the rules-architect agent to create a structured .claude/rules system that will organize all project rules into logical categories.\"</example> (Tools: *)\n- frontend-designer: Use this agent when you need to convert design mockups, wireframes, or visual concepts into detailed technical specifications and implementation guides for frontend development. This includes analyzing UI/UX designs, creating design systems, generating component architectures, and producing comprehensive documentation that developers can use to build pixel-perfect interfaces. Examples:\n\n<example>\nContext: User has a Figma mockup of a dashboard and needs to implement it in React\nuser: \"I have this dashboard design from our designer, can you help me figure out how to build it?\"\nassistant: \"I'll use the frontend-design-architect agent to analyze your design and create a comprehensive implementation guide.\"\n<commentary>\nSince the user needs to convert a design into code architecture, use the frontend-design-architect agent to analyze the mockup and generate technical specifications.\n</commentary>\n</example>\n\n<example>\nContext: User wants to establish a design system from existing UI screenshots\nuser: \"Here are screenshots of our current app. We need to extract a consistent design system from these.\"\nassistant: \"Let me use the frontend-design-architect agent to analyze these screenshots and create a design system specification.\"\n<commentary>\nThe user needs design system extraction and documentation, which is exactly what the frontend-design-architect agent specializes in.\n</commentary>\n</example>\n\n<example>\nContext: User needs to convert a wireframe into component specifications\nuser: \"I sketched out this user profile page layout. How should I structure the components?\"\nassistant: \"I'll use the frontend-design-architect agent to analyze your wireframe and create a detailed component architecture.\"\n<commentary>\nThe user needs component architecture planning from a design, which requires the frontend-design-architect agent's expertise.\n</commentary>\n</example> (Tools: *)\n- content-writer: Use this agent when you need to create compelling, informative content that explains complex topics in simple terms. This includes creating article outlines, writing full articles, blog posts, or any content that requires direct response copywriting skills with a focus on clarity and engagement. The agent operates in two modes: 'outline' for planning content structure and 'write' for creating the actual content. Examples: <example>Context: User needs to create an article about a technical topic for a general audience. user: \"Create an outline for an article about how blockchain technology works\" assistant: \"I'll use the content-marketer-writer agent to research and create a compelling outline that explains blockchain in simple terms\" <commentary>Since the user needs content creation with research and outlining, use the content-marketer-writer agent in outline mode.</commentary></example> <example>Context: User has an outline and needs to write the full article. user: \"Now write the full article based on the blockchain outline\" assistant: \"I'll use the content-marketer-writer agent to write each section of the article with engaging, informative content\" <commentary>Since the user needs to write content based on an existing outline, use the content-marketer-writer agent in write mode.</commentary></example> (Tools: *)\n- test-runner: Use this agent to run and manage tests according to the global and project-specific testing rules. This includes executing test scripts, documenting test results, and helping to diagnose issues following the standard pipeline. <example>Context: User wants to run all functional tests. user: \"运行所有功能测试\" assistant: \"我将使用 test-runner agent 来执行所有功能测试\" <commentary>Since the user wants to run tests by category, use the test-runner agent.</commentary></example> <example>Context: User wants to verify a bug fix. user: \"我修复了一个bug，帮我验证一下\" assistant: \"让我使用 test-runner agent 来执行对应的修复验证测试\" <commentary>The user needs to verify a fix, which is a core task for the test-runner agent.</commentary></example> (Tools: *)\n- in-depth-research-analyst: Use this agent when you need to conduct comprehensive research reports with in-depth web mining, data analysis, and visualization. This includes industry analysis, market research, competitive intelligence, and trend forecasting with accurate data from authoritative sources. <example>Context: User wants a comprehensive industry analysis report. user: \"请对人工智能芯片市场进行深入调研，包括主要厂商、市场份额和增长趋势\" assistant: \"我将使用 in-depth-research-analyst agent 来进行这项深入的市场调研并生成可视化报告\" <commentary>Since the user needs a comprehensive industry analysis with data visualization, use the in-depth-research-analyst agent to conduct thorough research and create an integrated report.</commentary></example> <example>Context: User wants market research with accurate data and visualizations. user: \"我们需要一份关于电动汽车充电基础设施的深度报告，包含数据图表\" assistant: \"让我使用 in-depth-research-analyst agent 来收集准确数据并生成图文并茂的分析报告\" <commentary>Since this requires market research with data accuracy and visualizations, use the in-depth-research-analyst agent to create a comprehensive report.</commentary></example> (Tools: *)\n- prd-writer: Use this agent when you need to create a comprehensive Product Requirements Document (PRD) for a software project or feature. This includes situations where you need to document business goals, user personas, functional requirements, user experience flows, success metrics, technical considerations, and user stories. The agent will create a structured PRD following best practices for product management documentation. Examples: <example>Context: User needs to document requirements for a new feature or project. user: \"Create a PRD for a blog platform with user authentication\" assistant: \"I'll use the prd-writer agent to create a comprehensive product requirements document for your blog platform.\" <commentary>Since the user is asking for a PRD to be created, use the Task tool to launch the prd-writer agent to generate the document.</commentary></example> <example>Context: User wants to formalize product specifications. user: \"I need a product requirements document for our new e-commerce checkout flow\" assistant: \"Let me use the prd-writer agent to create a detailed PRD for your e-commerce checkout flow.\" <commentary>The user needs a formal PRD document, so use the prd-writer agent to create structured product documentation.</commentary></example> (Tools: Task, Bash, Grep, LS, Read, Write, WebSearch, Glob)\n- pipeline-debug-universal: Use this agent when you need to implement comprehensive debug hooks and testing infrastructure for ANY pipeline system - whether it's API routing, data processing, CI/CD workflows, or transformation pipelines. This agent specializes in creating universal debug architectures that work across different pipeline types with data capture, replay capabilities, and systematic testing matrices. Examples: <example>Context: User is working on a multi-provider API routing system and needs to add debug capabilities to track data flow through each pipeline step. user: \"I need to add debug hooks to our routing pipeline so we can capture and replay data at each step\" assistant: \"I'll use the pipeline-debug-universal agent to design a comprehensive debug infrastructure with data capture and replay capabilities\" <commentary>Since the user needs pipeline debugging infrastructure, use the pipeline-debug-universal agent to create debug hooks and testing matrices.</commentary></example> <example>Context: User has a complex data transformation pipeline and wants to build systematic testing for each stage and provider. user: \"Our data processing pipeline has issues and we need better testing infrastructure to isolate problems at each step\" assistant: \"Let me use the pipeline-debug-universal agent to create a complete testing matrix and debug system\" <commentary>Since the user needs systematic pipeline testing infrastructure, use the pipeline-debug-universal agent to architect the testing system.</commentary></example> <example>Context: User is building a CI/CD pipeline and needs to implement debug capabilities for tracking deployment issues. user: \"Our deployment pipeline fails randomly and we can't reproduce the issues consistently\" assistant: \"I'll deploy the pipeline-debug-universal agent to create comprehensive debug hooks and replay capabilities for your CI/CD pipeline\" <commentary>Since the user needs debug infrastructure for a deployment pipeline, use the pipeline-debug-universal agent to design the debug system.</commentary></example> (Tools: *)\n\nWhen using the Task tool, you must specify a subagent_type parameter to select which agent type to use.\n\n\n\nWhen NOT to use the Agent tool:\n- If you want to read a specific file path, use the Read or Glob tool instead of the Agent tool, to find the match more quickly\n- If you are searching for a specific class definition like \"class Foo\", use the Glob tool instead, to find the match more quickly\n- If you are searching for code within a specific file or set of 2-3 files, use the Read tool instead of the Agent tool, to find the match more quickly\n- Other tasks that are not related to the agent descriptions above\n\n\nUsage notes:\n1. Launch multiple agents concurrently whenever possible, to maximize performance; to do that, use a single message with multiple tool uses\n2. When the agent is done, it will return a single message back to you. The result returned by the agent is not visible to the user. To show the user the result, you should send a text message back to the user with a concise summary of the result.\n3. Each agent invocation is stateless. You will not be able to send additional messages to the agent, nor will the agent be able to communicate with you outside of its final report. Therefore, your prompt should contain a highly detailed task description for the agent to perform autonomously and you should specify exactly what information the agent should return back to you in its final and only message to you.\n4. The agent's outputs should generally be trusted\n5. Clearly tell the agent whether you expect it to write code or just to do research (search, file reads, web fetches, etc.), since it is not aware of the user's intent\n6. If the agent description mentions that it should be used proactively, then you should try your best to use it without the user having to ask for it first. Use your judgement.\n\nExample usage:\n\n<example_agent_descriptions>\n\"code-reviewer\": use this agent after you are done writing a signficant piece of code\n\"greeting-responder\": use this agent when to respond to user greetings with a friendly joke\n</example_agent_description>\n\n<example>\nuser: \"Please write a function that checks if a number is prime\"\nassistant: Sure let me write a function that checks if a number is prime\nassistant: First let me use the Write tool to write a function that checks if a number is prime\nassistant: I'm going to use the Write tool to write the following code:\n<code>\nfunction isPrime(n) {\n  if (n <= 1) return false\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n</code>\n<commentary>\nSince a signficant piece of code was written and the task was completed, now use the code-reviewer agent to review the code\n</commentary>\nassistant: Now let me use the code-reviewer agent to review the code\nassistant: Uses the Task tool to launch the with the code-reviewer agent\n</example>\n\n<example>\nuser: \"Hello\"\n<commentary>\nSince the user is greeting, use the greeting-responder agent to respond with a friendly joke\n</commentary>\nassistant: \"I'm going to use the Task tool to launch the with the greeting-responder agent\"\n</example>\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "description": {
                "type": "string",
                "description": "A short (3-5 word) description of the task"
              },
              "prompt": {
                "type": "string",
                "description": "The task for the agent to perform"
              },
              "subagent_type": {
                "type": "string",
                "description": "The type of specialized agent to use for this task"
              }
            },
            "required": [
              "description",
              "prompt",
              "subagent_type"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Bash",
          "description": "Executes a given bash command in a persistent shell session with optional timeout, ensuring proper handling and security measures.\n\nBefore executing the command, please follow these steps:\n\n1. Directory Verification:\n   - If the command will create new directories or files, first use the LS tool to verify the parent directory exists and is the correct location\n   - For example, before running \"mkdir foo/bar\", first use LS to check that \"foo\" exists and is the intended parent directory\n\n2. Command Execution:\n   - Always quote file paths that contain spaces with double quotes (e.g., cd \"path with spaces/file.txt\")\n   - Examples of proper quoting:\n     - cd \"/Users/name/My Documents\" (correct)\n     - cd /Users/name/My Documents (incorrect - will fail)\n     - python \"/path/with spaces/script.py\" (correct)\n     - python /path/with spaces/script.py (incorrect - will fail)\n   - After ensuring proper quoting, execute the command.\n   - Capture the output of the command.\n\nUsage notes:\n  - The command argument is required.\n  - You can specify an optional timeout in milliseconds (up to 600000ms / 10 minutes). If not specified, commands will timeout after 120000ms (2 minutes).\n  - It is very helpful if you write a clear, concise description of what this command does in 5-10 words.\n  - If the output exceeds 30000 characters, output will be truncated before being returned to you.\n  - VERY IMPORTANT: You MUST avoid using search commands like `find` and `grep`. Instead use Grep, Glob, or Task to search. You MUST avoid read tools like `cat`, `head`, `tail`, and `ls`, and use Read and LS to read files.\n - If you _still_ need to run `grep`, STOP. ALWAYS USE ripgrep at `rg` first, which all ${PRODUCT_NAME} users have pre-installed.\n  - When issuing multiple commands, use the ';' or '&&' operator to separate them. DO NOT use newlines (newlines are ok in quoted strings).\n  - Try to maintain your current working directory throughout the session by using absolute paths and avoiding usage of `cd`. You may use `cd` if the User explicitly requests it.\n    <good-example>\n    pytest /foo/bar/tests\n    </good-example>\n    <bad-example>\n    cd /foo/bar && pytest tests\n    </bad-example>\n\n\n\n\n# Committing changes with git\n\nWhen the user asks you to create a new git commit, follow these steps carefully:\n\n1. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following bash commands in parallel, each using the Bash tool:\n  - Run a git status command to see all untracked files.\n  - Run a git diff command to see both staged and unstaged changes that will be committed.\n  - Run a git log command to see recent commit messages, so that you can follow this repository's commit message style.\n2. Analyze all staged changes (both previously staged and newly added) and draft a commit message:\n  - Summarize the nature of the changes (eg. new feature, enhancement to an existing feature, bug fix, refactoring, test, docs, etc.). Ensure the message accurately reflects the changes and their purpose (i.e. \"add\" means a wholly new feature, \"update\" means an enhancement to an existing feature, \"fix\" means a bug fix, etc.).\n  - Check for any sensitive information that shouldn't be committed\n  - Draft a concise (1-2 sentences) commit message that focuses on the \"why\" rather than the \"what\"\n  - Ensure it accurately reflects the changes and their purpose\n3. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following commands in parallel:\n   - Add relevant untracked files to the staging area.\n   - Create the commit with a message ending with:\n   🤖 Generated with [Claude Code](https://claude.ai/code)\n\n   Co-Authored-By: Claude <noreply@anthropic.com>\n   - Run git status to make sure the commit succeeded.\n4. If the commit fails due to pre-commit hook changes, retry the commit ONCE to include these automated changes. If it fails again, it usually means a pre-commit hook is preventing the commit. If the commit succeeds but you notice that files were modified by the pre-commit hook, you MUST amend your commit to include them.\n\nImportant notes:\n- NEVER update the git config\n- NEVER run additional commands to read or explore code, besides git bash commands\n- NEVER use the TodoWrite or Task tools\n- DO NOT push to the remote repository unless the user explicitly asks you to do so\n- IMPORTANT: Never use git commands with the -i flag (like git rebase -i or git add -i) since they require interactive input which is not supported.\n- If there are no changes to commit (i.e., no untracked files and no modifications), do not create an empty commit\n- In order to ensure good formatting, ALWAYS pass the commit message via a HEREDOC, a la this example:\n<example>\ngit commit -m \"$(cat <<'EOF'\n   Commit message here.\n\n   🤖 Generated with [Claude Code](https://claude.ai/code)\n\n   Co-Authored-By: Claude <noreply@anthropic.com>\n   EOF\n   )\"\n</example>\n\n# Creating pull requests\nUse the gh command via the Bash tool for ALL GitHub-related tasks including working with issues, pull requests, checks, and releases. If given a Github URL use the gh command to get the information needed.\n\nIMPORTANT: When the user asks you to create a pull request, follow these steps carefully:\n\n1. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following bash commands in parallel using the Bash tool, in order to understand the current state of the branch since it diverged from the main branch:\n   - Run a git status command to see all untracked files\n   - Run a git diff command to see both staged and unstaged changes that will be committed\n   - Check if the current branch tracks a remote branch and is up to date with the remote, so you know if you need to push to the remote\n   - Run a git log command and `git diff [base-branch]...HEAD` to understand the full commit history for the current branch (from the time it diverged from the base branch)\n2. Analyze all changes that will be included in the pull request, making sure to look at all relevant commits (NOT just the latest commit, but ALL commits that will be included in the pull request!!!), and draft a pull request summary\n3. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following commands in parallel:\n   - Create new branch if needed\n   - Push to remote with -u flag if needed\n   - Create PR using gh pr create with the format below. Use a HEREDOC to pass the body to ensure correct formatting.\n<example>\ngh pr create --title \"the pr title\" --body \"$(cat <<'EOF'\n## Summary\n<1-3 bullet points>\n\n## Test plan\n[Checklist of TODOs for testing the pull request...]\n\n🤖 Generated with [Claude Code](https://claude.ai/code)\nEOF\n)\"\n</example>\n\nImportant:\n- NEVER update the git config\n- DO NOT use the TodoWrite or Task tools\n- Return the PR URL when you're done, so the user can see it\n\n# Other common operations\n- View comments on a Github PR: gh api repos/foo/bar/pulls/123/comments",
          "input_schema": {
            "type": "object",
            "properties": {
              "command": {
                "type": "string",
                "description": "The command to execute"
              },
              "timeout": {
                "type": "number",
                "description": "Optional timeout in milliseconds (max 600000)"
              },
              "description": {
                "type": "string",
                "description": " Clear, concise description of what this command does in 5-10 words. Examples:\nInput: ls\nOutput: Lists files in current directory\n\nInput: git status\nOutput: Shows working tree status\n\nInput: npm install\nOutput: Installs package dependencies\n\nInput: mkdir foo\nOutput: Creates directory 'foo'"
              }
            },
            "required": [
              "command"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Glob",
          "description": "- Fast file pattern matching tool that works with any codebase size\n- Supports glob patterns like \"**/*.js\" or \"src/**/*.ts\"\n- Returns matching file paths sorted by modification time\n- Use this tool when you need to find files by name patterns\n- When you are doing an open ended search that may require multiple rounds of globbing and grepping, use the Agent tool instead\n- You have the capability to call multiple tools in a single response. It is always better to speculatively perform multiple searches as a batch that are potentially useful.",
          "input_schema": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "The glob pattern to match files against"
              },
              "path": {
                "type": "string",
                "description": "The directory to search in. If not specified, the current working directory will be used. IMPORTANT: Omit this field to use the default directory. DO NOT enter \"undefined\" or \"null\" - simply omit it for the default behavior. Must be a valid directory path if provided."
              }
            },
            "required": [
              "pattern"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Grep",
          "description": "A powerful search tool built on ripgrep\n\n  Usage:\n  - ALWAYS use Grep for search tasks. NEVER invoke `grep` or `rg` as a Bash command. The Grep tool has been optimized for correct permissions and access.\n  - Supports full regex syntax (e.g., \"log.*Error\", \"function\\s+\\w+\")\n  - Filter files with glob parameter (e.g., \"*.js\", \"**/*.tsx\") or type parameter (e.g., \"js\", \"py\", \"rust\")\n  - Output modes: \"content\" shows matching lines, \"files_with_matches\" shows only file paths (default), \"count\" shows match counts\n  - Use Task tool for open-ended searches requiring multiple rounds\n  - Pattern syntax: Uses ripgrep (not grep) - literal braces need escaping (use `interface\\{\\}` to find `interface{}` in Go code)\n  - Multiline matching: By default patterns match within single lines only. For cross-line patterns like `struct \\{[\\s\\S]*?field`, use `multiline: true`\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "The regular expression pattern to search for in file contents"
              },
              "path": {
                "type": "string",
                "description": "File or directory to search in (rg PATH). Defaults to current working directory."
              },
              "glob": {
                "type": "string",
                "description": "Glob pattern to filter files (e.g. \"*.js\", \"*.{ts,tsx}\") - maps to rg --glob"
              },
              "output_mode": {
                "type": "string",
                "enum": [
                  "content",
                  "files_with_matches",
                  "count"
                ],
                "description": "Output mode: \"content\" shows matching lines (supports -A/-B/-C context, -n line numbers, head_limit), \"files_with_matches\" shows file paths (supports head_limit), \"count\" shows match counts (supports head_limit). Defaults to \"files_with_matches\"."
              },
              "-B": {
                "type": "number",
                "description": "Number of lines to show before each match (rg -B). Requires output_mode: \"content\", ignored otherwise."
              },
              "-A": {
                "type": "number",
                "description": "Number of lines to show after each match (rg -A). Requires output_mode: \"content\", ignored otherwise."
              },
              "-C": {
                "type": "number",
                "description": "Number of lines to show before and after each match (rg -C). Requires output_mode: \"content\", ignored otherwise."
              },
              "-n": {
                "type": "boolean",
                "description": "Show line numbers in output (rg -n). Requires output_mode: \"content\", ignored otherwise."
              },
              "-i": {
                "type": "boolean",
                "description": "Case insensitive search (rg -i)"
              },
              "type": {
                "type": "string",
                "description": "File type to search (rg --type). Common types: js, py, rust, go, java, etc. More efficient than include for standard file types."
              },
              "head_limit": {
                "type": "number",
                "description": "Limit output to first N lines/entries, equivalent to \"| head -N\". Works across all output modes: content (limits output lines), files_with_matches (limits file paths), count (limits count entries). When unspecified, shows all results from ripgrep."
              },
              "multiline": {
                "type": "boolean",
                "description": "Enable multiline mode where . matches newlines and patterns can span lines (rg -U --multiline-dotall). Default: false."
              }
            },
            "required": [
              "pattern"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "LS",
          "description": "Lists files and directories in a given path. The path parameter must be an absolute path, not a relative path. You can optionally provide an array of glob patterns to ignore with the ignore parameter. You should generally prefer the Glob and Grep tools, if you know which directories to search.",
          "input_schema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "The absolute path to the directory to list (must be absolute, not relative)"
              },
              "ignore": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of glob patterns to ignore"
              }
            },
            "required": [
              "path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "ExitPlanMode",
          "description": "Use this tool when you are in plan mode and have finished presenting your plan and are ready to code. This will prompt the user to exit plan mode.\nIMPORTANT: Only use this tool when the task requires planning the implementation steps of a task that requires writing code. For research tasks where you're gathering information, searching files, reading files or in general trying to understand the codebase - do NOT use this tool.\n\nEg.\n1. Initial task: \"Search for and understand the implementation of vim mode in the codebase\" - Do not use the exit plan mode tool because you are not planning the implementation steps of a task.\n2. Initial task: \"Help me implement yank mode for vim\" - Use the exit plan mode tool after you have finished planning the implementation steps of the task.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "plan": {
                "type": "string",
                "description": "The plan you came up with, that you want to run by the user for approval. Supports markdown. The plan should be pretty concise."
              }
            },
            "required": [
              "plan"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Read",
          "description": "Reads a file from the local filesystem. You can access any file directly by using this tool.\nAssume this tool is able to read all files on the machine. If the User provides a path to a file assume that path is valid. It is okay to read a file that does not exist; an error will be returned.\n\nUsage:\n- The file_path parameter must be an absolute path, not a relative path\n- By default, it reads up to 2000 lines starting from the beginning of the file\n- You can optionally specify a line offset and limit (especially handy for long files), but it's recommended to read the whole file by not providing these parameters\n- Any lines longer than 2000 characters will be truncated\n- Results are returned using cat -n format, with line numbers starting at 1\n- This tool allows Claude Code to read images (eg PNG, JPG, etc). When reading an image file the contents are presented visually as Claude Code is a multimodal LLM.\n- This tool can read PDF files (.pdf). PDFs are processed page by page, extracting both text and visual content for analysis.\n- For Jupyter notebooks (.ipynb files), use the NotebookRead instead\n- You have the capability to call multiple tools in a single response. It is always better to speculatively read multiple files as a batch that are potentially useful.\n- You will regularly be asked to read screenshots. If the user provides a path to a screenshot ALWAYS use this tool to view the file at the path. This tool will work with all temporary file paths like /var/folders/123/abc/T/TemporaryItems/NSIRD_screencaptureui_ZfB1tD/Screenshot.png\n- If you read a file that exists but has empty contents you will receive a system reminder warning in place of file contents.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to read"
              },
              "offset": {
                "type": "number",
                "description": "The line number to start reading from. Only provide if the file is too large to read at once"
              },
              "limit": {
                "type": "number",
                "description": "The number of lines to read. Only provide if the file is too large to read at once."
              }
            },
            "required": [
              "file_path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Edit",
          "description": "Performs exact string replacements in files.\n\nUsage:\n- You must use your `Read` tool at least once in the conversation before editing. This tool will error if you attempt an edit without reading the file.\n- When editing text from Read tool output, ensure you preserve the exact indentation (tabs/spaces) as it appears AFTER the line number prefix. The line number prefix format is: spaces + line number + tab. Everything after that tab is the actual file content to match. Never include any part of the line number prefix in the old_string or new_string.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- Only use emojis if the user explicitly requests it. Avoid adding emojis to files unless asked.\n- The edit will FAIL if `old_string` is not unique in the file. Either provide a larger string with more surrounding context to make it unique or use `replace_all` to change every instance of `old_string`.\n- Use `replace_all` for replacing and renaming strings across the file. This parameter is useful if you want to rename a variable for instance.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to modify"
              },
              "old_string": {
                "type": "string",
                "description": "The text to replace"
              },
              "new_string": {
                "type": "string",
                "description": "The text to replace it with (must be different from old_string)"
              },
              "replace_all": {
                "type": "boolean",
                "default": false,
                "description": "Replace all occurences of old_string (default false)"
              }
            },
            "required": [
              "file_path",
              "old_string",
              "new_string"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "MultiEdit",
          "description": "This is a tool for making multiple edits to a single file in one operation. It is built on top of the Edit tool and allows you to perform multiple find-and-replace operations efficiently. Prefer this tool over the Edit tool when you need to make multiple edits to the same file.\n\nBefore using this tool:\n\n1. Use the Read tool to understand the file's contents and context\n2. Verify the directory path is correct\n\nTo make multiple file edits, provide the following:\n1. file_path: The absolute path to the file to modify (must be absolute, not relative)\n2. edits: An array of edit operations to perform, where each edit contains:\n   - old_string: The text to replace (must match the file contents exactly, including all whitespace and indentation)\n   - new_string: The edited text to replace the old_string\n   - replace_all: Replace all occurences of old_string. This parameter is optional and defaults to false.\n\nIMPORTANT:\n- All edits are applied in sequence, in the order they are provided\n- Each edit operates on the result of the previous edit\n- All edits must be valid for the operation to succeed - if any edit fails, none will be applied\n- This tool is ideal when you need to make several changes to different parts of the same file\n- For Jupyter notebooks (.ipynb files), use the NotebookEdit instead\n\nCRITICAL REQUIREMENTS:\n1. All edits follow the same requirements as the single Edit tool\n2. The edits are atomic - either all succeed or none are applied\n3. Plan your edits carefully to avoid conflicts between sequential operations\n\nWARNING:\n- The tool will fail if edits.old_string doesn't match the file contents exactly (including whitespace)\n- The tool will fail if edits.old_string and edits.new_string are the same\n- Since edits are applied in sequence, ensure that earlier edits don't affect the text that later edits are trying to find\n\nWhen making edits:\n- Ensure all edits result in idiomatic, correct code\n- Do not leave the code in a broken state\n- Always use absolute file paths (starting with /)\n- Only use emojis if the user explicitly requests it. Avoid adding emojis to files unless asked.\n- Use replace_all for replacing and renaming strings across the file. This parameter is useful if you want to rename a variable for instance.\n\nIf you want to create a new file, use:\n- A new file path, including dir name if needed\n- First edit: empty old_string and the new file's contents as new_string\n- Subsequent edits: normal edit operations on the created content",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to modify"
              },
              "edits": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "old_string": {
                      "type": "string",
                      "description": "The text to replace"
                    },
                    "new_string": {
                      "type": "string",
                      "description": "The text to replace it with"
                    },
                    "replace_all": {
                      "type": "boolean",
                      "default": false,
                      "description": "Replace all occurences of old_string (default false)."
                    }
                  },
                  "required": [
                    "old_string",
                    "new_string"
                  ],
                  "additionalProperties": false
                },
                "minItems": 1,
                "description": "Array of edit operations to perform sequentially on the file"
              }
            },
            "required": [
              "file_path",
              "edits"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Write",
          "description": "Writes a file to the local filesystem.\n\nUsage:\n- This tool will overwrite the existing file if there is one at the provided path.\n- If this is an existing file, you MUST use the Read tool first to read the file's contents. This tool will fail if you did not read the file first.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- NEVER proactively create documentation files (*.md) or README files. Only create documentation files if explicitly requested by the User.\n- Only use emojis if the user explicitly requests it. Avoid writing emojis to files unless asked.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to write (must be absolute, not relative)"
              },
              "content": {
                "type": "string",
                "description": "The content to write to the file"
              }
            },
            "required": [
              "file_path",
              "content"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "NotebookRead",
          "description": "Reads a Jupyter notebook (.ipynb file) and returns all of the cells with their outputs. Jupyter notebooks are interactive documents that combine code, text, and visualizations, commonly used for data analysis and scientific computing. The notebook_path parameter must be an absolute path, not a relative path.",
          "input_schema": {
            "type": "object",
            "properties": {
              "notebook_path": {
                "type": "string",
                "description": "The absolute path to the Jupyter notebook file to read (must be absolute, not relative)"
              },
              "cell_id": {
                "type": "string",
                "description": "The ID of a specific cell to read. If not provided, all cells will be read."
              }
            },
            "required": [
              "notebook_path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "NotebookEdit",
          "description": "Completely replaces the contents of a specific cell in a Jupyter notebook (.ipynb file) with new source. Jupyter notebooks are interactive documents that combine code, text, and visualizations, commonly used for data analysis and scientific computing. The notebook_path parameter must be an absolute path, not a relative path. The cell_number is 0-indexed. Use edit_mode=insert to add a new cell at the index specified by cell_number. Use edit_mode=delete to delete the cell at the index specified by cell_number.",
          "input_schema": {
            "type": "object",
            "properties": {
              "notebook_path": {
                "type": "string",
                "description": "The absolute path to the Jupyter notebook file to edit (must be absolute, not relative)"
              },
              "cell_id": {
                "type": "string",
                "description": "The ID of the cell to edit. When inserting a new cell, the new cell will be inserted after the cell with this ID, or at the beginning if not specified."
              },
              "new_source": {
                "type": "string",
                "description": "The new source for the cell"
              },
              "cell_type": {
                "type": "string",
                "enum": [
                  "code",
                  "markdown"
                ],
                "description": "The type of the cell (code or markdown). If not specified, it defaults to the current cell type. If using edit_mode=insert, this is required."
              },
              "edit_mode": {
                "type": "string",
                "enum": [
                  "replace",
                  "insert",
                  "delete"
                ],
                "description": "The type of edit to make (replace, insert, delete). Defaults to replace."
              }
            },
            "required": [
              "notebook_path",
              "new_source"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "WebFetch",
          "description": "\n- Fetches content from a specified URL and processes it using an AI model\n- Takes a URL and a prompt as input\n- Fetches the URL content, converts HTML to markdown\n- Processes the content with the prompt using a small, fast model\n- Returns the model's response about the content\n- Use this tool when you need to retrieve and analyze web content\n\nUsage notes:\n  - IMPORTANT: If an MCP-provided web fetch tool is available, prefer using that tool instead of this one, as it may have fewer restrictions. All MCP-provided tools start with \"mcp__\".\n  - The URL must be a fully-formed valid URL\n  - HTTP URLs will be automatically upgraded to HTTPS\n  - The prompt should describe what information you want to extract from the page\n  - This tool is read-only and does not modify any files\n  - Results may be summarized if the content is very large\n  - Includes a self-cleaning 15-minute cache for faster responses when repeatedly accessing the same URL\n  - When a URL redirects to a different host, the tool will inform you and provide the redirect URL in a special format. You should then make a new WebFetch request with the redirect URL to fetch the content.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "format": "uri",
                "description": "The URL to fetch content from"
              },
              "prompt": {
                "type": "string",
                "description": "The prompt to run on the fetched content"
              }
            },
            "required": [
              "url",
              "prompt"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "TodoWrite",
          "description": "Use this tool to create and manage a structured task list for your current coding session. This helps you track progress, organize complex tasks, and demonstrate thoroughness to the user.\nIt also helps the user understand the progress of the task and overall progress of their requests.\n\n## When to Use This Tool\nUse this tool proactively in these scenarios:\n\n1. Complex multi-step tasks - When a task requires 3 or more distinct steps or actions\n2. Non-trivial and complex tasks - Tasks that require careful planning or multiple operations\n3. User explicitly requests todo list - When the user directly asks you to use the todo list\n4. User provides multiple tasks - When users provide a list of things to be done (numbered or comma-separated)\n5. After receiving new instructions - Immediately capture user requirements as todos\n6. When you start working on a task - Mark it as in_progress BEFORE beginning work. Ideally you should only have one todo as in_progress at a time\n7. After completing a task - Mark it as completed and add any new follow-up tasks discovered during implementation\n\n## When NOT to Use This Tool\n\nSkip using this tool when:\n1. There is only a single, straightforward task\n2. The task is trivial and tracking it provides no organizational benefit\n3. The task can be completed in less than 3 trivial steps\n4. The task is purely conversational or informational\n\nNOTE that you should not use this tool if there is only one trivial task to do. In this case you are better off just doing the task directly.\n\n## Examples of When to Use the Todo List\n\n<example>\nUser: I want to add a dark mode toggle to the application settings. Make sure you run the tests and build when you're done!\nAssistant: I'll help add a dark mode toggle to your application settings. Let me create a todo list to track this implementation.\n*Creates todo list with the following items:*\n1. Create dark mode toggle component in Settings page\n2. Add dark mode state management (context/store)\n3. Implement CSS-in-JS styles for dark theme\n4. Update existing components to support theme switching\n5. Run tests and build process, addressing any failures or errors that occur\n*Begins working on the first task*\n\n<reasoning>\nThe assistant used the todo list because:\n1. Adding dark mode is a multi-step feature requiring UI, state management, and styling changes\n2. The user explicitly requested tests and build be run afterward\n3. The assistant inferred that tests and build need to pass by adding \"Ensure tests and build succeed\" as the final task\n</reasoning>\n</example>\n\n<example>\nUser: Help me rename the function getCwd to getCurrentWorkingDirectory across my project\nAssistant: Let me first search through your codebase to find all occurrences of 'getCwd'.\n*Uses grep or search tools to locate all instances of getCwd in the codebase*\nAssistant: I've found 15 instances of 'getCwd' across 8 different files. Let me create a todo list to track these changes.\n*Creates todo list with specific items for each file that needs updating*\n\n<reasoning>\nThe assistant used the todo list because:\n1. First, the assistant searched to understand the scope of the task\n2. Upon finding multiple occurrences across different files, it determined this was a complex task with multiple steps\n3. The todo list helps ensure every instance is tracked and updated systematically\n4. This approach prevents missing any occurrences and maintains code consistency\n</reasoning>\n</example>\n\n\n<example>\nUser: I need to implement these features for my e-commerce site: user registration, product catalog, shopping cart, and checkout flow.\nAssistant: I'll help implement these features. First, let's add all the features to the todo list.\n*Creates a todo list breaking down each feature into specific tasks based on the project architecture*\nAssistant: Let's start with user registration. This will involve creating database models, API endpoints, and frontend forms that integrate with your existing authentication system.\n\n<reasoning>\nThe assistant used the todo list because:\n1. The user provided multiple complex features to implement in a comma separated list\n2. The todo list helps organize these large features into manageable tasks\n3. This approach allows for tracking progress across the entire implementation\n</reasoning>\n</example>\n\n<example>\nUser: Can you help optimize my React application? It's rendering slowly and has performance issues.</user>\nAssistant: I'll help optimize your React application. First, let me examine your codebase to identify potential performance bottlenecks.\n*Reviews component structure, render patterns, state management, and data fetching*\nAssistant: After analyzing your codebase, I've identified several performance issues. Let me create a todo list to track our optimization efforts.\n*Creates todo list with items like: 1) Implement memoization for expensive calculations in ProductList, 2) Add virtualization for long lists in Dashboard, 3) Optimize image loading in Gallery component, 4) Fix state update loops in ShoppingCart, 5) Review bundle size and implement code splitting*\nLet's start by implementing memoization for the expensive calculations in your ProductList component.</assistant>\n\n<reasoning>\nThe assistant used the todo list because:\n1. First, the assistant examined the codebase to identify specific performance issues\n2. Based on this analysis, it identified multiple optimization opportunities\n3. Performance optimization is a non-trivial task requiring multiple steps\n4. The todo list helps methodically track improvements across different components\n5. This systematic approach ensures all performance bottlenecks are addressed\n</reasoning>\n</example>\n\n## Examples of When NOT to Use the Todo List\n\n<example>\nUser: How do I print 'Hello World' in Python?\nAssistant: In Python, you can print \"Hello World\" with this simple code:\n\npython\nprint(\"Hello World\")\n\nThis will output the text \"Hello World\" to the console when executed.</assistant>\n\n<reasoning>\nThe assistant did not use the todo list because this is a single, trivial task that can be completed in one step. There's no need to track multiple tasks or steps for such a straightforward request.\n</reasoning>\n</example>\n\n<example>\nUser: What does the git status command do?\nAssistant: The git status command shows the current state of your working directory and staging area. It displays which changes have been staged, which haven't, and which files aren't being tracked by Git. This is a fundamental command for understanding the current state of your repository before making commits.\n\n<reasoning>\nThe assistant did not use the todo list because this is an informational request with no actual coding task to complete. The user is simply asking for an explanation, not for the assistant to perform multiple steps or tasks.\n</reasoning>\n</example>\n\n<example>\nUser: Can you add a comment to the calculateTotal function to explain what it does?\nAssistant: Sure, let me add a comment to the calculateTotal function to explain what it does.\n* Uses the Edit tool to add a comment to the calculateTotal function *\n\n<reasoning>\nThe assistant did not use the todo list because this is a single, straightforward task confined to one location in the code. Adding a comment doesn't require tracking multiple steps or systematic organization.\n</reasoning>\n</example>\n\n<example>\nUser: Run npm install for me and tell me what happens.\nAssistant: I'll run the npm install command for you.\n\n*Executes: npm install*\n\nThe command completed successfully. Here's the output:\n[Output of npm install command]\n\nAll dependencies have been installed according to your package.json file.\n\n<reasoning>\nThe assistant did not use the todo list because this is a single command execution with immediate results. There are no multiple steps to track or organize, making the todo list unnecessary for this straightforward task.\n</reasoning>\n</example>\n\n## Task States and Management\n\n1. **Task States**: Use these states to track progress:\n   - pending: Task not yet started\n   - in_progress: Currently working on (limit to ONE task at a time)\n   - completed: Task finished successfully\n\n2. **Task Management**:\n   - Update task status in real-time as you work\n   - Mark tasks complete IMMEDIATELY after finishing (don't batch completions)\n   - Only have ONE task in_progress at any time\n   - Complete current tasks before starting new ones\n   - Remove tasks that are no longer relevant from the list entirely\n\n3. **Task Completion Requirements**:\n   - ONLY mark a task as completed when you have FULLY accomplished it\n   - If you encounter errors, blockers, or cannot finish, keep the task as in_progress\n   - When blocked, create a new task describing what needs to be resolved\n   - Never mark a task as completed if:\n     - Tests are failing\n     - Implementation is partial\n     - You encountered unresolved errors\n     - You couldn't find necessary files or dependencies\n\n4. **Task Breakdown**:\n   - Create specific, actionable items\n   - Break complex tasks into smaller, manageable steps\n   - Use clear, descriptive task names\n\nWhen in doubt, use this tool. Being proactive with task management demonstrates attentiveness and ensures you complete all requirements successfully.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "todos": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "content": {
                      "type": "string",
                      "minLength": 1
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "pending",
                        "in_progress",
                        "completed"
                      ]
                    },
                    "priority": {
                      "type": "string",
                      "enum": [
                        "high",
                        "medium",
                        "low"
                      ]
                    },
                    "id": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "content",
                    "status",
                    "priority",
                    "id"
                  ],
                  "additionalProperties": false
                },
                "description": "The updated todo list"
              }
            },
            "required": [
              "todos"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "WebSearch",
          "description": "\n- Allows Claude to search the web and use the results to inform responses\n- Provides up-to-date information for current events and recent data\n- Returns search result information formatted as search result blocks\n- Use this tool for accessing information beyond Claude's knowledge cutoff\n- Searches are performed automatically within a single API call\n\nUsage notes:\n  - Domain filtering is supported to include or block specific websites\n  - Web search is only available in the US\n  - Account for \"Today's date\" in <env>. For example, if <env> says \"Today's date: 2025-07-01\", and the user wants the latest docs, do not use 2024 in the search query. Use 2025.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "minLength": 2,
                "description": "The search query to use"
              },
              "allowed_domains": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Only include search results from these domains"
              },
              "blocked_domains": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Never include search results from these domains"
              }
            },
            "required": [
              "query"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        }
      ],
      "responseStructure": {
        "type": "object",
        "keys": [
          "id",
          "object",
          "created",
          "model",
          "choices",
          "usage",
          "stats",
          "system_fingerprint"
        ],
        "hasChoices": true,
        "hasContent": false,
        "hasUsage": true,
        "choicesCount": 1,
        "firstChoice": {
          "hasMessage": true,
          "hasToolCalls": false,
          "finishReason": "stop"
        }
      },
      "parsingAttempts": [
        "json_format",
        "function_call",
        "action_format",
        "natural_language"
      ]
    }
  },
  {
    "timestamp": "2025-08-10T06:38:29.135Z",
    "requestId": "session_1754804126703_ixall6oy5:conv_1754804126703_sm1ur5dvo:4:1754807894930:1fc9",
    "provider": "lmstudio",
    "model": "gpt-oss-20b-mlx",
    "endpoint": "localhost:1234",
    "failureType": "text_instead_of_tools",
    "originalResponse": {
      "id": "chatcmpl-ivotltzlr8p9q3t5yfpem",
      "object": "chat.completion",
      "created": 1754807894,
      "model": "gpt-oss-20b-mlx",
      "choices": [
        {
          "index": 0,
          "logprobs": null,
          "finish_reason": "stop",
          "message": {
            "role": "assistant",
            "content": "We cannot see directory content; must use provided tools. The Root path from the context: \"github项目的根目录是~/Documents/github，所有需要克隆到本地的项目都在这里创建\" So repository root is /Users/fanzhang/Documents/github. The root of this project likely somewhere inside; but we don't know the project name.\n\nWe might need to list contents: Use LS on that path.<|start|>assistant<|channel|>commentary to=functions.LS<|constrain|>JSON<|message|>{\"path\":\"/Users/fanzhang/Documents/github\"}"
          }
        }
      ],
      "usage": {
        "prompt_tokens": 15978,
        "completion_tokens": 109,
        "total_tokens": 16087
      },
      "stats": {},
      "system_fingerprint": "gpt-oss-20b-mlx"
    },
    "expectedFormat": "openai",
    "errorMessage": "All parsing strategies failed",
    "responseAnalysis": {
      "hasToolCalls": false,
      "hasContent": true,
      "contentLength": 464,
      "contentPreview": "We cannot see directory content; must use provided tools. The Root path from the context: \"github项目的根目录是~/Documents/github，所有需要克隆到本地的项目都在这里创建\" So repository root is /Users/fanzhang/Documents/github. T",
      "finishReason": "stop",
      "toolCallPatterns": []
    },
    "debugInfo": {
      "requestTools": [
        {
          "name": "Task",
          "description": "Launch a new agent to handle complex, multi-step tasks autonomously.\n\nAvailable agent types and the tools they have access to:\n- general-purpose: General-purpose agent for researching complex questions, searching for code, and executing multi-step tasks. When you are searching for a keyword or file and are not confident that you will find the right match in the first few tries use this agent to perform the search for you. (Tools: *)\n- code-refactorer: Use this agent when you need to improve existing code structure, readability, or maintainability without changing functionality. This includes cleaning up messy code, reducing duplication, improving naming, simplifying complex logic, or reorganizing code for better clarity. Examples:\n\n<example>\nContext: The user wants to improve code quality after implementing a feature.\nuser: \"I just finished implementing the user authentication system. Can you help clean it up?\"\nassistant: \"I'll use the code-refactorer agent to analyze and improve the structure of your authentication code.\"\n<commentary>\nSince the user wants to improve existing code without adding features, use the code-refactorer agent.\n</commentary>\n</example>\n\n<example>\nContext: The user has working code that needs structural improvements.\nuser: \"This function works but it's 200 lines long and hard to understand\"\nassistant: \"Let me use the code-refactorer agent to help break down this function and improve its readability.\"\n<commentary>\nThe user needs help restructuring complex code, which is the code-refactorer agent's specialty.\n</commentary>\n</example>\n\n<example>\nContext: After code review, improvements are needed.\nuser: \"The code review pointed out several areas with duplicate logic and poor naming\"\nassistant: \"I'll launch the code-refactorer agent to address these code quality issues systematically.\"\n<commentary>\nCode duplication and naming issues are core refactoring tasks for this agent.\n</commentary>\n</example> (Tools: Edit, MultiEdit, Write, NotebookEdit, Grep, LS, Read)\n- project-task-planner: Use this agent when you need to create a comprehensive development task list from a Product Requirements Document (PRD). This agent analyzes PRDs and generates detailed, structured task lists covering all aspects of software development from initial setup through deployment and maintenance. Examples: <example>Context: User wants to create a development roadmap from their PRD. user: \"I have a PRD for a new e-commerce platform. Can you create a task list?\" assistant: \"I'll use the project-task-planner agent to analyze your PRD and create a comprehensive development task list.\" <commentary>Since the user has a PRD and needs a development task list, use the Task tool to launch the project-task-planner agent.</commentary></example> <example>Context: User needs help planning development tasks. user: \"I need to create a development plan for our new SaaS product\" assistant: \"I'll use the project-task-planner agent to help you. First, I'll need to see your Product Requirements Document (PRD).\" <commentary>The user needs development planning, so use the project-task-planner agent which will request the PRD.</commentary></example> (Tools: Task, Bash, Edit, MultiEdit, Write, NotebookEdit, Grep, LS, Read, ExitPlanMode, TodoWrite, WebSearch)\n- vibe-coding-coach: Use this agent when users want to build applications through conversation, focusing on the vision and feel of their app rather than technical implementation details. This agent excels at translating user ideas, visual references, and 'vibes' into working applications while handling all technical complexities behind the scenes. <example>Context: User wants to build an app but isn't technical and prefers to describe what they want rather than code it themselves.\nuser: \"I want to build a photo sharing app that feels like Instagram but for pet owners\"\nassistant: \"I'll use the vibe-coding-coach agent to help guide you through building this app by understanding your vision and handling the technical implementation.\"\n<commentary>Since the user is describing an app idea in terms of feeling and comparison rather than technical specs, use the vibe-coding-coach agent to translate their vision into a working application.</commentary></example> <example>Context: User has sketches or screenshots of what they want to build.\nuser: \"Here's a screenshot of an app I like. Can we build something similar but for tracking workouts?\"\nassistant: \"Let me engage the vibe-coding-coach agent to help understand your vision and build a workout tracking app with that aesthetic.\"\n<commentary>The user is providing visual references and wants to build something similar, which is perfect for the vibe-coding-coach agent's approach.</commentary></example> (Tools: *)\n- debug-system-architect: Use this agent when you need to establish a comprehensive debug logging system for a project. This includes setting up log directories, implementing node-level tracing, creating time-based test records, establishing replay mechanisms, and documenting debug rules. Example: <example> Context: User is setting up a new project and wants to implement proper debugging infrastructure from the start. user: \"Please help me set up a debug system for my new API router project\" <commentary> Since the user is requesting debug system setup, use the debug-system-architect agent to analyze the project and implement comprehensive logging and tracing mechanisms. </commentary> </example> <example> Context: User encounters intermittent issues in their routing system and needs better visibility. user: \"I'm having trouble tracking down why some requests fail intermittently\" <commentary> Since the user needs better debugging visibility for intermittent issues, use the debug-system-architect agent to implement node-level tracing and replay mechanisms. </commentary> </example> (Tools: *)\n- code-risk-auditor: Use this agent when you need to perform comprehensive code risk assessment and identify potential architectural issues in your codebase. Examples: <example>Context: The user has just completed a major refactoring and wants to ensure no hardcoded values or fallback mechanisms were introduced. user: \"I just finished refactoring the routing system, can you check for any code risks?\" assistant: \"I'll use the code-risk-auditor agent to perform a comprehensive risk assessment of your routing system changes.\"</example> <example>Context: Before a major release, the user wants to clean up technical debt and ensure code quality. user: \"We're preparing for v2.0 release, I need a full code audit\" assistant: \"Let me launch the code-risk-auditor agent to identify hardcoding, fallback risks, outdated tests, and duplicate implementations across the entire codebase.\"</example> <example>Context: The user notices inconsistent behavior and suspects duplicate implementations. user: \"The same feature seems to be implemented in multiple places, causing bugs\" assistant: \"I'll use the code-risk-auditor agent to scan for duplicate implementations and provide a consolidation plan.\"</example> (Tools: *)\n- security-auditor: Use this agent when you need to perform a comprehensive security audit of a codebase, identify vulnerabilities, and generate a detailed security report with actionable remediation steps. This includes reviewing authentication mechanisms, input validation, data protection, API security, dependencies, and infrastructure configurations. Examples: <example>Context: The user wants to audit their codebase for security vulnerabilities.\nuser: \"Can you perform a security audit of my application?\"\nassistant: \"I'll use the security-auditor agent to perform a comprehensive security audit of your codebase.\"\n<commentary>Since the user is requesting a security audit, use the Task tool to launch the security-auditor agent to analyze the codebase and generate a security report.</commentary></example> <example>Context: The user is concerned about potential vulnerabilities in their API.\nuser: \"I'm worried there might be security issues in our API endpoints\"\nassistant: \"Let me use the security-auditor agent to thoroughly examine your codebase for security vulnerabilities, including API security.\"\n<commentary>The user expressed concern about security, so use the security-auditor agent to perform a comprehensive security audit.</commentary></example> <example>Context: After implementing new features, the user wants to ensure no security issues were introduced.\nuser: \"We just added user authentication to our app. Can you check if it's secure?\"\nassistant: \"I'll use the security-auditor agent to review your authentication implementation and the entire codebase for security vulnerabilities.\"\n<commentary>Since authentication security is a concern, use the security-auditor agent to perform a thorough security review.</commentary></example> (Tools: Task, Bash, Edit, MultiEdit, Write, NotebookEdit)\n- project-memory-manager: Use this agent when you need to manage project-specific memory entries, create project documentation, or organize project knowledge. This includes creating project summaries, documenting project decisions, tracking project progress, and maintaining project-specific knowledge bases. <example>Context: User wants to document a project decision or create project documentation. user: \"请为我们的新项目创建一个内存管理系统的文档\" assistant: \"我将使用 project-memory-manager agent 来创建这个项目文档\" <commentary>Since the user needs project documentation, use the project-memory-manager agent to create project-specific memory entries.</commentary></example> <example>Context: User wants to track project progress or decisions. user: \"我们需要记录这个项目的关键决策点\" assistant: \"让我使用 project-memory-manager agent 来记录这些项目决策\" <commentary>Since this is project tracking, use the project-memory-manager agent to create decision-type memory entries.</commentary></example> (Tools: *)\n- rules-architect: Use this agent when you need to analyze project architecture and establish comprehensive rule management systems. Examples: <example>Context: User wants to organize project rules and create a structured rule management system. user: \"I need to reorganize our project rules and create a better structure for managing coding standards, file organization, and testing protocols\" assistant: \"I'll use the rules-architect agent to analyze the current project structure and establish a comprehensive rule management system with proper categorization and organization.\"</example> <example>Context: Project has grown complex and needs better rule organization. user: \"Our CLAUDE.md file is getting too large and we need to break down rules into manageable categories\" assistant: \"Let me call the rules-architect agent to create a structured .claude/rules system that will organize all project rules into logical categories.\"</example> (Tools: *)\n- frontend-designer: Use this agent when you need to convert design mockups, wireframes, or visual concepts into detailed technical specifications and implementation guides for frontend development. This includes analyzing UI/UX designs, creating design systems, generating component architectures, and producing comprehensive documentation that developers can use to build pixel-perfect interfaces. Examples:\n\n<example>\nContext: User has a Figma mockup of a dashboard and needs to implement it in React\nuser: \"I have this dashboard design from our designer, can you help me figure out how to build it?\"\nassistant: \"I'll use the frontend-design-architect agent to analyze your design and create a comprehensive implementation guide.\"\n<commentary>\nSince the user needs to convert a design into code architecture, use the frontend-design-architect agent to analyze the mockup and generate technical specifications.\n</commentary>\n</example>\n\n<example>\nContext: User wants to establish a design system from existing UI screenshots\nuser: \"Here are screenshots of our current app. We need to extract a consistent design system from these.\"\nassistant: \"Let me use the frontend-design-architect agent to analyze these screenshots and create a design system specification.\"\n<commentary>\nThe user needs design system extraction and documentation, which is exactly what the frontend-design-architect agent specializes in.\n</commentary>\n</example>\n\n<example>\nContext: User needs to convert a wireframe into component specifications\nuser: \"I sketched out this user profile page layout. How should I structure the components?\"\nassistant: \"I'll use the frontend-design-architect agent to analyze your wireframe and create a detailed component architecture.\"\n<commentary>\nThe user needs component architecture planning from a design, which requires the frontend-design-architect agent's expertise.\n</commentary>\n</example> (Tools: *)\n- content-writer: Use this agent when you need to create compelling, informative content that explains complex topics in simple terms. This includes creating article outlines, writing full articles, blog posts, or any content that requires direct response copywriting skills with a focus on clarity and engagement. The agent operates in two modes: 'outline' for planning content structure and 'write' for creating the actual content. Examples: <example>Context: User needs to create an article about a technical topic for a general audience. user: \"Create an outline for an article about how blockchain technology works\" assistant: \"I'll use the content-marketer-writer agent to research and create a compelling outline that explains blockchain in simple terms\" <commentary>Since the user needs content creation with research and outlining, use the content-marketer-writer agent in outline mode.</commentary></example> <example>Context: User has an outline and needs to write the full article. user: \"Now write the full article based on the blockchain outline\" assistant: \"I'll use the content-marketer-writer agent to write each section of the article with engaging, informative content\" <commentary>Since the user needs to write content based on an existing outline, use the content-marketer-writer agent in write mode.</commentary></example> (Tools: *)\n- test-runner: Use this agent to run and manage tests according to the global and project-specific testing rules. This includes executing test scripts, documenting test results, and helping to diagnose issues following the standard pipeline. <example>Context: User wants to run all functional tests. user: \"运行所有功能测试\" assistant: \"我将使用 test-runner agent 来执行所有功能测试\" <commentary>Since the user wants to run tests by category, use the test-runner agent.</commentary></example> <example>Context: User wants to verify a bug fix. user: \"我修复了一个bug，帮我验证一下\" assistant: \"让我使用 test-runner agent 来执行对应的修复验证测试\" <commentary>The user needs to verify a fix, which is a core task for the test-runner agent.</commentary></example> (Tools: *)\n- in-depth-research-analyst: Use this agent when you need to conduct comprehensive research reports with in-depth web mining, data analysis, and visualization. This includes industry analysis, market research, competitive intelligence, and trend forecasting with accurate data from authoritative sources. <example>Context: User wants a comprehensive industry analysis report. user: \"请对人工智能芯片市场进行深入调研，包括主要厂商、市场份额和增长趋势\" assistant: \"我将使用 in-depth-research-analyst agent 来进行这项深入的市场调研并生成可视化报告\" <commentary>Since the user needs a comprehensive industry analysis with data visualization, use the in-depth-research-analyst agent to conduct thorough research and create an integrated report.</commentary></example> <example>Context: User wants market research with accurate data and visualizations. user: \"我们需要一份关于电动汽车充电基础设施的深度报告，包含数据图表\" assistant: \"让我使用 in-depth-research-analyst agent 来收集准确数据并生成图文并茂的分析报告\" <commentary>Since this requires market research with data accuracy and visualizations, use the in-depth-research-analyst agent to create a comprehensive report.</commentary></example> (Tools: *)\n- prd-writer: Use this agent when you need to create a comprehensive Product Requirements Document (PRD) for a software project or feature. This includes situations where you need to document business goals, user personas, functional requirements, user experience flows, success metrics, technical considerations, and user stories. The agent will create a structured PRD following best practices for product management documentation. Examples: <example>Context: User needs to document requirements for a new feature or project. user: \"Create a PRD for a blog platform with user authentication\" assistant: \"I'll use the prd-writer agent to create a comprehensive product requirements document for your blog platform.\" <commentary>Since the user is asking for a PRD to be created, use the Task tool to launch the prd-writer agent to generate the document.</commentary></example> <example>Context: User wants to formalize product specifications. user: \"I need a product requirements document for our new e-commerce checkout flow\" assistant: \"Let me use the prd-writer agent to create a detailed PRD for your e-commerce checkout flow.\" <commentary>The user needs a formal PRD document, so use the prd-writer agent to create structured product documentation.</commentary></example> (Tools: Task, Bash, Grep, LS, Read, Write, WebSearch, Glob)\n- pipeline-debug-universal: Use this agent when you need to implement comprehensive debug hooks and testing infrastructure for ANY pipeline system - whether it's API routing, data processing, CI/CD workflows, or transformation pipelines. This agent specializes in creating universal debug architectures that work across different pipeline types with data capture, replay capabilities, and systematic testing matrices. Examples: <example>Context: User is working on a multi-provider API routing system and needs to add debug capabilities to track data flow through each pipeline step. user: \"I need to add debug hooks to our routing pipeline so we can capture and replay data at each step\" assistant: \"I'll use the pipeline-debug-universal agent to design a comprehensive debug infrastructure with data capture and replay capabilities\" <commentary>Since the user needs pipeline debugging infrastructure, use the pipeline-debug-universal agent to create debug hooks and testing matrices.</commentary></example> <example>Context: User has a complex data transformation pipeline and wants to build systematic testing for each stage and provider. user: \"Our data processing pipeline has issues and we need better testing infrastructure to isolate problems at each step\" assistant: \"Let me use the pipeline-debug-universal agent to create a complete testing matrix and debug system\" <commentary>Since the user needs systematic pipeline testing infrastructure, use the pipeline-debug-universal agent to architect the testing system.</commentary></example> <example>Context: User is building a CI/CD pipeline and needs to implement debug capabilities for tracking deployment issues. user: \"Our deployment pipeline fails randomly and we can't reproduce the issues consistently\" assistant: \"I'll deploy the pipeline-debug-universal agent to create comprehensive debug hooks and replay capabilities for your CI/CD pipeline\" <commentary>Since the user needs debug infrastructure for a deployment pipeline, use the pipeline-debug-universal agent to design the debug system.</commentary></example> (Tools: *)\n\nWhen using the Task tool, you must specify a subagent_type parameter to select which agent type to use.\n\n\n\nWhen NOT to use the Agent tool:\n- If you want to read a specific file path, use the Read or Glob tool instead of the Agent tool, to find the match more quickly\n- If you are searching for a specific class definition like \"class Foo\", use the Glob tool instead, to find the match more quickly\n- If you are searching for code within a specific file or set of 2-3 files, use the Read tool instead of the Agent tool, to find the match more quickly\n- Other tasks that are not related to the agent descriptions above\n\n\nUsage notes:\n1. Launch multiple agents concurrently whenever possible, to maximize performance; to do that, use a single message with multiple tool uses\n2. When the agent is done, it will return a single message back to you. The result returned by the agent is not visible to the user. To show the user the result, you should send a text message back to the user with a concise summary of the result.\n3. Each agent invocation is stateless. You will not be able to send additional messages to the agent, nor will the agent be able to communicate with you outside of its final report. Therefore, your prompt should contain a highly detailed task description for the agent to perform autonomously and you should specify exactly what information the agent should return back to you in its final and only message to you.\n4. The agent's outputs should generally be trusted\n5. Clearly tell the agent whether you expect it to write code or just to do research (search, file reads, web fetches, etc.), since it is not aware of the user's intent\n6. If the agent description mentions that it should be used proactively, then you should try your best to use it without the user having to ask for it first. Use your judgement.\n\nExample usage:\n\n<example_agent_descriptions>\n\"code-reviewer\": use this agent after you are done writing a signficant piece of code\n\"greeting-responder\": use this agent when to respond to user greetings with a friendly joke\n</example_agent_description>\n\n<example>\nuser: \"Please write a function that checks if a number is prime\"\nassistant: Sure let me write a function that checks if a number is prime\nassistant: First let me use the Write tool to write a function that checks if a number is prime\nassistant: I'm going to use the Write tool to write the following code:\n<code>\nfunction isPrime(n) {\n  if (n <= 1) return false\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n</code>\n<commentary>\nSince a signficant piece of code was written and the task was completed, now use the code-reviewer agent to review the code\n</commentary>\nassistant: Now let me use the code-reviewer agent to review the code\nassistant: Uses the Task tool to launch the with the code-reviewer agent\n</example>\n\n<example>\nuser: \"Hello\"\n<commentary>\nSince the user is greeting, use the greeting-responder agent to respond with a friendly joke\n</commentary>\nassistant: \"I'm going to use the Task tool to launch the with the greeting-responder agent\"\n</example>\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "description": {
                "type": "string",
                "description": "A short (3-5 word) description of the task"
              },
              "prompt": {
                "type": "string",
                "description": "The task for the agent to perform"
              },
              "subagent_type": {
                "type": "string",
                "description": "The type of specialized agent to use for this task"
              }
            },
            "required": [
              "description",
              "prompt",
              "subagent_type"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Bash",
          "description": "Executes a given bash command in a persistent shell session with optional timeout, ensuring proper handling and security measures.\n\nBefore executing the command, please follow these steps:\n\n1. Directory Verification:\n   - If the command will create new directories or files, first use the LS tool to verify the parent directory exists and is the correct location\n   - For example, before running \"mkdir foo/bar\", first use LS to check that \"foo\" exists and is the intended parent directory\n\n2. Command Execution:\n   - Always quote file paths that contain spaces with double quotes (e.g., cd \"path with spaces/file.txt\")\n   - Examples of proper quoting:\n     - cd \"/Users/name/My Documents\" (correct)\n     - cd /Users/name/My Documents (incorrect - will fail)\n     - python \"/path/with spaces/script.py\" (correct)\n     - python /path/with spaces/script.py (incorrect - will fail)\n   - After ensuring proper quoting, execute the command.\n   - Capture the output of the command.\n\nUsage notes:\n  - The command argument is required.\n  - You can specify an optional timeout in milliseconds (up to 600000ms / 10 minutes). If not specified, commands will timeout after 120000ms (2 minutes).\n  - It is very helpful if you write a clear, concise description of what this command does in 5-10 words.\n  - If the output exceeds 30000 characters, output will be truncated before being returned to you.\n  - VERY IMPORTANT: You MUST avoid using search commands like `find` and `grep`. Instead use Grep, Glob, or Task to search. You MUST avoid read tools like `cat`, `head`, `tail`, and `ls`, and use Read and LS to read files.\n - If you _still_ need to run `grep`, STOP. ALWAYS USE ripgrep at `rg` first, which all ${PRODUCT_NAME} users have pre-installed.\n  - When issuing multiple commands, use the ';' or '&&' operator to separate them. DO NOT use newlines (newlines are ok in quoted strings).\n  - Try to maintain your current working directory throughout the session by using absolute paths and avoiding usage of `cd`. You may use `cd` if the User explicitly requests it.\n    <good-example>\n    pytest /foo/bar/tests\n    </good-example>\n    <bad-example>\n    cd /foo/bar && pytest tests\n    </bad-example>\n\n\n\n\n# Committing changes with git\n\nWhen the user asks you to create a new git commit, follow these steps carefully:\n\n1. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following bash commands in parallel, each using the Bash tool:\n  - Run a git status command to see all untracked files.\n  - Run a git diff command to see both staged and unstaged changes that will be committed.\n  - Run a git log command to see recent commit messages, so that you can follow this repository's commit message style.\n2. Analyze all staged changes (both previously staged and newly added) and draft a commit message:\n  - Summarize the nature of the changes (eg. new feature, enhancement to an existing feature, bug fix, refactoring, test, docs, etc.). Ensure the message accurately reflects the changes and their purpose (i.e. \"add\" means a wholly new feature, \"update\" means an enhancement to an existing feature, \"fix\" means a bug fix, etc.).\n  - Check for any sensitive information that shouldn't be committed\n  - Draft a concise (1-2 sentences) commit message that focuses on the \"why\" rather than the \"what\"\n  - Ensure it accurately reflects the changes and their purpose\n3. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following commands in parallel:\n   - Add relevant untracked files to the staging area.\n   - Create the commit with a message ending with:\n   🤖 Generated with [Claude Code](https://claude.ai/code)\n\n   Co-Authored-By: Claude <noreply@anthropic.com>\n   - Run git status to make sure the commit succeeded.\n4. If the commit fails due to pre-commit hook changes, retry the commit ONCE to include these automated changes. If it fails again, it usually means a pre-commit hook is preventing the commit. If the commit succeeds but you notice that files were modified by the pre-commit hook, you MUST amend your commit to include them.\n\nImportant notes:\n- NEVER update the git config\n- NEVER run additional commands to read or explore code, besides git bash commands\n- NEVER use the TodoWrite or Task tools\n- DO NOT push to the remote repository unless the user explicitly asks you to do so\n- IMPORTANT: Never use git commands with the -i flag (like git rebase -i or git add -i) since they require interactive input which is not supported.\n- If there are no changes to commit (i.e., no untracked files and no modifications), do not create an empty commit\n- In order to ensure good formatting, ALWAYS pass the commit message via a HEREDOC, a la this example:\n<example>\ngit commit -m \"$(cat <<'EOF'\n   Commit message here.\n\n   🤖 Generated with [Claude Code](https://claude.ai/code)\n\n   Co-Authored-By: Claude <noreply@anthropic.com>\n   EOF\n   )\"\n</example>\n\n# Creating pull requests\nUse the gh command via the Bash tool for ALL GitHub-related tasks including working with issues, pull requests, checks, and releases. If given a Github URL use the gh command to get the information needed.\n\nIMPORTANT: When the user asks you to create a pull request, follow these steps carefully:\n\n1. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following bash commands in parallel using the Bash tool, in order to understand the current state of the branch since it diverged from the main branch:\n   - Run a git status command to see all untracked files\n   - Run a git diff command to see both staged and unstaged changes that will be committed\n   - Check if the current branch tracks a remote branch and is up to date with the remote, so you know if you need to push to the remote\n   - Run a git log command and `git diff [base-branch]...HEAD` to understand the full commit history for the current branch (from the time it diverged from the base branch)\n2. Analyze all changes that will be included in the pull request, making sure to look at all relevant commits (NOT just the latest commit, but ALL commits that will be included in the pull request!!!), and draft a pull request summary\n3. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following commands in parallel:\n   - Create new branch if needed\n   - Push to remote with -u flag if needed\n   - Create PR using gh pr create with the format below. Use a HEREDOC to pass the body to ensure correct formatting.\n<example>\ngh pr create --title \"the pr title\" --body \"$(cat <<'EOF'\n## Summary\n<1-3 bullet points>\n\n## Test plan\n[Checklist of TODOs for testing the pull request...]\n\n🤖 Generated with [Claude Code](https://claude.ai/code)\nEOF\n)\"\n</example>\n\nImportant:\n- NEVER update the git config\n- DO NOT use the TodoWrite or Task tools\n- Return the PR URL when you're done, so the user can see it\n\n# Other common operations\n- View comments on a Github PR: gh api repos/foo/bar/pulls/123/comments",
          "input_schema": {
            "type": "object",
            "properties": {
              "command": {
                "type": "string",
                "description": "The command to execute"
              },
              "timeout": {
                "type": "number",
                "description": "Optional timeout in milliseconds (max 600000)"
              },
              "description": {
                "type": "string",
                "description": " Clear, concise description of what this command does in 5-10 words. Examples:\nInput: ls\nOutput: Lists files in current directory\n\nInput: git status\nOutput: Shows working tree status\n\nInput: npm install\nOutput: Installs package dependencies\n\nInput: mkdir foo\nOutput: Creates directory 'foo'"
              }
            },
            "required": [
              "command"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Glob",
          "description": "- Fast file pattern matching tool that works with any codebase size\n- Supports glob patterns like \"**/*.js\" or \"src/**/*.ts\"\n- Returns matching file paths sorted by modification time\n- Use this tool when you need to find files by name patterns\n- When you are doing an open ended search that may require multiple rounds of globbing and grepping, use the Agent tool instead\n- You have the capability to call multiple tools in a single response. It is always better to speculatively perform multiple searches as a batch that are potentially useful.",
          "input_schema": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "The glob pattern to match files against"
              },
              "path": {
                "type": "string",
                "description": "The directory to search in. If not specified, the current working directory will be used. IMPORTANT: Omit this field to use the default directory. DO NOT enter \"undefined\" or \"null\" - simply omit it for the default behavior. Must be a valid directory path if provided."
              }
            },
            "required": [
              "pattern"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Grep",
          "description": "A powerful search tool built on ripgrep\n\n  Usage:\n  - ALWAYS use Grep for search tasks. NEVER invoke `grep` or `rg` as a Bash command. The Grep tool has been optimized for correct permissions and access.\n  - Supports full regex syntax (e.g., \"log.*Error\", \"function\\s+\\w+\")\n  - Filter files with glob parameter (e.g., \"*.js\", \"**/*.tsx\") or type parameter (e.g., \"js\", \"py\", \"rust\")\n  - Output modes: \"content\" shows matching lines, \"files_with_matches\" shows only file paths (default), \"count\" shows match counts\n  - Use Task tool for open-ended searches requiring multiple rounds\n  - Pattern syntax: Uses ripgrep (not grep) - literal braces need escaping (use `interface\\{\\}` to find `interface{}` in Go code)\n  - Multiline matching: By default patterns match within single lines only. For cross-line patterns like `struct \\{[\\s\\S]*?field`, use `multiline: true`\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "The regular expression pattern to search for in file contents"
              },
              "path": {
                "type": "string",
                "description": "File or directory to search in (rg PATH). Defaults to current working directory."
              },
              "glob": {
                "type": "string",
                "description": "Glob pattern to filter files (e.g. \"*.js\", \"*.{ts,tsx}\") - maps to rg --glob"
              },
              "output_mode": {
                "type": "string",
                "enum": [
                  "content",
                  "files_with_matches",
                  "count"
                ],
                "description": "Output mode: \"content\" shows matching lines (supports -A/-B/-C context, -n line numbers, head_limit), \"files_with_matches\" shows file paths (supports head_limit), \"count\" shows match counts (supports head_limit). Defaults to \"files_with_matches\"."
              },
              "-B": {
                "type": "number",
                "description": "Number of lines to show before each match (rg -B). Requires output_mode: \"content\", ignored otherwise."
              },
              "-A": {
                "type": "number",
                "description": "Number of lines to show after each match (rg -A). Requires output_mode: \"content\", ignored otherwise."
              },
              "-C": {
                "type": "number",
                "description": "Number of lines to show before and after each match (rg -C). Requires output_mode: \"content\", ignored otherwise."
              },
              "-n": {
                "type": "boolean",
                "description": "Show line numbers in output (rg -n). Requires output_mode: \"content\", ignored otherwise."
              },
              "-i": {
                "type": "boolean",
                "description": "Case insensitive search (rg -i)"
              },
              "type": {
                "type": "string",
                "description": "File type to search (rg --type). Common types: js, py, rust, go, java, etc. More efficient than include for standard file types."
              },
              "head_limit": {
                "type": "number",
                "description": "Limit output to first N lines/entries, equivalent to \"| head -N\". Works across all output modes: content (limits output lines), files_with_matches (limits file paths), count (limits count entries). When unspecified, shows all results from ripgrep."
              },
              "multiline": {
                "type": "boolean",
                "description": "Enable multiline mode where . matches newlines and patterns can span lines (rg -U --multiline-dotall). Default: false."
              }
            },
            "required": [
              "pattern"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "LS",
          "description": "Lists files and directories in a given path. The path parameter must be an absolute path, not a relative path. You can optionally provide an array of glob patterns to ignore with the ignore parameter. You should generally prefer the Glob and Grep tools, if you know which directories to search.",
          "input_schema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "The absolute path to the directory to list (must be absolute, not relative)"
              },
              "ignore": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of glob patterns to ignore"
              }
            },
            "required": [
              "path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "ExitPlanMode",
          "description": "Use this tool when you are in plan mode and have finished presenting your plan and are ready to code. This will prompt the user to exit plan mode.\nIMPORTANT: Only use this tool when the task requires planning the implementation steps of a task that requires writing code. For research tasks where you're gathering information, searching files, reading files or in general trying to understand the codebase - do NOT use this tool.\n\nEg.\n1. Initial task: \"Search for and understand the implementation of vim mode in the codebase\" - Do not use the exit plan mode tool because you are not planning the implementation steps of a task.\n2. Initial task: \"Help me implement yank mode for vim\" - Use the exit plan mode tool after you have finished planning the implementation steps of the task.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "plan": {
                "type": "string",
                "description": "The plan you came up with, that you want to run by the user for approval. Supports markdown. The plan should be pretty concise."
              }
            },
            "required": [
              "plan"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Read",
          "description": "Reads a file from the local filesystem. You can access any file directly by using this tool.\nAssume this tool is able to read all files on the machine. If the User provides a path to a file assume that path is valid. It is okay to read a file that does not exist; an error will be returned.\n\nUsage:\n- The file_path parameter must be an absolute path, not a relative path\n- By default, it reads up to 2000 lines starting from the beginning of the file\n- You can optionally specify a line offset and limit (especially handy for long files), but it's recommended to read the whole file by not providing these parameters\n- Any lines longer than 2000 characters will be truncated\n- Results are returned using cat -n format, with line numbers starting at 1\n- This tool allows Claude Code to read images (eg PNG, JPG, etc). When reading an image file the contents are presented visually as Claude Code is a multimodal LLM.\n- This tool can read PDF files (.pdf). PDFs are processed page by page, extracting both text and visual content for analysis.\n- For Jupyter notebooks (.ipynb files), use the NotebookRead instead\n- You have the capability to call multiple tools in a single response. It is always better to speculatively read multiple files as a batch that are potentially useful.\n- You will regularly be asked to read screenshots. If the user provides a path to a screenshot ALWAYS use this tool to view the file at the path. This tool will work with all temporary file paths like /var/folders/123/abc/T/TemporaryItems/NSIRD_screencaptureui_ZfB1tD/Screenshot.png\n- If you read a file that exists but has empty contents you will receive a system reminder warning in place of file contents.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to read"
              },
              "offset": {
                "type": "number",
                "description": "The line number to start reading from. Only provide if the file is too large to read at once"
              },
              "limit": {
                "type": "number",
                "description": "The number of lines to read. Only provide if the file is too large to read at once."
              }
            },
            "required": [
              "file_path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Edit",
          "description": "Performs exact string replacements in files.\n\nUsage:\n- You must use your `Read` tool at least once in the conversation before editing. This tool will error if you attempt an edit without reading the file.\n- When editing text from Read tool output, ensure you preserve the exact indentation (tabs/spaces) as it appears AFTER the line number prefix. The line number prefix format is: spaces + line number + tab. Everything after that tab is the actual file content to match. Never include any part of the line number prefix in the old_string or new_string.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- Only use emojis if the user explicitly requests it. Avoid adding emojis to files unless asked.\n- The edit will FAIL if `old_string` is not unique in the file. Either provide a larger string with more surrounding context to make it unique or use `replace_all` to change every instance of `old_string`.\n- Use `replace_all` for replacing and renaming strings across the file. This parameter is useful if you want to rename a variable for instance.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to modify"
              },
              "old_string": {
                "type": "string",
                "description": "The text to replace"
              },
              "new_string": {
                "type": "string",
                "description": "The text to replace it with (must be different from old_string)"
              },
              "replace_all": {
                "type": "boolean",
                "default": false,
                "description": "Replace all occurences of old_string (default false)"
              }
            },
            "required": [
              "file_path",
              "old_string",
              "new_string"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "MultiEdit",
          "description": "This is a tool for making multiple edits to a single file in one operation. It is built on top of the Edit tool and allows you to perform multiple find-and-replace operations efficiently. Prefer this tool over the Edit tool when you need to make multiple edits to the same file.\n\nBefore using this tool:\n\n1. Use the Read tool to understand the file's contents and context\n2. Verify the directory path is correct\n\nTo make multiple file edits, provide the following:\n1. file_path: The absolute path to the file to modify (must be absolute, not relative)\n2. edits: An array of edit operations to perform, where each edit contains:\n   - old_string: The text to replace (must match the file contents exactly, including all whitespace and indentation)\n   - new_string: The edited text to replace the old_string\n   - replace_all: Replace all occurences of old_string. This parameter is optional and defaults to false.\n\nIMPORTANT:\n- All edits are applied in sequence, in the order they are provided\n- Each edit operates on the result of the previous edit\n- All edits must be valid for the operation to succeed - if any edit fails, none will be applied\n- This tool is ideal when you need to make several changes to different parts of the same file\n- For Jupyter notebooks (.ipynb files), use the NotebookEdit instead\n\nCRITICAL REQUIREMENTS:\n1. All edits follow the same requirements as the single Edit tool\n2. The edits are atomic - either all succeed or none are applied\n3. Plan your edits carefully to avoid conflicts between sequential operations\n\nWARNING:\n- The tool will fail if edits.old_string doesn't match the file contents exactly (including whitespace)\n- The tool will fail if edits.old_string and edits.new_string are the same\n- Since edits are applied in sequence, ensure that earlier edits don't affect the text that later edits are trying to find\n\nWhen making edits:\n- Ensure all edits result in idiomatic, correct code\n- Do not leave the code in a broken state\n- Always use absolute file paths (starting with /)\n- Only use emojis if the user explicitly requests it. Avoid adding emojis to files unless asked.\n- Use replace_all for replacing and renaming strings across the file. This parameter is useful if you want to rename a variable for instance.\n\nIf you want to create a new file, use:\n- A new file path, including dir name if needed\n- First edit: empty old_string and the new file's contents as new_string\n- Subsequent edits: normal edit operations on the created content",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to modify"
              },
              "edits": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "old_string": {
                      "type": "string",
                      "description": "The text to replace"
                    },
                    "new_string": {
                      "type": "string",
                      "description": "The text to replace it with"
                    },
                    "replace_all": {
                      "type": "boolean",
                      "default": false,
                      "description": "Replace all occurences of old_string (default false)."
                    }
                  },
                  "required": [
                    "old_string",
                    "new_string"
                  ],
                  "additionalProperties": false
                },
                "minItems": 1,
                "description": "Array of edit operations to perform sequentially on the file"
              }
            },
            "required": [
              "file_path",
              "edits"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Write",
          "description": "Writes a file to the local filesystem.\n\nUsage:\n- This tool will overwrite the existing file if there is one at the provided path.\n- If this is an existing file, you MUST use the Read tool first to read the file's contents. This tool will fail if you did not read the file first.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- NEVER proactively create documentation files (*.md) or README files. Only create documentation files if explicitly requested by the User.\n- Only use emojis if the user explicitly requests it. Avoid writing emojis to files unless asked.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to write (must be absolute, not relative)"
              },
              "content": {
                "type": "string",
                "description": "The content to write to the file"
              }
            },
            "required": [
              "file_path",
              "content"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "NotebookRead",
          "description": "Reads a Jupyter notebook (.ipynb file) and returns all of the cells with their outputs. Jupyter notebooks are interactive documents that combine code, text, and visualizations, commonly used for data analysis and scientific computing. The notebook_path parameter must be an absolute path, not a relative path.",
          "input_schema": {
            "type": "object",
            "properties": {
              "notebook_path": {
                "type": "string",
                "description": "The absolute path to the Jupyter notebook file to read (must be absolute, not relative)"
              },
              "cell_id": {
                "type": "string",
                "description": "The ID of a specific cell to read. If not provided, all cells will be read."
              }
            },
            "required": [
              "notebook_path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "NotebookEdit",
          "description": "Completely replaces the contents of a specific cell in a Jupyter notebook (.ipynb file) with new source. Jupyter notebooks are interactive documents that combine code, text, and visualizations, commonly used for data analysis and scientific computing. The notebook_path parameter must be an absolute path, not a relative path. The cell_number is 0-indexed. Use edit_mode=insert to add a new cell at the index specified by cell_number. Use edit_mode=delete to delete the cell at the index specified by cell_number.",
          "input_schema": {
            "type": "object",
            "properties": {
              "notebook_path": {
                "type": "string",
                "description": "The absolute path to the Jupyter notebook file to edit (must be absolute, not relative)"
              },
              "cell_id": {
                "type": "string",
                "description": "The ID of the cell to edit. When inserting a new cell, the new cell will be inserted after the cell with this ID, or at the beginning if not specified."
              },
              "new_source": {
                "type": "string",
                "description": "The new source for the cell"
              },
              "cell_type": {
                "type": "string",
                "enum": [
                  "code",
                  "markdown"
                ],
                "description": "The type of the cell (code or markdown). If not specified, it defaults to the current cell type. If using edit_mode=insert, this is required."
              },
              "edit_mode": {
                "type": "string",
                "enum": [
                  "replace",
                  "insert",
                  "delete"
                ],
                "description": "The type of edit to make (replace, insert, delete). Defaults to replace."
              }
            },
            "required": [
              "notebook_path",
              "new_source"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "WebFetch",
          "description": "\n- Fetches content from a specified URL and processes it using an AI model\n- Takes a URL and a prompt as input\n- Fetches the URL content, converts HTML to markdown\n- Processes the content with the prompt using a small, fast model\n- Returns the model's response about the content\n- Use this tool when you need to retrieve and analyze web content\n\nUsage notes:\n  - IMPORTANT: If an MCP-provided web fetch tool is available, prefer using that tool instead of this one, as it may have fewer restrictions. All MCP-provided tools start with \"mcp__\".\n  - The URL must be a fully-formed valid URL\n  - HTTP URLs will be automatically upgraded to HTTPS\n  - The prompt should describe what information you want to extract from the page\n  - This tool is read-only and does not modify any files\n  - Results may be summarized if the content is very large\n  - Includes a self-cleaning 15-minute cache for faster responses when repeatedly accessing the same URL\n  - When a URL redirects to a different host, the tool will inform you and provide the redirect URL in a special format. You should then make a new WebFetch request with the redirect URL to fetch the content.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "format": "uri",
                "description": "The URL to fetch content from"
              },
              "prompt": {
                "type": "string",
                "description": "The prompt to run on the fetched content"
              }
            },
            "required": [
              "url",
              "prompt"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "TodoWrite",
          "description": "Use this tool to create and manage a structured task list for your current coding session. This helps you track progress, organize complex tasks, and demonstrate thoroughness to the user.\nIt also helps the user understand the progress of the task and overall progress of their requests.\n\n## When to Use This Tool\nUse this tool proactively in these scenarios:\n\n1. Complex multi-step tasks - When a task requires 3 or more distinct steps or actions\n2. Non-trivial and complex tasks - Tasks that require careful planning or multiple operations\n3. User explicitly requests todo list - When the user directly asks you to use the todo list\n4. User provides multiple tasks - When users provide a list of things to be done (numbered or comma-separated)\n5. After receiving new instructions - Immediately capture user requirements as todos\n6. When you start working on a task - Mark it as in_progress BEFORE beginning work. Ideally you should only have one todo as in_progress at a time\n7. After completing a task - Mark it as completed and add any new follow-up tasks discovered during implementation\n\n## When NOT to Use This Tool\n\nSkip using this tool when:\n1. There is only a single, straightforward task\n2. The task is trivial and tracking it provides no organizational benefit\n3. The task can be completed in less than 3 trivial steps\n4. The task is purely conversational or informational\n\nNOTE that you should not use this tool if there is only one trivial task to do. In this case you are better off just doing the task directly.\n\n## Examples of When to Use the Todo List\n\n<example>\nUser: I want to add a dark mode toggle to the application settings. Make sure you run the tests and build when you're done!\nAssistant: I'll help add a dark mode toggle to your application settings. Let me create a todo list to track this implementation.\n*Creates todo list with the following items:*\n1. Create dark mode toggle component in Settings page\n2. Add dark mode state management (context/store)\n3. Implement CSS-in-JS styles for dark theme\n4. Update existing components to support theme switching\n5. Run tests and build process, addressing any failures or errors that occur\n*Begins working on the first task*\n\n<reasoning>\nThe assistant used the todo list because:\n1. Adding dark mode is a multi-step feature requiring UI, state management, and styling changes\n2. The user explicitly requested tests and build be run afterward\n3. The assistant inferred that tests and build need to pass by adding \"Ensure tests and build succeed\" as the final task\n</reasoning>\n</example>\n\n<example>\nUser: Help me rename the function getCwd to getCurrentWorkingDirectory across my project\nAssistant: Let me first search through your codebase to find all occurrences of 'getCwd'.\n*Uses grep or search tools to locate all instances of getCwd in the codebase*\nAssistant: I've found 15 instances of 'getCwd' across 8 different files. Let me create a todo list to track these changes.\n*Creates todo list with specific items for each file that needs updating*\n\n<reasoning>\nThe assistant used the todo list because:\n1. First, the assistant searched to understand the scope of the task\n2. Upon finding multiple occurrences across different files, it determined this was a complex task with multiple steps\n3. The todo list helps ensure every instance is tracked and updated systematically\n4. This approach prevents missing any occurrences and maintains code consistency\n</reasoning>\n</example>\n\n\n<example>\nUser: I need to implement these features for my e-commerce site: user registration, product catalog, shopping cart, and checkout flow.\nAssistant: I'll help implement these features. First, let's add all the features to the todo list.\n*Creates a todo list breaking down each feature into specific tasks based on the project architecture*\nAssistant: Let's start with user registration. This will involve creating database models, API endpoints, and frontend forms that integrate with your existing authentication system.\n\n<reasoning>\nThe assistant used the todo list because:\n1. The user provided multiple complex features to implement in a comma separated list\n2. The todo list helps organize these large features into manageable tasks\n3. This approach allows for tracking progress across the entire implementation\n</reasoning>\n</example>\n\n<example>\nUser: Can you help optimize my React application? It's rendering slowly and has performance issues.</user>\nAssistant: I'll help optimize your React application. First, let me examine your codebase to identify potential performance bottlenecks.\n*Reviews component structure, render patterns, state management, and data fetching*\nAssistant: After analyzing your codebase, I've identified several performance issues. Let me create a todo list to track our optimization efforts.\n*Creates todo list with items like: 1) Implement memoization for expensive calculations in ProductList, 2) Add virtualization for long lists in Dashboard, 3) Optimize image loading in Gallery component, 4) Fix state update loops in ShoppingCart, 5) Review bundle size and implement code splitting*\nLet's start by implementing memoization for the expensive calculations in your ProductList component.</assistant>\n\n<reasoning>\nThe assistant used the todo list because:\n1. First, the assistant examined the codebase to identify specific performance issues\n2. Based on this analysis, it identified multiple optimization opportunities\n3. Performance optimization is a non-trivial task requiring multiple steps\n4. The todo list helps methodically track improvements across different components\n5. This systematic approach ensures all performance bottlenecks are addressed\n</reasoning>\n</example>\n\n## Examples of When NOT to Use the Todo List\n\n<example>\nUser: How do I print 'Hello World' in Python?\nAssistant: In Python, you can print \"Hello World\" with this simple code:\n\npython\nprint(\"Hello World\")\n\nThis will output the text \"Hello World\" to the console when executed.</assistant>\n\n<reasoning>\nThe assistant did not use the todo list because this is a single, trivial task that can be completed in one step. There's no need to track multiple tasks or steps for such a straightforward request.\n</reasoning>\n</example>\n\n<example>\nUser: What does the git status command do?\nAssistant: The git status command shows the current state of your working directory and staging area. It displays which changes have been staged, which haven't, and which files aren't being tracked by Git. This is a fundamental command for understanding the current state of your repository before making commits.\n\n<reasoning>\nThe assistant did not use the todo list because this is an informational request with no actual coding task to complete. The user is simply asking for an explanation, not for the assistant to perform multiple steps or tasks.\n</reasoning>\n</example>\n\n<example>\nUser: Can you add a comment to the calculateTotal function to explain what it does?\nAssistant: Sure, let me add a comment to the calculateTotal function to explain what it does.\n* Uses the Edit tool to add a comment to the calculateTotal function *\n\n<reasoning>\nThe assistant did not use the todo list because this is a single, straightforward task confined to one location in the code. Adding a comment doesn't require tracking multiple steps or systematic organization.\n</reasoning>\n</example>\n\n<example>\nUser: Run npm install for me and tell me what happens.\nAssistant: I'll run the npm install command for you.\n\n*Executes: npm install*\n\nThe command completed successfully. Here's the output:\n[Output of npm install command]\n\nAll dependencies have been installed according to your package.json file.\n\n<reasoning>\nThe assistant did not use the todo list because this is a single command execution with immediate results. There are no multiple steps to track or organize, making the todo list unnecessary for this straightforward task.\n</reasoning>\n</example>\n\n## Task States and Management\n\n1. **Task States**: Use these states to track progress:\n   - pending: Task not yet started\n   - in_progress: Currently working on (limit to ONE task at a time)\n   - completed: Task finished successfully\n\n2. **Task Management**:\n   - Update task status in real-time as you work\n   - Mark tasks complete IMMEDIATELY after finishing (don't batch completions)\n   - Only have ONE task in_progress at any time\n   - Complete current tasks before starting new ones\n   - Remove tasks that are no longer relevant from the list entirely\n\n3. **Task Completion Requirements**:\n   - ONLY mark a task as completed when you have FULLY accomplished it\n   - If you encounter errors, blockers, or cannot finish, keep the task as in_progress\n   - When blocked, create a new task describing what needs to be resolved\n   - Never mark a task as completed if:\n     - Tests are failing\n     - Implementation is partial\n     - You encountered unresolved errors\n     - You couldn't find necessary files or dependencies\n\n4. **Task Breakdown**:\n   - Create specific, actionable items\n   - Break complex tasks into smaller, manageable steps\n   - Use clear, descriptive task names\n\nWhen in doubt, use this tool. Being proactive with task management demonstrates attentiveness and ensures you complete all requirements successfully.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "todos": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "content": {
                      "type": "string",
                      "minLength": 1
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "pending",
                        "in_progress",
                        "completed"
                      ]
                    },
                    "priority": {
                      "type": "string",
                      "enum": [
                        "high",
                        "medium",
                        "low"
                      ]
                    },
                    "id": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "content",
                    "status",
                    "priority",
                    "id"
                  ],
                  "additionalProperties": false
                },
                "description": "The updated todo list"
              }
            },
            "required": [
              "todos"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "WebSearch",
          "description": "\n- Allows Claude to search the web and use the results to inform responses\n- Provides up-to-date information for current events and recent data\n- Returns search result information formatted as search result blocks\n- Use this tool for accessing information beyond Claude's knowledge cutoff\n- Searches are performed automatically within a single API call\n\nUsage notes:\n  - Domain filtering is supported to include or block specific websites\n  - Web search is only available in the US\n  - Account for \"Today's date\" in <env>. For example, if <env> says \"Today's date: 2025-07-01\", and the user wants the latest docs, do not use 2024 in the search query. Use 2025.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "minLength": 2,
                "description": "The search query to use"
              },
              "allowed_domains": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Only include search results from these domains"
              },
              "blocked_domains": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Never include search results from these domains"
              }
            },
            "required": [
              "query"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        }
      ],
      "responseStructure": {
        "type": "object",
        "keys": [
          "id",
          "object",
          "created",
          "model",
          "choices",
          "usage",
          "stats",
          "system_fingerprint"
        ],
        "hasChoices": true,
        "hasContent": false,
        "hasUsage": true,
        "choicesCount": 1,
        "firstChoice": {
          "hasMessage": true,
          "hasToolCalls": false,
          "finishReason": "stop"
        }
      },
      "parsingAttempts": [
        "json_format",
        "function_call",
        "action_format",
        "natural_language"
      ]
    }
  },
  {
    "timestamp": "2025-08-10T06:37:46.488Z",
    "requestId": "session_1754804126703_ixall6oy5:conv_1754804126703_sm1ur5dvo:1:1754807853845:wfde",
    "provider": "lmstudio",
    "model": "gpt-oss-20b-mlx",
    "endpoint": "localhost:1234",
    "failureType": "text_instead_of_tools",
    "originalResponse": {
      "id": "chatcmpl-2y18ogmanfrad5cernwkd",
      "object": "chat.completion",
      "created": 1754807853,
      "model": "gpt-oss-20b-mlx",
      "choices": [
        {
          "index": 0,
          "logprobs": null,
          "finish_reason": "stop",
          "message": {
            "role": "assistant",
            "content": "The user says \"继续\" meaning continue. We need context: previous conversation? There's no prior messages except system and developer. So user just says \"继续\" meaning continue. Likely they want to proceed with some task? But we have no instruction. Maybe the user wants us to continue a previous plan or code? We need to ask clarifying question. But guidelines: we should respond with a helpful answer. Since no context, maybe they want us to continue the previous plan? But we don't have a plan. We can ask for clarification: \"What would you like to continue?\" But maybe they want us to proceed with the next step of some task. We can ask for more details.\n\nThus respond: \"Sure, could you let me know what you'd like to continue with?\"好的，请告诉我您想继续做什么？  \n- 是要继续之前的代码实现、调试还是其他任务？  \n- 如果有具体文件或功能点，请提供相关信息，我会马上帮您推进。"
          }
        }
      ],
      "usage": {
        "prompt_tokens": 12435,
        "completion_tokens": 203,
        "total_tokens": 12638
      },
      "stats": {},
      "system_fingerprint": "gpt-oss-20b-mlx"
    },
    "expectedFormat": "openai",
    "errorMessage": "All parsing strategies failed",
    "responseAnalysis": {
      "hasToolCalls": false,
      "hasContent": true,
      "contentLength": 807,
      "contentPreview": "The user says \"继续\" meaning continue. We need context: previous conversation? There's no prior messages except system and developer. So user just says \"继续\" meaning continue. Likely they want to proceed",
      "finishReason": "stop",
      "toolCallPatterns": []
    },
    "debugInfo": {
      "requestTools": [
        {
          "name": "Task",
          "description": "Launch a new agent to handle complex, multi-step tasks autonomously.\n\nAvailable agent types and the tools they have access to:\n- general-purpose: General-purpose agent for researching complex questions, searching for code, and executing multi-step tasks. When you are searching for a keyword or file and are not confident that you will find the right match in the first few tries use this agent to perform the search for you. (Tools: *)\n- code-refactorer: Use this agent when you need to improve existing code structure, readability, or maintainability without changing functionality. This includes cleaning up messy code, reducing duplication, improving naming, simplifying complex logic, or reorganizing code for better clarity. Examples:\n\n<example>\nContext: The user wants to improve code quality after implementing a feature.\nuser: \"I just finished implementing the user authentication system. Can you help clean it up?\"\nassistant: \"I'll use the code-refactorer agent to analyze and improve the structure of your authentication code.\"\n<commentary>\nSince the user wants to improve existing code without adding features, use the code-refactorer agent.\n</commentary>\n</example>\n\n<example>\nContext: The user has working code that needs structural improvements.\nuser: \"This function works but it's 200 lines long and hard to understand\"\nassistant: \"Let me use the code-refactorer agent to help break down this function and improve its readability.\"\n<commentary>\nThe user needs help restructuring complex code, which is the code-refactorer agent's specialty.\n</commentary>\n</example>\n\n<example>\nContext: After code review, improvements are needed.\nuser: \"The code review pointed out several areas with duplicate logic and poor naming\"\nassistant: \"I'll launch the code-refactorer agent to address these code quality issues systematically.\"\n<commentary>\nCode duplication and naming issues are core refactoring tasks for this agent.\n</commentary>\n</example> (Tools: Edit, MultiEdit, Write, NotebookEdit, Grep, LS, Read)\n- project-task-planner: Use this agent when you need to create a comprehensive development task list from a Product Requirements Document (PRD). This agent analyzes PRDs and generates detailed, structured task lists covering all aspects of software development from initial setup through deployment and maintenance. Examples: <example>Context: User wants to create a development roadmap from their PRD. user: \"I have a PRD for a new e-commerce platform. Can you create a task list?\" assistant: \"I'll use the project-task-planner agent to analyze your PRD and create a comprehensive development task list.\" <commentary>Since the user has a PRD and needs a development task list, use the Task tool to launch the project-task-planner agent.</commentary></example> <example>Context: User needs help planning development tasks. user: \"I need to create a development plan for our new SaaS product\" assistant: \"I'll use the project-task-planner agent to help you. First, I'll need to see your Product Requirements Document (PRD).\" <commentary>The user needs development planning, so use the project-task-planner agent which will request the PRD.</commentary></example> (Tools: Task, Bash, Edit, MultiEdit, Write, NotebookEdit, Grep, LS, Read, ExitPlanMode, TodoWrite, WebSearch)\n- vibe-coding-coach: Use this agent when users want to build applications through conversation, focusing on the vision and feel of their app rather than technical implementation details. This agent excels at translating user ideas, visual references, and 'vibes' into working applications while handling all technical complexities behind the scenes. <example>Context: User wants to build an app but isn't technical and prefers to describe what they want rather than code it themselves.\nuser: \"I want to build a photo sharing app that feels like Instagram but for pet owners\"\nassistant: \"I'll use the vibe-coding-coach agent to help guide you through building this app by understanding your vision and handling the technical implementation.\"\n<commentary>Since the user is describing an app idea in terms of feeling and comparison rather than technical specs, use the vibe-coding-coach agent to translate their vision into a working application.</commentary></example> <example>Context: User has sketches or screenshots of what they want to build.\nuser: \"Here's a screenshot of an app I like. Can we build something similar but for tracking workouts?\"\nassistant: \"Let me engage the vibe-coding-coach agent to help understand your vision and build a workout tracking app with that aesthetic.\"\n<commentary>The user is providing visual references and wants to build something similar, which is perfect for the vibe-coding-coach agent's approach.</commentary></example> (Tools: *)\n- debug-system-architect: Use this agent when you need to establish a comprehensive debug logging system for a project. This includes setting up log directories, implementing node-level tracing, creating time-based test records, establishing replay mechanisms, and documenting debug rules. Example: <example> Context: User is setting up a new project and wants to implement proper debugging infrastructure from the start. user: \"Please help me set up a debug system for my new API router project\" <commentary> Since the user is requesting debug system setup, use the debug-system-architect agent to analyze the project and implement comprehensive logging and tracing mechanisms. </commentary> </example> <example> Context: User encounters intermittent issues in their routing system and needs better visibility. user: \"I'm having trouble tracking down why some requests fail intermittently\" <commentary> Since the user needs better debugging visibility for intermittent issues, use the debug-system-architect agent to implement node-level tracing and replay mechanisms. </commentary> </example> (Tools: *)\n- code-risk-auditor: Use this agent when you need to perform comprehensive code risk assessment and identify potential architectural issues in your codebase. Examples: <example>Context: The user has just completed a major refactoring and wants to ensure no hardcoded values or fallback mechanisms were introduced. user: \"I just finished refactoring the routing system, can you check for any code risks?\" assistant: \"I'll use the code-risk-auditor agent to perform a comprehensive risk assessment of your routing system changes.\"</example> <example>Context: Before a major release, the user wants to clean up technical debt and ensure code quality. user: \"We're preparing for v2.0 release, I need a full code audit\" assistant: \"Let me launch the code-risk-auditor agent to identify hardcoding, fallback risks, outdated tests, and duplicate implementations across the entire codebase.\"</example> <example>Context: The user notices inconsistent behavior and suspects duplicate implementations. user: \"The same feature seems to be implemented in multiple places, causing bugs\" assistant: \"I'll use the code-risk-auditor agent to scan for duplicate implementations and provide a consolidation plan.\"</example> (Tools: *)\n- security-auditor: Use this agent when you need to perform a comprehensive security audit of a codebase, identify vulnerabilities, and generate a detailed security report with actionable remediation steps. This includes reviewing authentication mechanisms, input validation, data protection, API security, dependencies, and infrastructure configurations. Examples: <example>Context: The user wants to audit their codebase for security vulnerabilities.\nuser: \"Can you perform a security audit of my application?\"\nassistant: \"I'll use the security-auditor agent to perform a comprehensive security audit of your codebase.\"\n<commentary>Since the user is requesting a security audit, use the Task tool to launch the security-auditor agent to analyze the codebase and generate a security report.</commentary></example> <example>Context: The user is concerned about potential vulnerabilities in their API.\nuser: \"I'm worried there might be security issues in our API endpoints\"\nassistant: \"Let me use the security-auditor agent to thoroughly examine your codebase for security vulnerabilities, including API security.\"\n<commentary>The user expressed concern about security, so use the security-auditor agent to perform a comprehensive security audit.</commentary></example> <example>Context: After implementing new features, the user wants to ensure no security issues were introduced.\nuser: \"We just added user authentication to our app. Can you check if it's secure?\"\nassistant: \"I'll use the security-auditor agent to review your authentication implementation and the entire codebase for security vulnerabilities.\"\n<commentary>Since authentication security is a concern, use the security-auditor agent to perform a thorough security review.</commentary></example> (Tools: Task, Bash, Edit, MultiEdit, Write, NotebookEdit)\n- project-memory-manager: Use this agent when you need to manage project-specific memory entries, create project documentation, or organize project knowledge. This includes creating project summaries, documenting project decisions, tracking project progress, and maintaining project-specific knowledge bases. <example>Context: User wants to document a project decision or create project documentation. user: \"请为我们的新项目创建一个内存管理系统的文档\" assistant: \"我将使用 project-memory-manager agent 来创建这个项目文档\" <commentary>Since the user needs project documentation, use the project-memory-manager agent to create project-specific memory entries.</commentary></example> <example>Context: User wants to track project progress or decisions. user: \"我们需要记录这个项目的关键决策点\" assistant: \"让我使用 project-memory-manager agent 来记录这些项目决策\" <commentary>Since this is project tracking, use the project-memory-manager agent to create decision-type memory entries.</commentary></example> (Tools: *)\n- rules-architect: Use this agent when you need to analyze project architecture and establish comprehensive rule management systems. Examples: <example>Context: User wants to organize project rules and create a structured rule management system. user: \"I need to reorganize our project rules and create a better structure for managing coding standards, file organization, and testing protocols\" assistant: \"I'll use the rules-architect agent to analyze the current project structure and establish a comprehensive rule management system with proper categorization and organization.\"</example> <example>Context: Project has grown complex and needs better rule organization. user: \"Our CLAUDE.md file is getting too large and we need to break down rules into manageable categories\" assistant: \"Let me call the rules-architect agent to create a structured .claude/rules system that will organize all project rules into logical categories.\"</example> (Tools: *)\n- frontend-designer: Use this agent when you need to convert design mockups, wireframes, or visual concepts into detailed technical specifications and implementation guides for frontend development. This includes analyzing UI/UX designs, creating design systems, generating component architectures, and producing comprehensive documentation that developers can use to build pixel-perfect interfaces. Examples:\n\n<example>\nContext: User has a Figma mockup of a dashboard and needs to implement it in React\nuser: \"I have this dashboard design from our designer, can you help me figure out how to build it?\"\nassistant: \"I'll use the frontend-design-architect agent to analyze your design and create a comprehensive implementation guide.\"\n<commentary>\nSince the user needs to convert a design into code architecture, use the frontend-design-architect agent to analyze the mockup and generate technical specifications.\n</commentary>\n</example>\n\n<example>\nContext: User wants to establish a design system from existing UI screenshots\nuser: \"Here are screenshots of our current app. We need to extract a consistent design system from these.\"\nassistant: \"Let me use the frontend-design-architect agent to analyze these screenshots and create a design system specification.\"\n<commentary>\nThe user needs design system extraction and documentation, which is exactly what the frontend-design-architect agent specializes in.\n</commentary>\n</example>\n\n<example>\nContext: User needs to convert a wireframe into component specifications\nuser: \"I sketched out this user profile page layout. How should I structure the components?\"\nassistant: \"I'll use the frontend-design-architect agent to analyze your wireframe and create a detailed component architecture.\"\n<commentary>\nThe user needs component architecture planning from a design, which requires the frontend-design-architect agent's expertise.\n</commentary>\n</example> (Tools: *)\n- content-writer: Use this agent when you need to create compelling, informative content that explains complex topics in simple terms. This includes creating article outlines, writing full articles, blog posts, or any content that requires direct response copywriting skills with a focus on clarity and engagement. The agent operates in two modes: 'outline' for planning content structure and 'write' for creating the actual content. Examples: <example>Context: User needs to create an article about a technical topic for a general audience. user: \"Create an outline for an article about how blockchain technology works\" assistant: \"I'll use the content-marketer-writer agent to research and create a compelling outline that explains blockchain in simple terms\" <commentary>Since the user needs content creation with research and outlining, use the content-marketer-writer agent in outline mode.</commentary></example> <example>Context: User has an outline and needs to write the full article. user: \"Now write the full article based on the blockchain outline\" assistant: \"I'll use the content-marketer-writer agent to write each section of the article with engaging, informative content\" <commentary>Since the user needs to write content based on an existing outline, use the content-marketer-writer agent in write mode.</commentary></example> (Tools: *)\n- test-runner: Use this agent to run and manage tests according to the global and project-specific testing rules. This includes executing test scripts, documenting test results, and helping to diagnose issues following the standard pipeline. <example>Context: User wants to run all functional tests. user: \"运行所有功能测试\" assistant: \"我将使用 test-runner agent 来执行所有功能测试\" <commentary>Since the user wants to run tests by category, use the test-runner agent.</commentary></example> <example>Context: User wants to verify a bug fix. user: \"我修复了一个bug，帮我验证一下\" assistant: \"让我使用 test-runner agent 来执行对应的修复验证测试\" <commentary>The user needs to verify a fix, which is a core task for the test-runner agent.</commentary></example> (Tools: *)\n- in-depth-research-analyst: Use this agent when you need to conduct comprehensive research reports with in-depth web mining, data analysis, and visualization. This includes industry analysis, market research, competitive intelligence, and trend forecasting with accurate data from authoritative sources. <example>Context: User wants a comprehensive industry analysis report. user: \"请对人工智能芯片市场进行深入调研，包括主要厂商、市场份额和增长趋势\" assistant: \"我将使用 in-depth-research-analyst agent 来进行这项深入的市场调研并生成可视化报告\" <commentary>Since the user needs a comprehensive industry analysis with data visualization, use the in-depth-research-analyst agent to conduct thorough research and create an integrated report.</commentary></example> <example>Context: User wants market research with accurate data and visualizations. user: \"我们需要一份关于电动汽车充电基础设施的深度报告，包含数据图表\" assistant: \"让我使用 in-depth-research-analyst agent 来收集准确数据并生成图文并茂的分析报告\" <commentary>Since this requires market research with data accuracy and visualizations, use the in-depth-research-analyst agent to create a comprehensive report.</commentary></example> (Tools: *)\n- prd-writer: Use this agent when you need to create a comprehensive Product Requirements Document (PRD) for a software project or feature. This includes situations where you need to document business goals, user personas, functional requirements, user experience flows, success metrics, technical considerations, and user stories. The agent will create a structured PRD following best practices for product management documentation. Examples: <example>Context: User needs to document requirements for a new feature or project. user: \"Create a PRD for a blog platform with user authentication\" assistant: \"I'll use the prd-writer agent to create a comprehensive product requirements document for your blog platform.\" <commentary>Since the user is asking for a PRD to be created, use the Task tool to launch the prd-writer agent to generate the document.</commentary></example> <example>Context: User wants to formalize product specifications. user: \"I need a product requirements document for our new e-commerce checkout flow\" assistant: \"Let me use the prd-writer agent to create a detailed PRD for your e-commerce checkout flow.\" <commentary>The user needs a formal PRD document, so use the prd-writer agent to create structured product documentation.</commentary></example> (Tools: Task, Bash, Grep, LS, Read, Write, WebSearch, Glob)\n- pipeline-debug-universal: Use this agent when you need to implement comprehensive debug hooks and testing infrastructure for ANY pipeline system - whether it's API routing, data processing, CI/CD workflows, or transformation pipelines. This agent specializes in creating universal debug architectures that work across different pipeline types with data capture, replay capabilities, and systematic testing matrices. Examples: <example>Context: User is working on a multi-provider API routing system and needs to add debug capabilities to track data flow through each pipeline step. user: \"I need to add debug hooks to our routing pipeline so we can capture and replay data at each step\" assistant: \"I'll use the pipeline-debug-universal agent to design a comprehensive debug infrastructure with data capture and replay capabilities\" <commentary>Since the user needs pipeline debugging infrastructure, use the pipeline-debug-universal agent to create debug hooks and testing matrices.</commentary></example> <example>Context: User has a complex data transformation pipeline and wants to build systematic testing for each stage and provider. user: \"Our data processing pipeline has issues and we need better testing infrastructure to isolate problems at each step\" assistant: \"Let me use the pipeline-debug-universal agent to create a complete testing matrix and debug system\" <commentary>Since the user needs systematic pipeline testing infrastructure, use the pipeline-debug-universal agent to architect the testing system.</commentary></example> <example>Context: User is building a CI/CD pipeline and needs to implement debug capabilities for tracking deployment issues. user: \"Our deployment pipeline fails randomly and we can't reproduce the issues consistently\" assistant: \"I'll deploy the pipeline-debug-universal agent to create comprehensive debug hooks and replay capabilities for your CI/CD pipeline\" <commentary>Since the user needs debug infrastructure for a deployment pipeline, use the pipeline-debug-universal agent to design the debug system.</commentary></example> (Tools: *)\n\nWhen using the Task tool, you must specify a subagent_type parameter to select which agent type to use.\n\n\n\nWhen NOT to use the Agent tool:\n- If you want to read a specific file path, use the Read or Glob tool instead of the Agent tool, to find the match more quickly\n- If you are searching for a specific class definition like \"class Foo\", use the Glob tool instead, to find the match more quickly\n- If you are searching for code within a specific file or set of 2-3 files, use the Read tool instead of the Agent tool, to find the match more quickly\n- Other tasks that are not related to the agent descriptions above\n\n\nUsage notes:\n1. Launch multiple agents concurrently whenever possible, to maximize performance; to do that, use a single message with multiple tool uses\n2. When the agent is done, it will return a single message back to you. The result returned by the agent is not visible to the user. To show the user the result, you should send a text message back to the user with a concise summary of the result.\n3. Each agent invocation is stateless. You will not be able to send additional messages to the agent, nor will the agent be able to communicate with you outside of its final report. Therefore, your prompt should contain a highly detailed task description for the agent to perform autonomously and you should specify exactly what information the agent should return back to you in its final and only message to you.\n4. The agent's outputs should generally be trusted\n5. Clearly tell the agent whether you expect it to write code or just to do research (search, file reads, web fetches, etc.), since it is not aware of the user's intent\n6. If the agent description mentions that it should be used proactively, then you should try your best to use it without the user having to ask for it first. Use your judgement.\n\nExample usage:\n\n<example_agent_descriptions>\n\"code-reviewer\": use this agent after you are done writing a signficant piece of code\n\"greeting-responder\": use this agent when to respond to user greetings with a friendly joke\n</example_agent_description>\n\n<example>\nuser: \"Please write a function that checks if a number is prime\"\nassistant: Sure let me write a function that checks if a number is prime\nassistant: First let me use the Write tool to write a function that checks if a number is prime\nassistant: I'm going to use the Write tool to write the following code:\n<code>\nfunction isPrime(n) {\n  if (n <= 1) return false\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n</code>\n<commentary>\nSince a signficant piece of code was written and the task was completed, now use the code-reviewer agent to review the code\n</commentary>\nassistant: Now let me use the code-reviewer agent to review the code\nassistant: Uses the Task tool to launch the with the code-reviewer agent\n</example>\n\n<example>\nuser: \"Hello\"\n<commentary>\nSince the user is greeting, use the greeting-responder agent to respond with a friendly joke\n</commentary>\nassistant: \"I'm going to use the Task tool to launch the with the greeting-responder agent\"\n</example>\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "description": {
                "type": "string",
                "description": "A short (3-5 word) description of the task"
              },
              "prompt": {
                "type": "string",
                "description": "The task for the agent to perform"
              },
              "subagent_type": {
                "type": "string",
                "description": "The type of specialized agent to use for this task"
              }
            },
            "required": [
              "description",
              "prompt",
              "subagent_type"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Bash",
          "description": "Executes a given bash command in a persistent shell session with optional timeout, ensuring proper handling and security measures.\n\nBefore executing the command, please follow these steps:\n\n1. Directory Verification:\n   - If the command will create new directories or files, first use the LS tool to verify the parent directory exists and is the correct location\n   - For example, before running \"mkdir foo/bar\", first use LS to check that \"foo\" exists and is the intended parent directory\n\n2. Command Execution:\n   - Always quote file paths that contain spaces with double quotes (e.g., cd \"path with spaces/file.txt\")\n   - Examples of proper quoting:\n     - cd \"/Users/name/My Documents\" (correct)\n     - cd /Users/name/My Documents (incorrect - will fail)\n     - python \"/path/with spaces/script.py\" (correct)\n     - python /path/with spaces/script.py (incorrect - will fail)\n   - After ensuring proper quoting, execute the command.\n   - Capture the output of the command.\n\nUsage notes:\n  - The command argument is required.\n  - You can specify an optional timeout in milliseconds (up to 600000ms / 10 minutes). If not specified, commands will timeout after 120000ms (2 minutes).\n  - It is very helpful if you write a clear, concise description of what this command does in 5-10 words.\n  - If the output exceeds 30000 characters, output will be truncated before being returned to you.\n  - VERY IMPORTANT: You MUST avoid using search commands like `find` and `grep`. Instead use Grep, Glob, or Task to search. You MUST avoid read tools like `cat`, `head`, `tail`, and `ls`, and use Read and LS to read files.\n - If you _still_ need to run `grep`, STOP. ALWAYS USE ripgrep at `rg` first, which all ${PRODUCT_NAME} users have pre-installed.\n  - When issuing multiple commands, use the ';' or '&&' operator to separate them. DO NOT use newlines (newlines are ok in quoted strings).\n  - Try to maintain your current working directory throughout the session by using absolute paths and avoiding usage of `cd`. You may use `cd` if the User explicitly requests it.\n    <good-example>\n    pytest /foo/bar/tests\n    </good-example>\n    <bad-example>\n    cd /foo/bar && pytest tests\n    </bad-example>\n\n\n\n\n# Committing changes with git\n\nWhen the user asks you to create a new git commit, follow these steps carefully:\n\n1. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following bash commands in parallel, each using the Bash tool:\n  - Run a git status command to see all untracked files.\n  - Run a git diff command to see both staged and unstaged changes that will be committed.\n  - Run a git log command to see recent commit messages, so that you can follow this repository's commit message style.\n2. Analyze all staged changes (both previously staged and newly added) and draft a commit message:\n  - Summarize the nature of the changes (eg. new feature, enhancement to an existing feature, bug fix, refactoring, test, docs, etc.). Ensure the message accurately reflects the changes and their purpose (i.e. \"add\" means a wholly new feature, \"update\" means an enhancement to an existing feature, \"fix\" means a bug fix, etc.).\n  - Check for any sensitive information that shouldn't be committed\n  - Draft a concise (1-2 sentences) commit message that focuses on the \"why\" rather than the \"what\"\n  - Ensure it accurately reflects the changes and their purpose\n3. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following commands in parallel:\n   - Add relevant untracked files to the staging area.\n   - Create the commit with a message ending with:\n   🤖 Generated with [Claude Code](https://claude.ai/code)\n\n   Co-Authored-By: Claude <noreply@anthropic.com>\n   - Run git status to make sure the commit succeeded.\n4. If the commit fails due to pre-commit hook changes, retry the commit ONCE to include these automated changes. If it fails again, it usually means a pre-commit hook is preventing the commit. If the commit succeeds but you notice that files were modified by the pre-commit hook, you MUST amend your commit to include them.\n\nImportant notes:\n- NEVER update the git config\n- NEVER run additional commands to read or explore code, besides git bash commands\n- NEVER use the TodoWrite or Task tools\n- DO NOT push to the remote repository unless the user explicitly asks you to do so\n- IMPORTANT: Never use git commands with the -i flag (like git rebase -i or git add -i) since they require interactive input which is not supported.\n- If there are no changes to commit (i.e., no untracked files and no modifications), do not create an empty commit\n- In order to ensure good formatting, ALWAYS pass the commit message via a HEREDOC, a la this example:\n<example>\ngit commit -m \"$(cat <<'EOF'\n   Commit message here.\n\n   🤖 Generated with [Claude Code](https://claude.ai/code)\n\n   Co-Authored-By: Claude <noreply@anthropic.com>\n   EOF\n   )\"\n</example>\n\n# Creating pull requests\nUse the gh command via the Bash tool for ALL GitHub-related tasks including working with issues, pull requests, checks, and releases. If given a Github URL use the gh command to get the information needed.\n\nIMPORTANT: When the user asks you to create a pull request, follow these steps carefully:\n\n1. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following bash commands in parallel using the Bash tool, in order to understand the current state of the branch since it diverged from the main branch:\n   - Run a git status command to see all untracked files\n   - Run a git diff command to see both staged and unstaged changes that will be committed\n   - Check if the current branch tracks a remote branch and is up to date with the remote, so you know if you need to push to the remote\n   - Run a git log command and `git diff [base-branch]...HEAD` to understand the full commit history for the current branch (from the time it diverged from the base branch)\n2. Analyze all changes that will be included in the pull request, making sure to look at all relevant commits (NOT just the latest commit, but ALL commits that will be included in the pull request!!!), and draft a pull request summary\n3. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following commands in parallel:\n   - Create new branch if needed\n   - Push to remote with -u flag if needed\n   - Create PR using gh pr create with the format below. Use a HEREDOC to pass the body to ensure correct formatting.\n<example>\ngh pr create --title \"the pr title\" --body \"$(cat <<'EOF'\n## Summary\n<1-3 bullet points>\n\n## Test plan\n[Checklist of TODOs for testing the pull request...]\n\n🤖 Generated with [Claude Code](https://claude.ai/code)\nEOF\n)\"\n</example>\n\nImportant:\n- NEVER update the git config\n- DO NOT use the TodoWrite or Task tools\n- Return the PR URL when you're done, so the user can see it\n\n# Other common operations\n- View comments on a Github PR: gh api repos/foo/bar/pulls/123/comments",
          "input_schema": {
            "type": "object",
            "properties": {
              "command": {
                "type": "string",
                "description": "The command to execute"
              },
              "timeout": {
                "type": "number",
                "description": "Optional timeout in milliseconds (max 600000)"
              },
              "description": {
                "type": "string",
                "description": " Clear, concise description of what this command does in 5-10 words. Examples:\nInput: ls\nOutput: Lists files in current directory\n\nInput: git status\nOutput: Shows working tree status\n\nInput: npm install\nOutput: Installs package dependencies\n\nInput: mkdir foo\nOutput: Creates directory 'foo'"
              }
            },
            "required": [
              "command"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Glob",
          "description": "- Fast file pattern matching tool that works with any codebase size\n- Supports glob patterns like \"**/*.js\" or \"src/**/*.ts\"\n- Returns matching file paths sorted by modification time\n- Use this tool when you need to find files by name patterns\n- When you are doing an open ended search that may require multiple rounds of globbing and grepping, use the Agent tool instead\n- You have the capability to call multiple tools in a single response. It is always better to speculatively perform multiple searches as a batch that are potentially useful.",
          "input_schema": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "The glob pattern to match files against"
              },
              "path": {
                "type": "string",
                "description": "The directory to search in. If not specified, the current working directory will be used. IMPORTANT: Omit this field to use the default directory. DO NOT enter \"undefined\" or \"null\" - simply omit it for the default behavior. Must be a valid directory path if provided."
              }
            },
            "required": [
              "pattern"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Grep",
          "description": "A powerful search tool built on ripgrep\n\n  Usage:\n  - ALWAYS use Grep for search tasks. NEVER invoke `grep` or `rg` as a Bash command. The Grep tool has been optimized for correct permissions and access.\n  - Supports full regex syntax (e.g., \"log.*Error\", \"function\\s+\\w+\")\n  - Filter files with glob parameter (e.g., \"*.js\", \"**/*.tsx\") or type parameter (e.g., \"js\", \"py\", \"rust\")\n  - Output modes: \"content\" shows matching lines, \"files_with_matches\" shows only file paths (default), \"count\" shows match counts\n  - Use Task tool for open-ended searches requiring multiple rounds\n  - Pattern syntax: Uses ripgrep (not grep) - literal braces need escaping (use `interface\\{\\}` to find `interface{}` in Go code)\n  - Multiline matching: By default patterns match within single lines only. For cross-line patterns like `struct \\{[\\s\\S]*?field`, use `multiline: true`\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "The regular expression pattern to search for in file contents"
              },
              "path": {
                "type": "string",
                "description": "File or directory to search in (rg PATH). Defaults to current working directory."
              },
              "glob": {
                "type": "string",
                "description": "Glob pattern to filter files (e.g. \"*.js\", \"*.{ts,tsx}\") - maps to rg --glob"
              },
              "output_mode": {
                "type": "string",
                "enum": [
                  "content",
                  "files_with_matches",
                  "count"
                ],
                "description": "Output mode: \"content\" shows matching lines (supports -A/-B/-C context, -n line numbers, head_limit), \"files_with_matches\" shows file paths (supports head_limit), \"count\" shows match counts (supports head_limit). Defaults to \"files_with_matches\"."
              },
              "-B": {
                "type": "number",
                "description": "Number of lines to show before each match (rg -B). Requires output_mode: \"content\", ignored otherwise."
              },
              "-A": {
                "type": "number",
                "description": "Number of lines to show after each match (rg -A). Requires output_mode: \"content\", ignored otherwise."
              },
              "-C": {
                "type": "number",
                "description": "Number of lines to show before and after each match (rg -C). Requires output_mode: \"content\", ignored otherwise."
              },
              "-n": {
                "type": "boolean",
                "description": "Show line numbers in output (rg -n). Requires output_mode: \"content\", ignored otherwise."
              },
              "-i": {
                "type": "boolean",
                "description": "Case insensitive search (rg -i)"
              },
              "type": {
                "type": "string",
                "description": "File type to search (rg --type). Common types: js, py, rust, go, java, etc. More efficient than include for standard file types."
              },
              "head_limit": {
                "type": "number",
                "description": "Limit output to first N lines/entries, equivalent to \"| head -N\". Works across all output modes: content (limits output lines), files_with_matches (limits file paths), count (limits count entries). When unspecified, shows all results from ripgrep."
              },
              "multiline": {
                "type": "boolean",
                "description": "Enable multiline mode where . matches newlines and patterns can span lines (rg -U --multiline-dotall). Default: false."
              }
            },
            "required": [
              "pattern"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "LS",
          "description": "Lists files and directories in a given path. The path parameter must be an absolute path, not a relative path. You can optionally provide an array of glob patterns to ignore with the ignore parameter. You should generally prefer the Glob and Grep tools, if you know which directories to search.",
          "input_schema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "The absolute path to the directory to list (must be absolute, not relative)"
              },
              "ignore": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of glob patterns to ignore"
              }
            },
            "required": [
              "path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "ExitPlanMode",
          "description": "Use this tool when you are in plan mode and have finished presenting your plan and are ready to code. This will prompt the user to exit plan mode.\nIMPORTANT: Only use this tool when the task requires planning the implementation steps of a task that requires writing code. For research tasks where you're gathering information, searching files, reading files or in general trying to understand the codebase - do NOT use this tool.\n\nEg.\n1. Initial task: \"Search for and understand the implementation of vim mode in the codebase\" - Do not use the exit plan mode tool because you are not planning the implementation steps of a task.\n2. Initial task: \"Help me implement yank mode for vim\" - Use the exit plan mode tool after you have finished planning the implementation steps of the task.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "plan": {
                "type": "string",
                "description": "The plan you came up with, that you want to run by the user for approval. Supports markdown. The plan should be pretty concise."
              }
            },
            "required": [
              "plan"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Read",
          "description": "Reads a file from the local filesystem. You can access any file directly by using this tool.\nAssume this tool is able to read all files on the machine. If the User provides a path to a file assume that path is valid. It is okay to read a file that does not exist; an error will be returned.\n\nUsage:\n- The file_path parameter must be an absolute path, not a relative path\n- By default, it reads up to 2000 lines starting from the beginning of the file\n- You can optionally specify a line offset and limit (especially handy for long files), but it's recommended to read the whole file by not providing these parameters\n- Any lines longer than 2000 characters will be truncated\n- Results are returned using cat -n format, with line numbers starting at 1\n- This tool allows Claude Code to read images (eg PNG, JPG, etc). When reading an image file the contents are presented visually as Claude Code is a multimodal LLM.\n- This tool can read PDF files (.pdf). PDFs are processed page by page, extracting both text and visual content for analysis.\n- For Jupyter notebooks (.ipynb files), use the NotebookRead instead\n- You have the capability to call multiple tools in a single response. It is always better to speculatively read multiple files as a batch that are potentially useful.\n- You will regularly be asked to read screenshots. If the user provides a path to a screenshot ALWAYS use this tool to view the file at the path. This tool will work with all temporary file paths like /var/folders/123/abc/T/TemporaryItems/NSIRD_screencaptureui_ZfB1tD/Screenshot.png\n- If you read a file that exists but has empty contents you will receive a system reminder warning in place of file contents.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to read"
              },
              "offset": {
                "type": "number",
                "description": "The line number to start reading from. Only provide if the file is too large to read at once"
              },
              "limit": {
                "type": "number",
                "description": "The number of lines to read. Only provide if the file is too large to read at once."
              }
            },
            "required": [
              "file_path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Edit",
          "description": "Performs exact string replacements in files.\n\nUsage:\n- You must use your `Read` tool at least once in the conversation before editing. This tool will error if you attempt an edit without reading the file.\n- When editing text from Read tool output, ensure you preserve the exact indentation (tabs/spaces) as it appears AFTER the line number prefix. The line number prefix format is: spaces + line number + tab. Everything after that tab is the actual file content to match. Never include any part of the line number prefix in the old_string or new_string.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- Only use emojis if the user explicitly requests it. Avoid adding emojis to files unless asked.\n- The edit will FAIL if `old_string` is not unique in the file. Either provide a larger string with more surrounding context to make it unique or use `replace_all` to change every instance of `old_string`.\n- Use `replace_all` for replacing and renaming strings across the file. This parameter is useful if you want to rename a variable for instance.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to modify"
              },
              "old_string": {
                "type": "string",
                "description": "The text to replace"
              },
              "new_string": {
                "type": "string",
                "description": "The text to replace it with (must be different from old_string)"
              },
              "replace_all": {
                "type": "boolean",
                "default": false,
                "description": "Replace all occurences of old_string (default false)"
              }
            },
            "required": [
              "file_path",
              "old_string",
              "new_string"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "MultiEdit",
          "description": "This is a tool for making multiple edits to a single file in one operation. It is built on top of the Edit tool and allows you to perform multiple find-and-replace operations efficiently. Prefer this tool over the Edit tool when you need to make multiple edits to the same file.\n\nBefore using this tool:\n\n1. Use the Read tool to understand the file's contents and context\n2. Verify the directory path is correct\n\nTo make multiple file edits, provide the following:\n1. file_path: The absolute path to the file to modify (must be absolute, not relative)\n2. edits: An array of edit operations to perform, where each edit contains:\n   - old_string: The text to replace (must match the file contents exactly, including all whitespace and indentation)\n   - new_string: The edited text to replace the old_string\n   - replace_all: Replace all occurences of old_string. This parameter is optional and defaults to false.\n\nIMPORTANT:\n- All edits are applied in sequence, in the order they are provided\n- Each edit operates on the result of the previous edit\n- All edits must be valid for the operation to succeed - if any edit fails, none will be applied\n- This tool is ideal when you need to make several changes to different parts of the same file\n- For Jupyter notebooks (.ipynb files), use the NotebookEdit instead\n\nCRITICAL REQUIREMENTS:\n1. All edits follow the same requirements as the single Edit tool\n2. The edits are atomic - either all succeed or none are applied\n3. Plan your edits carefully to avoid conflicts between sequential operations\n\nWARNING:\n- The tool will fail if edits.old_string doesn't match the file contents exactly (including whitespace)\n- The tool will fail if edits.old_string and edits.new_string are the same\n- Since edits are applied in sequence, ensure that earlier edits don't affect the text that later edits are trying to find\n\nWhen making edits:\n- Ensure all edits result in idiomatic, correct code\n- Do not leave the code in a broken state\n- Always use absolute file paths (starting with /)\n- Only use emojis if the user explicitly requests it. Avoid adding emojis to files unless asked.\n- Use replace_all for replacing and renaming strings across the file. This parameter is useful if you want to rename a variable for instance.\n\nIf you want to create a new file, use:\n- A new file path, including dir name if needed\n- First edit: empty old_string and the new file's contents as new_string\n- Subsequent edits: normal edit operations on the created content",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to modify"
              },
              "edits": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "old_string": {
                      "type": "string",
                      "description": "The text to replace"
                    },
                    "new_string": {
                      "type": "string",
                      "description": "The text to replace it with"
                    },
                    "replace_all": {
                      "type": "boolean",
                      "default": false,
                      "description": "Replace all occurences of old_string (default false)."
                    }
                  },
                  "required": [
                    "old_string",
                    "new_string"
                  ],
                  "additionalProperties": false
                },
                "minItems": 1,
                "description": "Array of edit operations to perform sequentially on the file"
              }
            },
            "required": [
              "file_path",
              "edits"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Write",
          "description": "Writes a file to the local filesystem.\n\nUsage:\n- This tool will overwrite the existing file if there is one at the provided path.\n- If this is an existing file, you MUST use the Read tool first to read the file's contents. This tool will fail if you did not read the file first.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- NEVER proactively create documentation files (*.md) or README files. Only create documentation files if explicitly requested by the User.\n- Only use emojis if the user explicitly requests it. Avoid writing emojis to files unless asked.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to write (must be absolute, not relative)"
              },
              "content": {
                "type": "string",
                "description": "The content to write to the file"
              }
            },
            "required": [
              "file_path",
              "content"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "NotebookRead",
          "description": "Reads a Jupyter notebook (.ipynb file) and returns all of the cells with their outputs. Jupyter notebooks are interactive documents that combine code, text, and visualizations, commonly used for data analysis and scientific computing. The notebook_path parameter must be an absolute path, not a relative path.",
          "input_schema": {
            "type": "object",
            "properties": {
              "notebook_path": {
                "type": "string",
                "description": "The absolute path to the Jupyter notebook file to read (must be absolute, not relative)"
              },
              "cell_id": {
                "type": "string",
                "description": "The ID of a specific cell to read. If not provided, all cells will be read."
              }
            },
            "required": [
              "notebook_path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "NotebookEdit",
          "description": "Completely replaces the contents of a specific cell in a Jupyter notebook (.ipynb file) with new source. Jupyter notebooks are interactive documents that combine code, text, and visualizations, commonly used for data analysis and scientific computing. The notebook_path parameter must be an absolute path, not a relative path. The cell_number is 0-indexed. Use edit_mode=insert to add a new cell at the index specified by cell_number. Use edit_mode=delete to delete the cell at the index specified by cell_number.",
          "input_schema": {
            "type": "object",
            "properties": {
              "notebook_path": {
                "type": "string",
                "description": "The absolute path to the Jupyter notebook file to edit (must be absolute, not relative)"
              },
              "cell_id": {
                "type": "string",
                "description": "The ID of the cell to edit. When inserting a new cell, the new cell will be inserted after the cell with this ID, or at the beginning if not specified."
              },
              "new_source": {
                "type": "string",
                "description": "The new source for the cell"
              },
              "cell_type": {
                "type": "string",
                "enum": [
                  "code",
                  "markdown"
                ],
                "description": "The type of the cell (code or markdown). If not specified, it defaults to the current cell type. If using edit_mode=insert, this is required."
              },
              "edit_mode": {
                "type": "string",
                "enum": [
                  "replace",
                  "insert",
                  "delete"
                ],
                "description": "The type of edit to make (replace, insert, delete). Defaults to replace."
              }
            },
            "required": [
              "notebook_path",
              "new_source"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "WebFetch",
          "description": "\n- Fetches content from a specified URL and processes it using an AI model\n- Takes a URL and a prompt as input\n- Fetches the URL content, converts HTML to markdown\n- Processes the content with the prompt using a small, fast model\n- Returns the model's response about the content\n- Use this tool when you need to retrieve and analyze web content\n\nUsage notes:\n  - IMPORTANT: If an MCP-provided web fetch tool is available, prefer using that tool instead of this one, as it may have fewer restrictions. All MCP-provided tools start with \"mcp__\".\n  - The URL must be a fully-formed valid URL\n  - HTTP URLs will be automatically upgraded to HTTPS\n  - The prompt should describe what information you want to extract from the page\n  - This tool is read-only and does not modify any files\n  - Results may be summarized if the content is very large\n  - Includes a self-cleaning 15-minute cache for faster responses when repeatedly accessing the same URL\n  - When a URL redirects to a different host, the tool will inform you and provide the redirect URL in a special format. You should then make a new WebFetch request with the redirect URL to fetch the content.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "format": "uri",
                "description": "The URL to fetch content from"
              },
              "prompt": {
                "type": "string",
                "description": "The prompt to run on the fetched content"
              }
            },
            "required": [
              "url",
              "prompt"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "TodoWrite",
          "description": "Use this tool to create and manage a structured task list for your current coding session. This helps you track progress, organize complex tasks, and demonstrate thoroughness to the user.\nIt also helps the user understand the progress of the task and overall progress of their requests.\n\n## When to Use This Tool\nUse this tool proactively in these scenarios:\n\n1. Complex multi-step tasks - When a task requires 3 or more distinct steps or actions\n2. Non-trivial and complex tasks - Tasks that require careful planning or multiple operations\n3. User explicitly requests todo list - When the user directly asks you to use the todo list\n4. User provides multiple tasks - When users provide a list of things to be done (numbered or comma-separated)\n5. After receiving new instructions - Immediately capture user requirements as todos\n6. When you start working on a task - Mark it as in_progress BEFORE beginning work. Ideally you should only have one todo as in_progress at a time\n7. After completing a task - Mark it as completed and add any new follow-up tasks discovered during implementation\n\n## When NOT to Use This Tool\n\nSkip using this tool when:\n1. There is only a single, straightforward task\n2. The task is trivial and tracking it provides no organizational benefit\n3. The task can be completed in less than 3 trivial steps\n4. The task is purely conversational or informational\n\nNOTE that you should not use this tool if there is only one trivial task to do. In this case you are better off just doing the task directly.\n\n## Examples of When to Use the Todo List\n\n<example>\nUser: I want to add a dark mode toggle to the application settings. Make sure you run the tests and build when you're done!\nAssistant: I'll help add a dark mode toggle to your application settings. Let me create a todo list to track this implementation.\n*Creates todo list with the following items:*\n1. Create dark mode toggle component in Settings page\n2. Add dark mode state management (context/store)\n3. Implement CSS-in-JS styles for dark theme\n4. Update existing components to support theme switching\n5. Run tests and build process, addressing any failures or errors that occur\n*Begins working on the first task*\n\n<reasoning>\nThe assistant used the todo list because:\n1. Adding dark mode is a multi-step feature requiring UI, state management, and styling changes\n2. The user explicitly requested tests and build be run afterward\n3. The assistant inferred that tests and build need to pass by adding \"Ensure tests and build succeed\" as the final task\n</reasoning>\n</example>\n\n<example>\nUser: Help me rename the function getCwd to getCurrentWorkingDirectory across my project\nAssistant: Let me first search through your codebase to find all occurrences of 'getCwd'.\n*Uses grep or search tools to locate all instances of getCwd in the codebase*\nAssistant: I've found 15 instances of 'getCwd' across 8 different files. Let me create a todo list to track these changes.\n*Creates todo list with specific items for each file that needs updating*\n\n<reasoning>\nThe assistant used the todo list because:\n1. First, the assistant searched to understand the scope of the task\n2. Upon finding multiple occurrences across different files, it determined this was a complex task with multiple steps\n3. The todo list helps ensure every instance is tracked and updated systematically\n4. This approach prevents missing any occurrences and maintains code consistency\n</reasoning>\n</example>\n\n\n<example>\nUser: I need to implement these features for my e-commerce site: user registration, product catalog, shopping cart, and checkout flow.\nAssistant: I'll help implement these features. First, let's add all the features to the todo list.\n*Creates a todo list breaking down each feature into specific tasks based on the project architecture*\nAssistant: Let's start with user registration. This will involve creating database models, API endpoints, and frontend forms that integrate with your existing authentication system.\n\n<reasoning>\nThe assistant used the todo list because:\n1. The user provided multiple complex features to implement in a comma separated list\n2. The todo list helps organize these large features into manageable tasks\n3. This approach allows for tracking progress across the entire implementation\n</reasoning>\n</example>\n\n<example>\nUser: Can you help optimize my React application? It's rendering slowly and has performance issues.</user>\nAssistant: I'll help optimize your React application. First, let me examine your codebase to identify potential performance bottlenecks.\n*Reviews component structure, render patterns, state management, and data fetching*\nAssistant: After analyzing your codebase, I've identified several performance issues. Let me create a todo list to track our optimization efforts.\n*Creates todo list with items like: 1) Implement memoization for expensive calculations in ProductList, 2) Add virtualization for long lists in Dashboard, 3) Optimize image loading in Gallery component, 4) Fix state update loops in ShoppingCart, 5) Review bundle size and implement code splitting*\nLet's start by implementing memoization for the expensive calculations in your ProductList component.</assistant>\n\n<reasoning>\nThe assistant used the todo list because:\n1. First, the assistant examined the codebase to identify specific performance issues\n2. Based on this analysis, it identified multiple optimization opportunities\n3. Performance optimization is a non-trivial task requiring multiple steps\n4. The todo list helps methodically track improvements across different components\n5. This systematic approach ensures all performance bottlenecks are addressed\n</reasoning>\n</example>\n\n## Examples of When NOT to Use the Todo List\n\n<example>\nUser: How do I print 'Hello World' in Python?\nAssistant: In Python, you can print \"Hello World\" with this simple code:\n\npython\nprint(\"Hello World\")\n\nThis will output the text \"Hello World\" to the console when executed.</assistant>\n\n<reasoning>\nThe assistant did not use the todo list because this is a single, trivial task that can be completed in one step. There's no need to track multiple tasks or steps for such a straightforward request.\n</reasoning>\n</example>\n\n<example>\nUser: What does the git status command do?\nAssistant: The git status command shows the current state of your working directory and staging area. It displays which changes have been staged, which haven't, and which files aren't being tracked by Git. This is a fundamental command for understanding the current state of your repository before making commits.\n\n<reasoning>\nThe assistant did not use the todo list because this is an informational request with no actual coding task to complete. The user is simply asking for an explanation, not for the assistant to perform multiple steps or tasks.\n</reasoning>\n</example>\n\n<example>\nUser: Can you add a comment to the calculateTotal function to explain what it does?\nAssistant: Sure, let me add a comment to the calculateTotal function to explain what it does.\n* Uses the Edit tool to add a comment to the calculateTotal function *\n\n<reasoning>\nThe assistant did not use the todo list because this is a single, straightforward task confined to one location in the code. Adding a comment doesn't require tracking multiple steps or systematic organization.\n</reasoning>\n</example>\n\n<example>\nUser: Run npm install for me and tell me what happens.\nAssistant: I'll run the npm install command for you.\n\n*Executes: npm install*\n\nThe command completed successfully. Here's the output:\n[Output of npm install command]\n\nAll dependencies have been installed according to your package.json file.\n\n<reasoning>\nThe assistant did not use the todo list because this is a single command execution with immediate results. There are no multiple steps to track or organize, making the todo list unnecessary for this straightforward task.\n</reasoning>\n</example>\n\n## Task States and Management\n\n1. **Task States**: Use these states to track progress:\n   - pending: Task not yet started\n   - in_progress: Currently working on (limit to ONE task at a time)\n   - completed: Task finished successfully\n\n2. **Task Management**:\n   - Update task status in real-time as you work\n   - Mark tasks complete IMMEDIATELY after finishing (don't batch completions)\n   - Only have ONE task in_progress at any time\n   - Complete current tasks before starting new ones\n   - Remove tasks that are no longer relevant from the list entirely\n\n3. **Task Completion Requirements**:\n   - ONLY mark a task as completed when you have FULLY accomplished it\n   - If you encounter errors, blockers, or cannot finish, keep the task as in_progress\n   - When blocked, create a new task describing what needs to be resolved\n   - Never mark a task as completed if:\n     - Tests are failing\n     - Implementation is partial\n     - You encountered unresolved errors\n     - You couldn't find necessary files or dependencies\n\n4. **Task Breakdown**:\n   - Create specific, actionable items\n   - Break complex tasks into smaller, manageable steps\n   - Use clear, descriptive task names\n\nWhen in doubt, use this tool. Being proactive with task management demonstrates attentiveness and ensures you complete all requirements successfully.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "todos": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "content": {
                      "type": "string",
                      "minLength": 1
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "pending",
                        "in_progress",
                        "completed"
                      ]
                    },
                    "priority": {
                      "type": "string",
                      "enum": [
                        "high",
                        "medium",
                        "low"
                      ]
                    },
                    "id": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "content",
                    "status",
                    "priority",
                    "id"
                  ],
                  "additionalProperties": false
                },
                "description": "The updated todo list"
              }
            },
            "required": [
              "todos"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "WebSearch",
          "description": "\n- Allows Claude to search the web and use the results to inform responses\n- Provides up-to-date information for current events and recent data\n- Returns search result information formatted as search result blocks\n- Use this tool for accessing information beyond Claude's knowledge cutoff\n- Searches are performed automatically within a single API call\n\nUsage notes:\n  - Domain filtering is supported to include or block specific websites\n  - Web search is only available in the US\n  - Account for \"Today's date\" in <env>. For example, if <env> says \"Today's date: 2025-07-01\", and the user wants the latest docs, do not use 2024 in the search query. Use 2025.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "minLength": 2,
                "description": "The search query to use"
              },
              "allowed_domains": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Only include search results from these domains"
              },
              "blocked_domains": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Never include search results from these domains"
              }
            },
            "required": [
              "query"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        }
      ],
      "responseStructure": {
        "type": "object",
        "keys": [
          "id",
          "object",
          "created",
          "model",
          "choices",
          "usage",
          "stats",
          "system_fingerprint"
        ],
        "hasChoices": true,
        "hasContent": false,
        "hasUsage": true,
        "choicesCount": 1,
        "firstChoice": {
          "hasMessage": true,
          "hasToolCalls": false,
          "finishReason": "stop"
        }
      },
      "parsingAttempts": [
        "json_format",
        "function_call",
        "action_format",
        "natural_language"
      ]
    }
  },
  {
    "timestamp": "2025-08-10T05:41:07.300Z",
    "requestId": "session_1754804126703_ixall6oy5:conv_1754804126703_sm1ur5dvo:18:1754804454089:vcsw",
    "provider": "lmstudio",
    "model": "gpt-oss-20b-mlx",
    "endpoint": "localhost:1234",
    "failureType": "text_instead_of_tools",
    "originalResponse": {
      "id": "chatcmpl-37665mykhk6scgtzckh7v",
      "object": "chat.completion",
      "created": 1754804454,
      "model": "gpt-oss-20b-mlx",
      "choices": [
        {
          "index": 0,
          "logprobs": null,
          "finish_reason": "stop",
          "message": {
            "role": "assistant",
            "content": "User: \"检查下我们小说要开始，还需要什么设定？我们还缺乏哪些设定？汇总的人物档案删掉，请补充缺乏的md文档\"\n\nThey mention \"我们小说\" (our novel). Need to inspect docs. There's probably a docs folder with novel? Let's search for some relevant .md maybe \"novel\" or \"人物\".<|start|>assistant<|channel|>commentary to=functions.Grep<|message|>{\"path\":\"\",\"pattern\":\"novel\",\"output_mode\":\"files_with_matches\"}"
          }
        }
      ],
      "usage": {
        "prompt_tokens": 15019,
        "completion_tokens": 108,
        "total_tokens": 15127
      },
      "stats": {},
      "system_fingerprint": "gpt-oss-20b-mlx"
    },
    "expectedFormat": "openai",
    "errorMessage": "All parsing strategies failed",
    "responseAnalysis": {
      "hasToolCalls": false,
      "hasContent": true,
      "contentLength": 346,
      "contentPreview": "User: \"检查下我们小说要开始，还需要什么设定？我们还缺乏哪些设定？汇总的人物档案删掉，请补充缺乏的md文档\"\n\nThey mention \"我们小说\" (our novel). Need to inspect docs. There's probably a docs folder with novel? Let's search for some relevant .md maybe \"n",
      "finishReason": "stop",
      "toolCallPatterns": []
    },
    "debugInfo": {
      "requestTools": [
        {
          "name": "Task",
          "description": "Launch a new agent to handle complex, multi-step tasks autonomously.\n\nAvailable agent types and the tools they have access to:\n- general-purpose: General-purpose agent for researching complex questions, searching for code, and executing multi-step tasks. When you are searching for a keyword or file and are not confident that you will find the right match in the first few tries use this agent to perform the search for you. (Tools: *)\n- code-refactorer: Use this agent when you need to improve existing code structure, readability, or maintainability without changing functionality. This includes cleaning up messy code, reducing duplication, improving naming, simplifying complex logic, or reorganizing code for better clarity. Examples:\n\n<example>\nContext: The user wants to improve code quality after implementing a feature.\nuser: \"I just finished implementing the user authentication system. Can you help clean it up?\"\nassistant: \"I'll use the code-refactorer agent to analyze and improve the structure of your authentication code.\"\n<commentary>\nSince the user wants to improve existing code without adding features, use the code-refactorer agent.\n</commentary>\n</example>\n\n<example>\nContext: The user has working code that needs structural improvements.\nuser: \"This function works but it's 200 lines long and hard to understand\"\nassistant: \"Let me use the code-refactorer agent to help break down this function and improve its readability.\"\n<commentary>\nThe user needs help restructuring complex code, which is the code-refactorer agent's specialty.\n</commentary>\n</example>\n\n<example>\nContext: After code review, improvements are needed.\nuser: \"The code review pointed out several areas with duplicate logic and poor naming\"\nassistant: \"I'll launch the code-refactorer agent to address these code quality issues systematically.\"\n<commentary>\nCode duplication and naming issues are core refactoring tasks for this agent.\n</commentary>\n</example> (Tools: Edit, MultiEdit, Write, NotebookEdit, Grep, LS, Read)\n- project-task-planner: Use this agent when you need to create a comprehensive development task list from a Product Requirements Document (PRD). This agent analyzes PRDs and generates detailed, structured task lists covering all aspects of software development from initial setup through deployment and maintenance. Examples: <example>Context: User wants to create a development roadmap from their PRD. user: \"I have a PRD for a new e-commerce platform. Can you create a task list?\" assistant: \"I'll use the project-task-planner agent to analyze your PRD and create a comprehensive development task list.\" <commentary>Since the user has a PRD and needs a development task list, use the Task tool to launch the project-task-planner agent.</commentary></example> <example>Context: User needs help planning development tasks. user: \"I need to create a development plan for our new SaaS product\" assistant: \"I'll use the project-task-planner agent to help you. First, I'll need to see your Product Requirements Document (PRD).\" <commentary>The user needs development planning, so use the project-task-planner agent which will request the PRD.</commentary></example> (Tools: Task, Bash, Edit, MultiEdit, Write, NotebookEdit, Grep, LS, Read, ExitPlanMode, TodoWrite, WebSearch)\n- vibe-coding-coach: Use this agent when users want to build applications through conversation, focusing on the vision and feel of their app rather than technical implementation details. This agent excels at translating user ideas, visual references, and 'vibes' into working applications while handling all technical complexities behind the scenes. <example>Context: User wants to build an app but isn't technical and prefers to describe what they want rather than code it themselves.\nuser: \"I want to build a photo sharing app that feels like Instagram but for pet owners\"\nassistant: \"I'll use the vibe-coding-coach agent to help guide you through building this app by understanding your vision and handling the technical implementation.\"\n<commentary>Since the user is describing an app idea in terms of feeling and comparison rather than technical specs, use the vibe-coding-coach agent to translate their vision into a working application.</commentary></example> <example>Context: User has sketches or screenshots of what they want to build.\nuser: \"Here's a screenshot of an app I like. Can we build something similar but for tracking workouts?\"\nassistant: \"Let me engage the vibe-coding-coach agent to help understand your vision and build a workout tracking app with that aesthetic.\"\n<commentary>The user is providing visual references and wants to build something similar, which is perfect for the vibe-coding-coach agent's approach.</commentary></example> (Tools: *)\n- debug-system-architect: Use this agent when you need to establish a comprehensive debug logging system for a project. This includes setting up log directories, implementing node-level tracing, creating time-based test records, establishing replay mechanisms, and documenting debug rules. Example: <example> Context: User is setting up a new project and wants to implement proper debugging infrastructure from the start. user: \"Please help me set up a debug system for my new API router project\" <commentary> Since the user is requesting debug system setup, use the debug-system-architect agent to analyze the project and implement comprehensive logging and tracing mechanisms. </commentary> </example> <example> Context: User encounters intermittent issues in their routing system and needs better visibility. user: \"I'm having trouble tracking down why some requests fail intermittently\" <commentary> Since the user needs better debugging visibility for intermittent issues, use the debug-system-architect agent to implement node-level tracing and replay mechanisms. </commentary> </example> (Tools: *)\n- code-risk-auditor: Use this agent when you need to perform comprehensive code risk assessment and identify potential architectural issues in your codebase. Examples: <example>Context: The user has just completed a major refactoring and wants to ensure no hardcoded values or fallback mechanisms were introduced. user: \"I just finished refactoring the routing system, can you check for any code risks?\" assistant: \"I'll use the code-risk-auditor agent to perform a comprehensive risk assessment of your routing system changes.\"</example> <example>Context: Before a major release, the user wants to clean up technical debt and ensure code quality. user: \"We're preparing for v2.0 release, I need a full code audit\" assistant: \"Let me launch the code-risk-auditor agent to identify hardcoding, fallback risks, outdated tests, and duplicate implementations across the entire codebase.\"</example> <example>Context: The user notices inconsistent behavior and suspects duplicate implementations. user: \"The same feature seems to be implemented in multiple places, causing bugs\" assistant: \"I'll use the code-risk-auditor agent to scan for duplicate implementations and provide a consolidation plan.\"</example> (Tools: *)\n- security-auditor: Use this agent when you need to perform a comprehensive security audit of a codebase, identify vulnerabilities, and generate a detailed security report with actionable remediation steps. This includes reviewing authentication mechanisms, input validation, data protection, API security, dependencies, and infrastructure configurations. Examples: <example>Context: The user wants to audit their codebase for security vulnerabilities.\nuser: \"Can you perform a security audit of my application?\"\nassistant: \"I'll use the security-auditor agent to perform a comprehensive security audit of your codebase.\"\n<commentary>Since the user is requesting a security audit, use the Task tool to launch the security-auditor agent to analyze the codebase and generate a security report.</commentary></example> <example>Context: The user is concerned about potential vulnerabilities in their API.\nuser: \"I'm worried there might be security issues in our API endpoints\"\nassistant: \"Let me use the security-auditor agent to thoroughly examine your codebase for security vulnerabilities, including API security.\"\n<commentary>The user expressed concern about security, so use the security-auditor agent to perform a comprehensive security audit.</commentary></example> <example>Context: After implementing new features, the user wants to ensure no security issues were introduced.\nuser: \"We just added user authentication to our app. Can you check if it's secure?\"\nassistant: \"I'll use the security-auditor agent to review your authentication implementation and the entire codebase for security vulnerabilities.\"\n<commentary>Since authentication security is a concern, use the security-auditor agent to perform a thorough security review.</commentary></example> (Tools: Task, Bash, Edit, MultiEdit, Write, NotebookEdit)\n- project-memory-manager: Use this agent when you need to manage project-specific memory entries, create project documentation, or organize project knowledge. This includes creating project summaries, documenting project decisions, tracking project progress, and maintaining project-specific knowledge bases. <example>Context: User wants to document a project decision or create project documentation. user: \"请为我们的新项目创建一个内存管理系统的文档\" assistant: \"我将使用 project-memory-manager agent 来创建这个项目文档\" <commentary>Since the user needs project documentation, use the project-memory-manager agent to create project-specific memory entries.</commentary></example> <example>Context: User wants to track project progress or decisions. user: \"我们需要记录这个项目的关键决策点\" assistant: \"让我使用 project-memory-manager agent 来记录这些项目决策\" <commentary>Since this is project tracking, use the project-memory-manager agent to create decision-type memory entries.</commentary></example> (Tools: *)\n- rules-architect: Use this agent when you need to analyze project architecture and establish comprehensive rule management systems. Examples: <example>Context: User wants to organize project rules and create a structured rule management system. user: \"I need to reorganize our project rules and create a better structure for managing coding standards, file organization, and testing protocols\" assistant: \"I'll use the rules-architect agent to analyze the current project structure and establish a comprehensive rule management system with proper categorization and organization.\"</example> <example>Context: Project has grown complex and needs better rule organization. user: \"Our CLAUDE.md file is getting too large and we need to break down rules into manageable categories\" assistant: \"Let me call the rules-architect agent to create a structured .claude/rules system that will organize all project rules into logical categories.\"</example> (Tools: *)\n- frontend-designer: Use this agent when you need to convert design mockups, wireframes, or visual concepts into detailed technical specifications and implementation guides for frontend development. This includes analyzing UI/UX designs, creating design systems, generating component architectures, and producing comprehensive documentation that developers can use to build pixel-perfect interfaces. Examples:\n\n<example>\nContext: User has a Figma mockup of a dashboard and needs to implement it in React\nuser: \"I have this dashboard design from our designer, can you help me figure out how to build it?\"\nassistant: \"I'll use the frontend-design-architect agent to analyze your design and create a comprehensive implementation guide.\"\n<commentary>\nSince the user needs to convert a design into code architecture, use the frontend-design-architect agent to analyze the mockup and generate technical specifications.\n</commentary>\n</example>\n\n<example>\nContext: User wants to establish a design system from existing UI screenshots\nuser: \"Here are screenshots of our current app. We need to extract a consistent design system from these.\"\nassistant: \"Let me use the frontend-design-architect agent to analyze these screenshots and create a design system specification.\"\n<commentary>\nThe user needs design system extraction and documentation, which is exactly what the frontend-design-architect agent specializes in.\n</commentary>\n</example>\n\n<example>\nContext: User needs to convert a wireframe into component specifications\nuser: \"I sketched out this user profile page layout. How should I structure the components?\"\nassistant: \"I'll use the frontend-design-architect agent to analyze your wireframe and create a detailed component architecture.\"\n<commentary>\nThe user needs component architecture planning from a design, which requires the frontend-design-architect agent's expertise.\n</commentary>\n</example> (Tools: *)\n- content-writer: Use this agent when you need to create compelling, informative content that explains complex topics in simple terms. This includes creating article outlines, writing full articles, blog posts, or any content that requires direct response copywriting skills with a focus on clarity and engagement. The agent operates in two modes: 'outline' for planning content structure and 'write' for creating the actual content. Examples: <example>Context: User needs to create an article about a technical topic for a general audience. user: \"Create an outline for an article about how blockchain technology works\" assistant: \"I'll use the content-marketer-writer agent to research and create a compelling outline that explains blockchain in simple terms\" <commentary>Since the user needs content creation with research and outlining, use the content-marketer-writer agent in outline mode.</commentary></example> <example>Context: User has an outline and needs to write the full article. user: \"Now write the full article based on the blockchain outline\" assistant: \"I'll use the content-marketer-writer agent to write each section of the article with engaging, informative content\" <commentary>Since the user needs to write content based on an existing outline, use the content-marketer-writer agent in write mode.</commentary></example> (Tools: *)\n- test-runner: Use this agent to run and manage tests according to the global and project-specific testing rules. This includes executing test scripts, documenting test results, and helping to diagnose issues following the standard pipeline. <example>Context: User wants to run all functional tests. user: \"运行所有功能测试\" assistant: \"我将使用 test-runner agent 来执行所有功能测试\" <commentary>Since the user wants to run tests by category, use the test-runner agent.</commentary></example> <example>Context: User wants to verify a bug fix. user: \"我修复了一个bug，帮我验证一下\" assistant: \"让我使用 test-runner agent 来执行对应的修复验证测试\" <commentary>The user needs to verify a fix, which is a core task for the test-runner agent.</commentary></example> (Tools: *)\n- in-depth-research-analyst: Use this agent when you need to conduct comprehensive research reports with in-depth web mining, data analysis, and visualization. This includes industry analysis, market research, competitive intelligence, and trend forecasting with accurate data from authoritative sources. <example>Context: User wants a comprehensive industry analysis report. user: \"请对人工智能芯片市场进行深入调研，包括主要厂商、市场份额和增长趋势\" assistant: \"我将使用 in-depth-research-analyst agent 来进行这项深入的市场调研并生成可视化报告\" <commentary>Since the user needs a comprehensive industry analysis with data visualization, use the in-depth-research-analyst agent to conduct thorough research and create an integrated report.</commentary></example> <example>Context: User wants market research with accurate data and visualizations. user: \"我们需要一份关于电动汽车充电基础设施的深度报告，包含数据图表\" assistant: \"让我使用 in-depth-research-analyst agent 来收集准确数据并生成图文并茂的分析报告\" <commentary>Since this requires market research with data accuracy and visualizations, use the in-depth-research-analyst agent to create a comprehensive report.</commentary></example> (Tools: *)\n- prd-writer: Use this agent when you need to create a comprehensive Product Requirements Document (PRD) for a software project or feature. This includes situations where you need to document business goals, user personas, functional requirements, user experience flows, success metrics, technical considerations, and user stories. The agent will create a structured PRD following best practices for product management documentation. Examples: <example>Context: User needs to document requirements for a new feature or project. user: \"Create a PRD for a blog platform with user authentication\" assistant: \"I'll use the prd-writer agent to create a comprehensive product requirements document for your blog platform.\" <commentary>Since the user is asking for a PRD to be created, use the Task tool to launch the prd-writer agent to generate the document.</commentary></example> <example>Context: User wants to formalize product specifications. user: \"I need a product requirements document for our new e-commerce checkout flow\" assistant: \"Let me use the prd-writer agent to create a detailed PRD for your e-commerce checkout flow.\" <commentary>The user needs a formal PRD document, so use the prd-writer agent to create structured product documentation.</commentary></example> (Tools: Task, Bash, Grep, LS, Read, Write, WebSearch, Glob)\n- pipeline-debug-universal: Use this agent when you need to implement comprehensive debug hooks and testing infrastructure for ANY pipeline system - whether it's API routing, data processing, CI/CD workflows, or transformation pipelines. This agent specializes in creating universal debug architectures that work across different pipeline types with data capture, replay capabilities, and systematic testing matrices. Examples: <example>Context: User is working on a multi-provider API routing system and needs to add debug capabilities to track data flow through each pipeline step. user: \"I need to add debug hooks to our routing pipeline so we can capture and replay data at each step\" assistant: \"I'll use the pipeline-debug-universal agent to design a comprehensive debug infrastructure with data capture and replay capabilities\" <commentary>Since the user needs pipeline debugging infrastructure, use the pipeline-debug-universal agent to create debug hooks and testing matrices.</commentary></example> <example>Context: User has a complex data transformation pipeline and wants to build systematic testing for each stage and provider. user: \"Our data processing pipeline has issues and we need better testing infrastructure to isolate problems at each step\" assistant: \"Let me use the pipeline-debug-universal agent to create a complete testing matrix and debug system\" <commentary>Since the user needs systematic pipeline testing infrastructure, use the pipeline-debug-universal agent to architect the testing system.</commentary></example> <example>Context: User is building a CI/CD pipeline and needs to implement debug capabilities for tracking deployment issues. user: \"Our deployment pipeline fails randomly and we can't reproduce the issues consistently\" assistant: \"I'll deploy the pipeline-debug-universal agent to create comprehensive debug hooks and replay capabilities for your CI/CD pipeline\" <commentary>Since the user needs debug infrastructure for a deployment pipeline, use the pipeline-debug-universal agent to design the debug system.</commentary></example> (Tools: *)\n\nWhen using the Task tool, you must specify a subagent_type parameter to select which agent type to use.\n\n\n\nWhen NOT to use the Agent tool:\n- If you want to read a specific file path, use the Read or Glob tool instead of the Agent tool, to find the match more quickly\n- If you are searching for a specific class definition like \"class Foo\", use the Glob tool instead, to find the match more quickly\n- If you are searching for code within a specific file or set of 2-3 files, use the Read tool instead of the Agent tool, to find the match more quickly\n- Other tasks that are not related to the agent descriptions above\n\n\nUsage notes:\n1. Launch multiple agents concurrently whenever possible, to maximize performance; to do that, use a single message with multiple tool uses\n2. When the agent is done, it will return a single message back to you. The result returned by the agent is not visible to the user. To show the user the result, you should send a text message back to the user with a concise summary of the result.\n3. Each agent invocation is stateless. You will not be able to send additional messages to the agent, nor will the agent be able to communicate with you outside of its final report. Therefore, your prompt should contain a highly detailed task description for the agent to perform autonomously and you should specify exactly what information the agent should return back to you in its final and only message to you.\n4. The agent's outputs should generally be trusted\n5. Clearly tell the agent whether you expect it to write code or just to do research (search, file reads, web fetches, etc.), since it is not aware of the user's intent\n6. If the agent description mentions that it should be used proactively, then you should try your best to use it without the user having to ask for it first. Use your judgement.\n\nExample usage:\n\n<example_agent_descriptions>\n\"code-reviewer\": use this agent after you are done writing a signficant piece of code\n\"greeting-responder\": use this agent when to respond to user greetings with a friendly joke\n</example_agent_description>\n\n<example>\nuser: \"Please write a function that checks if a number is prime\"\nassistant: Sure let me write a function that checks if a number is prime\nassistant: First let me use the Write tool to write a function that checks if a number is prime\nassistant: I'm going to use the Write tool to write the following code:\n<code>\nfunction isPrime(n) {\n  if (n <= 1) return false\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n</code>\n<commentary>\nSince a signficant piece of code was written and the task was completed, now use the code-reviewer agent to review the code\n</commentary>\nassistant: Now let me use the code-reviewer agent to review the code\nassistant: Uses the Task tool to launch the with the code-reviewer agent\n</example>\n\n<example>\nuser: \"Hello\"\n<commentary>\nSince the user is greeting, use the greeting-responder agent to respond with a friendly joke\n</commentary>\nassistant: \"I'm going to use the Task tool to launch the with the greeting-responder agent\"\n</example>\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "description": {
                "type": "string",
                "description": "A short (3-5 word) description of the task"
              },
              "prompt": {
                "type": "string",
                "description": "The task for the agent to perform"
              },
              "subagent_type": {
                "type": "string",
                "description": "The type of specialized agent to use for this task"
              }
            },
            "required": [
              "description",
              "prompt",
              "subagent_type"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Bash",
          "description": "Executes a given bash command in a persistent shell session with optional timeout, ensuring proper handling and security measures.\n\nBefore executing the command, please follow these steps:\n\n1. Directory Verification:\n   - If the command will create new directories or files, first use the LS tool to verify the parent directory exists and is the correct location\n   - For example, before running \"mkdir foo/bar\", first use LS to check that \"foo\" exists and is the intended parent directory\n\n2. Command Execution:\n   - Always quote file paths that contain spaces with double quotes (e.g., cd \"path with spaces/file.txt\")\n   - Examples of proper quoting:\n     - cd \"/Users/name/My Documents\" (correct)\n     - cd /Users/name/My Documents (incorrect - will fail)\n     - python \"/path/with spaces/script.py\" (correct)\n     - python /path/with spaces/script.py (incorrect - will fail)\n   - After ensuring proper quoting, execute the command.\n   - Capture the output of the command.\n\nUsage notes:\n  - The command argument is required.\n  - You can specify an optional timeout in milliseconds (up to 600000ms / 10 minutes). If not specified, commands will timeout after 120000ms (2 minutes).\n  - It is very helpful if you write a clear, concise description of what this command does in 5-10 words.\n  - If the output exceeds 30000 characters, output will be truncated before being returned to you.\n  - VERY IMPORTANT: You MUST avoid using search commands like `find` and `grep`. Instead use Grep, Glob, or Task to search. You MUST avoid read tools like `cat`, `head`, `tail`, and `ls`, and use Read and LS to read files.\n - If you _still_ need to run `grep`, STOP. ALWAYS USE ripgrep at `rg` first, which all ${PRODUCT_NAME} users have pre-installed.\n  - When issuing multiple commands, use the ';' or '&&' operator to separate them. DO NOT use newlines (newlines are ok in quoted strings).\n  - Try to maintain your current working directory throughout the session by using absolute paths and avoiding usage of `cd`. You may use `cd` if the User explicitly requests it.\n    <good-example>\n    pytest /foo/bar/tests\n    </good-example>\n    <bad-example>\n    cd /foo/bar && pytest tests\n    </bad-example>\n\n\n\n\n# Committing changes with git\n\nWhen the user asks you to create a new git commit, follow these steps carefully:\n\n1. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following bash commands in parallel, each using the Bash tool:\n  - Run a git status command to see all untracked files.\n  - Run a git diff command to see both staged and unstaged changes that will be committed.\n  - Run a git log command to see recent commit messages, so that you can follow this repository's commit message style.\n2. Analyze all staged changes (both previously staged and newly added) and draft a commit message:\n  - Summarize the nature of the changes (eg. new feature, enhancement to an existing feature, bug fix, refactoring, test, docs, etc.). Ensure the message accurately reflects the changes and their purpose (i.e. \"add\" means a wholly new feature, \"update\" means an enhancement to an existing feature, \"fix\" means a bug fix, etc.).\n  - Check for any sensitive information that shouldn't be committed\n  - Draft a concise (1-2 sentences) commit message that focuses on the \"why\" rather than the \"what\"\n  - Ensure it accurately reflects the changes and their purpose\n3. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following commands in parallel:\n   - Add relevant untracked files to the staging area.\n   - Create the commit with a message ending with:\n   🤖 Generated with [Claude Code](https://claude.ai/code)\n\n   Co-Authored-By: Claude <noreply@anthropic.com>\n   - Run git status to make sure the commit succeeded.\n4. If the commit fails due to pre-commit hook changes, retry the commit ONCE to include these automated changes. If it fails again, it usually means a pre-commit hook is preventing the commit. If the commit succeeds but you notice that files were modified by the pre-commit hook, you MUST amend your commit to include them.\n\nImportant notes:\n- NEVER update the git config\n- NEVER run additional commands to read or explore code, besides git bash commands\n- NEVER use the TodoWrite or Task tools\n- DO NOT push to the remote repository unless the user explicitly asks you to do so\n- IMPORTANT: Never use git commands with the -i flag (like git rebase -i or git add -i) since they require interactive input which is not supported.\n- If there are no changes to commit (i.e., no untracked files and no modifications), do not create an empty commit\n- In order to ensure good formatting, ALWAYS pass the commit message via a HEREDOC, a la this example:\n<example>\ngit commit -m \"$(cat <<'EOF'\n   Commit message here.\n\n   🤖 Generated with [Claude Code](https://claude.ai/code)\n\n   Co-Authored-By: Claude <noreply@anthropic.com>\n   EOF\n   )\"\n</example>\n\n# Creating pull requests\nUse the gh command via the Bash tool for ALL GitHub-related tasks including working with issues, pull requests, checks, and releases. If given a Github URL use the gh command to get the information needed.\n\nIMPORTANT: When the user asks you to create a pull request, follow these steps carefully:\n\n1. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following bash commands in parallel using the Bash tool, in order to understand the current state of the branch since it diverged from the main branch:\n   - Run a git status command to see all untracked files\n   - Run a git diff command to see both staged and unstaged changes that will be committed\n   - Check if the current branch tracks a remote branch and is up to date with the remote, so you know if you need to push to the remote\n   - Run a git log command and `git diff [base-branch]...HEAD` to understand the full commit history for the current branch (from the time it diverged from the base branch)\n2. Analyze all changes that will be included in the pull request, making sure to look at all relevant commits (NOT just the latest commit, but ALL commits that will be included in the pull request!!!), and draft a pull request summary\n3. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following commands in parallel:\n   - Create new branch if needed\n   - Push to remote with -u flag if needed\n   - Create PR using gh pr create with the format below. Use a HEREDOC to pass the body to ensure correct formatting.\n<example>\ngh pr create --title \"the pr title\" --body \"$(cat <<'EOF'\n## Summary\n<1-3 bullet points>\n\n## Test plan\n[Checklist of TODOs for testing the pull request...]\n\n🤖 Generated with [Claude Code](https://claude.ai/code)\nEOF\n)\"\n</example>\n\nImportant:\n- NEVER update the git config\n- DO NOT use the TodoWrite or Task tools\n- Return the PR URL when you're done, so the user can see it\n\n# Other common operations\n- View comments on a Github PR: gh api repos/foo/bar/pulls/123/comments",
          "input_schema": {
            "type": "object",
            "properties": {
              "command": {
                "type": "string",
                "description": "The command to execute"
              },
              "timeout": {
                "type": "number",
                "description": "Optional timeout in milliseconds (max 600000)"
              },
              "description": {
                "type": "string",
                "description": " Clear, concise description of what this command does in 5-10 words. Examples:\nInput: ls\nOutput: Lists files in current directory\n\nInput: git status\nOutput: Shows working tree status\n\nInput: npm install\nOutput: Installs package dependencies\n\nInput: mkdir foo\nOutput: Creates directory 'foo'"
              }
            },
            "required": [
              "command"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Glob",
          "description": "- Fast file pattern matching tool that works with any codebase size\n- Supports glob patterns like \"**/*.js\" or \"src/**/*.ts\"\n- Returns matching file paths sorted by modification time\n- Use this tool when you need to find files by name patterns\n- When you are doing an open ended search that may require multiple rounds of globbing and grepping, use the Agent tool instead\n- You have the capability to call multiple tools in a single response. It is always better to speculatively perform multiple searches as a batch that are potentially useful.",
          "input_schema": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "The glob pattern to match files against"
              },
              "path": {
                "type": "string",
                "description": "The directory to search in. If not specified, the current working directory will be used. IMPORTANT: Omit this field to use the default directory. DO NOT enter \"undefined\" or \"null\" - simply omit it for the default behavior. Must be a valid directory path if provided."
              }
            },
            "required": [
              "pattern"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Grep",
          "description": "A powerful search tool built on ripgrep\n\n  Usage:\n  - ALWAYS use Grep for search tasks. NEVER invoke `grep` or `rg` as a Bash command. The Grep tool has been optimized for correct permissions and access.\n  - Supports full regex syntax (e.g., \"log.*Error\", \"function\\s+\\w+\")\n  - Filter files with glob parameter (e.g., \"*.js\", \"**/*.tsx\") or type parameter (e.g., \"js\", \"py\", \"rust\")\n  - Output modes: \"content\" shows matching lines, \"files_with_matches\" shows only file paths (default), \"count\" shows match counts\n  - Use Task tool for open-ended searches requiring multiple rounds\n  - Pattern syntax: Uses ripgrep (not grep) - literal braces need escaping (use `interface\\{\\}` to find `interface{}` in Go code)\n  - Multiline matching: By default patterns match within single lines only. For cross-line patterns like `struct \\{[\\s\\S]*?field`, use `multiline: true`\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "The regular expression pattern to search for in file contents"
              },
              "path": {
                "type": "string",
                "description": "File or directory to search in (rg PATH). Defaults to current working directory."
              },
              "glob": {
                "type": "string",
                "description": "Glob pattern to filter files (e.g. \"*.js\", \"*.{ts,tsx}\") - maps to rg --glob"
              },
              "output_mode": {
                "type": "string",
                "enum": [
                  "content",
                  "files_with_matches",
                  "count"
                ],
                "description": "Output mode: \"content\" shows matching lines (supports -A/-B/-C context, -n line numbers, head_limit), \"files_with_matches\" shows file paths (supports head_limit), \"count\" shows match counts (supports head_limit). Defaults to \"files_with_matches\"."
              },
              "-B": {
                "type": "number",
                "description": "Number of lines to show before each match (rg -B). Requires output_mode: \"content\", ignored otherwise."
              },
              "-A": {
                "type": "number",
                "description": "Number of lines to show after each match (rg -A). Requires output_mode: \"content\", ignored otherwise."
              },
              "-C": {
                "type": "number",
                "description": "Number of lines to show before and after each match (rg -C). Requires output_mode: \"content\", ignored otherwise."
              },
              "-n": {
                "type": "boolean",
                "description": "Show line numbers in output (rg -n). Requires output_mode: \"content\", ignored otherwise."
              },
              "-i": {
                "type": "boolean",
                "description": "Case insensitive search (rg -i)"
              },
              "type": {
                "type": "string",
                "description": "File type to search (rg --type). Common types: js, py, rust, go, java, etc. More efficient than include for standard file types."
              },
              "head_limit": {
                "type": "number",
                "description": "Limit output to first N lines/entries, equivalent to \"| head -N\". Works across all output modes: content (limits output lines), files_with_matches (limits file paths), count (limits count entries). When unspecified, shows all results from ripgrep."
              },
              "multiline": {
                "type": "boolean",
                "description": "Enable multiline mode where . matches newlines and patterns can span lines (rg -U --multiline-dotall). Default: false."
              }
            },
            "required": [
              "pattern"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "LS",
          "description": "Lists files and directories in a given path. The path parameter must be an absolute path, not a relative path. You can optionally provide an array of glob patterns to ignore with the ignore parameter. You should generally prefer the Glob and Grep tools, if you know which directories to search.",
          "input_schema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "The absolute path to the directory to list (must be absolute, not relative)"
              },
              "ignore": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of glob patterns to ignore"
              }
            },
            "required": [
              "path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "ExitPlanMode",
          "description": "Use this tool when you are in plan mode and have finished presenting your plan and are ready to code. This will prompt the user to exit plan mode.\nIMPORTANT: Only use this tool when the task requires planning the implementation steps of a task that requires writing code. For research tasks where you're gathering information, searching files, reading files or in general trying to understand the codebase - do NOT use this tool.\n\nEg.\n1. Initial task: \"Search for and understand the implementation of vim mode in the codebase\" - Do not use the exit plan mode tool because you are not planning the implementation steps of a task.\n2. Initial task: \"Help me implement yank mode for vim\" - Use the exit plan mode tool after you have finished planning the implementation steps of the task.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "plan": {
                "type": "string",
                "description": "The plan you came up with, that you want to run by the user for approval. Supports markdown. The plan should be pretty concise."
              }
            },
            "required": [
              "plan"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Read",
          "description": "Reads a file from the local filesystem. You can access any file directly by using this tool.\nAssume this tool is able to read all files on the machine. If the User provides a path to a file assume that path is valid. It is okay to read a file that does not exist; an error will be returned.\n\nUsage:\n- The file_path parameter must be an absolute path, not a relative path\n- By default, it reads up to 2000 lines starting from the beginning of the file\n- You can optionally specify a line offset and limit (especially handy for long files), but it's recommended to read the whole file by not providing these parameters\n- Any lines longer than 2000 characters will be truncated\n- Results are returned using cat -n format, with line numbers starting at 1\n- This tool allows Claude Code to read images (eg PNG, JPG, etc). When reading an image file the contents are presented visually as Claude Code is a multimodal LLM.\n- This tool can read PDF files (.pdf). PDFs are processed page by page, extracting both text and visual content for analysis.\n- For Jupyter notebooks (.ipynb files), use the NotebookRead instead\n- You have the capability to call multiple tools in a single response. It is always better to speculatively read multiple files as a batch that are potentially useful.\n- You will regularly be asked to read screenshots. If the user provides a path to a screenshot ALWAYS use this tool to view the file at the path. This tool will work with all temporary file paths like /var/folders/123/abc/T/TemporaryItems/NSIRD_screencaptureui_ZfB1tD/Screenshot.png\n- If you read a file that exists but has empty contents you will receive a system reminder warning in place of file contents.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to read"
              },
              "offset": {
                "type": "number",
                "description": "The line number to start reading from. Only provide if the file is too large to read at once"
              },
              "limit": {
                "type": "number",
                "description": "The number of lines to read. Only provide if the file is too large to read at once."
              }
            },
            "required": [
              "file_path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Edit",
          "description": "Performs exact string replacements in files.\n\nUsage:\n- You must use your `Read` tool at least once in the conversation before editing. This tool will error if you attempt an edit without reading the file.\n- When editing text from Read tool output, ensure you preserve the exact indentation (tabs/spaces) as it appears AFTER the line number prefix. The line number prefix format is: spaces + line number + tab. Everything after that tab is the actual file content to match. Never include any part of the line number prefix in the old_string or new_string.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- Only use emojis if the user explicitly requests it. Avoid adding emojis to files unless asked.\n- The edit will FAIL if `old_string` is not unique in the file. Either provide a larger string with more surrounding context to make it unique or use `replace_all` to change every instance of `old_string`.\n- Use `replace_all` for replacing and renaming strings across the file. This parameter is useful if you want to rename a variable for instance.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to modify"
              },
              "old_string": {
                "type": "string",
                "description": "The text to replace"
              },
              "new_string": {
                "type": "string",
                "description": "The text to replace it with (must be different from old_string)"
              },
              "replace_all": {
                "type": "boolean",
                "default": false,
                "description": "Replace all occurences of old_string (default false)"
              }
            },
            "required": [
              "file_path",
              "old_string",
              "new_string"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "MultiEdit",
          "description": "This is a tool for making multiple edits to a single file in one operation. It is built on top of the Edit tool and allows you to perform multiple find-and-replace operations efficiently. Prefer this tool over the Edit tool when you need to make multiple edits to the same file.\n\nBefore using this tool:\n\n1. Use the Read tool to understand the file's contents and context\n2. Verify the directory path is correct\n\nTo make multiple file edits, provide the following:\n1. file_path: The absolute path to the file to modify (must be absolute, not relative)\n2. edits: An array of edit operations to perform, where each edit contains:\n   - old_string: The text to replace (must match the file contents exactly, including all whitespace and indentation)\n   - new_string: The edited text to replace the old_string\n   - replace_all: Replace all occurences of old_string. This parameter is optional and defaults to false.\n\nIMPORTANT:\n- All edits are applied in sequence, in the order they are provided\n- Each edit operates on the result of the previous edit\n- All edits must be valid for the operation to succeed - if any edit fails, none will be applied\n- This tool is ideal when you need to make several changes to different parts of the same file\n- For Jupyter notebooks (.ipynb files), use the NotebookEdit instead\n\nCRITICAL REQUIREMENTS:\n1. All edits follow the same requirements as the single Edit tool\n2. The edits are atomic - either all succeed or none are applied\n3. Plan your edits carefully to avoid conflicts between sequential operations\n\nWARNING:\n- The tool will fail if edits.old_string doesn't match the file contents exactly (including whitespace)\n- The tool will fail if edits.old_string and edits.new_string are the same\n- Since edits are applied in sequence, ensure that earlier edits don't affect the text that later edits are trying to find\n\nWhen making edits:\n- Ensure all edits result in idiomatic, correct code\n- Do not leave the code in a broken state\n- Always use absolute file paths (starting with /)\n- Only use emojis if the user explicitly requests it. Avoid adding emojis to files unless asked.\n- Use replace_all for replacing and renaming strings across the file. This parameter is useful if you want to rename a variable for instance.\n\nIf you want to create a new file, use:\n- A new file path, including dir name if needed\n- First edit: empty old_string and the new file's contents as new_string\n- Subsequent edits: normal edit operations on the created content",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to modify"
              },
              "edits": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "old_string": {
                      "type": "string",
                      "description": "The text to replace"
                    },
                    "new_string": {
                      "type": "string",
                      "description": "The text to replace it with"
                    },
                    "replace_all": {
                      "type": "boolean",
                      "default": false,
                      "description": "Replace all occurences of old_string (default false)."
                    }
                  },
                  "required": [
                    "old_string",
                    "new_string"
                  ],
                  "additionalProperties": false
                },
                "minItems": 1,
                "description": "Array of edit operations to perform sequentially on the file"
              }
            },
            "required": [
              "file_path",
              "edits"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Write",
          "description": "Writes a file to the local filesystem.\n\nUsage:\n- This tool will overwrite the existing file if there is one at the provided path.\n- If this is an existing file, you MUST use the Read tool first to read the file's contents. This tool will fail if you did not read the file first.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- NEVER proactively create documentation files (*.md) or README files. Only create documentation files if explicitly requested by the User.\n- Only use emojis if the user explicitly requests it. Avoid writing emojis to files unless asked.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to write (must be absolute, not relative)"
              },
              "content": {
                "type": "string",
                "description": "The content to write to the file"
              }
            },
            "required": [
              "file_path",
              "content"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "NotebookRead",
          "description": "Reads a Jupyter notebook (.ipynb file) and returns all of the cells with their outputs. Jupyter notebooks are interactive documents that combine code, text, and visualizations, commonly used for data analysis and scientific computing. The notebook_path parameter must be an absolute path, not a relative path.",
          "input_schema": {
            "type": "object",
            "properties": {
              "notebook_path": {
                "type": "string",
                "description": "The absolute path to the Jupyter notebook file to read (must be absolute, not relative)"
              },
              "cell_id": {
                "type": "string",
                "description": "The ID of a specific cell to read. If not provided, all cells will be read."
              }
            },
            "required": [
              "notebook_path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "NotebookEdit",
          "description": "Completely replaces the contents of a specific cell in a Jupyter notebook (.ipynb file) with new source. Jupyter notebooks are interactive documents that combine code, text, and visualizations, commonly used for data analysis and scientific computing. The notebook_path parameter must be an absolute path, not a relative path. The cell_number is 0-indexed. Use edit_mode=insert to add a new cell at the index specified by cell_number. Use edit_mode=delete to delete the cell at the index specified by cell_number.",
          "input_schema": {
            "type": "object",
            "properties": {
              "notebook_path": {
                "type": "string",
                "description": "The absolute path to the Jupyter notebook file to edit (must be absolute, not relative)"
              },
              "cell_id": {
                "type": "string",
                "description": "The ID of the cell to edit. When inserting a new cell, the new cell will be inserted after the cell with this ID, or at the beginning if not specified."
              },
              "new_source": {
                "type": "string",
                "description": "The new source for the cell"
              },
              "cell_type": {
                "type": "string",
                "enum": [
                  "code",
                  "markdown"
                ],
                "description": "The type of the cell (code or markdown). If not specified, it defaults to the current cell type. If using edit_mode=insert, this is required."
              },
              "edit_mode": {
                "type": "string",
                "enum": [
                  "replace",
                  "insert",
                  "delete"
                ],
                "description": "The type of edit to make (replace, insert, delete). Defaults to replace."
              }
            },
            "required": [
              "notebook_path",
              "new_source"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "WebFetch",
          "description": "\n- Fetches content from a specified URL and processes it using an AI model\n- Takes a URL and a prompt as input\n- Fetches the URL content, converts HTML to markdown\n- Processes the content with the prompt using a small, fast model\n- Returns the model's response about the content\n- Use this tool when you need to retrieve and analyze web content\n\nUsage notes:\n  - IMPORTANT: If an MCP-provided web fetch tool is available, prefer using that tool instead of this one, as it may have fewer restrictions. All MCP-provided tools start with \"mcp__\".\n  - The URL must be a fully-formed valid URL\n  - HTTP URLs will be automatically upgraded to HTTPS\n  - The prompt should describe what information you want to extract from the page\n  - This tool is read-only and does not modify any files\n  - Results may be summarized if the content is very large\n  - Includes a self-cleaning 15-minute cache for faster responses when repeatedly accessing the same URL\n  - When a URL redirects to a different host, the tool will inform you and provide the redirect URL in a special format. You should then make a new WebFetch request with the redirect URL to fetch the content.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "format": "uri",
                "description": "The URL to fetch content from"
              },
              "prompt": {
                "type": "string",
                "description": "The prompt to run on the fetched content"
              }
            },
            "required": [
              "url",
              "prompt"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "TodoWrite",
          "description": "Use this tool to create and manage a structured task list for your current coding session. This helps you track progress, organize complex tasks, and demonstrate thoroughness to the user.\nIt also helps the user understand the progress of the task and overall progress of their requests.\n\n## When to Use This Tool\nUse this tool proactively in these scenarios:\n\n1. Complex multi-step tasks - When a task requires 3 or more distinct steps or actions\n2. Non-trivial and complex tasks - Tasks that require careful planning or multiple operations\n3. User explicitly requests todo list - When the user directly asks you to use the todo list\n4. User provides multiple tasks - When users provide a list of things to be done (numbered or comma-separated)\n5. After receiving new instructions - Immediately capture user requirements as todos\n6. When you start working on a task - Mark it as in_progress BEFORE beginning work. Ideally you should only have one todo as in_progress at a time\n7. After completing a task - Mark it as completed and add any new follow-up tasks discovered during implementation\n\n## When NOT to Use This Tool\n\nSkip using this tool when:\n1. There is only a single, straightforward task\n2. The task is trivial and tracking it provides no organizational benefit\n3. The task can be completed in less than 3 trivial steps\n4. The task is purely conversational or informational\n\nNOTE that you should not use this tool if there is only one trivial task to do. In this case you are better off just doing the task directly.\n\n## Examples of When to Use the Todo List\n\n<example>\nUser: I want to add a dark mode toggle to the application settings. Make sure you run the tests and build when you're done!\nAssistant: I'll help add a dark mode toggle to your application settings. Let me create a todo list to track this implementation.\n*Creates todo list with the following items:*\n1. Create dark mode toggle component in Settings page\n2. Add dark mode state management (context/store)\n3. Implement CSS-in-JS styles for dark theme\n4. Update existing components to support theme switching\n5. Run tests and build process, addressing any failures or errors that occur\n*Begins working on the first task*\n\n<reasoning>\nThe assistant used the todo list because:\n1. Adding dark mode is a multi-step feature requiring UI, state management, and styling changes\n2. The user explicitly requested tests and build be run afterward\n3. The assistant inferred that tests and build need to pass by adding \"Ensure tests and build succeed\" as the final task\n</reasoning>\n</example>\n\n<example>\nUser: Help me rename the function getCwd to getCurrentWorkingDirectory across my project\nAssistant: Let me first search through your codebase to find all occurrences of 'getCwd'.\n*Uses grep or search tools to locate all instances of getCwd in the codebase*\nAssistant: I've found 15 instances of 'getCwd' across 8 different files. Let me create a todo list to track these changes.\n*Creates todo list with specific items for each file that needs updating*\n\n<reasoning>\nThe assistant used the todo list because:\n1. First, the assistant searched to understand the scope of the task\n2. Upon finding multiple occurrences across different files, it determined this was a complex task with multiple steps\n3. The todo list helps ensure every instance is tracked and updated systematically\n4. This approach prevents missing any occurrences and maintains code consistency\n</reasoning>\n</example>\n\n\n<example>\nUser: I need to implement these features for my e-commerce site: user registration, product catalog, shopping cart, and checkout flow.\nAssistant: I'll help implement these features. First, let's add all the features to the todo list.\n*Creates a todo list breaking down each feature into specific tasks based on the project architecture*\nAssistant: Let's start with user registration. This will involve creating database models, API endpoints, and frontend forms that integrate with your existing authentication system.\n\n<reasoning>\nThe assistant used the todo list because:\n1. The user provided multiple complex features to implement in a comma separated list\n2. The todo list helps organize these large features into manageable tasks\n3. This approach allows for tracking progress across the entire implementation\n</reasoning>\n</example>\n\n<example>\nUser: Can you help optimize my React application? It's rendering slowly and has performance issues.</user>\nAssistant: I'll help optimize your React application. First, let me examine your codebase to identify potential performance bottlenecks.\n*Reviews component structure, render patterns, state management, and data fetching*\nAssistant: After analyzing your codebase, I've identified several performance issues. Let me create a todo list to track our optimization efforts.\n*Creates todo list with items like: 1) Implement memoization for expensive calculations in ProductList, 2) Add virtualization for long lists in Dashboard, 3) Optimize image loading in Gallery component, 4) Fix state update loops in ShoppingCart, 5) Review bundle size and implement code splitting*\nLet's start by implementing memoization for the expensive calculations in your ProductList component.</assistant>\n\n<reasoning>\nThe assistant used the todo list because:\n1. First, the assistant examined the codebase to identify specific performance issues\n2. Based on this analysis, it identified multiple optimization opportunities\n3. Performance optimization is a non-trivial task requiring multiple steps\n4. The todo list helps methodically track improvements across different components\n5. This systematic approach ensures all performance bottlenecks are addressed\n</reasoning>\n</example>\n\n## Examples of When NOT to Use the Todo List\n\n<example>\nUser: How do I print 'Hello World' in Python?\nAssistant: In Python, you can print \"Hello World\" with this simple code:\n\npython\nprint(\"Hello World\")\n\nThis will output the text \"Hello World\" to the console when executed.</assistant>\n\n<reasoning>\nThe assistant did not use the todo list because this is a single, trivial task that can be completed in one step. There's no need to track multiple tasks or steps for such a straightforward request.\n</reasoning>\n</example>\n\n<example>\nUser: What does the git status command do?\nAssistant: The git status command shows the current state of your working directory and staging area. It displays which changes have been staged, which haven't, and which files aren't being tracked by Git. This is a fundamental command for understanding the current state of your repository before making commits.\n\n<reasoning>\nThe assistant did not use the todo list because this is an informational request with no actual coding task to complete. The user is simply asking for an explanation, not for the assistant to perform multiple steps or tasks.\n</reasoning>\n</example>\n\n<example>\nUser: Can you add a comment to the calculateTotal function to explain what it does?\nAssistant: Sure, let me add a comment to the calculateTotal function to explain what it does.\n* Uses the Edit tool to add a comment to the calculateTotal function *\n\n<reasoning>\nThe assistant did not use the todo list because this is a single, straightforward task confined to one location in the code. Adding a comment doesn't require tracking multiple steps or systematic organization.\n</reasoning>\n</example>\n\n<example>\nUser: Run npm install for me and tell me what happens.\nAssistant: I'll run the npm install command for you.\n\n*Executes: npm install*\n\nThe command completed successfully. Here's the output:\n[Output of npm install command]\n\nAll dependencies have been installed according to your package.json file.\n\n<reasoning>\nThe assistant did not use the todo list because this is a single command execution with immediate results. There are no multiple steps to track or organize, making the todo list unnecessary for this straightforward task.\n</reasoning>\n</example>\n\n## Task States and Management\n\n1. **Task States**: Use these states to track progress:\n   - pending: Task not yet started\n   - in_progress: Currently working on (limit to ONE task at a time)\n   - completed: Task finished successfully\n\n2. **Task Management**:\n   - Update task status in real-time as you work\n   - Mark tasks complete IMMEDIATELY after finishing (don't batch completions)\n   - Only have ONE task in_progress at any time\n   - Complete current tasks before starting new ones\n   - Remove tasks that are no longer relevant from the list entirely\n\n3. **Task Completion Requirements**:\n   - ONLY mark a task as completed when you have FULLY accomplished it\n   - If you encounter errors, blockers, or cannot finish, keep the task as in_progress\n   - When blocked, create a new task describing what needs to be resolved\n   - Never mark a task as completed if:\n     - Tests are failing\n     - Implementation is partial\n     - You encountered unresolved errors\n     - You couldn't find necessary files or dependencies\n\n4. **Task Breakdown**:\n   - Create specific, actionable items\n   - Break complex tasks into smaller, manageable steps\n   - Use clear, descriptive task names\n\nWhen in doubt, use this tool. Being proactive with task management demonstrates attentiveness and ensures you complete all requirements successfully.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "todos": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "content": {
                      "type": "string",
                      "minLength": 1
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "pending",
                        "in_progress",
                        "completed"
                      ]
                    },
                    "priority": {
                      "type": "string",
                      "enum": [
                        "high",
                        "medium",
                        "low"
                      ]
                    },
                    "id": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "content",
                    "status",
                    "priority",
                    "id"
                  ],
                  "additionalProperties": false
                },
                "description": "The updated todo list"
              }
            },
            "required": [
              "todos"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "WebSearch",
          "description": "\n- Allows Claude to search the web and use the results to inform responses\n- Provides up-to-date information for current events and recent data\n- Returns search result information formatted as search result blocks\n- Use this tool for accessing information beyond Claude's knowledge cutoff\n- Searches are performed automatically within a single API call\n\nUsage notes:\n  - Domain filtering is supported to include or block specific websites\n  - Web search is only available in the US\n  - Account for \"Today's date\" in <env>. For example, if <env> says \"Today's date: 2025-07-01\", and the user wants the latest docs, do not use 2024 in the search query. Use 2025.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "minLength": 2,
                "description": "The search query to use"
              },
              "allowed_domains": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Only include search results from these domains"
              },
              "blocked_domains": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Never include search results from these domains"
              }
            },
            "required": [
              "query"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        }
      ],
      "responseStructure": {
        "type": "object",
        "keys": [
          "id",
          "object",
          "created",
          "model",
          "choices",
          "usage",
          "stats",
          "system_fingerprint"
        ],
        "hasChoices": true,
        "hasContent": false,
        "hasUsage": true,
        "choicesCount": 1,
        "firstChoice": {
          "hasMessage": true,
          "hasToolCalls": false,
          "finishReason": "stop"
        }
      },
      "parsingAttempts": [
        "json_format",
        "function_call",
        "action_format",
        "natural_language"
      ]
    }
  },
  {
    "timestamp": "2025-08-10T05:39:11.548Z",
    "requestId": "session_1754804126703_ixall6oy5:conv_1754804126703_sm1ur5dvo:12:1754804336711:sieq",
    "provider": "lmstudio",
    "model": "gpt-oss-20b-mlx",
    "endpoint": "localhost:1234",
    "failureType": "text_instead_of_tools",
    "originalResponse": {
      "id": "chatcmpl-p5xhhx9kkaetk00cc441g8",
      "object": "chat.completion",
      "created": 1754804336,
      "model": "gpt-oss-20b-mlx",
      "choices": [
        {
          "index": 0,
          "logprobs": null,
          "finish_reason": "stop",
          "message": {
            "role": "assistant",
            "content": "User wants to \"检查下我们小说要开始，还需要什么设定？我们还缺乏哪些设定？汇总的人物档案删掉，请补充缺乏的md文档\". They refer to a \"novel\" and want to check what settings are needed, missing settings. And they mention that the compiled character archive file was deleted and want to supplement missing md documents.\n\nSo likely we have a set of markdown files in the project relating to their \"novel\" – maybe some narrative assets. We need to list missing settings, such as world building details: time period, location, lore, etc. Also characters. They said character archive file removed → we need to create and populate missing MD documents for settings.\n\nWe should check the repository for md files relevant. We'll look in the repository for the novel's folder maybe \"novel\" or something.\n\nLet's list directory.<|start|>assistant<|channel|>commentary to=functions.LS<|message|>{\"path\":\"\", \"ignore\":[]}"
          }
        }
      ],
      "usage": {
        "prompt_tokens": 15019,
        "completion_tokens": 203,
        "total_tokens": 15222
      },
      "stats": {},
      "system_fingerprint": "gpt-oss-20b-mlx"
    },
    "expectedFormat": "openai",
    "errorMessage": "All parsing strategies failed",
    "responseAnalysis": {
      "hasToolCalls": false,
      "hasContent": true,
      "contentLength": 856,
      "contentPreview": "User wants to \"检查下我们小说要开始，还需要什么设定？我们还缺乏哪些设定？汇总的人物档案删掉，请补充缺乏的md文档\". They refer to a \"novel\" and want to check what settings are needed, missing settings. And they mention that the compiled character ar",
      "finishReason": "stop",
      "toolCallPatterns": []
    },
    "debugInfo": {
      "requestTools": [
        {
          "name": "Task",
          "description": "Launch a new agent to handle complex, multi-step tasks autonomously.\n\nAvailable agent types and the tools they have access to:\n- general-purpose: General-purpose agent for researching complex questions, searching for code, and executing multi-step tasks. When you are searching for a keyword or file and are not confident that you will find the right match in the first few tries use this agent to perform the search for you. (Tools: *)\n- code-refactorer: Use this agent when you need to improve existing code structure, readability, or maintainability without changing functionality. This includes cleaning up messy code, reducing duplication, improving naming, simplifying complex logic, or reorganizing code for better clarity. Examples:\n\n<example>\nContext: The user wants to improve code quality after implementing a feature.\nuser: \"I just finished implementing the user authentication system. Can you help clean it up?\"\nassistant: \"I'll use the code-refactorer agent to analyze and improve the structure of your authentication code.\"\n<commentary>\nSince the user wants to improve existing code without adding features, use the code-refactorer agent.\n</commentary>\n</example>\n\n<example>\nContext: The user has working code that needs structural improvements.\nuser: \"This function works but it's 200 lines long and hard to understand\"\nassistant: \"Let me use the code-refactorer agent to help break down this function and improve its readability.\"\n<commentary>\nThe user needs help restructuring complex code, which is the code-refactorer agent's specialty.\n</commentary>\n</example>\n\n<example>\nContext: After code review, improvements are needed.\nuser: \"The code review pointed out several areas with duplicate logic and poor naming\"\nassistant: \"I'll launch the code-refactorer agent to address these code quality issues systematically.\"\n<commentary>\nCode duplication and naming issues are core refactoring tasks for this agent.\n</commentary>\n</example> (Tools: Edit, MultiEdit, Write, NotebookEdit, Grep, LS, Read)\n- project-task-planner: Use this agent when you need to create a comprehensive development task list from a Product Requirements Document (PRD). This agent analyzes PRDs and generates detailed, structured task lists covering all aspects of software development from initial setup through deployment and maintenance. Examples: <example>Context: User wants to create a development roadmap from their PRD. user: \"I have a PRD for a new e-commerce platform. Can you create a task list?\" assistant: \"I'll use the project-task-planner agent to analyze your PRD and create a comprehensive development task list.\" <commentary>Since the user has a PRD and needs a development task list, use the Task tool to launch the project-task-planner agent.</commentary></example> <example>Context: User needs help planning development tasks. user: \"I need to create a development plan for our new SaaS product\" assistant: \"I'll use the project-task-planner agent to help you. First, I'll need to see your Product Requirements Document (PRD).\" <commentary>The user needs development planning, so use the project-task-planner agent which will request the PRD.</commentary></example> (Tools: Task, Bash, Edit, MultiEdit, Write, NotebookEdit, Grep, LS, Read, ExitPlanMode, TodoWrite, WebSearch)\n- vibe-coding-coach: Use this agent when users want to build applications through conversation, focusing on the vision and feel of their app rather than technical implementation details. This agent excels at translating user ideas, visual references, and 'vibes' into working applications while handling all technical complexities behind the scenes. <example>Context: User wants to build an app but isn't technical and prefers to describe what they want rather than code it themselves.\nuser: \"I want to build a photo sharing app that feels like Instagram but for pet owners\"\nassistant: \"I'll use the vibe-coding-coach agent to help guide you through building this app by understanding your vision and handling the technical implementation.\"\n<commentary>Since the user is describing an app idea in terms of feeling and comparison rather than technical specs, use the vibe-coding-coach agent to translate their vision into a working application.</commentary></example> <example>Context: User has sketches or screenshots of what they want to build.\nuser: \"Here's a screenshot of an app I like. Can we build something similar but for tracking workouts?\"\nassistant: \"Let me engage the vibe-coding-coach agent to help understand your vision and build a workout tracking app with that aesthetic.\"\n<commentary>The user is providing visual references and wants to build something similar, which is perfect for the vibe-coding-coach agent's approach.</commentary></example> (Tools: *)\n- debug-system-architect: Use this agent when you need to establish a comprehensive debug logging system for a project. This includes setting up log directories, implementing node-level tracing, creating time-based test records, establishing replay mechanisms, and documenting debug rules. Example: <example> Context: User is setting up a new project and wants to implement proper debugging infrastructure from the start. user: \"Please help me set up a debug system for my new API router project\" <commentary> Since the user is requesting debug system setup, use the debug-system-architect agent to analyze the project and implement comprehensive logging and tracing mechanisms. </commentary> </example> <example> Context: User encounters intermittent issues in their routing system and needs better visibility. user: \"I'm having trouble tracking down why some requests fail intermittently\" <commentary> Since the user needs better debugging visibility for intermittent issues, use the debug-system-architect agent to implement node-level tracing and replay mechanisms. </commentary> </example> (Tools: *)\n- code-risk-auditor: Use this agent when you need to perform comprehensive code risk assessment and identify potential architectural issues in your codebase. Examples: <example>Context: The user has just completed a major refactoring and wants to ensure no hardcoded values or fallback mechanisms were introduced. user: \"I just finished refactoring the routing system, can you check for any code risks?\" assistant: \"I'll use the code-risk-auditor agent to perform a comprehensive risk assessment of your routing system changes.\"</example> <example>Context: Before a major release, the user wants to clean up technical debt and ensure code quality. user: \"We're preparing for v2.0 release, I need a full code audit\" assistant: \"Let me launch the code-risk-auditor agent to identify hardcoding, fallback risks, outdated tests, and duplicate implementations across the entire codebase.\"</example> <example>Context: The user notices inconsistent behavior and suspects duplicate implementations. user: \"The same feature seems to be implemented in multiple places, causing bugs\" assistant: \"I'll use the code-risk-auditor agent to scan for duplicate implementations and provide a consolidation plan.\"</example> (Tools: *)\n- security-auditor: Use this agent when you need to perform a comprehensive security audit of a codebase, identify vulnerabilities, and generate a detailed security report with actionable remediation steps. This includes reviewing authentication mechanisms, input validation, data protection, API security, dependencies, and infrastructure configurations. Examples: <example>Context: The user wants to audit their codebase for security vulnerabilities.\nuser: \"Can you perform a security audit of my application?\"\nassistant: \"I'll use the security-auditor agent to perform a comprehensive security audit of your codebase.\"\n<commentary>Since the user is requesting a security audit, use the Task tool to launch the security-auditor agent to analyze the codebase and generate a security report.</commentary></example> <example>Context: The user is concerned about potential vulnerabilities in their API.\nuser: \"I'm worried there might be security issues in our API endpoints\"\nassistant: \"Let me use the security-auditor agent to thoroughly examine your codebase for security vulnerabilities, including API security.\"\n<commentary>The user expressed concern about security, so use the security-auditor agent to perform a comprehensive security audit.</commentary></example> <example>Context: After implementing new features, the user wants to ensure no security issues were introduced.\nuser: \"We just added user authentication to our app. Can you check if it's secure?\"\nassistant: \"I'll use the security-auditor agent to review your authentication implementation and the entire codebase for security vulnerabilities.\"\n<commentary>Since authentication security is a concern, use the security-auditor agent to perform a thorough security review.</commentary></example> (Tools: Task, Bash, Edit, MultiEdit, Write, NotebookEdit)\n- project-memory-manager: Use this agent when you need to manage project-specific memory entries, create project documentation, or organize project knowledge. This includes creating project summaries, documenting project decisions, tracking project progress, and maintaining project-specific knowledge bases. <example>Context: User wants to document a project decision or create project documentation. user: \"请为我们的新项目创建一个内存管理系统的文档\" assistant: \"我将使用 project-memory-manager agent 来创建这个项目文档\" <commentary>Since the user needs project documentation, use the project-memory-manager agent to create project-specific memory entries.</commentary></example> <example>Context: User wants to track project progress or decisions. user: \"我们需要记录这个项目的关键决策点\" assistant: \"让我使用 project-memory-manager agent 来记录这些项目决策\" <commentary>Since this is project tracking, use the project-memory-manager agent to create decision-type memory entries.</commentary></example> (Tools: *)\n- rules-architect: Use this agent when you need to analyze project architecture and establish comprehensive rule management systems. Examples: <example>Context: User wants to organize project rules and create a structured rule management system. user: \"I need to reorganize our project rules and create a better structure for managing coding standards, file organization, and testing protocols\" assistant: \"I'll use the rules-architect agent to analyze the current project structure and establish a comprehensive rule management system with proper categorization and organization.\"</example> <example>Context: Project has grown complex and needs better rule organization. user: \"Our CLAUDE.md file is getting too large and we need to break down rules into manageable categories\" assistant: \"Let me call the rules-architect agent to create a structured .claude/rules system that will organize all project rules into logical categories.\"</example> (Tools: *)\n- frontend-designer: Use this agent when you need to convert design mockups, wireframes, or visual concepts into detailed technical specifications and implementation guides for frontend development. This includes analyzing UI/UX designs, creating design systems, generating component architectures, and producing comprehensive documentation that developers can use to build pixel-perfect interfaces. Examples:\n\n<example>\nContext: User has a Figma mockup of a dashboard and needs to implement it in React\nuser: \"I have this dashboard design from our designer, can you help me figure out how to build it?\"\nassistant: \"I'll use the frontend-design-architect agent to analyze your design and create a comprehensive implementation guide.\"\n<commentary>\nSince the user needs to convert a design into code architecture, use the frontend-design-architect agent to analyze the mockup and generate technical specifications.\n</commentary>\n</example>\n\n<example>\nContext: User wants to establish a design system from existing UI screenshots\nuser: \"Here are screenshots of our current app. We need to extract a consistent design system from these.\"\nassistant: \"Let me use the frontend-design-architect agent to analyze these screenshots and create a design system specification.\"\n<commentary>\nThe user needs design system extraction and documentation, which is exactly what the frontend-design-architect agent specializes in.\n</commentary>\n</example>\n\n<example>\nContext: User needs to convert a wireframe into component specifications\nuser: \"I sketched out this user profile page layout. How should I structure the components?\"\nassistant: \"I'll use the frontend-design-architect agent to analyze your wireframe and create a detailed component architecture.\"\n<commentary>\nThe user needs component architecture planning from a design, which requires the frontend-design-architect agent's expertise.\n</commentary>\n</example> (Tools: *)\n- content-writer: Use this agent when you need to create compelling, informative content that explains complex topics in simple terms. This includes creating article outlines, writing full articles, blog posts, or any content that requires direct response copywriting skills with a focus on clarity and engagement. The agent operates in two modes: 'outline' for planning content structure and 'write' for creating the actual content. Examples: <example>Context: User needs to create an article about a technical topic for a general audience. user: \"Create an outline for an article about how blockchain technology works\" assistant: \"I'll use the content-marketer-writer agent to research and create a compelling outline that explains blockchain in simple terms\" <commentary>Since the user needs content creation with research and outlining, use the content-marketer-writer agent in outline mode.</commentary></example> <example>Context: User has an outline and needs to write the full article. user: \"Now write the full article based on the blockchain outline\" assistant: \"I'll use the content-marketer-writer agent to write each section of the article with engaging, informative content\" <commentary>Since the user needs to write content based on an existing outline, use the content-marketer-writer agent in write mode.</commentary></example> (Tools: *)\n- test-runner: Use this agent to run and manage tests according to the global and project-specific testing rules. This includes executing test scripts, documenting test results, and helping to diagnose issues following the standard pipeline. <example>Context: User wants to run all functional tests. user: \"运行所有功能测试\" assistant: \"我将使用 test-runner agent 来执行所有功能测试\" <commentary>Since the user wants to run tests by category, use the test-runner agent.</commentary></example> <example>Context: User wants to verify a bug fix. user: \"我修复了一个bug，帮我验证一下\" assistant: \"让我使用 test-runner agent 来执行对应的修复验证测试\" <commentary>The user needs to verify a fix, which is a core task for the test-runner agent.</commentary></example> (Tools: *)\n- in-depth-research-analyst: Use this agent when you need to conduct comprehensive research reports with in-depth web mining, data analysis, and visualization. This includes industry analysis, market research, competitive intelligence, and trend forecasting with accurate data from authoritative sources. <example>Context: User wants a comprehensive industry analysis report. user: \"请对人工智能芯片市场进行深入调研，包括主要厂商、市场份额和增长趋势\" assistant: \"我将使用 in-depth-research-analyst agent 来进行这项深入的市场调研并生成可视化报告\" <commentary>Since the user needs a comprehensive industry analysis with data visualization, use the in-depth-research-analyst agent to conduct thorough research and create an integrated report.</commentary></example> <example>Context: User wants market research with accurate data and visualizations. user: \"我们需要一份关于电动汽车充电基础设施的深度报告，包含数据图表\" assistant: \"让我使用 in-depth-research-analyst agent 来收集准确数据并生成图文并茂的分析报告\" <commentary>Since this requires market research with data accuracy and visualizations, use the in-depth-research-analyst agent to create a comprehensive report.</commentary></example> (Tools: *)\n- prd-writer: Use this agent when you need to create a comprehensive Product Requirements Document (PRD) for a software project or feature. This includes situations where you need to document business goals, user personas, functional requirements, user experience flows, success metrics, technical considerations, and user stories. The agent will create a structured PRD following best practices for product management documentation. Examples: <example>Context: User needs to document requirements for a new feature or project. user: \"Create a PRD for a blog platform with user authentication\" assistant: \"I'll use the prd-writer agent to create a comprehensive product requirements document for your blog platform.\" <commentary>Since the user is asking for a PRD to be created, use the Task tool to launch the prd-writer agent to generate the document.</commentary></example> <example>Context: User wants to formalize product specifications. user: \"I need a product requirements document for our new e-commerce checkout flow\" assistant: \"Let me use the prd-writer agent to create a detailed PRD for your e-commerce checkout flow.\" <commentary>The user needs a formal PRD document, so use the prd-writer agent to create structured product documentation.</commentary></example> (Tools: Task, Bash, Grep, LS, Read, Write, WebSearch, Glob)\n- pipeline-debug-universal: Use this agent when you need to implement comprehensive debug hooks and testing infrastructure for ANY pipeline system - whether it's API routing, data processing, CI/CD workflows, or transformation pipelines. This agent specializes in creating universal debug architectures that work across different pipeline types with data capture, replay capabilities, and systematic testing matrices. Examples: <example>Context: User is working on a multi-provider API routing system and needs to add debug capabilities to track data flow through each pipeline step. user: \"I need to add debug hooks to our routing pipeline so we can capture and replay data at each step\" assistant: \"I'll use the pipeline-debug-universal agent to design a comprehensive debug infrastructure with data capture and replay capabilities\" <commentary>Since the user needs pipeline debugging infrastructure, use the pipeline-debug-universal agent to create debug hooks and testing matrices.</commentary></example> <example>Context: User has a complex data transformation pipeline and wants to build systematic testing for each stage and provider. user: \"Our data processing pipeline has issues and we need better testing infrastructure to isolate problems at each step\" assistant: \"Let me use the pipeline-debug-universal agent to create a complete testing matrix and debug system\" <commentary>Since the user needs systematic pipeline testing infrastructure, use the pipeline-debug-universal agent to architect the testing system.</commentary></example> <example>Context: User is building a CI/CD pipeline and needs to implement debug capabilities for tracking deployment issues. user: \"Our deployment pipeline fails randomly and we can't reproduce the issues consistently\" assistant: \"I'll deploy the pipeline-debug-universal agent to create comprehensive debug hooks and replay capabilities for your CI/CD pipeline\" <commentary>Since the user needs debug infrastructure for a deployment pipeline, use the pipeline-debug-universal agent to design the debug system.</commentary></example> (Tools: *)\n\nWhen using the Task tool, you must specify a subagent_type parameter to select which agent type to use.\n\n\n\nWhen NOT to use the Agent tool:\n- If you want to read a specific file path, use the Read or Glob tool instead of the Agent tool, to find the match more quickly\n- If you are searching for a specific class definition like \"class Foo\", use the Glob tool instead, to find the match more quickly\n- If you are searching for code within a specific file or set of 2-3 files, use the Read tool instead of the Agent tool, to find the match more quickly\n- Other tasks that are not related to the agent descriptions above\n\n\nUsage notes:\n1. Launch multiple agents concurrently whenever possible, to maximize performance; to do that, use a single message with multiple tool uses\n2. When the agent is done, it will return a single message back to you. The result returned by the agent is not visible to the user. To show the user the result, you should send a text message back to the user with a concise summary of the result.\n3. Each agent invocation is stateless. You will not be able to send additional messages to the agent, nor will the agent be able to communicate with you outside of its final report. Therefore, your prompt should contain a highly detailed task description for the agent to perform autonomously and you should specify exactly what information the agent should return back to you in its final and only message to you.\n4. The agent's outputs should generally be trusted\n5. Clearly tell the agent whether you expect it to write code or just to do research (search, file reads, web fetches, etc.), since it is not aware of the user's intent\n6. If the agent description mentions that it should be used proactively, then you should try your best to use it without the user having to ask for it first. Use your judgement.\n\nExample usage:\n\n<example_agent_descriptions>\n\"code-reviewer\": use this agent after you are done writing a signficant piece of code\n\"greeting-responder\": use this agent when to respond to user greetings with a friendly joke\n</example_agent_description>\n\n<example>\nuser: \"Please write a function that checks if a number is prime\"\nassistant: Sure let me write a function that checks if a number is prime\nassistant: First let me use the Write tool to write a function that checks if a number is prime\nassistant: I'm going to use the Write tool to write the following code:\n<code>\nfunction isPrime(n) {\n  if (n <= 1) return false\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n</code>\n<commentary>\nSince a signficant piece of code was written and the task was completed, now use the code-reviewer agent to review the code\n</commentary>\nassistant: Now let me use the code-reviewer agent to review the code\nassistant: Uses the Task tool to launch the with the code-reviewer agent\n</example>\n\n<example>\nuser: \"Hello\"\n<commentary>\nSince the user is greeting, use the greeting-responder agent to respond with a friendly joke\n</commentary>\nassistant: \"I'm going to use the Task tool to launch the with the greeting-responder agent\"\n</example>\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "description": {
                "type": "string",
                "description": "A short (3-5 word) description of the task"
              },
              "prompt": {
                "type": "string",
                "description": "The task for the agent to perform"
              },
              "subagent_type": {
                "type": "string",
                "description": "The type of specialized agent to use for this task"
              }
            },
            "required": [
              "description",
              "prompt",
              "subagent_type"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Bash",
          "description": "Executes a given bash command in a persistent shell session with optional timeout, ensuring proper handling and security measures.\n\nBefore executing the command, please follow these steps:\n\n1. Directory Verification:\n   - If the command will create new directories or files, first use the LS tool to verify the parent directory exists and is the correct location\n   - For example, before running \"mkdir foo/bar\", first use LS to check that \"foo\" exists and is the intended parent directory\n\n2. Command Execution:\n   - Always quote file paths that contain spaces with double quotes (e.g., cd \"path with spaces/file.txt\")\n   - Examples of proper quoting:\n     - cd \"/Users/name/My Documents\" (correct)\n     - cd /Users/name/My Documents (incorrect - will fail)\n     - python \"/path/with spaces/script.py\" (correct)\n     - python /path/with spaces/script.py (incorrect - will fail)\n   - After ensuring proper quoting, execute the command.\n   - Capture the output of the command.\n\nUsage notes:\n  - The command argument is required.\n  - You can specify an optional timeout in milliseconds (up to 600000ms / 10 minutes). If not specified, commands will timeout after 120000ms (2 minutes).\n  - It is very helpful if you write a clear, concise description of what this command does in 5-10 words.\n  - If the output exceeds 30000 characters, output will be truncated before being returned to you.\n  - VERY IMPORTANT: You MUST avoid using search commands like `find` and `grep`. Instead use Grep, Glob, or Task to search. You MUST avoid read tools like `cat`, `head`, `tail`, and `ls`, and use Read and LS to read files.\n - If you _still_ need to run `grep`, STOP. ALWAYS USE ripgrep at `rg` first, which all ${PRODUCT_NAME} users have pre-installed.\n  - When issuing multiple commands, use the ';' or '&&' operator to separate them. DO NOT use newlines (newlines are ok in quoted strings).\n  - Try to maintain your current working directory throughout the session by using absolute paths and avoiding usage of `cd`. You may use `cd` if the User explicitly requests it.\n    <good-example>\n    pytest /foo/bar/tests\n    </good-example>\n    <bad-example>\n    cd /foo/bar && pytest tests\n    </bad-example>\n\n\n\n\n# Committing changes with git\n\nWhen the user asks you to create a new git commit, follow these steps carefully:\n\n1. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following bash commands in parallel, each using the Bash tool:\n  - Run a git status command to see all untracked files.\n  - Run a git diff command to see both staged and unstaged changes that will be committed.\n  - Run a git log command to see recent commit messages, so that you can follow this repository's commit message style.\n2. Analyze all staged changes (both previously staged and newly added) and draft a commit message:\n  - Summarize the nature of the changes (eg. new feature, enhancement to an existing feature, bug fix, refactoring, test, docs, etc.). Ensure the message accurately reflects the changes and their purpose (i.e. \"add\" means a wholly new feature, \"update\" means an enhancement to an existing feature, \"fix\" means a bug fix, etc.).\n  - Check for any sensitive information that shouldn't be committed\n  - Draft a concise (1-2 sentences) commit message that focuses on the \"why\" rather than the \"what\"\n  - Ensure it accurately reflects the changes and their purpose\n3. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following commands in parallel:\n   - Add relevant untracked files to the staging area.\n   - Create the commit with a message ending with:\n   🤖 Generated with [Claude Code](https://claude.ai/code)\n\n   Co-Authored-By: Claude <noreply@anthropic.com>\n   - Run git status to make sure the commit succeeded.\n4. If the commit fails due to pre-commit hook changes, retry the commit ONCE to include these automated changes. If it fails again, it usually means a pre-commit hook is preventing the commit. If the commit succeeds but you notice that files were modified by the pre-commit hook, you MUST amend your commit to include them.\n\nImportant notes:\n- NEVER update the git config\n- NEVER run additional commands to read or explore code, besides git bash commands\n- NEVER use the TodoWrite or Task tools\n- DO NOT push to the remote repository unless the user explicitly asks you to do so\n- IMPORTANT: Never use git commands with the -i flag (like git rebase -i or git add -i) since they require interactive input which is not supported.\n- If there are no changes to commit (i.e., no untracked files and no modifications), do not create an empty commit\n- In order to ensure good formatting, ALWAYS pass the commit message via a HEREDOC, a la this example:\n<example>\ngit commit -m \"$(cat <<'EOF'\n   Commit message here.\n\n   🤖 Generated with [Claude Code](https://claude.ai/code)\n\n   Co-Authored-By: Claude <noreply@anthropic.com>\n   EOF\n   )\"\n</example>\n\n# Creating pull requests\nUse the gh command via the Bash tool for ALL GitHub-related tasks including working with issues, pull requests, checks, and releases. If given a Github URL use the gh command to get the information needed.\n\nIMPORTANT: When the user asks you to create a pull request, follow these steps carefully:\n\n1. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following bash commands in parallel using the Bash tool, in order to understand the current state of the branch since it diverged from the main branch:\n   - Run a git status command to see all untracked files\n   - Run a git diff command to see both staged and unstaged changes that will be committed\n   - Check if the current branch tracks a remote branch and is up to date with the remote, so you know if you need to push to the remote\n   - Run a git log command and `git diff [base-branch]...HEAD` to understand the full commit history for the current branch (from the time it diverged from the base branch)\n2. Analyze all changes that will be included in the pull request, making sure to look at all relevant commits (NOT just the latest commit, but ALL commits that will be included in the pull request!!!), and draft a pull request summary\n3. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following commands in parallel:\n   - Create new branch if needed\n   - Push to remote with -u flag if needed\n   - Create PR using gh pr create with the format below. Use a HEREDOC to pass the body to ensure correct formatting.\n<example>\ngh pr create --title \"the pr title\" --body \"$(cat <<'EOF'\n## Summary\n<1-3 bullet points>\n\n## Test plan\n[Checklist of TODOs for testing the pull request...]\n\n🤖 Generated with [Claude Code](https://claude.ai/code)\nEOF\n)\"\n</example>\n\nImportant:\n- NEVER update the git config\n- DO NOT use the TodoWrite or Task tools\n- Return the PR URL when you're done, so the user can see it\n\n# Other common operations\n- View comments on a Github PR: gh api repos/foo/bar/pulls/123/comments",
          "input_schema": {
            "type": "object",
            "properties": {
              "command": {
                "type": "string",
                "description": "The command to execute"
              },
              "timeout": {
                "type": "number",
                "description": "Optional timeout in milliseconds (max 600000)"
              },
              "description": {
                "type": "string",
                "description": " Clear, concise description of what this command does in 5-10 words. Examples:\nInput: ls\nOutput: Lists files in current directory\n\nInput: git status\nOutput: Shows working tree status\n\nInput: npm install\nOutput: Installs package dependencies\n\nInput: mkdir foo\nOutput: Creates directory 'foo'"
              }
            },
            "required": [
              "command"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Glob",
          "description": "- Fast file pattern matching tool that works with any codebase size\n- Supports glob patterns like \"**/*.js\" or \"src/**/*.ts\"\n- Returns matching file paths sorted by modification time\n- Use this tool when you need to find files by name patterns\n- When you are doing an open ended search that may require multiple rounds of globbing and grepping, use the Agent tool instead\n- You have the capability to call multiple tools in a single response. It is always better to speculatively perform multiple searches as a batch that are potentially useful.",
          "input_schema": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "The glob pattern to match files against"
              },
              "path": {
                "type": "string",
                "description": "The directory to search in. If not specified, the current working directory will be used. IMPORTANT: Omit this field to use the default directory. DO NOT enter \"undefined\" or \"null\" - simply omit it for the default behavior. Must be a valid directory path if provided."
              }
            },
            "required": [
              "pattern"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Grep",
          "description": "A powerful search tool built on ripgrep\n\n  Usage:\n  - ALWAYS use Grep for search tasks. NEVER invoke `grep` or `rg` as a Bash command. The Grep tool has been optimized for correct permissions and access.\n  - Supports full regex syntax (e.g., \"log.*Error\", \"function\\s+\\w+\")\n  - Filter files with glob parameter (e.g., \"*.js\", \"**/*.tsx\") or type parameter (e.g., \"js\", \"py\", \"rust\")\n  - Output modes: \"content\" shows matching lines, \"files_with_matches\" shows only file paths (default), \"count\" shows match counts\n  - Use Task tool for open-ended searches requiring multiple rounds\n  - Pattern syntax: Uses ripgrep (not grep) - literal braces need escaping (use `interface\\{\\}` to find `interface{}` in Go code)\n  - Multiline matching: By default patterns match within single lines only. For cross-line patterns like `struct \\{[\\s\\S]*?field`, use `multiline: true`\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "The regular expression pattern to search for in file contents"
              },
              "path": {
                "type": "string",
                "description": "File or directory to search in (rg PATH). Defaults to current working directory."
              },
              "glob": {
                "type": "string",
                "description": "Glob pattern to filter files (e.g. \"*.js\", \"*.{ts,tsx}\") - maps to rg --glob"
              },
              "output_mode": {
                "type": "string",
                "enum": [
                  "content",
                  "files_with_matches",
                  "count"
                ],
                "description": "Output mode: \"content\" shows matching lines (supports -A/-B/-C context, -n line numbers, head_limit), \"files_with_matches\" shows file paths (supports head_limit), \"count\" shows match counts (supports head_limit). Defaults to \"files_with_matches\"."
              },
              "-B": {
                "type": "number",
                "description": "Number of lines to show before each match (rg -B). Requires output_mode: \"content\", ignored otherwise."
              },
              "-A": {
                "type": "number",
                "description": "Number of lines to show after each match (rg -A). Requires output_mode: \"content\", ignored otherwise."
              },
              "-C": {
                "type": "number",
                "description": "Number of lines to show before and after each match (rg -C). Requires output_mode: \"content\", ignored otherwise."
              },
              "-n": {
                "type": "boolean",
                "description": "Show line numbers in output (rg -n). Requires output_mode: \"content\", ignored otherwise."
              },
              "-i": {
                "type": "boolean",
                "description": "Case insensitive search (rg -i)"
              },
              "type": {
                "type": "string",
                "description": "File type to search (rg --type). Common types: js, py, rust, go, java, etc. More efficient than include for standard file types."
              },
              "head_limit": {
                "type": "number",
                "description": "Limit output to first N lines/entries, equivalent to \"| head -N\". Works across all output modes: content (limits output lines), files_with_matches (limits file paths), count (limits count entries). When unspecified, shows all results from ripgrep."
              },
              "multiline": {
                "type": "boolean",
                "description": "Enable multiline mode where . matches newlines and patterns can span lines (rg -U --multiline-dotall). Default: false."
              }
            },
            "required": [
              "pattern"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "LS",
          "description": "Lists files and directories in a given path. The path parameter must be an absolute path, not a relative path. You can optionally provide an array of glob patterns to ignore with the ignore parameter. You should generally prefer the Glob and Grep tools, if you know which directories to search.",
          "input_schema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "The absolute path to the directory to list (must be absolute, not relative)"
              },
              "ignore": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of glob patterns to ignore"
              }
            },
            "required": [
              "path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "ExitPlanMode",
          "description": "Use this tool when you are in plan mode and have finished presenting your plan and are ready to code. This will prompt the user to exit plan mode.\nIMPORTANT: Only use this tool when the task requires planning the implementation steps of a task that requires writing code. For research tasks where you're gathering information, searching files, reading files or in general trying to understand the codebase - do NOT use this tool.\n\nEg.\n1. Initial task: \"Search for and understand the implementation of vim mode in the codebase\" - Do not use the exit plan mode tool because you are not planning the implementation steps of a task.\n2. Initial task: \"Help me implement yank mode for vim\" - Use the exit plan mode tool after you have finished planning the implementation steps of the task.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "plan": {
                "type": "string",
                "description": "The plan you came up with, that you want to run by the user for approval. Supports markdown. The plan should be pretty concise."
              }
            },
            "required": [
              "plan"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Read",
          "description": "Reads a file from the local filesystem. You can access any file directly by using this tool.\nAssume this tool is able to read all files on the machine. If the User provides a path to a file assume that path is valid. It is okay to read a file that does not exist; an error will be returned.\n\nUsage:\n- The file_path parameter must be an absolute path, not a relative path\n- By default, it reads up to 2000 lines starting from the beginning of the file\n- You can optionally specify a line offset and limit (especially handy for long files), but it's recommended to read the whole file by not providing these parameters\n- Any lines longer than 2000 characters will be truncated\n- Results are returned using cat -n format, with line numbers starting at 1\n- This tool allows Claude Code to read images (eg PNG, JPG, etc). When reading an image file the contents are presented visually as Claude Code is a multimodal LLM.\n- This tool can read PDF files (.pdf). PDFs are processed page by page, extracting both text and visual content for analysis.\n- For Jupyter notebooks (.ipynb files), use the NotebookRead instead\n- You have the capability to call multiple tools in a single response. It is always better to speculatively read multiple files as a batch that are potentially useful.\n- You will regularly be asked to read screenshots. If the user provides a path to a screenshot ALWAYS use this tool to view the file at the path. This tool will work with all temporary file paths like /var/folders/123/abc/T/TemporaryItems/NSIRD_screencaptureui_ZfB1tD/Screenshot.png\n- If you read a file that exists but has empty contents you will receive a system reminder warning in place of file contents.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to read"
              },
              "offset": {
                "type": "number",
                "description": "The line number to start reading from. Only provide if the file is too large to read at once"
              },
              "limit": {
                "type": "number",
                "description": "The number of lines to read. Only provide if the file is too large to read at once."
              }
            },
            "required": [
              "file_path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Edit",
          "description": "Performs exact string replacements in files.\n\nUsage:\n- You must use your `Read` tool at least once in the conversation before editing. This tool will error if you attempt an edit without reading the file.\n- When editing text from Read tool output, ensure you preserve the exact indentation (tabs/spaces) as it appears AFTER the line number prefix. The line number prefix format is: spaces + line number + tab. Everything after that tab is the actual file content to match. Never include any part of the line number prefix in the old_string or new_string.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- Only use emojis if the user explicitly requests it. Avoid adding emojis to files unless asked.\n- The edit will FAIL if `old_string` is not unique in the file. Either provide a larger string with more surrounding context to make it unique or use `replace_all` to change every instance of `old_string`.\n- Use `replace_all` for replacing and renaming strings across the file. This parameter is useful if you want to rename a variable for instance.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to modify"
              },
              "old_string": {
                "type": "string",
                "description": "The text to replace"
              },
              "new_string": {
                "type": "string",
                "description": "The text to replace it with (must be different from old_string)"
              },
              "replace_all": {
                "type": "boolean",
                "default": false,
                "description": "Replace all occurences of old_string (default false)"
              }
            },
            "required": [
              "file_path",
              "old_string",
              "new_string"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "MultiEdit",
          "description": "This is a tool for making multiple edits to a single file in one operation. It is built on top of the Edit tool and allows you to perform multiple find-and-replace operations efficiently. Prefer this tool over the Edit tool when you need to make multiple edits to the same file.\n\nBefore using this tool:\n\n1. Use the Read tool to understand the file's contents and context\n2. Verify the directory path is correct\n\nTo make multiple file edits, provide the following:\n1. file_path: The absolute path to the file to modify (must be absolute, not relative)\n2. edits: An array of edit operations to perform, where each edit contains:\n   - old_string: The text to replace (must match the file contents exactly, including all whitespace and indentation)\n   - new_string: The edited text to replace the old_string\n   - replace_all: Replace all occurences of old_string. This parameter is optional and defaults to false.\n\nIMPORTANT:\n- All edits are applied in sequence, in the order they are provided\n- Each edit operates on the result of the previous edit\n- All edits must be valid for the operation to succeed - if any edit fails, none will be applied\n- This tool is ideal when you need to make several changes to different parts of the same file\n- For Jupyter notebooks (.ipynb files), use the NotebookEdit instead\n\nCRITICAL REQUIREMENTS:\n1. All edits follow the same requirements as the single Edit tool\n2. The edits are atomic - either all succeed or none are applied\n3. Plan your edits carefully to avoid conflicts between sequential operations\n\nWARNING:\n- The tool will fail if edits.old_string doesn't match the file contents exactly (including whitespace)\n- The tool will fail if edits.old_string and edits.new_string are the same\n- Since edits are applied in sequence, ensure that earlier edits don't affect the text that later edits are trying to find\n\nWhen making edits:\n- Ensure all edits result in idiomatic, correct code\n- Do not leave the code in a broken state\n- Always use absolute file paths (starting with /)\n- Only use emojis if the user explicitly requests it. Avoid adding emojis to files unless asked.\n- Use replace_all for replacing and renaming strings across the file. This parameter is useful if you want to rename a variable for instance.\n\nIf you want to create a new file, use:\n- A new file path, including dir name if needed\n- First edit: empty old_string and the new file's contents as new_string\n- Subsequent edits: normal edit operations on the created content",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to modify"
              },
              "edits": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "old_string": {
                      "type": "string",
                      "description": "The text to replace"
                    },
                    "new_string": {
                      "type": "string",
                      "description": "The text to replace it with"
                    },
                    "replace_all": {
                      "type": "boolean",
                      "default": false,
                      "description": "Replace all occurences of old_string (default false)."
                    }
                  },
                  "required": [
                    "old_string",
                    "new_string"
                  ],
                  "additionalProperties": false
                },
                "minItems": 1,
                "description": "Array of edit operations to perform sequentially on the file"
              }
            },
            "required": [
              "file_path",
              "edits"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Write",
          "description": "Writes a file to the local filesystem.\n\nUsage:\n- This tool will overwrite the existing file if there is one at the provided path.\n- If this is an existing file, you MUST use the Read tool first to read the file's contents. This tool will fail if you did not read the file first.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- NEVER proactively create documentation files (*.md) or README files. Only create documentation files if explicitly requested by the User.\n- Only use emojis if the user explicitly requests it. Avoid writing emojis to files unless asked.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to write (must be absolute, not relative)"
              },
              "content": {
                "type": "string",
                "description": "The content to write to the file"
              }
            },
            "required": [
              "file_path",
              "content"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "NotebookRead",
          "description": "Reads a Jupyter notebook (.ipynb file) and returns all of the cells with their outputs. Jupyter notebooks are interactive documents that combine code, text, and visualizations, commonly used for data analysis and scientific computing. The notebook_path parameter must be an absolute path, not a relative path.",
          "input_schema": {
            "type": "object",
            "properties": {
              "notebook_path": {
                "type": "string",
                "description": "The absolute path to the Jupyter notebook file to read (must be absolute, not relative)"
              },
              "cell_id": {
                "type": "string",
                "description": "The ID of a specific cell to read. If not provided, all cells will be read."
              }
            },
            "required": [
              "notebook_path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "NotebookEdit",
          "description": "Completely replaces the contents of a specific cell in a Jupyter notebook (.ipynb file) with new source. Jupyter notebooks are interactive documents that combine code, text, and visualizations, commonly used for data analysis and scientific computing. The notebook_path parameter must be an absolute path, not a relative path. The cell_number is 0-indexed. Use edit_mode=insert to add a new cell at the index specified by cell_number. Use edit_mode=delete to delete the cell at the index specified by cell_number.",
          "input_schema": {
            "type": "object",
            "properties": {
              "notebook_path": {
                "type": "string",
                "description": "The absolute path to the Jupyter notebook file to edit (must be absolute, not relative)"
              },
              "cell_id": {
                "type": "string",
                "description": "The ID of the cell to edit. When inserting a new cell, the new cell will be inserted after the cell with this ID, or at the beginning if not specified."
              },
              "new_source": {
                "type": "string",
                "description": "The new source for the cell"
              },
              "cell_type": {
                "type": "string",
                "enum": [
                  "code",
                  "markdown"
                ],
                "description": "The type of the cell (code or markdown). If not specified, it defaults to the current cell type. If using edit_mode=insert, this is required."
              },
              "edit_mode": {
                "type": "string",
                "enum": [
                  "replace",
                  "insert",
                  "delete"
                ],
                "description": "The type of edit to make (replace, insert, delete). Defaults to replace."
              }
            },
            "required": [
              "notebook_path",
              "new_source"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "WebFetch",
          "description": "\n- Fetches content from a specified URL and processes it using an AI model\n- Takes a URL and a prompt as input\n- Fetches the URL content, converts HTML to markdown\n- Processes the content with the prompt using a small, fast model\n- Returns the model's response about the content\n- Use this tool when you need to retrieve and analyze web content\n\nUsage notes:\n  - IMPORTANT: If an MCP-provided web fetch tool is available, prefer using that tool instead of this one, as it may have fewer restrictions. All MCP-provided tools start with \"mcp__\".\n  - The URL must be a fully-formed valid URL\n  - HTTP URLs will be automatically upgraded to HTTPS\n  - The prompt should describe what information you want to extract from the page\n  - This tool is read-only and does not modify any files\n  - Results may be summarized if the content is very large\n  - Includes a self-cleaning 15-minute cache for faster responses when repeatedly accessing the same URL\n  - When a URL redirects to a different host, the tool will inform you and provide the redirect URL in a special format. You should then make a new WebFetch request with the redirect URL to fetch the content.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "format": "uri",
                "description": "The URL to fetch content from"
              },
              "prompt": {
                "type": "string",
                "description": "The prompt to run on the fetched content"
              }
            },
            "required": [
              "url",
              "prompt"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "TodoWrite",
          "description": "Use this tool to create and manage a structured task list for your current coding session. This helps you track progress, organize complex tasks, and demonstrate thoroughness to the user.\nIt also helps the user understand the progress of the task and overall progress of their requests.\n\n## When to Use This Tool\nUse this tool proactively in these scenarios:\n\n1. Complex multi-step tasks - When a task requires 3 or more distinct steps or actions\n2. Non-trivial and complex tasks - Tasks that require careful planning or multiple operations\n3. User explicitly requests todo list - When the user directly asks you to use the todo list\n4. User provides multiple tasks - When users provide a list of things to be done (numbered or comma-separated)\n5. After receiving new instructions - Immediately capture user requirements as todos\n6. When you start working on a task - Mark it as in_progress BEFORE beginning work. Ideally you should only have one todo as in_progress at a time\n7. After completing a task - Mark it as completed and add any new follow-up tasks discovered during implementation\n\n## When NOT to Use This Tool\n\nSkip using this tool when:\n1. There is only a single, straightforward task\n2. The task is trivial and tracking it provides no organizational benefit\n3. The task can be completed in less than 3 trivial steps\n4. The task is purely conversational or informational\n\nNOTE that you should not use this tool if there is only one trivial task to do. In this case you are better off just doing the task directly.\n\n## Examples of When to Use the Todo List\n\n<example>\nUser: I want to add a dark mode toggle to the application settings. Make sure you run the tests and build when you're done!\nAssistant: I'll help add a dark mode toggle to your application settings. Let me create a todo list to track this implementation.\n*Creates todo list with the following items:*\n1. Create dark mode toggle component in Settings page\n2. Add dark mode state management (context/store)\n3. Implement CSS-in-JS styles for dark theme\n4. Update existing components to support theme switching\n5. Run tests and build process, addressing any failures or errors that occur\n*Begins working on the first task*\n\n<reasoning>\nThe assistant used the todo list because:\n1. Adding dark mode is a multi-step feature requiring UI, state management, and styling changes\n2. The user explicitly requested tests and build be run afterward\n3. The assistant inferred that tests and build need to pass by adding \"Ensure tests and build succeed\" as the final task\n</reasoning>\n</example>\n\n<example>\nUser: Help me rename the function getCwd to getCurrentWorkingDirectory across my project\nAssistant: Let me first search through your codebase to find all occurrences of 'getCwd'.\n*Uses grep or search tools to locate all instances of getCwd in the codebase*\nAssistant: I've found 15 instances of 'getCwd' across 8 different files. Let me create a todo list to track these changes.\n*Creates todo list with specific items for each file that needs updating*\n\n<reasoning>\nThe assistant used the todo list because:\n1. First, the assistant searched to understand the scope of the task\n2. Upon finding multiple occurrences across different files, it determined this was a complex task with multiple steps\n3. The todo list helps ensure every instance is tracked and updated systematically\n4. This approach prevents missing any occurrences and maintains code consistency\n</reasoning>\n</example>\n\n\n<example>\nUser: I need to implement these features for my e-commerce site: user registration, product catalog, shopping cart, and checkout flow.\nAssistant: I'll help implement these features. First, let's add all the features to the todo list.\n*Creates a todo list breaking down each feature into specific tasks based on the project architecture*\nAssistant: Let's start with user registration. This will involve creating database models, API endpoints, and frontend forms that integrate with your existing authentication system.\n\n<reasoning>\nThe assistant used the todo list because:\n1. The user provided multiple complex features to implement in a comma separated list\n2. The todo list helps organize these large features into manageable tasks\n3. This approach allows for tracking progress across the entire implementation\n</reasoning>\n</example>\n\n<example>\nUser: Can you help optimize my React application? It's rendering slowly and has performance issues.</user>\nAssistant: I'll help optimize your React application. First, let me examine your codebase to identify potential performance bottlenecks.\n*Reviews component structure, render patterns, state management, and data fetching*\nAssistant: After analyzing your codebase, I've identified several performance issues. Let me create a todo list to track our optimization efforts.\n*Creates todo list with items like: 1) Implement memoization for expensive calculations in ProductList, 2) Add virtualization for long lists in Dashboard, 3) Optimize image loading in Gallery component, 4) Fix state update loops in ShoppingCart, 5) Review bundle size and implement code splitting*\nLet's start by implementing memoization for the expensive calculations in your ProductList component.</assistant>\n\n<reasoning>\nThe assistant used the todo list because:\n1. First, the assistant examined the codebase to identify specific performance issues\n2. Based on this analysis, it identified multiple optimization opportunities\n3. Performance optimization is a non-trivial task requiring multiple steps\n4. The todo list helps methodically track improvements across different components\n5. This systematic approach ensures all performance bottlenecks are addressed\n</reasoning>\n</example>\n\n## Examples of When NOT to Use the Todo List\n\n<example>\nUser: How do I print 'Hello World' in Python?\nAssistant: In Python, you can print \"Hello World\" with this simple code:\n\npython\nprint(\"Hello World\")\n\nThis will output the text \"Hello World\" to the console when executed.</assistant>\n\n<reasoning>\nThe assistant did not use the todo list because this is a single, trivial task that can be completed in one step. There's no need to track multiple tasks or steps for such a straightforward request.\n</reasoning>\n</example>\n\n<example>\nUser: What does the git status command do?\nAssistant: The git status command shows the current state of your working directory and staging area. It displays which changes have been staged, which haven't, and which files aren't being tracked by Git. This is a fundamental command for understanding the current state of your repository before making commits.\n\n<reasoning>\nThe assistant did not use the todo list because this is an informational request with no actual coding task to complete. The user is simply asking for an explanation, not for the assistant to perform multiple steps or tasks.\n</reasoning>\n</example>\n\n<example>\nUser: Can you add a comment to the calculateTotal function to explain what it does?\nAssistant: Sure, let me add a comment to the calculateTotal function to explain what it does.\n* Uses the Edit tool to add a comment to the calculateTotal function *\n\n<reasoning>\nThe assistant did not use the todo list because this is a single, straightforward task confined to one location in the code. Adding a comment doesn't require tracking multiple steps or systematic organization.\n</reasoning>\n</example>\n\n<example>\nUser: Run npm install for me and tell me what happens.\nAssistant: I'll run the npm install command for you.\n\n*Executes: npm install*\n\nThe command completed successfully. Here's the output:\n[Output of npm install command]\n\nAll dependencies have been installed according to your package.json file.\n\n<reasoning>\nThe assistant did not use the todo list because this is a single command execution with immediate results. There are no multiple steps to track or organize, making the todo list unnecessary for this straightforward task.\n</reasoning>\n</example>\n\n## Task States and Management\n\n1. **Task States**: Use these states to track progress:\n   - pending: Task not yet started\n   - in_progress: Currently working on (limit to ONE task at a time)\n   - completed: Task finished successfully\n\n2. **Task Management**:\n   - Update task status in real-time as you work\n   - Mark tasks complete IMMEDIATELY after finishing (don't batch completions)\n   - Only have ONE task in_progress at any time\n   - Complete current tasks before starting new ones\n   - Remove tasks that are no longer relevant from the list entirely\n\n3. **Task Completion Requirements**:\n   - ONLY mark a task as completed when you have FULLY accomplished it\n   - If you encounter errors, blockers, or cannot finish, keep the task as in_progress\n   - When blocked, create a new task describing what needs to be resolved\n   - Never mark a task as completed if:\n     - Tests are failing\n     - Implementation is partial\n     - You encountered unresolved errors\n     - You couldn't find necessary files or dependencies\n\n4. **Task Breakdown**:\n   - Create specific, actionable items\n   - Break complex tasks into smaller, manageable steps\n   - Use clear, descriptive task names\n\nWhen in doubt, use this tool. Being proactive with task management demonstrates attentiveness and ensures you complete all requirements successfully.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "todos": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "content": {
                      "type": "string",
                      "minLength": 1
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "pending",
                        "in_progress",
                        "completed"
                      ]
                    },
                    "priority": {
                      "type": "string",
                      "enum": [
                        "high",
                        "medium",
                        "low"
                      ]
                    },
                    "id": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "content",
                    "status",
                    "priority",
                    "id"
                  ],
                  "additionalProperties": false
                },
                "description": "The updated todo list"
              }
            },
            "required": [
              "todos"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "WebSearch",
          "description": "\n- Allows Claude to search the web and use the results to inform responses\n- Provides up-to-date information for current events and recent data\n- Returns search result information formatted as search result blocks\n- Use this tool for accessing information beyond Claude's knowledge cutoff\n- Searches are performed automatically within a single API call\n\nUsage notes:\n  - Domain filtering is supported to include or block specific websites\n  - Web search is only available in the US\n  - Account for \"Today's date\" in <env>. For example, if <env> says \"Today's date: 2025-07-01\", and the user wants the latest docs, do not use 2024 in the search query. Use 2025.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "minLength": 2,
                "description": "The search query to use"
              },
              "allowed_domains": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Only include search results from these domains"
              },
              "blocked_domains": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Never include search results from these domains"
              }
            },
            "required": [
              "query"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        }
      ],
      "responseStructure": {
        "type": "object",
        "keys": [
          "id",
          "object",
          "created",
          "model",
          "choices",
          "usage",
          "stats",
          "system_fingerprint"
        ],
        "hasChoices": true,
        "hasContent": false,
        "hasUsage": true,
        "choicesCount": 1,
        "firstChoice": {
          "hasMessage": true,
          "hasToolCalls": false,
          "finishReason": "stop"
        }
      },
      "parsingAttempts": [
        "json_format",
        "function_call",
        "action_format",
        "natural_language"
      ]
    }
  },
  {
    "timestamp": "2025-08-10T05:36:49.392Z",
    "requestId": "session_1754804126703_ixall6oy5:conv_1754804126703_sm1ur5dvo:6:1754804196424:195f",
    "provider": "lmstudio",
    "model": "gpt-oss-20b-mlx",
    "endpoint": "localhost:1234",
    "failureType": "text_instead_of_tools",
    "originalResponse": {
      "id": "chatcmpl-dahzwmeh0748ce7e57kcbx",
      "object": "chat.completion",
      "created": 1754804196,
      "model": "gpt-oss-20b-mlx",
      "choices": [
        {
          "index": 0,
          "logprobs": null,
          "finish_reason": "stop",
          "message": {
            "role": "assistant",
            "content": "User wants continue to supplement documentation. Likely want to create or edit doc files? No context yet. Let's ask clarifying question? But we should follow instructions: no to create or modify unless necessary. Probably they want to add documentation for something. Ask what specifically?Could you let me know which part of the project documentation you'd like to extend or update? For example, is there a particular feature, component, or usage scenario you’d like a new guide for? Once I know the target section, I can suggest or create the appropriate content."
          }
        }
      ],
      "usage": {
        "prompt_tokens": 14734,
        "completion_tokens": 109,
        "total_tokens": 14843
      },
      "stats": {},
      "system_fingerprint": "gpt-oss-20b-mlx"
    },
    "expectedFormat": "openai",
    "errorMessage": "All parsing strategies failed",
    "responseAnalysis": {
      "hasToolCalls": false,
      "hasContent": true,
      "contentLength": 565,
      "contentPreview": "User wants continue to supplement documentation. Likely want to create or edit doc files? No context yet. Let's ask clarifying question? But we should follow instructions: no to create or modify unles",
      "finishReason": "stop",
      "toolCallPatterns": []
    },
    "debugInfo": {
      "requestTools": [
        {
          "name": "Task",
          "description": "Launch a new agent to handle complex, multi-step tasks autonomously.\n\nAvailable agent types and the tools they have access to:\n- general-purpose: General-purpose agent for researching complex questions, searching for code, and executing multi-step tasks. When you are searching for a keyword or file and are not confident that you will find the right match in the first few tries use this agent to perform the search for you. (Tools: *)\n- code-refactorer: Use this agent when you need to improve existing code structure, readability, or maintainability without changing functionality. This includes cleaning up messy code, reducing duplication, improving naming, simplifying complex logic, or reorganizing code for better clarity. Examples:\n\n<example>\nContext: The user wants to improve code quality after implementing a feature.\nuser: \"I just finished implementing the user authentication system. Can you help clean it up?\"\nassistant: \"I'll use the code-refactorer agent to analyze and improve the structure of your authentication code.\"\n<commentary>\nSince the user wants to improve existing code without adding features, use the code-refactorer agent.\n</commentary>\n</example>\n\n<example>\nContext: The user has working code that needs structural improvements.\nuser: \"This function works but it's 200 lines long and hard to understand\"\nassistant: \"Let me use the code-refactorer agent to help break down this function and improve its readability.\"\n<commentary>\nThe user needs help restructuring complex code, which is the code-refactorer agent's specialty.\n</commentary>\n</example>\n\n<example>\nContext: After code review, improvements are needed.\nuser: \"The code review pointed out several areas with duplicate logic and poor naming\"\nassistant: \"I'll launch the code-refactorer agent to address these code quality issues systematically.\"\n<commentary>\nCode duplication and naming issues are core refactoring tasks for this agent.\n</commentary>\n</example> (Tools: Edit, MultiEdit, Write, NotebookEdit, Grep, LS, Read)\n- project-task-planner: Use this agent when you need to create a comprehensive development task list from a Product Requirements Document (PRD). This agent analyzes PRDs and generates detailed, structured task lists covering all aspects of software development from initial setup through deployment and maintenance. Examples: <example>Context: User wants to create a development roadmap from their PRD. user: \"I have a PRD for a new e-commerce platform. Can you create a task list?\" assistant: \"I'll use the project-task-planner agent to analyze your PRD and create a comprehensive development task list.\" <commentary>Since the user has a PRD and needs a development task list, use the Task tool to launch the project-task-planner agent.</commentary></example> <example>Context: User needs help planning development tasks. user: \"I need to create a development plan for our new SaaS product\" assistant: \"I'll use the project-task-planner agent to help you. First, I'll need to see your Product Requirements Document (PRD).\" <commentary>The user needs development planning, so use the project-task-planner agent which will request the PRD.</commentary></example> (Tools: Task, Bash, Edit, MultiEdit, Write, NotebookEdit, Grep, LS, Read, ExitPlanMode, TodoWrite, WebSearch)\n- vibe-coding-coach: Use this agent when users want to build applications through conversation, focusing on the vision and feel of their app rather than technical implementation details. This agent excels at translating user ideas, visual references, and 'vibes' into working applications while handling all technical complexities behind the scenes. <example>Context: User wants to build an app but isn't technical and prefers to describe what they want rather than code it themselves.\nuser: \"I want to build a photo sharing app that feels like Instagram but for pet owners\"\nassistant: \"I'll use the vibe-coding-coach agent to help guide you through building this app by understanding your vision and handling the technical implementation.\"\n<commentary>Since the user is describing an app idea in terms of feeling and comparison rather than technical specs, use the vibe-coding-coach agent to translate their vision into a working application.</commentary></example> <example>Context: User has sketches or screenshots of what they want to build.\nuser: \"Here's a screenshot of an app I like. Can we build something similar but for tracking workouts?\"\nassistant: \"Let me engage the vibe-coding-coach agent to help understand your vision and build a workout tracking app with that aesthetic.\"\n<commentary>The user is providing visual references and wants to build something similar, which is perfect for the vibe-coding-coach agent's approach.</commentary></example> (Tools: *)\n- debug-system-architect: Use this agent when you need to establish a comprehensive debug logging system for a project. This includes setting up log directories, implementing node-level tracing, creating time-based test records, establishing replay mechanisms, and documenting debug rules. Example: <example> Context: User is setting up a new project and wants to implement proper debugging infrastructure from the start. user: \"Please help me set up a debug system for my new API router project\" <commentary> Since the user is requesting debug system setup, use the debug-system-architect agent to analyze the project and implement comprehensive logging and tracing mechanisms. </commentary> </example> <example> Context: User encounters intermittent issues in their routing system and needs better visibility. user: \"I'm having trouble tracking down why some requests fail intermittently\" <commentary> Since the user needs better debugging visibility for intermittent issues, use the debug-system-architect agent to implement node-level tracing and replay mechanisms. </commentary> </example> (Tools: *)\n- code-risk-auditor: Use this agent when you need to perform comprehensive code risk assessment and identify potential architectural issues in your codebase. Examples: <example>Context: The user has just completed a major refactoring and wants to ensure no hardcoded values or fallback mechanisms were introduced. user: \"I just finished refactoring the routing system, can you check for any code risks?\" assistant: \"I'll use the code-risk-auditor agent to perform a comprehensive risk assessment of your routing system changes.\"</example> <example>Context: Before a major release, the user wants to clean up technical debt and ensure code quality. user: \"We're preparing for v2.0 release, I need a full code audit\" assistant: \"Let me launch the code-risk-auditor agent to identify hardcoding, fallback risks, outdated tests, and duplicate implementations across the entire codebase.\"</example> <example>Context: The user notices inconsistent behavior and suspects duplicate implementations. user: \"The same feature seems to be implemented in multiple places, causing bugs\" assistant: \"I'll use the code-risk-auditor agent to scan for duplicate implementations and provide a consolidation plan.\"</example> (Tools: *)\n- security-auditor: Use this agent when you need to perform a comprehensive security audit of a codebase, identify vulnerabilities, and generate a detailed security report with actionable remediation steps. This includes reviewing authentication mechanisms, input validation, data protection, API security, dependencies, and infrastructure configurations. Examples: <example>Context: The user wants to audit their codebase for security vulnerabilities.\nuser: \"Can you perform a security audit of my application?\"\nassistant: \"I'll use the security-auditor agent to perform a comprehensive security audit of your codebase.\"\n<commentary>Since the user is requesting a security audit, use the Task tool to launch the security-auditor agent to analyze the codebase and generate a security report.</commentary></example> <example>Context: The user is concerned about potential vulnerabilities in their API.\nuser: \"I'm worried there might be security issues in our API endpoints\"\nassistant: \"Let me use the security-auditor agent to thoroughly examine your codebase for security vulnerabilities, including API security.\"\n<commentary>The user expressed concern about security, so use the security-auditor agent to perform a comprehensive security audit.</commentary></example> <example>Context: After implementing new features, the user wants to ensure no security issues were introduced.\nuser: \"We just added user authentication to our app. Can you check if it's secure?\"\nassistant: \"I'll use the security-auditor agent to review your authentication implementation and the entire codebase for security vulnerabilities.\"\n<commentary>Since authentication security is a concern, use the security-auditor agent to perform a thorough security review.</commentary></example> (Tools: Task, Bash, Edit, MultiEdit, Write, NotebookEdit)\n- project-memory-manager: Use this agent when you need to manage project-specific memory entries, create project documentation, or organize project knowledge. This includes creating project summaries, documenting project decisions, tracking project progress, and maintaining project-specific knowledge bases. <example>Context: User wants to document a project decision or create project documentation. user: \"请为我们的新项目创建一个内存管理系统的文档\" assistant: \"我将使用 project-memory-manager agent 来创建这个项目文档\" <commentary>Since the user needs project documentation, use the project-memory-manager agent to create project-specific memory entries.</commentary></example> <example>Context: User wants to track project progress or decisions. user: \"我们需要记录这个项目的关键决策点\" assistant: \"让我使用 project-memory-manager agent 来记录这些项目决策\" <commentary>Since this is project tracking, use the project-memory-manager agent to create decision-type memory entries.</commentary></example> (Tools: *)\n- rules-architect: Use this agent when you need to analyze project architecture and establish comprehensive rule management systems. Examples: <example>Context: User wants to organize project rules and create a structured rule management system. user: \"I need to reorganize our project rules and create a better structure for managing coding standards, file organization, and testing protocols\" assistant: \"I'll use the rules-architect agent to analyze the current project structure and establish a comprehensive rule management system with proper categorization and organization.\"</example> <example>Context: Project has grown complex and needs better rule organization. user: \"Our CLAUDE.md file is getting too large and we need to break down rules into manageable categories\" assistant: \"Let me call the rules-architect agent to create a structured .claude/rules system that will organize all project rules into logical categories.\"</example> (Tools: *)\n- frontend-designer: Use this agent when you need to convert design mockups, wireframes, or visual concepts into detailed technical specifications and implementation guides for frontend development. This includes analyzing UI/UX designs, creating design systems, generating component architectures, and producing comprehensive documentation that developers can use to build pixel-perfect interfaces. Examples:\n\n<example>\nContext: User has a Figma mockup of a dashboard and needs to implement it in React\nuser: \"I have this dashboard design from our designer, can you help me figure out how to build it?\"\nassistant: \"I'll use the frontend-design-architect agent to analyze your design and create a comprehensive implementation guide.\"\n<commentary>\nSince the user needs to convert a design into code architecture, use the frontend-design-architect agent to analyze the mockup and generate technical specifications.\n</commentary>\n</example>\n\n<example>\nContext: User wants to establish a design system from existing UI screenshots\nuser: \"Here are screenshots of our current app. We need to extract a consistent design system from these.\"\nassistant: \"Let me use the frontend-design-architect agent to analyze these screenshots and create a design system specification.\"\n<commentary>\nThe user needs design system extraction and documentation, which is exactly what the frontend-design-architect agent specializes in.\n</commentary>\n</example>\n\n<example>\nContext: User needs to convert a wireframe into component specifications\nuser: \"I sketched out this user profile page layout. How should I structure the components?\"\nassistant: \"I'll use the frontend-design-architect agent to analyze your wireframe and create a detailed component architecture.\"\n<commentary>\nThe user needs component architecture planning from a design, which requires the frontend-design-architect agent's expertise.\n</commentary>\n</example> (Tools: *)\n- content-writer: Use this agent when you need to create compelling, informative content that explains complex topics in simple terms. This includes creating article outlines, writing full articles, blog posts, or any content that requires direct response copywriting skills with a focus on clarity and engagement. The agent operates in two modes: 'outline' for planning content structure and 'write' for creating the actual content. Examples: <example>Context: User needs to create an article about a technical topic for a general audience. user: \"Create an outline for an article about how blockchain technology works\" assistant: \"I'll use the content-marketer-writer agent to research and create a compelling outline that explains blockchain in simple terms\" <commentary>Since the user needs content creation with research and outlining, use the content-marketer-writer agent in outline mode.</commentary></example> <example>Context: User has an outline and needs to write the full article. user: \"Now write the full article based on the blockchain outline\" assistant: \"I'll use the content-marketer-writer agent to write each section of the article with engaging, informative content\" <commentary>Since the user needs to write content based on an existing outline, use the content-marketer-writer agent in write mode.</commentary></example> (Tools: *)\n- test-runner: Use this agent to run and manage tests according to the global and project-specific testing rules. This includes executing test scripts, documenting test results, and helping to diagnose issues following the standard pipeline. <example>Context: User wants to run all functional tests. user: \"运行所有功能测试\" assistant: \"我将使用 test-runner agent 来执行所有功能测试\" <commentary>Since the user wants to run tests by category, use the test-runner agent.</commentary></example> <example>Context: User wants to verify a bug fix. user: \"我修复了一个bug，帮我验证一下\" assistant: \"让我使用 test-runner agent 来执行对应的修复验证测试\" <commentary>The user needs to verify a fix, which is a core task for the test-runner agent.</commentary></example> (Tools: *)\n- in-depth-research-analyst: Use this agent when you need to conduct comprehensive research reports with in-depth web mining, data analysis, and visualization. This includes industry analysis, market research, competitive intelligence, and trend forecasting with accurate data from authoritative sources. <example>Context: User wants a comprehensive industry analysis report. user: \"请对人工智能芯片市场进行深入调研，包括主要厂商、市场份额和增长趋势\" assistant: \"我将使用 in-depth-research-analyst agent 来进行这项深入的市场调研并生成可视化报告\" <commentary>Since the user needs a comprehensive industry analysis with data visualization, use the in-depth-research-analyst agent to conduct thorough research and create an integrated report.</commentary></example> <example>Context: User wants market research with accurate data and visualizations. user: \"我们需要一份关于电动汽车充电基础设施的深度报告，包含数据图表\" assistant: \"让我使用 in-depth-research-analyst agent 来收集准确数据并生成图文并茂的分析报告\" <commentary>Since this requires market research with data accuracy and visualizations, use the in-depth-research-analyst agent to create a comprehensive report.</commentary></example> (Tools: *)\n- prd-writer: Use this agent when you need to create a comprehensive Product Requirements Document (PRD) for a software project or feature. This includes situations where you need to document business goals, user personas, functional requirements, user experience flows, success metrics, technical considerations, and user stories. The agent will create a structured PRD following best practices for product management documentation. Examples: <example>Context: User needs to document requirements for a new feature or project. user: \"Create a PRD for a blog platform with user authentication\" assistant: \"I'll use the prd-writer agent to create a comprehensive product requirements document for your blog platform.\" <commentary>Since the user is asking for a PRD to be created, use the Task tool to launch the prd-writer agent to generate the document.</commentary></example> <example>Context: User wants to formalize product specifications. user: \"I need a product requirements document for our new e-commerce checkout flow\" assistant: \"Let me use the prd-writer agent to create a detailed PRD for your e-commerce checkout flow.\" <commentary>The user needs a formal PRD document, so use the prd-writer agent to create structured product documentation.</commentary></example> (Tools: Task, Bash, Grep, LS, Read, Write, WebSearch, Glob)\n- pipeline-debug-universal: Use this agent when you need to implement comprehensive debug hooks and testing infrastructure for ANY pipeline system - whether it's API routing, data processing, CI/CD workflows, or transformation pipelines. This agent specializes in creating universal debug architectures that work across different pipeline types with data capture, replay capabilities, and systematic testing matrices. Examples: <example>Context: User is working on a multi-provider API routing system and needs to add debug capabilities to track data flow through each pipeline step. user: \"I need to add debug hooks to our routing pipeline so we can capture and replay data at each step\" assistant: \"I'll use the pipeline-debug-universal agent to design a comprehensive debug infrastructure with data capture and replay capabilities\" <commentary>Since the user needs pipeline debugging infrastructure, use the pipeline-debug-universal agent to create debug hooks and testing matrices.</commentary></example> <example>Context: User has a complex data transformation pipeline and wants to build systematic testing for each stage and provider. user: \"Our data processing pipeline has issues and we need better testing infrastructure to isolate problems at each step\" assistant: \"Let me use the pipeline-debug-universal agent to create a complete testing matrix and debug system\" <commentary>Since the user needs systematic pipeline testing infrastructure, use the pipeline-debug-universal agent to architect the testing system.</commentary></example> <example>Context: User is building a CI/CD pipeline and needs to implement debug capabilities for tracking deployment issues. user: \"Our deployment pipeline fails randomly and we can't reproduce the issues consistently\" assistant: \"I'll deploy the pipeline-debug-universal agent to create comprehensive debug hooks and replay capabilities for your CI/CD pipeline\" <commentary>Since the user needs debug infrastructure for a deployment pipeline, use the pipeline-debug-universal agent to design the debug system.</commentary></example> (Tools: *)\n\nWhen using the Task tool, you must specify a subagent_type parameter to select which agent type to use.\n\n\n\nWhen NOT to use the Agent tool:\n- If you want to read a specific file path, use the Read or Glob tool instead of the Agent tool, to find the match more quickly\n- If you are searching for a specific class definition like \"class Foo\", use the Glob tool instead, to find the match more quickly\n- If you are searching for code within a specific file or set of 2-3 files, use the Read tool instead of the Agent tool, to find the match more quickly\n- Other tasks that are not related to the agent descriptions above\n\n\nUsage notes:\n1. Launch multiple agents concurrently whenever possible, to maximize performance; to do that, use a single message with multiple tool uses\n2. When the agent is done, it will return a single message back to you. The result returned by the agent is not visible to the user. To show the user the result, you should send a text message back to the user with a concise summary of the result.\n3. Each agent invocation is stateless. You will not be able to send additional messages to the agent, nor will the agent be able to communicate with you outside of its final report. Therefore, your prompt should contain a highly detailed task description for the agent to perform autonomously and you should specify exactly what information the agent should return back to you in its final and only message to you.\n4. The agent's outputs should generally be trusted\n5. Clearly tell the agent whether you expect it to write code or just to do research (search, file reads, web fetches, etc.), since it is not aware of the user's intent\n6. If the agent description mentions that it should be used proactively, then you should try your best to use it without the user having to ask for it first. Use your judgement.\n\nExample usage:\n\n<example_agent_descriptions>\n\"code-reviewer\": use this agent after you are done writing a signficant piece of code\n\"greeting-responder\": use this agent when to respond to user greetings with a friendly joke\n</example_agent_description>\n\n<example>\nuser: \"Please write a function that checks if a number is prime\"\nassistant: Sure let me write a function that checks if a number is prime\nassistant: First let me use the Write tool to write a function that checks if a number is prime\nassistant: I'm going to use the Write tool to write the following code:\n<code>\nfunction isPrime(n) {\n  if (n <= 1) return false\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n</code>\n<commentary>\nSince a signficant piece of code was written and the task was completed, now use the code-reviewer agent to review the code\n</commentary>\nassistant: Now let me use the code-reviewer agent to review the code\nassistant: Uses the Task tool to launch the with the code-reviewer agent\n</example>\n\n<example>\nuser: \"Hello\"\n<commentary>\nSince the user is greeting, use the greeting-responder agent to respond with a friendly joke\n</commentary>\nassistant: \"I'm going to use the Task tool to launch the with the greeting-responder agent\"\n</example>\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "description": {
                "type": "string",
                "description": "A short (3-5 word) description of the task"
              },
              "prompt": {
                "type": "string",
                "description": "The task for the agent to perform"
              },
              "subagent_type": {
                "type": "string",
                "description": "The type of specialized agent to use for this task"
              }
            },
            "required": [
              "description",
              "prompt",
              "subagent_type"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Bash",
          "description": "Executes a given bash command in a persistent shell session with optional timeout, ensuring proper handling and security measures.\n\nBefore executing the command, please follow these steps:\n\n1. Directory Verification:\n   - If the command will create new directories or files, first use the LS tool to verify the parent directory exists and is the correct location\n   - For example, before running \"mkdir foo/bar\", first use LS to check that \"foo\" exists and is the intended parent directory\n\n2. Command Execution:\n   - Always quote file paths that contain spaces with double quotes (e.g., cd \"path with spaces/file.txt\")\n   - Examples of proper quoting:\n     - cd \"/Users/name/My Documents\" (correct)\n     - cd /Users/name/My Documents (incorrect - will fail)\n     - python \"/path/with spaces/script.py\" (correct)\n     - python /path/with spaces/script.py (incorrect - will fail)\n   - After ensuring proper quoting, execute the command.\n   - Capture the output of the command.\n\nUsage notes:\n  - The command argument is required.\n  - You can specify an optional timeout in milliseconds (up to 600000ms / 10 minutes). If not specified, commands will timeout after 120000ms (2 minutes).\n  - It is very helpful if you write a clear, concise description of what this command does in 5-10 words.\n  - If the output exceeds 30000 characters, output will be truncated before being returned to you.\n  - VERY IMPORTANT: You MUST avoid using search commands like `find` and `grep`. Instead use Grep, Glob, or Task to search. You MUST avoid read tools like `cat`, `head`, `tail`, and `ls`, and use Read and LS to read files.\n - If you _still_ need to run `grep`, STOP. ALWAYS USE ripgrep at `rg` first, which all ${PRODUCT_NAME} users have pre-installed.\n  - When issuing multiple commands, use the ';' or '&&' operator to separate them. DO NOT use newlines (newlines are ok in quoted strings).\n  - Try to maintain your current working directory throughout the session by using absolute paths and avoiding usage of `cd`. You may use `cd` if the User explicitly requests it.\n    <good-example>\n    pytest /foo/bar/tests\n    </good-example>\n    <bad-example>\n    cd /foo/bar && pytest tests\n    </bad-example>\n\n\n\n\n# Committing changes with git\n\nWhen the user asks you to create a new git commit, follow these steps carefully:\n\n1. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following bash commands in parallel, each using the Bash tool:\n  - Run a git status command to see all untracked files.\n  - Run a git diff command to see both staged and unstaged changes that will be committed.\n  - Run a git log command to see recent commit messages, so that you can follow this repository's commit message style.\n2. Analyze all staged changes (both previously staged and newly added) and draft a commit message:\n  - Summarize the nature of the changes (eg. new feature, enhancement to an existing feature, bug fix, refactoring, test, docs, etc.). Ensure the message accurately reflects the changes and their purpose (i.e. \"add\" means a wholly new feature, \"update\" means an enhancement to an existing feature, \"fix\" means a bug fix, etc.).\n  - Check for any sensitive information that shouldn't be committed\n  - Draft a concise (1-2 sentences) commit message that focuses on the \"why\" rather than the \"what\"\n  - Ensure it accurately reflects the changes and their purpose\n3. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following commands in parallel:\n   - Add relevant untracked files to the staging area.\n   - Create the commit with a message ending with:\n   🤖 Generated with [Claude Code](https://claude.ai/code)\n\n   Co-Authored-By: Claude <noreply@anthropic.com>\n   - Run git status to make sure the commit succeeded.\n4. If the commit fails due to pre-commit hook changes, retry the commit ONCE to include these automated changes. If it fails again, it usually means a pre-commit hook is preventing the commit. If the commit succeeds but you notice that files were modified by the pre-commit hook, you MUST amend your commit to include them.\n\nImportant notes:\n- NEVER update the git config\n- NEVER run additional commands to read or explore code, besides git bash commands\n- NEVER use the TodoWrite or Task tools\n- DO NOT push to the remote repository unless the user explicitly asks you to do so\n- IMPORTANT: Never use git commands with the -i flag (like git rebase -i or git add -i) since they require interactive input which is not supported.\n- If there are no changes to commit (i.e., no untracked files and no modifications), do not create an empty commit\n- In order to ensure good formatting, ALWAYS pass the commit message via a HEREDOC, a la this example:\n<example>\ngit commit -m \"$(cat <<'EOF'\n   Commit message here.\n\n   🤖 Generated with [Claude Code](https://claude.ai/code)\n\n   Co-Authored-By: Claude <noreply@anthropic.com>\n   EOF\n   )\"\n</example>\n\n# Creating pull requests\nUse the gh command via the Bash tool for ALL GitHub-related tasks including working with issues, pull requests, checks, and releases. If given a Github URL use the gh command to get the information needed.\n\nIMPORTANT: When the user asks you to create a pull request, follow these steps carefully:\n\n1. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following bash commands in parallel using the Bash tool, in order to understand the current state of the branch since it diverged from the main branch:\n   - Run a git status command to see all untracked files\n   - Run a git diff command to see both staged and unstaged changes that will be committed\n   - Check if the current branch tracks a remote branch and is up to date with the remote, so you know if you need to push to the remote\n   - Run a git log command and `git diff [base-branch]...HEAD` to understand the full commit history for the current branch (from the time it diverged from the base branch)\n2. Analyze all changes that will be included in the pull request, making sure to look at all relevant commits (NOT just the latest commit, but ALL commits that will be included in the pull request!!!), and draft a pull request summary\n3. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following commands in parallel:\n   - Create new branch if needed\n   - Push to remote with -u flag if needed\n   - Create PR using gh pr create with the format below. Use a HEREDOC to pass the body to ensure correct formatting.\n<example>\ngh pr create --title \"the pr title\" --body \"$(cat <<'EOF'\n## Summary\n<1-3 bullet points>\n\n## Test plan\n[Checklist of TODOs for testing the pull request...]\n\n🤖 Generated with [Claude Code](https://claude.ai/code)\nEOF\n)\"\n</example>\n\nImportant:\n- NEVER update the git config\n- DO NOT use the TodoWrite or Task tools\n- Return the PR URL when you're done, so the user can see it\n\n# Other common operations\n- View comments on a Github PR: gh api repos/foo/bar/pulls/123/comments",
          "input_schema": {
            "type": "object",
            "properties": {
              "command": {
                "type": "string",
                "description": "The command to execute"
              },
              "timeout": {
                "type": "number",
                "description": "Optional timeout in milliseconds (max 600000)"
              },
              "description": {
                "type": "string",
                "description": " Clear, concise description of what this command does in 5-10 words. Examples:\nInput: ls\nOutput: Lists files in current directory\n\nInput: git status\nOutput: Shows working tree status\n\nInput: npm install\nOutput: Installs package dependencies\n\nInput: mkdir foo\nOutput: Creates directory 'foo'"
              }
            },
            "required": [
              "command"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Glob",
          "description": "- Fast file pattern matching tool that works with any codebase size\n- Supports glob patterns like \"**/*.js\" or \"src/**/*.ts\"\n- Returns matching file paths sorted by modification time\n- Use this tool when you need to find files by name patterns\n- When you are doing an open ended search that may require multiple rounds of globbing and grepping, use the Agent tool instead\n- You have the capability to call multiple tools in a single response. It is always better to speculatively perform multiple searches as a batch that are potentially useful.",
          "input_schema": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "The glob pattern to match files against"
              },
              "path": {
                "type": "string",
                "description": "The directory to search in. If not specified, the current working directory will be used. IMPORTANT: Omit this field to use the default directory. DO NOT enter \"undefined\" or \"null\" - simply omit it for the default behavior. Must be a valid directory path if provided."
              }
            },
            "required": [
              "pattern"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Grep",
          "description": "A powerful search tool built on ripgrep\n\n  Usage:\n  - ALWAYS use Grep for search tasks. NEVER invoke `grep` or `rg` as a Bash command. The Grep tool has been optimized for correct permissions and access.\n  - Supports full regex syntax (e.g., \"log.*Error\", \"function\\s+\\w+\")\n  - Filter files with glob parameter (e.g., \"*.js\", \"**/*.tsx\") or type parameter (e.g., \"js\", \"py\", \"rust\")\n  - Output modes: \"content\" shows matching lines, \"files_with_matches\" shows only file paths (default), \"count\" shows match counts\n  - Use Task tool for open-ended searches requiring multiple rounds\n  - Pattern syntax: Uses ripgrep (not grep) - literal braces need escaping (use `interface\\{\\}` to find `interface{}` in Go code)\n  - Multiline matching: By default patterns match within single lines only. For cross-line patterns like `struct \\{[\\s\\S]*?field`, use `multiline: true`\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "The regular expression pattern to search for in file contents"
              },
              "path": {
                "type": "string",
                "description": "File or directory to search in (rg PATH). Defaults to current working directory."
              },
              "glob": {
                "type": "string",
                "description": "Glob pattern to filter files (e.g. \"*.js\", \"*.{ts,tsx}\") - maps to rg --glob"
              },
              "output_mode": {
                "type": "string",
                "enum": [
                  "content",
                  "files_with_matches",
                  "count"
                ],
                "description": "Output mode: \"content\" shows matching lines (supports -A/-B/-C context, -n line numbers, head_limit), \"files_with_matches\" shows file paths (supports head_limit), \"count\" shows match counts (supports head_limit). Defaults to \"files_with_matches\"."
              },
              "-B": {
                "type": "number",
                "description": "Number of lines to show before each match (rg -B). Requires output_mode: \"content\", ignored otherwise."
              },
              "-A": {
                "type": "number",
                "description": "Number of lines to show after each match (rg -A). Requires output_mode: \"content\", ignored otherwise."
              },
              "-C": {
                "type": "number",
                "description": "Number of lines to show before and after each match (rg -C). Requires output_mode: \"content\", ignored otherwise."
              },
              "-n": {
                "type": "boolean",
                "description": "Show line numbers in output (rg -n). Requires output_mode: \"content\", ignored otherwise."
              },
              "-i": {
                "type": "boolean",
                "description": "Case insensitive search (rg -i)"
              },
              "type": {
                "type": "string",
                "description": "File type to search (rg --type). Common types: js, py, rust, go, java, etc. More efficient than include for standard file types."
              },
              "head_limit": {
                "type": "number",
                "description": "Limit output to first N lines/entries, equivalent to \"| head -N\". Works across all output modes: content (limits output lines), files_with_matches (limits file paths), count (limits count entries). When unspecified, shows all results from ripgrep."
              },
              "multiline": {
                "type": "boolean",
                "description": "Enable multiline mode where . matches newlines and patterns can span lines (rg -U --multiline-dotall). Default: false."
              }
            },
            "required": [
              "pattern"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "LS",
          "description": "Lists files and directories in a given path. The path parameter must be an absolute path, not a relative path. You can optionally provide an array of glob patterns to ignore with the ignore parameter. You should generally prefer the Glob and Grep tools, if you know which directories to search.",
          "input_schema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "The absolute path to the directory to list (must be absolute, not relative)"
              },
              "ignore": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of glob patterns to ignore"
              }
            },
            "required": [
              "path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "ExitPlanMode",
          "description": "Use this tool when you are in plan mode and have finished presenting your plan and are ready to code. This will prompt the user to exit plan mode.\nIMPORTANT: Only use this tool when the task requires planning the implementation steps of a task that requires writing code. For research tasks where you're gathering information, searching files, reading files or in general trying to understand the codebase - do NOT use this tool.\n\nEg.\n1. Initial task: \"Search for and understand the implementation of vim mode in the codebase\" - Do not use the exit plan mode tool because you are not planning the implementation steps of a task.\n2. Initial task: \"Help me implement yank mode for vim\" - Use the exit plan mode tool after you have finished planning the implementation steps of the task.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "plan": {
                "type": "string",
                "description": "The plan you came up with, that you want to run by the user for approval. Supports markdown. The plan should be pretty concise."
              }
            },
            "required": [
              "plan"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Read",
          "description": "Reads a file from the local filesystem. You can access any file directly by using this tool.\nAssume this tool is able to read all files on the machine. If the User provides a path to a file assume that path is valid. It is okay to read a file that does not exist; an error will be returned.\n\nUsage:\n- The file_path parameter must be an absolute path, not a relative path\n- By default, it reads up to 2000 lines starting from the beginning of the file\n- You can optionally specify a line offset and limit (especially handy for long files), but it's recommended to read the whole file by not providing these parameters\n- Any lines longer than 2000 characters will be truncated\n- Results are returned using cat -n format, with line numbers starting at 1\n- This tool allows Claude Code to read images (eg PNG, JPG, etc). When reading an image file the contents are presented visually as Claude Code is a multimodal LLM.\n- This tool can read PDF files (.pdf). PDFs are processed page by page, extracting both text and visual content for analysis.\n- For Jupyter notebooks (.ipynb files), use the NotebookRead instead\n- You have the capability to call multiple tools in a single response. It is always better to speculatively read multiple files as a batch that are potentially useful.\n- You will regularly be asked to read screenshots. If the user provides a path to a screenshot ALWAYS use this tool to view the file at the path. This tool will work with all temporary file paths like /var/folders/123/abc/T/TemporaryItems/NSIRD_screencaptureui_ZfB1tD/Screenshot.png\n- If you read a file that exists but has empty contents you will receive a system reminder warning in place of file contents.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to read"
              },
              "offset": {
                "type": "number",
                "description": "The line number to start reading from. Only provide if the file is too large to read at once"
              },
              "limit": {
                "type": "number",
                "description": "The number of lines to read. Only provide if the file is too large to read at once."
              }
            },
            "required": [
              "file_path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Edit",
          "description": "Performs exact string replacements in files.\n\nUsage:\n- You must use your `Read` tool at least once in the conversation before editing. This tool will error if you attempt an edit without reading the file.\n- When editing text from Read tool output, ensure you preserve the exact indentation (tabs/spaces) as it appears AFTER the line number prefix. The line number prefix format is: spaces + line number + tab. Everything after that tab is the actual file content to match. Never include any part of the line number prefix in the old_string or new_string.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- Only use emojis if the user explicitly requests it. Avoid adding emojis to files unless asked.\n- The edit will FAIL if `old_string` is not unique in the file. Either provide a larger string with more surrounding context to make it unique or use `replace_all` to change every instance of `old_string`.\n- Use `replace_all` for replacing and renaming strings across the file. This parameter is useful if you want to rename a variable for instance.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to modify"
              },
              "old_string": {
                "type": "string",
                "description": "The text to replace"
              },
              "new_string": {
                "type": "string",
                "description": "The text to replace it with (must be different from old_string)"
              },
              "replace_all": {
                "type": "boolean",
                "default": false,
                "description": "Replace all occurences of old_string (default false)"
              }
            },
            "required": [
              "file_path",
              "old_string",
              "new_string"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "MultiEdit",
          "description": "This is a tool for making multiple edits to a single file in one operation. It is built on top of the Edit tool and allows you to perform multiple find-and-replace operations efficiently. Prefer this tool over the Edit tool when you need to make multiple edits to the same file.\n\nBefore using this tool:\n\n1. Use the Read tool to understand the file's contents and context\n2. Verify the directory path is correct\n\nTo make multiple file edits, provide the following:\n1. file_path: The absolute path to the file to modify (must be absolute, not relative)\n2. edits: An array of edit operations to perform, where each edit contains:\n   - old_string: The text to replace (must match the file contents exactly, including all whitespace and indentation)\n   - new_string: The edited text to replace the old_string\n   - replace_all: Replace all occurences of old_string. This parameter is optional and defaults to false.\n\nIMPORTANT:\n- All edits are applied in sequence, in the order they are provided\n- Each edit operates on the result of the previous edit\n- All edits must be valid for the operation to succeed - if any edit fails, none will be applied\n- This tool is ideal when you need to make several changes to different parts of the same file\n- For Jupyter notebooks (.ipynb files), use the NotebookEdit instead\n\nCRITICAL REQUIREMENTS:\n1. All edits follow the same requirements as the single Edit tool\n2. The edits are atomic - either all succeed or none are applied\n3. Plan your edits carefully to avoid conflicts between sequential operations\n\nWARNING:\n- The tool will fail if edits.old_string doesn't match the file contents exactly (including whitespace)\n- The tool will fail if edits.old_string and edits.new_string are the same\n- Since edits are applied in sequence, ensure that earlier edits don't affect the text that later edits are trying to find\n\nWhen making edits:\n- Ensure all edits result in idiomatic, correct code\n- Do not leave the code in a broken state\n- Always use absolute file paths (starting with /)\n- Only use emojis if the user explicitly requests it. Avoid adding emojis to files unless asked.\n- Use replace_all for replacing and renaming strings across the file. This parameter is useful if you want to rename a variable for instance.\n\nIf you want to create a new file, use:\n- A new file path, including dir name if needed\n- First edit: empty old_string and the new file's contents as new_string\n- Subsequent edits: normal edit operations on the created content",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to modify"
              },
              "edits": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "old_string": {
                      "type": "string",
                      "description": "The text to replace"
                    },
                    "new_string": {
                      "type": "string",
                      "description": "The text to replace it with"
                    },
                    "replace_all": {
                      "type": "boolean",
                      "default": false,
                      "description": "Replace all occurences of old_string (default false)."
                    }
                  },
                  "required": [
                    "old_string",
                    "new_string"
                  ],
                  "additionalProperties": false
                },
                "minItems": 1,
                "description": "Array of edit operations to perform sequentially on the file"
              }
            },
            "required": [
              "file_path",
              "edits"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Write",
          "description": "Writes a file to the local filesystem.\n\nUsage:\n- This tool will overwrite the existing file if there is one at the provided path.\n- If this is an existing file, you MUST use the Read tool first to read the file's contents. This tool will fail if you did not read the file first.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- NEVER proactively create documentation files (*.md) or README files. Only create documentation files if explicitly requested by the User.\n- Only use emojis if the user explicitly requests it. Avoid writing emojis to files unless asked.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to write (must be absolute, not relative)"
              },
              "content": {
                "type": "string",
                "description": "The content to write to the file"
              }
            },
            "required": [
              "file_path",
              "content"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "NotebookRead",
          "description": "Reads a Jupyter notebook (.ipynb file) and returns all of the cells with their outputs. Jupyter notebooks are interactive documents that combine code, text, and visualizations, commonly used for data analysis and scientific computing. The notebook_path parameter must be an absolute path, not a relative path.",
          "input_schema": {
            "type": "object",
            "properties": {
              "notebook_path": {
                "type": "string",
                "description": "The absolute path to the Jupyter notebook file to read (must be absolute, not relative)"
              },
              "cell_id": {
                "type": "string",
                "description": "The ID of a specific cell to read. If not provided, all cells will be read."
              }
            },
            "required": [
              "notebook_path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "NotebookEdit",
          "description": "Completely replaces the contents of a specific cell in a Jupyter notebook (.ipynb file) with new source. Jupyter notebooks are interactive documents that combine code, text, and visualizations, commonly used for data analysis and scientific computing. The notebook_path parameter must be an absolute path, not a relative path. The cell_number is 0-indexed. Use edit_mode=insert to add a new cell at the index specified by cell_number. Use edit_mode=delete to delete the cell at the index specified by cell_number.",
          "input_schema": {
            "type": "object",
            "properties": {
              "notebook_path": {
                "type": "string",
                "description": "The absolute path to the Jupyter notebook file to edit (must be absolute, not relative)"
              },
              "cell_id": {
                "type": "string",
                "description": "The ID of the cell to edit. When inserting a new cell, the new cell will be inserted after the cell with this ID, or at the beginning if not specified."
              },
              "new_source": {
                "type": "string",
                "description": "The new source for the cell"
              },
              "cell_type": {
                "type": "string",
                "enum": [
                  "code",
                  "markdown"
                ],
                "description": "The type of the cell (code or markdown). If not specified, it defaults to the current cell type. If using edit_mode=insert, this is required."
              },
              "edit_mode": {
                "type": "string",
                "enum": [
                  "replace",
                  "insert",
                  "delete"
                ],
                "description": "The type of edit to make (replace, insert, delete). Defaults to replace."
              }
            },
            "required": [
              "notebook_path",
              "new_source"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "WebFetch",
          "description": "\n- Fetches content from a specified URL and processes it using an AI model\n- Takes a URL and a prompt as input\n- Fetches the URL content, converts HTML to markdown\n- Processes the content with the prompt using a small, fast model\n- Returns the model's response about the content\n- Use this tool when you need to retrieve and analyze web content\n\nUsage notes:\n  - IMPORTANT: If an MCP-provided web fetch tool is available, prefer using that tool instead of this one, as it may have fewer restrictions. All MCP-provided tools start with \"mcp__\".\n  - The URL must be a fully-formed valid URL\n  - HTTP URLs will be automatically upgraded to HTTPS\n  - The prompt should describe what information you want to extract from the page\n  - This tool is read-only and does not modify any files\n  - Results may be summarized if the content is very large\n  - Includes a self-cleaning 15-minute cache for faster responses when repeatedly accessing the same URL\n  - When a URL redirects to a different host, the tool will inform you and provide the redirect URL in a special format. You should then make a new WebFetch request with the redirect URL to fetch the content.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "format": "uri",
                "description": "The URL to fetch content from"
              },
              "prompt": {
                "type": "string",
                "description": "The prompt to run on the fetched content"
              }
            },
            "required": [
              "url",
              "prompt"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "TodoWrite",
          "description": "Use this tool to create and manage a structured task list for your current coding session. This helps you track progress, organize complex tasks, and demonstrate thoroughness to the user.\nIt also helps the user understand the progress of the task and overall progress of their requests.\n\n## When to Use This Tool\nUse this tool proactively in these scenarios:\n\n1. Complex multi-step tasks - When a task requires 3 or more distinct steps or actions\n2. Non-trivial and complex tasks - Tasks that require careful planning or multiple operations\n3. User explicitly requests todo list - When the user directly asks you to use the todo list\n4. User provides multiple tasks - When users provide a list of things to be done (numbered or comma-separated)\n5. After receiving new instructions - Immediately capture user requirements as todos\n6. When you start working on a task - Mark it as in_progress BEFORE beginning work. Ideally you should only have one todo as in_progress at a time\n7. After completing a task - Mark it as completed and add any new follow-up tasks discovered during implementation\n\n## When NOT to Use This Tool\n\nSkip using this tool when:\n1. There is only a single, straightforward task\n2. The task is trivial and tracking it provides no organizational benefit\n3. The task can be completed in less than 3 trivial steps\n4. The task is purely conversational or informational\n\nNOTE that you should not use this tool if there is only one trivial task to do. In this case you are better off just doing the task directly.\n\n## Examples of When to Use the Todo List\n\n<example>\nUser: I want to add a dark mode toggle to the application settings. Make sure you run the tests and build when you're done!\nAssistant: I'll help add a dark mode toggle to your application settings. Let me create a todo list to track this implementation.\n*Creates todo list with the following items:*\n1. Create dark mode toggle component in Settings page\n2. Add dark mode state management (context/store)\n3. Implement CSS-in-JS styles for dark theme\n4. Update existing components to support theme switching\n5. Run tests and build process, addressing any failures or errors that occur\n*Begins working on the first task*\n\n<reasoning>\nThe assistant used the todo list because:\n1. Adding dark mode is a multi-step feature requiring UI, state management, and styling changes\n2. The user explicitly requested tests and build be run afterward\n3. The assistant inferred that tests and build need to pass by adding \"Ensure tests and build succeed\" as the final task\n</reasoning>\n</example>\n\n<example>\nUser: Help me rename the function getCwd to getCurrentWorkingDirectory across my project\nAssistant: Let me first search through your codebase to find all occurrences of 'getCwd'.\n*Uses grep or search tools to locate all instances of getCwd in the codebase*\nAssistant: I've found 15 instances of 'getCwd' across 8 different files. Let me create a todo list to track these changes.\n*Creates todo list with specific items for each file that needs updating*\n\n<reasoning>\nThe assistant used the todo list because:\n1. First, the assistant searched to understand the scope of the task\n2. Upon finding multiple occurrences across different files, it determined this was a complex task with multiple steps\n3. The todo list helps ensure every instance is tracked and updated systematically\n4. This approach prevents missing any occurrences and maintains code consistency\n</reasoning>\n</example>\n\n\n<example>\nUser: I need to implement these features for my e-commerce site: user registration, product catalog, shopping cart, and checkout flow.\nAssistant: I'll help implement these features. First, let's add all the features to the todo list.\n*Creates a todo list breaking down each feature into specific tasks based on the project architecture*\nAssistant: Let's start with user registration. This will involve creating database models, API endpoints, and frontend forms that integrate with your existing authentication system.\n\n<reasoning>\nThe assistant used the todo list because:\n1. The user provided multiple complex features to implement in a comma separated list\n2. The todo list helps organize these large features into manageable tasks\n3. This approach allows for tracking progress across the entire implementation\n</reasoning>\n</example>\n\n<example>\nUser: Can you help optimize my React application? It's rendering slowly and has performance issues.</user>\nAssistant: I'll help optimize your React application. First, let me examine your codebase to identify potential performance bottlenecks.\n*Reviews component structure, render patterns, state management, and data fetching*\nAssistant: After analyzing your codebase, I've identified several performance issues. Let me create a todo list to track our optimization efforts.\n*Creates todo list with items like: 1) Implement memoization for expensive calculations in ProductList, 2) Add virtualization for long lists in Dashboard, 3) Optimize image loading in Gallery component, 4) Fix state update loops in ShoppingCart, 5) Review bundle size and implement code splitting*\nLet's start by implementing memoization for the expensive calculations in your ProductList component.</assistant>\n\n<reasoning>\nThe assistant used the todo list because:\n1. First, the assistant examined the codebase to identify specific performance issues\n2. Based on this analysis, it identified multiple optimization opportunities\n3. Performance optimization is a non-trivial task requiring multiple steps\n4. The todo list helps methodically track improvements across different components\n5. This systematic approach ensures all performance bottlenecks are addressed\n</reasoning>\n</example>\n\n## Examples of When NOT to Use the Todo List\n\n<example>\nUser: How do I print 'Hello World' in Python?\nAssistant: In Python, you can print \"Hello World\" with this simple code:\n\npython\nprint(\"Hello World\")\n\nThis will output the text \"Hello World\" to the console when executed.</assistant>\n\n<reasoning>\nThe assistant did not use the todo list because this is a single, trivial task that can be completed in one step. There's no need to track multiple tasks or steps for such a straightforward request.\n</reasoning>\n</example>\n\n<example>\nUser: What does the git status command do?\nAssistant: The git status command shows the current state of your working directory and staging area. It displays which changes have been staged, which haven't, and which files aren't being tracked by Git. This is a fundamental command for understanding the current state of your repository before making commits.\n\n<reasoning>\nThe assistant did not use the todo list because this is an informational request with no actual coding task to complete. The user is simply asking for an explanation, not for the assistant to perform multiple steps or tasks.\n</reasoning>\n</example>\n\n<example>\nUser: Can you add a comment to the calculateTotal function to explain what it does?\nAssistant: Sure, let me add a comment to the calculateTotal function to explain what it does.\n* Uses the Edit tool to add a comment to the calculateTotal function *\n\n<reasoning>\nThe assistant did not use the todo list because this is a single, straightforward task confined to one location in the code. Adding a comment doesn't require tracking multiple steps or systematic organization.\n</reasoning>\n</example>\n\n<example>\nUser: Run npm install for me and tell me what happens.\nAssistant: I'll run the npm install command for you.\n\n*Executes: npm install*\n\nThe command completed successfully. Here's the output:\n[Output of npm install command]\n\nAll dependencies have been installed according to your package.json file.\n\n<reasoning>\nThe assistant did not use the todo list because this is a single command execution with immediate results. There are no multiple steps to track or organize, making the todo list unnecessary for this straightforward task.\n</reasoning>\n</example>\n\n## Task States and Management\n\n1. **Task States**: Use these states to track progress:\n   - pending: Task not yet started\n   - in_progress: Currently working on (limit to ONE task at a time)\n   - completed: Task finished successfully\n\n2. **Task Management**:\n   - Update task status in real-time as you work\n   - Mark tasks complete IMMEDIATELY after finishing (don't batch completions)\n   - Only have ONE task in_progress at any time\n   - Complete current tasks before starting new ones\n   - Remove tasks that are no longer relevant from the list entirely\n\n3. **Task Completion Requirements**:\n   - ONLY mark a task as completed when you have FULLY accomplished it\n   - If you encounter errors, blockers, or cannot finish, keep the task as in_progress\n   - When blocked, create a new task describing what needs to be resolved\n   - Never mark a task as completed if:\n     - Tests are failing\n     - Implementation is partial\n     - You encountered unresolved errors\n     - You couldn't find necessary files or dependencies\n\n4. **Task Breakdown**:\n   - Create specific, actionable items\n   - Break complex tasks into smaller, manageable steps\n   - Use clear, descriptive task names\n\nWhen in doubt, use this tool. Being proactive with task management demonstrates attentiveness and ensures you complete all requirements successfully.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "todos": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "content": {
                      "type": "string",
                      "minLength": 1
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "pending",
                        "in_progress",
                        "completed"
                      ]
                    },
                    "priority": {
                      "type": "string",
                      "enum": [
                        "high",
                        "medium",
                        "low"
                      ]
                    },
                    "id": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "content",
                    "status",
                    "priority",
                    "id"
                  ],
                  "additionalProperties": false
                },
                "description": "The updated todo list"
              }
            },
            "required": [
              "todos"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "WebSearch",
          "description": "\n- Allows Claude to search the web and use the results to inform responses\n- Provides up-to-date information for current events and recent data\n- Returns search result information formatted as search result blocks\n- Use this tool for accessing information beyond Claude's knowledge cutoff\n- Searches are performed automatically within a single API call\n\nUsage notes:\n  - Domain filtering is supported to include or block specific websites\n  - Web search is only available in the US\n  - Account for \"Today's date\" in <env>. For example, if <env> says \"Today's date: 2025-07-01\", and the user wants the latest docs, do not use 2024 in the search query. Use 2025.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "minLength": 2,
                "description": "The search query to use"
              },
              "allowed_domains": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Only include search results from these domains"
              },
              "blocked_domains": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Never include search results from these domains"
              }
            },
            "required": [
              "query"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        }
      ],
      "responseStructure": {
        "type": "object",
        "keys": [
          "id",
          "object",
          "created",
          "model",
          "choices",
          "usage",
          "stats",
          "system_fingerprint"
        ],
        "hasChoices": true,
        "hasContent": false,
        "hasUsage": true,
        "choicesCount": 1,
        "firstChoice": {
          "hasMessage": true,
          "hasToolCalls": false,
          "finishReason": "stop"
        }
      },
      "parsingAttempts": [
        "json_format",
        "function_call",
        "action_format",
        "natural_language"
      ]
    }
  },
  {
    "timestamp": "2025-08-10T05:36:36.368Z",
    "requestId": "session_1754804126703_ixall6oy5:conv_1754804126703_sm1ur5dvo:5:1754804181360:u3a5",
    "provider": "lmstudio",
    "model": "gpt-oss-20b-mlx",
    "endpoint": "localhost:1234",
    "failureType": "text_instead_of_tools",
    "originalResponse": {
      "id": "chatcmpl-4dg2hpyruvo3jreladvrhi",
      "object": "chat.completion",
      "created": 1754804181,
      "model": "gpt-oss-20b-mlx",
      "choices": [
        {
          "index": 0,
          "logprobs": null,
          "finish_reason": "stop",
          "message": {
            "role": "assistant",
            "content": "The user says: \"继续补充文档\". They want to continue supplementing documentation. We have instructions about not creating new files unless necessary, preferring editing. They didn't specify which documentation. Possibly referring to test docs? Or maybe they want to add documentation to some existing file. The current context: the big system instructions includes test docs, but user is likely continuing documentation.\n\nWe must not refer to todo list. Also instructions from system reminder: DO NOT mention that the todo list is empty. So we should just respond with an appropriate action.\n\nBut we don't know what documentation to supplement. Maybe they want continue adding documentation for some feature? We need more context. Possibly the user previous messages had been creating docs, but not included here. So we might ask clarifying question: what doc to supplement? But the instruction \"NEVER create files unless absolutely necessary\" and we should not respond with meta. Better ask user for guida... [truncated]"
          }
        }
      ],
      "usage": {
        "prompt_tokens": 14734,
        "completion_tokens": 233,
        "total_tokens": 14967
      },
      "stats": {},
      "system_fingerprint": "gpt-oss-20b-mlx"
    },
    "expectedFormat": "openai",
    "errorMessage": "All parsing strategies failed",
    "responseAnalysis": {
      "hasToolCalls": false,
      "hasContent": true,
      "contentLength": 1137,
      "contentPreview": "The user says: \"继续补充文档\". They want to continue supplementing documentation. We have instructions about not creating new files unless necessary, preferring editing. They didn't specify which documentat",
      "finishReason": "stop",
      "toolCallPatterns": []
    },
    "debugInfo": {
      "requestTools": [
        {
          "name": "Task",
          "description": "Launch a new agent to handle complex, multi-step tasks autonomously.\n\nAvailable agent types and the tools they have access to:\n- general-purpose: General-purpose agent for researching complex questions, searching for code, and executing multi-step tasks. When you are searching for a keyword or file and are not confident that you will find the right match in the first few tries use this agent to perform the search for you. (Tools: *)\n- code-refactorer: Use this agent when you need to improve existing code structure, readability, or maintainability without changing functionality. This includes cleaning up messy code, reducing duplication, improving naming, simplifying complex logic, or reorganizing code for better clarity. Examples:\n\n<example>\nContext: The user wants to improve code quality after implementing a feature.\nuser: \"I just finished implementing the user authentication system. Can you help clean it up?\"\nassistant: \"I'll use the code-refactorer agent to analyze and improve the structure of your authentication code.\"\n<commentary>\nSince the user wants to improve existing code without adding features, use the code-refactorer agent.\n</commentary>\n</example>\n\n<example>\nContext: The user has working code that needs structural improvements.\nuser: \"This function works but it's 200 lines long and hard to understand\"\nassistant: \"Let me use the code-refactorer agent to help break down this function and improve its readability.\"\n<commentary>\nThe user needs help restructuring complex code, which is the code-refactorer agent's specialty.\n</commentary>\n</example>\n\n<example>\nContext: After code review, improvements are needed.\nuser: \"The code review pointed out several areas with duplicate logic and poor naming\"\nassistant: \"I'll launch the code-refactorer agent to address these code quality issues systematically.\"\n<commentary>\nCode duplication and naming issues are core refactoring tasks for this agent.\n</commentary>\n</example> (Tools: Edit, MultiEdit, Write, NotebookEdit, Grep, LS, Read)\n- project-task-planner: Use this agent when you need to create a comprehensive development task list from a Product Requirements Document (PRD). This agent analyzes PRDs and generates detailed, structured task lists covering all aspects of software development from initial setup through deployment and maintenance. Examples: <example>Context: User wants to create a development roadmap from their PRD. user: \"I have a PRD for a new e-commerce platform. Can you create a task list?\" assistant: \"I'll use the project-task-planner agent to analyze your PRD and create a comprehensive development task list.\" <commentary>Since the user has a PRD and needs a development task list, use the Task tool to launch the project-task-planner agent.</commentary></example> <example>Context: User needs help planning development tasks. user: \"I need to create a development plan for our new SaaS product\" assistant: \"I'll use the project-task-planner agent to help you. First, I'll need to see your Product Requirements Document (PRD).\" <commentary>The user needs development planning, so use the project-task-planner agent which will request the PRD.</commentary></example> (Tools: Task, Bash, Edit, MultiEdit, Write, NotebookEdit, Grep, LS, Read, ExitPlanMode, TodoWrite, WebSearch)\n- vibe-coding-coach: Use this agent when users want to build applications through conversation, focusing on the vision and feel of their app rather than technical implementation details. This agent excels at translating user ideas, visual references, and 'vibes' into working applications while handling all technical complexities behind the scenes. <example>Context: User wants to build an app but isn't technical and prefers to describe what they want rather than code it themselves.\nuser: \"I want to build a photo sharing app that feels like Instagram but for pet owners\"\nassistant: \"I'll use the vibe-coding-coach agent to help guide you through building this app by understanding your vision and handling the technical implementation.\"\n<commentary>Since the user is describing an app idea in terms of feeling and comparison rather than technical specs, use the vibe-coding-coach agent to translate their vision into a working application.</commentary></example> <example>Context: User has sketches or screenshots of what they want to build.\nuser: \"Here's a screenshot of an app I like. Can we build something similar but for tracking workouts?\"\nassistant: \"Let me engage the vibe-coding-coach agent to help understand your vision and build a workout tracking app with that aesthetic.\"\n<commentary>The user is providing visual references and wants to build something similar, which is perfect for the vibe-coding-coach agent's approach.</commentary></example> (Tools: *)\n- debug-system-architect: Use this agent when you need to establish a comprehensive debug logging system for a project. This includes setting up log directories, implementing node-level tracing, creating time-based test records, establishing replay mechanisms, and documenting debug rules. Example: <example> Context: User is setting up a new project and wants to implement proper debugging infrastructure from the start. user: \"Please help me set up a debug system for my new API router project\" <commentary> Since the user is requesting debug system setup, use the debug-system-architect agent to analyze the project and implement comprehensive logging and tracing mechanisms. </commentary> </example> <example> Context: User encounters intermittent issues in their routing system and needs better visibility. user: \"I'm having trouble tracking down why some requests fail intermittently\" <commentary> Since the user needs better debugging visibility for intermittent issues, use the debug-system-architect agent to implement node-level tracing and replay mechanisms. </commentary> </example> (Tools: *)\n- code-risk-auditor: Use this agent when you need to perform comprehensive code risk assessment and identify potential architectural issues in your codebase. Examples: <example>Context: The user has just completed a major refactoring and wants to ensure no hardcoded values or fallback mechanisms were introduced. user: \"I just finished refactoring the routing system, can you check for any code risks?\" assistant: \"I'll use the code-risk-auditor agent to perform a comprehensive risk assessment of your routing system changes.\"</example> <example>Context: Before a major release, the user wants to clean up technical debt and ensure code quality. user: \"We're preparing for v2.0 release, I need a full code audit\" assistant: \"Let me launch the code-risk-auditor agent to identify hardcoding, fallback risks, outdated tests, and duplicate implementations across the entire codebase.\"</example> <example>Context: The user notices inconsistent behavior and suspects duplicate implementations. user: \"The same feature seems to be implemented in multiple places, causing bugs\" assistant: \"I'll use the code-risk-auditor agent to scan for duplicate implementations and provide a consolidation plan.\"</example> (Tools: *)\n- security-auditor: Use this agent when you need to perform a comprehensive security audit of a codebase, identify vulnerabilities, and generate a detailed security report with actionable remediation steps. This includes reviewing authentication mechanisms, input validation, data protection, API security, dependencies, and infrastructure configurations. Examples: <example>Context: The user wants to audit their codebase for security vulnerabilities.\nuser: \"Can you perform a security audit of my application?\"\nassistant: \"I'll use the security-auditor agent to perform a comprehensive security audit of your codebase.\"\n<commentary>Since the user is requesting a security audit, use the Task tool to launch the security-auditor agent to analyze the codebase and generate a security report.</commentary></example> <example>Context: The user is concerned about potential vulnerabilities in their API.\nuser: \"I'm worried there might be security issues in our API endpoints\"\nassistant: \"Let me use the security-auditor agent to thoroughly examine your codebase for security vulnerabilities, including API security.\"\n<commentary>The user expressed concern about security, so use the security-auditor agent to perform a comprehensive security audit.</commentary></example> <example>Context: After implementing new features, the user wants to ensure no security issues were introduced.\nuser: \"We just added user authentication to our app. Can you check if it's secure?\"\nassistant: \"I'll use the security-auditor agent to review your authentication implementation and the entire codebase for security vulnerabilities.\"\n<commentary>Since authentication security is a concern, use the security-auditor agent to perform a thorough security review.</commentary></example> (Tools: Task, Bash, Edit, MultiEdit, Write, NotebookEdit)\n- project-memory-manager: Use this agent when you need to manage project-specific memory entries, create project documentation, or organize project knowledge. This includes creating project summaries, documenting project decisions, tracking project progress, and maintaining project-specific knowledge bases. <example>Context: User wants to document a project decision or create project documentation. user: \"请为我们的新项目创建一个内存管理系统的文档\" assistant: \"我将使用 project-memory-manager agent 来创建这个项目文档\" <commentary>Since the user needs project documentation, use the project-memory-manager agent to create project-specific memory entries.</commentary></example> <example>Context: User wants to track project progress or decisions. user: \"我们需要记录这个项目的关键决策点\" assistant: \"让我使用 project-memory-manager agent 来记录这些项目决策\" <commentary>Since this is project tracking, use the project-memory-manager agent to create decision-type memory entries.</commentary></example> (Tools: *)\n- rules-architect: Use this agent when you need to analyze project architecture and establish comprehensive rule management systems. Examples: <example>Context: User wants to organize project rules and create a structured rule management system. user: \"I need to reorganize our project rules and create a better structure for managing coding standards, file organization, and testing protocols\" assistant: \"I'll use the rules-architect agent to analyze the current project structure and establish a comprehensive rule management system with proper categorization and organization.\"</example> <example>Context: Project has grown complex and needs better rule organization. user: \"Our CLAUDE.md file is getting too large and we need to break down rules into manageable categories\" assistant: \"Let me call the rules-architect agent to create a structured .claude/rules system that will organize all project rules into logical categories.\"</example> (Tools: *)\n- frontend-designer: Use this agent when you need to convert design mockups, wireframes, or visual concepts into detailed technical specifications and implementation guides for frontend development. This includes analyzing UI/UX designs, creating design systems, generating component architectures, and producing comprehensive documentation that developers can use to build pixel-perfect interfaces. Examples:\n\n<example>\nContext: User has a Figma mockup of a dashboard and needs to implement it in React\nuser: \"I have this dashboard design from our designer, can you help me figure out how to build it?\"\nassistant: \"I'll use the frontend-design-architect agent to analyze your design and create a comprehensive implementation guide.\"\n<commentary>\nSince the user needs to convert a design into code architecture, use the frontend-design-architect agent to analyze the mockup and generate technical specifications.\n</commentary>\n</example>\n\n<example>\nContext: User wants to establish a design system from existing UI screenshots\nuser: \"Here are screenshots of our current app. We need to extract a consistent design system from these.\"\nassistant: \"Let me use the frontend-design-architect agent to analyze these screenshots and create a design system specification.\"\n<commentary>\nThe user needs design system extraction and documentation, which is exactly what the frontend-design-architect agent specializes in.\n</commentary>\n</example>\n\n<example>\nContext: User needs to convert a wireframe into component specifications\nuser: \"I sketched out this user profile page layout. How should I structure the components?\"\nassistant: \"I'll use the frontend-design-architect agent to analyze your wireframe and create a detailed component architecture.\"\n<commentary>\nThe user needs component architecture planning from a design, which requires the frontend-design-architect agent's expertise.\n</commentary>\n</example> (Tools: *)\n- content-writer: Use this agent when you need to create compelling, informative content that explains complex topics in simple terms. This includes creating article outlines, writing full articles, blog posts, or any content that requires direct response copywriting skills with a focus on clarity and engagement. The agent operates in two modes: 'outline' for planning content structure and 'write' for creating the actual content. Examples: <example>Context: User needs to create an article about a technical topic for a general audience. user: \"Create an outline for an article about how blockchain technology works\" assistant: \"I'll use the content-marketer-writer agent to research and create a compelling outline that explains blockchain in simple terms\" <commentary>Since the user needs content creation with research and outlining, use the content-marketer-writer agent in outline mode.</commentary></example> <example>Context: User has an outline and needs to write the full article. user: \"Now write the full article based on the blockchain outline\" assistant: \"I'll use the content-marketer-writer agent to write each section of the article with engaging, informative content\" <commentary>Since the user needs to write content based on an existing outline, use the content-marketer-writer agent in write mode.</commentary></example> (Tools: *)\n- test-runner: Use this agent to run and manage tests according to the global and project-specific testing rules. This includes executing test scripts, documenting test results, and helping to diagnose issues following the standard pipeline. <example>Context: User wants to run all functional tests. user: \"运行所有功能测试\" assistant: \"我将使用 test-runner agent 来执行所有功能测试\" <commentary>Since the user wants to run tests by category, use the test-runner agent.</commentary></example> <example>Context: User wants to verify a bug fix. user: \"我修复了一个bug，帮我验证一下\" assistant: \"让我使用 test-runner agent 来执行对应的修复验证测试\" <commentary>The user needs to verify a fix, which is a core task for the test-runner agent.</commentary></example> (Tools: *)\n- in-depth-research-analyst: Use this agent when you need to conduct comprehensive research reports with in-depth web mining, data analysis, and visualization. This includes industry analysis, market research, competitive intelligence, and trend forecasting with accurate data from authoritative sources. <example>Context: User wants a comprehensive industry analysis report. user: \"请对人工智能芯片市场进行深入调研，包括主要厂商、市场份额和增长趋势\" assistant: \"我将使用 in-depth-research-analyst agent 来进行这项深入的市场调研并生成可视化报告\" <commentary>Since the user needs a comprehensive industry analysis with data visualization, use the in-depth-research-analyst agent to conduct thorough research and create an integrated report.</commentary></example> <example>Context: User wants market research with accurate data and visualizations. user: \"我们需要一份关于电动汽车充电基础设施的深度报告，包含数据图表\" assistant: \"让我使用 in-depth-research-analyst agent 来收集准确数据并生成图文并茂的分析报告\" <commentary>Since this requires market research with data accuracy and visualizations, use the in-depth-research-analyst agent to create a comprehensive report.</commentary></example> (Tools: *)\n- prd-writer: Use this agent when you need to create a comprehensive Product Requirements Document (PRD) for a software project or feature. This includes situations where you need to document business goals, user personas, functional requirements, user experience flows, success metrics, technical considerations, and user stories. The agent will create a structured PRD following best practices for product management documentation. Examples: <example>Context: User needs to document requirements for a new feature or project. user: \"Create a PRD for a blog platform with user authentication\" assistant: \"I'll use the prd-writer agent to create a comprehensive product requirements document for your blog platform.\" <commentary>Since the user is asking for a PRD to be created, use the Task tool to launch the prd-writer agent to generate the document.</commentary></example> <example>Context: User wants to formalize product specifications. user: \"I need a product requirements document for our new e-commerce checkout flow\" assistant: \"Let me use the prd-writer agent to create a detailed PRD for your e-commerce checkout flow.\" <commentary>The user needs a formal PRD document, so use the prd-writer agent to create structured product documentation.</commentary></example> (Tools: Task, Bash, Grep, LS, Read, Write, WebSearch, Glob)\n- pipeline-debug-universal: Use this agent when you need to implement comprehensive debug hooks and testing infrastructure for ANY pipeline system - whether it's API routing, data processing, CI/CD workflows, or transformation pipelines. This agent specializes in creating universal debug architectures that work across different pipeline types with data capture, replay capabilities, and systematic testing matrices. Examples: <example>Context: User is working on a multi-provider API routing system and needs to add debug capabilities to track data flow through each pipeline step. user: \"I need to add debug hooks to our routing pipeline so we can capture and replay data at each step\" assistant: \"I'll use the pipeline-debug-universal agent to design a comprehensive debug infrastructure with data capture and replay capabilities\" <commentary>Since the user needs pipeline debugging infrastructure, use the pipeline-debug-universal agent to create debug hooks and testing matrices.</commentary></example> <example>Context: User has a complex data transformation pipeline and wants to build systematic testing for each stage and provider. user: \"Our data processing pipeline has issues and we need better testing infrastructure to isolate problems at each step\" assistant: \"Let me use the pipeline-debug-universal agent to create a complete testing matrix and debug system\" <commentary>Since the user needs systematic pipeline testing infrastructure, use the pipeline-debug-universal agent to architect the testing system.</commentary></example> <example>Context: User is building a CI/CD pipeline and needs to implement debug capabilities for tracking deployment issues. user: \"Our deployment pipeline fails randomly and we can't reproduce the issues consistently\" assistant: \"I'll deploy the pipeline-debug-universal agent to create comprehensive debug hooks and replay capabilities for your CI/CD pipeline\" <commentary>Since the user needs debug infrastructure for a deployment pipeline, use the pipeline-debug-universal agent to design the debug system.</commentary></example> (Tools: *)\n\nWhen using the Task tool, you must specify a subagent_type parameter to select which agent type to use.\n\n\n\nWhen NOT to use the Agent tool:\n- If you want to read a specific file path, use the Read or Glob tool instead of the Agent tool, to find the match more quickly\n- If you are searching for a specific class definition like \"class Foo\", use the Glob tool instead, to find the match more quickly\n- If you are searching for code within a specific file or set of 2-3 files, use the Read tool instead of the Agent tool, to find the match more quickly\n- Other tasks that are not related to the agent descriptions above\n\n\nUsage notes:\n1. Launch multiple agents concurrently whenever possible, to maximize performance; to do that, use a single message with multiple tool uses\n2. When the agent is done, it will return a single message back to you. The result returned by the agent is not visible to the user. To show the user the result, you should send a text message back to the user with a concise summary of the result.\n3. Each agent invocation is stateless. You will not be able to send additional messages to the agent, nor will the agent be able to communicate with you outside of its final report. Therefore, your prompt should contain a highly detailed task description for the agent to perform autonomously and you should specify exactly what information the agent should return back to you in its final and only message to you.\n4. The agent's outputs should generally be trusted\n5. Clearly tell the agent whether you expect it to write code or just to do research (search, file reads, web fetches, etc.), since it is not aware of the user's intent\n6. If the agent description mentions that it should be used proactively, then you should try your best to use it without the user having to ask for it first. Use your judgement.\n\nExample usage:\n\n<example_agent_descriptions>\n\"code-reviewer\": use this agent after you are done writing a signficant piece of code\n\"greeting-responder\": use this agent when to respond to user greetings with a friendly joke\n</example_agent_description>\n\n<example>\nuser: \"Please write a function that checks if a number is prime\"\nassistant: Sure let me write a function that checks if a number is prime\nassistant: First let me use the Write tool to write a function that checks if a number is prime\nassistant: I'm going to use the Write tool to write the following code:\n<code>\nfunction isPrime(n) {\n  if (n <= 1) return false\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n</code>\n<commentary>\nSince a signficant piece of code was written and the task was completed, now use the code-reviewer agent to review the code\n</commentary>\nassistant: Now let me use the code-reviewer agent to review the code\nassistant: Uses the Task tool to launch the with the code-reviewer agent\n</example>\n\n<example>\nuser: \"Hello\"\n<commentary>\nSince the user is greeting, use the greeting-responder agent to respond with a friendly joke\n</commentary>\nassistant: \"I'm going to use the Task tool to launch the with the greeting-responder agent\"\n</example>\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "description": {
                "type": "string",
                "description": "A short (3-5 word) description of the task"
              },
              "prompt": {
                "type": "string",
                "description": "The task for the agent to perform"
              },
              "subagent_type": {
                "type": "string",
                "description": "The type of specialized agent to use for this task"
              }
            },
            "required": [
              "description",
              "prompt",
              "subagent_type"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Bash",
          "description": "Executes a given bash command in a persistent shell session with optional timeout, ensuring proper handling and security measures.\n\nBefore executing the command, please follow these steps:\n\n1. Directory Verification:\n   - If the command will create new directories or files, first use the LS tool to verify the parent directory exists and is the correct location\n   - For example, before running \"mkdir foo/bar\", first use LS to check that \"foo\" exists and is the intended parent directory\n\n2. Command Execution:\n   - Always quote file paths that contain spaces with double quotes (e.g., cd \"path with spaces/file.txt\")\n   - Examples of proper quoting:\n     - cd \"/Users/name/My Documents\" (correct)\n     - cd /Users/name/My Documents (incorrect - will fail)\n     - python \"/path/with spaces/script.py\" (correct)\n     - python /path/with spaces/script.py (incorrect - will fail)\n   - After ensuring proper quoting, execute the command.\n   - Capture the output of the command.\n\nUsage notes:\n  - The command argument is required.\n  - You can specify an optional timeout in milliseconds (up to 600000ms / 10 minutes). If not specified, commands will timeout after 120000ms (2 minutes).\n  - It is very helpful if you write a clear, concise description of what this command does in 5-10 words.\n  - If the output exceeds 30000 characters, output will be truncated before being returned to you.\n  - VERY IMPORTANT: You MUST avoid using search commands like `find` and `grep`. Instead use Grep, Glob, or Task to search. You MUST avoid read tools like `cat`, `head`, `tail`, and `ls`, and use Read and LS to read files.\n - If you _still_ need to run `grep`, STOP. ALWAYS USE ripgrep at `rg` first, which all ${PRODUCT_NAME} users have pre-installed.\n  - When issuing multiple commands, use the ';' or '&&' operator to separate them. DO NOT use newlines (newlines are ok in quoted strings).\n  - Try to maintain your current working directory throughout the session by using absolute paths and avoiding usage of `cd`. You may use `cd` if the User explicitly requests it.\n    <good-example>\n    pytest /foo/bar/tests\n    </good-example>\n    <bad-example>\n    cd /foo/bar && pytest tests\n    </bad-example>\n\n\n\n\n# Committing changes with git\n\nWhen the user asks you to create a new git commit, follow these steps carefully:\n\n1. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following bash commands in parallel, each using the Bash tool:\n  - Run a git status command to see all untracked files.\n  - Run a git diff command to see both staged and unstaged changes that will be committed.\n  - Run a git log command to see recent commit messages, so that you can follow this repository's commit message style.\n2. Analyze all staged changes (both previously staged and newly added) and draft a commit message:\n  - Summarize the nature of the changes (eg. new feature, enhancement to an existing feature, bug fix, refactoring, test, docs, etc.). Ensure the message accurately reflects the changes and their purpose (i.e. \"add\" means a wholly new feature, \"update\" means an enhancement to an existing feature, \"fix\" means a bug fix, etc.).\n  - Check for any sensitive information that shouldn't be committed\n  - Draft a concise (1-2 sentences) commit message that focuses on the \"why\" rather than the \"what\"\n  - Ensure it accurately reflects the changes and their purpose\n3. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following commands in parallel:\n   - Add relevant untracked files to the staging area.\n   - Create the commit with a message ending with:\n   🤖 Generated with [Claude Code](https://claude.ai/code)\n\n   Co-Authored-By: Claude <noreply@anthropic.com>\n   - Run git status to make sure the commit succeeded.\n4. If the commit fails due to pre-commit hook changes, retry the commit ONCE to include these automated changes. If it fails again, it usually means a pre-commit hook is preventing the commit. If the commit succeeds but you notice that files were modified by the pre-commit hook, you MUST amend your commit to include them.\n\nImportant notes:\n- NEVER update the git config\n- NEVER run additional commands to read or explore code, besides git bash commands\n- NEVER use the TodoWrite or Task tools\n- DO NOT push to the remote repository unless the user explicitly asks you to do so\n- IMPORTANT: Never use git commands with the -i flag (like git rebase -i or git add -i) since they require interactive input which is not supported.\n- If there are no changes to commit (i.e., no untracked files and no modifications), do not create an empty commit\n- In order to ensure good formatting, ALWAYS pass the commit message via a HEREDOC, a la this example:\n<example>\ngit commit -m \"$(cat <<'EOF'\n   Commit message here.\n\n   🤖 Generated with [Claude Code](https://claude.ai/code)\n\n   Co-Authored-By: Claude <noreply@anthropic.com>\n   EOF\n   )\"\n</example>\n\n# Creating pull requests\nUse the gh command via the Bash tool for ALL GitHub-related tasks including working with issues, pull requests, checks, and releases. If given a Github URL use the gh command to get the information needed.\n\nIMPORTANT: When the user asks you to create a pull request, follow these steps carefully:\n\n1. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following bash commands in parallel using the Bash tool, in order to understand the current state of the branch since it diverged from the main branch:\n   - Run a git status command to see all untracked files\n   - Run a git diff command to see both staged and unstaged changes that will be committed\n   - Check if the current branch tracks a remote branch and is up to date with the remote, so you know if you need to push to the remote\n   - Run a git log command and `git diff [base-branch]...HEAD` to understand the full commit history for the current branch (from the time it diverged from the base branch)\n2. Analyze all changes that will be included in the pull request, making sure to look at all relevant commits (NOT just the latest commit, but ALL commits that will be included in the pull request!!!), and draft a pull request summary\n3. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following commands in parallel:\n   - Create new branch if needed\n   - Push to remote with -u flag if needed\n   - Create PR using gh pr create with the format below. Use a HEREDOC to pass the body to ensure correct formatting.\n<example>\ngh pr create --title \"the pr title\" --body \"$(cat <<'EOF'\n## Summary\n<1-3 bullet points>\n\n## Test plan\n[Checklist of TODOs for testing the pull request...]\n\n🤖 Generated with [Claude Code](https://claude.ai/code)\nEOF\n)\"\n</example>\n\nImportant:\n- NEVER update the git config\n- DO NOT use the TodoWrite or Task tools\n- Return the PR URL when you're done, so the user can see it\n\n# Other common operations\n- View comments on a Github PR: gh api repos/foo/bar/pulls/123/comments",
          "input_schema": {
            "type": "object",
            "properties": {
              "command": {
                "type": "string",
                "description": "The command to execute"
              },
              "timeout": {
                "type": "number",
                "description": "Optional timeout in milliseconds (max 600000)"
              },
              "description": {
                "type": "string",
                "description": " Clear, concise description of what this command does in 5-10 words. Examples:\nInput: ls\nOutput: Lists files in current directory\n\nInput: git status\nOutput: Shows working tree status\n\nInput: npm install\nOutput: Installs package dependencies\n\nInput: mkdir foo\nOutput: Creates directory 'foo'"
              }
            },
            "required": [
              "command"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Glob",
          "description": "- Fast file pattern matching tool that works with any codebase size\n- Supports glob patterns like \"**/*.js\" or \"src/**/*.ts\"\n- Returns matching file paths sorted by modification time\n- Use this tool when you need to find files by name patterns\n- When you are doing an open ended search that may require multiple rounds of globbing and grepping, use the Agent tool instead\n- You have the capability to call multiple tools in a single response. It is always better to speculatively perform multiple searches as a batch that are potentially useful.",
          "input_schema": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "The glob pattern to match files against"
              },
              "path": {
                "type": "string",
                "description": "The directory to search in. If not specified, the current working directory will be used. IMPORTANT: Omit this field to use the default directory. DO NOT enter \"undefined\" or \"null\" - simply omit it for the default behavior. Must be a valid directory path if provided."
              }
            },
            "required": [
              "pattern"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Grep",
          "description": "A powerful search tool built on ripgrep\n\n  Usage:\n  - ALWAYS use Grep for search tasks. NEVER invoke `grep` or `rg` as a Bash command. The Grep tool has been optimized for correct permissions and access.\n  - Supports full regex syntax (e.g., \"log.*Error\", \"function\\s+\\w+\")\n  - Filter files with glob parameter (e.g., \"*.js\", \"**/*.tsx\") or type parameter (e.g., \"js\", \"py\", \"rust\")\n  - Output modes: \"content\" shows matching lines, \"files_with_matches\" shows only file paths (default), \"count\" shows match counts\n  - Use Task tool for open-ended searches requiring multiple rounds\n  - Pattern syntax: Uses ripgrep (not grep) - literal braces need escaping (use `interface\\{\\}` to find `interface{}` in Go code)\n  - Multiline matching: By default patterns match within single lines only. For cross-line patterns like `struct \\{[\\s\\S]*?field`, use `multiline: true`\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "pattern": {
                "type": "string",
                "description": "The regular expression pattern to search for in file contents"
              },
              "path": {
                "type": "string",
                "description": "File or directory to search in (rg PATH). Defaults to current working directory."
              },
              "glob": {
                "type": "string",
                "description": "Glob pattern to filter files (e.g. \"*.js\", \"*.{ts,tsx}\") - maps to rg --glob"
              },
              "output_mode": {
                "type": "string",
                "enum": [
                  "content",
                  "files_with_matches",
                  "count"
                ],
                "description": "Output mode: \"content\" shows matching lines (supports -A/-B/-C context, -n line numbers, head_limit), \"files_with_matches\" shows file paths (supports head_limit), \"count\" shows match counts (supports head_limit). Defaults to \"files_with_matches\"."
              },
              "-B": {
                "type": "number",
                "description": "Number of lines to show before each match (rg -B). Requires output_mode: \"content\", ignored otherwise."
              },
              "-A": {
                "type": "number",
                "description": "Number of lines to show after each match (rg -A). Requires output_mode: \"content\", ignored otherwise."
              },
              "-C": {
                "type": "number",
                "description": "Number of lines to show before and after each match (rg -C). Requires output_mode: \"content\", ignored otherwise."
              },
              "-n": {
                "type": "boolean",
                "description": "Show line numbers in output (rg -n). Requires output_mode: \"content\", ignored otherwise."
              },
              "-i": {
                "type": "boolean",
                "description": "Case insensitive search (rg -i)"
              },
              "type": {
                "type": "string",
                "description": "File type to search (rg --type). Common types: js, py, rust, go, java, etc. More efficient than include for standard file types."
              },
              "head_limit": {
                "type": "number",
                "description": "Limit output to first N lines/entries, equivalent to \"| head -N\". Works across all output modes: content (limits output lines), files_with_matches (limits file paths), count (limits count entries). When unspecified, shows all results from ripgrep."
              },
              "multiline": {
                "type": "boolean",
                "description": "Enable multiline mode where . matches newlines and patterns can span lines (rg -U --multiline-dotall). Default: false."
              }
            },
            "required": [
              "pattern"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "LS",
          "description": "Lists files and directories in a given path. The path parameter must be an absolute path, not a relative path. You can optionally provide an array of glob patterns to ignore with the ignore parameter. You should generally prefer the Glob and Grep tools, if you know which directories to search.",
          "input_schema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "The absolute path to the directory to list (must be absolute, not relative)"
              },
              "ignore": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of glob patterns to ignore"
              }
            },
            "required": [
              "path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "ExitPlanMode",
          "description": "Use this tool when you are in plan mode and have finished presenting your plan and are ready to code. This will prompt the user to exit plan mode.\nIMPORTANT: Only use this tool when the task requires planning the implementation steps of a task that requires writing code. For research tasks where you're gathering information, searching files, reading files or in general trying to understand the codebase - do NOT use this tool.\n\nEg.\n1. Initial task: \"Search for and understand the implementation of vim mode in the codebase\" - Do not use the exit plan mode tool because you are not planning the implementation steps of a task.\n2. Initial task: \"Help me implement yank mode for vim\" - Use the exit plan mode tool after you have finished planning the implementation steps of the task.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "plan": {
                "type": "string",
                "description": "The plan you came up with, that you want to run by the user for approval. Supports markdown. The plan should be pretty concise."
              }
            },
            "required": [
              "plan"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Read",
          "description": "Reads a file from the local filesystem. You can access any file directly by using this tool.\nAssume this tool is able to read all files on the machine. If the User provides a path to a file assume that path is valid. It is okay to read a file that does not exist; an error will be returned.\n\nUsage:\n- The file_path parameter must be an absolute path, not a relative path\n- By default, it reads up to 2000 lines starting from the beginning of the file\n- You can optionally specify a line offset and limit (especially handy for long files), but it's recommended to read the whole file by not providing these parameters\n- Any lines longer than 2000 characters will be truncated\n- Results are returned using cat -n format, with line numbers starting at 1\n- This tool allows Claude Code to read images (eg PNG, JPG, etc). When reading an image file the contents are presented visually as Claude Code is a multimodal LLM.\n- This tool can read PDF files (.pdf). PDFs are processed page by page, extracting both text and visual content for analysis.\n- For Jupyter notebooks (.ipynb files), use the NotebookRead instead\n- You have the capability to call multiple tools in a single response. It is always better to speculatively read multiple files as a batch that are potentially useful.\n- You will regularly be asked to read screenshots. If the user provides a path to a screenshot ALWAYS use this tool to view the file at the path. This tool will work with all temporary file paths like /var/folders/123/abc/T/TemporaryItems/NSIRD_screencaptureui_ZfB1tD/Screenshot.png\n- If you read a file that exists but has empty contents you will receive a system reminder warning in place of file contents.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to read"
              },
              "offset": {
                "type": "number",
                "description": "The line number to start reading from. Only provide if the file is too large to read at once"
              },
              "limit": {
                "type": "number",
                "description": "The number of lines to read. Only provide if the file is too large to read at once."
              }
            },
            "required": [
              "file_path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Edit",
          "description": "Performs exact string replacements in files.\n\nUsage:\n- You must use your `Read` tool at least once in the conversation before editing. This tool will error if you attempt an edit without reading the file.\n- When editing text from Read tool output, ensure you preserve the exact indentation (tabs/spaces) as it appears AFTER the line number prefix. The line number prefix format is: spaces + line number + tab. Everything after that tab is the actual file content to match. Never include any part of the line number prefix in the old_string or new_string.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- Only use emojis if the user explicitly requests it. Avoid adding emojis to files unless asked.\n- The edit will FAIL if `old_string` is not unique in the file. Either provide a larger string with more surrounding context to make it unique or use `replace_all` to change every instance of `old_string`.\n- Use `replace_all` for replacing and renaming strings across the file. This parameter is useful if you want to rename a variable for instance.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to modify"
              },
              "old_string": {
                "type": "string",
                "description": "The text to replace"
              },
              "new_string": {
                "type": "string",
                "description": "The text to replace it with (must be different from old_string)"
              },
              "replace_all": {
                "type": "boolean",
                "default": false,
                "description": "Replace all occurences of old_string (default false)"
              }
            },
            "required": [
              "file_path",
              "old_string",
              "new_string"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "MultiEdit",
          "description": "This is a tool for making multiple edits to a single file in one operation. It is built on top of the Edit tool and allows you to perform multiple find-and-replace operations efficiently. Prefer this tool over the Edit tool when you need to make multiple edits to the same file.\n\nBefore using this tool:\n\n1. Use the Read tool to understand the file's contents and context\n2. Verify the directory path is correct\n\nTo make multiple file edits, provide the following:\n1. file_path: The absolute path to the file to modify (must be absolute, not relative)\n2. edits: An array of edit operations to perform, where each edit contains:\n   - old_string: The text to replace (must match the file contents exactly, including all whitespace and indentation)\n   - new_string: The edited text to replace the old_string\n   - replace_all: Replace all occurences of old_string. This parameter is optional and defaults to false.\n\nIMPORTANT:\n- All edits are applied in sequence, in the order they are provided\n- Each edit operates on the result of the previous edit\n- All edits must be valid for the operation to succeed - if any edit fails, none will be applied\n- This tool is ideal when you need to make several changes to different parts of the same file\n- For Jupyter notebooks (.ipynb files), use the NotebookEdit instead\n\nCRITICAL REQUIREMENTS:\n1. All edits follow the same requirements as the single Edit tool\n2. The edits are atomic - either all succeed or none are applied\n3. Plan your edits carefully to avoid conflicts between sequential operations\n\nWARNING:\n- The tool will fail if edits.old_string doesn't match the file contents exactly (including whitespace)\n- The tool will fail if edits.old_string and edits.new_string are the same\n- Since edits are applied in sequence, ensure that earlier edits don't affect the text that later edits are trying to find\n\nWhen making edits:\n- Ensure all edits result in idiomatic, correct code\n- Do not leave the code in a broken state\n- Always use absolute file paths (starting with /)\n- Only use emojis if the user explicitly requests it. Avoid adding emojis to files unless asked.\n- Use replace_all for replacing and renaming strings across the file. This parameter is useful if you want to rename a variable for instance.\n\nIf you want to create a new file, use:\n- A new file path, including dir name if needed\n- First edit: empty old_string and the new file's contents as new_string\n- Subsequent edits: normal edit operations on the created content",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to modify"
              },
              "edits": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "old_string": {
                      "type": "string",
                      "description": "The text to replace"
                    },
                    "new_string": {
                      "type": "string",
                      "description": "The text to replace it with"
                    },
                    "replace_all": {
                      "type": "boolean",
                      "default": false,
                      "description": "Replace all occurences of old_string (default false)."
                    }
                  },
                  "required": [
                    "old_string",
                    "new_string"
                  ],
                  "additionalProperties": false
                },
                "minItems": 1,
                "description": "Array of edit operations to perform sequentially on the file"
              }
            },
            "required": [
              "file_path",
              "edits"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "Write",
          "description": "Writes a file to the local filesystem.\n\nUsage:\n- This tool will overwrite the existing file if there is one at the provided path.\n- If this is an existing file, you MUST use the Read tool first to read the file's contents. This tool will fail if you did not read the file first.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- NEVER proactively create documentation files (*.md) or README files. Only create documentation files if explicitly requested by the User.\n- Only use emojis if the user explicitly requests it. Avoid writing emojis to files unless asked.",
          "input_schema": {
            "type": "object",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "The absolute path to the file to write (must be absolute, not relative)"
              },
              "content": {
                "type": "string",
                "description": "The content to write to the file"
              }
            },
            "required": [
              "file_path",
              "content"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "NotebookRead",
          "description": "Reads a Jupyter notebook (.ipynb file) and returns all of the cells with their outputs. Jupyter notebooks are interactive documents that combine code, text, and visualizations, commonly used for data analysis and scientific computing. The notebook_path parameter must be an absolute path, not a relative path.",
          "input_schema": {
            "type": "object",
            "properties": {
              "notebook_path": {
                "type": "string",
                "description": "The absolute path to the Jupyter notebook file to read (must be absolute, not relative)"
              },
              "cell_id": {
                "type": "string",
                "description": "The ID of a specific cell to read. If not provided, all cells will be read."
              }
            },
            "required": [
              "notebook_path"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "NotebookEdit",
          "description": "Completely replaces the contents of a specific cell in a Jupyter notebook (.ipynb file) with new source. Jupyter notebooks are interactive documents that combine code, text, and visualizations, commonly used for data analysis and scientific computing. The notebook_path parameter must be an absolute path, not a relative path. The cell_number is 0-indexed. Use edit_mode=insert to add a new cell at the index specified by cell_number. Use edit_mode=delete to delete the cell at the index specified by cell_number.",
          "input_schema": {
            "type": "object",
            "properties": {
              "notebook_path": {
                "type": "string",
                "description": "The absolute path to the Jupyter notebook file to edit (must be absolute, not relative)"
              },
              "cell_id": {
                "type": "string",
                "description": "The ID of the cell to edit. When inserting a new cell, the new cell will be inserted after the cell with this ID, or at the beginning if not specified."
              },
              "new_source": {
                "type": "string",
                "description": "The new source for the cell"
              },
              "cell_type": {
                "type": "string",
                "enum": [
                  "code",
                  "markdown"
                ],
                "description": "The type of the cell (code or markdown). If not specified, it defaults to the current cell type. If using edit_mode=insert, this is required."
              },
              "edit_mode": {
                "type": "string",
                "enum": [
                  "replace",
                  "insert",
                  "delete"
                ],
                "description": "The type of edit to make (replace, insert, delete). Defaults to replace."
              }
            },
            "required": [
              "notebook_path",
              "new_source"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "WebFetch",
          "description": "\n- Fetches content from a specified URL and processes it using an AI model\n- Takes a URL and a prompt as input\n- Fetches the URL content, converts HTML to markdown\n- Processes the content with the prompt using a small, fast model\n- Returns the model's response about the content\n- Use this tool when you need to retrieve and analyze web content\n\nUsage notes:\n  - IMPORTANT: If an MCP-provided web fetch tool is available, prefer using that tool instead of this one, as it may have fewer restrictions. All MCP-provided tools start with \"mcp__\".\n  - The URL must be a fully-formed valid URL\n  - HTTP URLs will be automatically upgraded to HTTPS\n  - The prompt should describe what information you want to extract from the page\n  - This tool is read-only and does not modify any files\n  - Results may be summarized if the content is very large\n  - Includes a self-cleaning 15-minute cache for faster responses when repeatedly accessing the same URL\n  - When a URL redirects to a different host, the tool will inform you and provide the redirect URL in a special format. You should then make a new WebFetch request with the redirect URL to fetch the content.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "format": "uri",
                "description": "The URL to fetch content from"
              },
              "prompt": {
                "type": "string",
                "description": "The prompt to run on the fetched content"
              }
            },
            "required": [
              "url",
              "prompt"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "TodoWrite",
          "description": "Use this tool to create and manage a structured task list for your current coding session. This helps you track progress, organize complex tasks, and demonstrate thoroughness to the user.\nIt also helps the user understand the progress of the task and overall progress of their requests.\n\n## When to Use This Tool\nUse this tool proactively in these scenarios:\n\n1. Complex multi-step tasks - When a task requires 3 or more distinct steps or actions\n2. Non-trivial and complex tasks - Tasks that require careful planning or multiple operations\n3. User explicitly requests todo list - When the user directly asks you to use the todo list\n4. User provides multiple tasks - When users provide a list of things to be done (numbered or comma-separated)\n5. After receiving new instructions - Immediately capture user requirements as todos\n6. When you start working on a task - Mark it as in_progress BEFORE beginning work. Ideally you should only have one todo as in_progress at a time\n7. After completing a task - Mark it as completed and add any new follow-up tasks discovered during implementation\n\n## When NOT to Use This Tool\n\nSkip using this tool when:\n1. There is only a single, straightforward task\n2. The task is trivial and tracking it provides no organizational benefit\n3. The task can be completed in less than 3 trivial steps\n4. The task is purely conversational or informational\n\nNOTE that you should not use this tool if there is only one trivial task to do. In this case you are better off just doing the task directly.\n\n## Examples of When to Use the Todo List\n\n<example>\nUser: I want to add a dark mode toggle to the application settings. Make sure you run the tests and build when you're done!\nAssistant: I'll help add a dark mode toggle to your application settings. Let me create a todo list to track this implementation.\n*Creates todo list with the following items:*\n1. Create dark mode toggle component in Settings page\n2. Add dark mode state management (context/store)\n3. Implement CSS-in-JS styles for dark theme\n4. Update existing components to support theme switching\n5. Run tests and build process, addressing any failures or errors that occur\n*Begins working on the first task*\n\n<reasoning>\nThe assistant used the todo list because:\n1. Adding dark mode is a multi-step feature requiring UI, state management, and styling changes\n2. The user explicitly requested tests and build be run afterward\n3. The assistant inferred that tests and build need to pass by adding \"Ensure tests and build succeed\" as the final task\n</reasoning>\n</example>\n\n<example>\nUser: Help me rename the function getCwd to getCurrentWorkingDirectory across my project\nAssistant: Let me first search through your codebase to find all occurrences of 'getCwd'.\n*Uses grep or search tools to locate all instances of getCwd in the codebase*\nAssistant: I've found 15 instances of 'getCwd' across 8 different files. Let me create a todo list to track these changes.\n*Creates todo list with specific items for each file that needs updating*\n\n<reasoning>\nThe assistant used the todo list because:\n1. First, the assistant searched to understand the scope of the task\n2. Upon finding multiple occurrences across different files, it determined this was a complex task with multiple steps\n3. The todo list helps ensure every instance is tracked and updated systematically\n4. This approach prevents missing any occurrences and maintains code consistency\n</reasoning>\n</example>\n\n\n<example>\nUser: I need to implement these features for my e-commerce site: user registration, product catalog, shopping cart, and checkout flow.\nAssistant: I'll help implement these features. First, let's add all the features to the todo list.\n*Creates a todo list breaking down each feature into specific tasks based on the project architecture*\nAssistant: Let's start with user registration. This will involve creating database models, API endpoints, and frontend forms that integrate with your existing authentication system.\n\n<reasoning>\nThe assistant used the todo list because:\n1. The user provided multiple complex features to implement in a comma separated list\n2. The todo list helps organize these large features into manageable tasks\n3. This approach allows for tracking progress across the entire implementation\n</reasoning>\n</example>\n\n<example>\nUser: Can you help optimize my React application? It's rendering slowly and has performance issues.</user>\nAssistant: I'll help optimize your React application. First, let me examine your codebase to identify potential performance bottlenecks.\n*Reviews component structure, render patterns, state management, and data fetching*\nAssistant: After analyzing your codebase, I've identified several performance issues. Let me create a todo list to track our optimization efforts.\n*Creates todo list with items like: 1) Implement memoization for expensive calculations in ProductList, 2) Add virtualization for long lists in Dashboard, 3) Optimize image loading in Gallery component, 4) Fix state update loops in ShoppingCart, 5) Review bundle size and implement code splitting*\nLet's start by implementing memoization for the expensive calculations in your ProductList component.</assistant>\n\n<reasoning>\nThe assistant used the todo list because:\n1. First, the assistant examined the codebase to identify specific performance issues\n2. Based on this analysis, it identified multiple optimization opportunities\n3. Performance optimization is a non-trivial task requiring multiple steps\n4. The todo list helps methodically track improvements across different components\n5. This systematic approach ensures all performance bottlenecks are addressed\n</reasoning>\n</example>\n\n## Examples of When NOT to Use the Todo List\n\n<example>\nUser: How do I print 'Hello World' in Python?\nAssistant: In Python, you can print \"Hello World\" with this simple code:\n\npython\nprint(\"Hello World\")\n\nThis will output the text \"Hello World\" to the console when executed.</assistant>\n\n<reasoning>\nThe assistant did not use the todo list because this is a single, trivial task that can be completed in one step. There's no need to track multiple tasks or steps for such a straightforward request.\n</reasoning>\n</example>\n\n<example>\nUser: What does the git status command do?\nAssistant: The git status command shows the current state of your working directory and staging area. It displays which changes have been staged, which haven't, and which files aren't being tracked by Git. This is a fundamental command for understanding the current state of your repository before making commits.\n\n<reasoning>\nThe assistant did not use the todo list because this is an informational request with no actual coding task to complete. The user is simply asking for an explanation, not for the assistant to perform multiple steps or tasks.\n</reasoning>\n</example>\n\n<example>\nUser: Can you add a comment to the calculateTotal function to explain what it does?\nAssistant: Sure, let me add a comment to the calculateTotal function to explain what it does.\n* Uses the Edit tool to add a comment to the calculateTotal function *\n\n<reasoning>\nThe assistant did not use the todo list because this is a single, straightforward task confined to one location in the code. Adding a comment doesn't require tracking multiple steps or systematic organization.\n</reasoning>\n</example>\n\n<example>\nUser: Run npm install for me and tell me what happens.\nAssistant: I'll run the npm install command for you.\n\n*Executes: npm install*\n\nThe command completed successfully. Here's the output:\n[Output of npm install command]\n\nAll dependencies have been installed according to your package.json file.\n\n<reasoning>\nThe assistant did not use the todo list because this is a single command execution with immediate results. There are no multiple steps to track or organize, making the todo list unnecessary for this straightforward task.\n</reasoning>\n</example>\n\n## Task States and Management\n\n1. **Task States**: Use these states to track progress:\n   - pending: Task not yet started\n   - in_progress: Currently working on (limit to ONE task at a time)\n   - completed: Task finished successfully\n\n2. **Task Management**:\n   - Update task status in real-time as you work\n   - Mark tasks complete IMMEDIATELY after finishing (don't batch completions)\n   - Only have ONE task in_progress at any time\n   - Complete current tasks before starting new ones\n   - Remove tasks that are no longer relevant from the list entirely\n\n3. **Task Completion Requirements**:\n   - ONLY mark a task as completed when you have FULLY accomplished it\n   - If you encounter errors, blockers, or cannot finish, keep the task as in_progress\n   - When blocked, create a new task describing what needs to be resolved\n   - Never mark a task as completed if:\n     - Tests are failing\n     - Implementation is partial\n     - You encountered unresolved errors\n     - You couldn't find necessary files or dependencies\n\n4. **Task Breakdown**:\n   - Create specific, actionable items\n   - Break complex tasks into smaller, manageable steps\n   - Use clear, descriptive task names\n\nWhen in doubt, use this tool. Being proactive with task management demonstrates attentiveness and ensures you complete all requirements successfully.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "todos": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "content": {
                      "type": "string",
                      "minLength": 1
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "pending",
                        "in_progress",
                        "completed"
                      ]
                    },
                    "priority": {
                      "type": "string",
                      "enum": [
                        "high",
                        "medium",
                        "low"
                      ]
                    },
                    "id": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "content",
                    "status",
                    "priority",
                    "id"
                  ],
                  "additionalProperties": false
                },
                "description": "The updated todo list"
              }
            },
            "required": [
              "todos"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "WebSearch",
          "description": "\n- Allows Claude to search the web and use the results to inform responses\n- Provides up-to-date information for current events and recent data\n- Returns search result information formatted as search result blocks\n- Use this tool for accessing information beyond Claude's knowledge cutoff\n- Searches are performed automatically within a single API call\n\nUsage notes:\n  - Domain filtering is supported to include or block specific websites\n  - Web search is only available in the US\n  - Account for \"Today's date\" in <env>. For example, if <env> says \"Today's date: 2025-07-01\", and the user wants the latest docs, do not use 2024 in the search query. Use 2025.\n",
          "input_schema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "minLength": 2,
                "description": "The search query to use"
              },
              "allowed_domains": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Only include search results from these domains"
              },
              "blocked_domains": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Never include search results from these domains"
              }
            },
            "required": [
              "query"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        }
      ],
      "responseStructure": {
        "type": "object",
        "keys": [
          "id",
          "object",
          "created",
          "model",
          "choices",
          "usage",
          "stats",
          "system_fingerprint"
        ],
        "hasChoices": true,
        "hasContent": false,
        "hasUsage": true,
        "choicesCount": 1,
        "firstChoice": {
          "hasMessage": true,
          "hasToolCalls": false,
          "finishReason": "stop"
        }
      },
      "parsingAttempts": [
        "json_format",
        "function_call",
        "action_format",
        "natural_language"
      ]
    }
  }
]