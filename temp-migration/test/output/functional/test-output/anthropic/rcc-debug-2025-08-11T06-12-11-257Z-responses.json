[
  {
    "type": "unstructured",
    "providerProtocol": "anthropic",
    "timestamp": "2025-08-11T06:12:11.247Z",
    "data": {
      "rawLine": "[13:22:53] [DEBUG] [system] [b2534c80-293d-4f87-a4c1-fb69857069dc] [response-converter] Converted OpenAI response to Anthropic format",
      "timestamp": null,
      "request": null,
      "response": {
        "status": null,
        "headers": null,
        "body": null,
        "duration": null
      },
      "error": null,
      "performance": null
    },
    "metadata": {
      "lineNumber": 426,
      "fileName": "rcc-debug.log",
      "extractedAt": "2025-08-11T06:12:11.247Z",
      "dataSize": 133
    }
  },
  {
    "type": "unstructured",
    "providerProtocol": "anthropic",
    "timestamp": "2025-08-11T06:12:11.251Z",
    "data": {
      "rawLine": "        \"description\": \"Reads a file from the local filesystem. You can access any file directly by using this tool.\\nAssume this tool is able to read all files on the machine. If the User provides a path to a file assume that path is valid. It is okay to read a file that does not exist; an error will be returned.\\n\\nUsage:\\n- The file_path parameter must be an absolute path, not a relative path\\n- By default, it reads up to 2000 lines starting from the beginning of the file\\n- You can optionally specify a line offset and limit (especially handy for long files), but it's recommended to read the whole file by not providing these parameters\\n- Any lines longer than 2000 characters will be truncated\\n- Results are returned using cat -n format, with line numbers starting at 1\\n- This tool allows Claude Code to read images (eg PNG, JPG, etc). When reading an image file the contents are presented visually as Claude Code is a multimodal LLM.\\n- This tool can read PDF files (.pdf). PDFs are processed page by page, extracting both text and visual content for analysis.\\n- For Jupyter notebooks (.ipynb files), use the NotebookRead instead\\n- You have the capability to call multiple tools in a single response. It is always better to speculatively read multiple files as a batch that are potentially useful.\\n- You will regularly be asked to read screenshots. If the user provides a path to a screenshot ALWAYS use this tool to view the file at the path. This tool will work with all temporary file paths like /var/folders/123/abc/T/TemporaryItems/NSIRD_screencaptureui_ZfB1tD/Screenshot.png\\n- If you read a file that exists but has empty contents you will receive a system reminder warning in place of file contents.\",",
      "timestamp": null,
      "request": null,
      "response": {
        "status": 123,
        "headers": null,
        "body": null,
        "duration": null
      },
      "error": {
        "level": "error",
        "message": "        \"description\": \"Reads a file from the local filesystem. You can access any file directly by using this tool.\\nAssume this tool is able to read all files on the machine. If the User provides a path to a file assume that path is valid. It is okay to read a file that does not exist; an error will be returned.\\n\\nUsage:\\n- The file_path parameter must be an absolute path, not a relative path\\n- By default, it reads up to 2000 lines starting from the beginning of the file\\n- You can optionally specify a line offset and limit (especially handy for long files), but it's recommended to read the whole file by not providing these parameters\\n- Any lines longer than 2000 characters will be truncated\\n- Results are returned using cat -n format, with line numbers starting at 1\\n- This tool allows Claude Code to read images (eg PNG, JPG, etc). When reading an image file the contents are presented visually as Claude Code is a multimodal LLM.\\n- This tool can read PDF files (.pdf). PDFs are processed page by page, extracting both text and visual content for analysis.\\n- For Jupyter notebooks (.ipynb files), use the NotebookRead instead\\n- You have the capability to call multiple tools in a single response. It is always better to speculatively read multiple files as a batch that are potentially useful.\\n- You will regularly be asked to read screenshots. If the user provides a path to a screenshot ALWAYS use this tool to view the file at the path. This tool will work with all temporary file paths like /var/folders/123/abc/T/TemporaryItems/NSIRD_screencaptureui_ZfB1tD/Screenshot.png\\n- If you read a file that exists but has empty contents you will receive a system reminder warning in place of file contents.\",",
        "stack": null
      },
      "performance": {
        "duration": null,
        "memory": null,
        "cpu": null
      }
    },
    "metadata": {
      "lineNumber": 1656,
      "fileName": "rcc-debug.log",
      "extractedAt": "2025-08-11T06:12:11.251Z",
      "dataSize": 1727
    }
  },
  {
    "type": "unstructured",
    "providerProtocol": "anthropic",
    "timestamp": "2025-08-11T06:12:11.252Z",
    "data": {
      "rawLine": "        \"description\": \"\\n- Allows Claude to search the web and use the results to inform responses\\n- Provides up-to-date information for current events and recent data\\n- Returns search result information formatted as search result blocks\\n- Use this tool for accessing information beyond Claude's knowledge cutoff\\n- Searches are performed automatically within a single API call\\n\\nUsage notes:\\n  - Domain filtering is supported to include or block specific websites\\n  - Web search is only available in the US\\n  - Account for \\\"Today's date\\\" in <env>. For example, if <env> says \\\"Today's date: 2025-07-01\\\", and the user wants the latest docs, do not use 2024 in the search query. Use 2025.\\n\",",
      "timestamp": null,
      "request": null,
      "response": {
        "status": null,
        "headers": null,
        "body": null,
        "duration": null
      },
      "error": null,
      "performance": null
    },
    "metadata": {
      "lineNumber": 1952,
      "fileName": "rcc-debug.log",
      "extractedAt": "2025-08-11T06:12:11.252Z",
      "dataSize": 702
    }
  },
  {
    "type": "unstructured",
    "providerProtocol": "anthropic",
    "timestamp": "2025-08-11T06:12:11.254Z",
    "data": {
      "rawLine": "[13:23:45] [DEBUG] [system] [82c66c47-1faa-48cf-918d-914ec01cefbf] [response-converter] Converted OpenAI response to Anthropic format",
      "timestamp": null,
      "request": null,
      "response": {
        "status": null,
        "headers": null,
        "body": null,
        "duration": null
      },
      "error": null,
      "performance": null
    },
    "metadata": {
      "lineNumber": 2460,
      "fileName": "rcc-debug.log",
      "extractedAt": "2025-08-11T06:12:11.254Z",
      "dataSize": 133
    }
  },
  {
    "type": "unstructured",
    "providerProtocol": "anthropic",
    "timestamp": "2025-08-11T06:12:11.254Z",
    "data": {
      "rawLine": "[13:23:49] [DEBUG] [system] [bd361718-3025-4b19-b387-c02921e8a007] [response-converter] Converted OpenAI response to Anthropic format",
      "timestamp": null,
      "request": null,
      "response": {
        "status": null,
        "headers": null,
        "body": null,
        "duration": null
      },
      "error": null,
      "performance": null
    },
    "metadata": {
      "lineNumber": 2758,
      "fileName": "rcc-debug.log",
      "extractedAt": "2025-08-11T06:12:11.254Z",
      "dataSize": 133
    }
  },
  {
    "type": "unstructured",
    "providerProtocol": "anthropic",
    "timestamp": "2025-08-11T06:12:11.255Z",
    "data": {
      "rawLine": "[13:23:54] [DEBUG] [system] [08458a3f-a89c-4047-9cf1-617938f0104d] [response-converter] Converted OpenAI response to Anthropic format",
      "timestamp": null,
      "request": null,
      "response": {
        "status": null,
        "headers": null,
        "body": null,
        "duration": null
      },
      "error": {
        "level": "debug",
        "message": "[13:23:54] [DEBUG] [system] [08458a3f-a89c-4047-9cf1-617938f0104d] [response-converter] Converted OpenAI response to Anthropic format",
        "stack": null
      },
      "performance": null
    },
    "metadata": {
      "lineNumber": 3060,
      "fileName": "rcc-debug.log",
      "extractedAt": "2025-08-11T06:12:11.255Z",
      "dataSize": 133
    }
  },
  {
    "type": "unstructured",
    "providerProtocol": "anthropic",
    "timestamp": "2025-08-11T06:12:11.256Z",
    "data": {
      "rawLine": "[13:23:58] [DEBUG] [system] [f6b3877c-1710-4422-8698-ca9070311a18] [response-converter] Converted OpenAI response to Anthropic format",
      "timestamp": null,
      "request": null,
      "response": {
        "status": null,
        "headers": null,
        "body": null,
        "duration": null
      },
      "error": null,
      "performance": null
    },
    "metadata": {
      "lineNumber": 3650,
      "fileName": "rcc-debug.log",
      "extractedAt": "2025-08-11T06:12:11.256Z",
      "dataSize": 133
    }
  },
  {
    "type": "unstructured",
    "providerProtocol": "anthropic",
    "timestamp": "2025-08-11T06:12:11.257Z",
    "data": {
      "rawLine": "[13:29:05] [DEBUG] [system] [39cb9d84-df2d-4469-844b-ef7d24fe88ae] [response-converter] Converted OpenAI response to Anthropic format",
      "timestamp": null,
      "request": null,
      "response": {
        "status": null,
        "headers": null,
        "body": null,
        "duration": null
      },
      "error": null,
      "performance": null
    },
    "metadata": {
      "lineNumber": 3925,
      "fileName": "rcc-debug.log",
      "extractedAt": "2025-08-11T06:12:11.257Z",
      "dataSize": 133
    }
  },
  {
    "type": "unstructured",
    "providerProtocol": "anthropic",
    "timestamp": "2025-08-11T06:12:11.257Z",
    "data": {
      "rawLine": "[13:29:13] [DEBUG] [system] [bff373fb-78f9-425e-a47f-7a864160b9d1] [response-converter] Converted OpenAI response to Anthropic format",
      "timestamp": null,
      "request": null,
      "response": {
        "status": null,
        "headers": null,
        "body": null,
        "duration": null
      },
      "error": null,
      "performance": null
    },
    "metadata": {
      "lineNumber": 4149,
      "fileName": "rcc-debug.log",
      "extractedAt": "2025-08-11T06:12:11.257Z",
      "dataSize": 133
    }
  }
]