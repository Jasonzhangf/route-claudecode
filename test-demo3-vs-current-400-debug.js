#!/usr/bin/env node
/**
 * Demo3 vs Current Implementation 400错误调试对比工具
 * 全面捕获和对比数据流，定位API 400错误根本原因
 * 项目所有者: Jason Zhang
 */

const fs = require('fs');
const path = require('path');
const axios = require('axios');
const { spawn } = require('child_process');

class Demo3ComparisonDebugger {
  constructor() {
    this.debugDir = path.join(__dirname, 'debug-output/demo3-400-analysis');
    this.timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    
    // 确保输出目录存在
    if (!fs.existsSync(this.debugDir)) {
      fs.mkdirSync(this.debugDir, { recursive: true });
    }
    
    this.demo3Port = 3457; // demo3默认端口
    this.currentPort = 3456; // 当前实现端口
  }

  /**
   * 主要调试流程
   */
  async runFullComparison() {
    console.log('🔍 Demo3 vs Current Implementation 400错误对比分析');
    console.log('==================================================');
    
    try {
      // 1. 检查服务状态
      await this.checkServicesStatus();
      
      // 2. 捕获demo3的完整流程数据
      const demo3Data = await this.captureDemo3Pipeline();
      
      // 3. 捕获当前实现的完整流程数据
      const currentData = await this.captureCurrentPipeline();
      
      // 4. 进行详细对比分析
      const comparisonResult = await this.performDetailedComparison(demo3Data, currentData);
      
      // 5. 验证token轮换影响
      const tokenRotationResult = await this.testTokenRotation();
      
      // 6. 生成修复建议
      const fixSuggestions = await this.generateFixSuggestions(comparisonResult, tokenRotationResult);
      
      // 7. 输出完整分析报告
      await this.generateComprehensiveReport({
        demo3Data,
        currentData,
        comparisonResult,
        tokenRotationResult,
        fixSuggestions
      });
      
      console.log('\n✅ 完整分析报告已生成');
      console.log(`📁 输出目录: ${this.debugDir}`);
      
    } catch (error) {
      console.error('❌ 调试过程异常:', error.message);
      throw error;
    }\n  }\n\n  /**\n   * 检查服务状态\n   */\n  async checkServicesStatus() {\n    console.log('\\n📊 检查服务状态...');\n    \n    const services = [\n      { name: 'Demo3', port: this.demo3Port, path: '/health' },\n      { name: 'Current', port: this.currentPort, path: '/health' }\n    ];\n    \n    for (const service of services) {\n      try {\n        const response = await axios.get(`http://localhost:${service.port}${service.path}`, {\n          timeout: 3000\n        });\n        console.log(`  ✅ ${service.name}: 运行正常 (${response.status})`);\n      } catch (error) {\n        console.log(`  ❌ ${service.name}: 无法连接 - ${error.message}`);\n        \n        if (service.name === 'Demo3') {\n          console.log('     提示: 请启动demo3服务: cd examples/demo3/AIClient-2-API && npm start');\n        } else {\n          console.log('     提示: 请启动当前服务: ./rcc start config.json');\n        }\n      }\n    }\n  }\n\n  /**\n   * 捕获demo3的完整流程数据\n   */\n  async captureDemo3Pipeline() {\n    console.log('\\n🎯 捕获Demo3流程数据...');\n    \n    const testRequest = {\n      model: 'CLAUDE_SONNET_4_20250514_V1_0',\n      max_tokens: 1000,\n      messages: [\n        { role: 'user', content: 'Hello, can you help me with a simple task?' }\n      ],\n      tools: [{\n        name: 'get_current_time',\n        description: 'Get the current time',\n        input_schema: {\n          type: 'object',\n          properties: {}\n        }\n      }]\n    };\n    \n    try {\n      // 发送到demo3\n      const demo3Response = await axios.post(`http://localhost:${this.demo3Port}/v1/messages`, testRequest, {\n        headers: {\n          'Content-Type': 'application/json',\n          'x-api-key': 'demo3-test-key'\n        },\n        timeout: 30000\n      });\n      \n      const demo3Data = {\n        request: testRequest,\n        response: demo3Response.data,\n        headers: demo3Response.headers,\n        status: demo3Response.status,\n        timestamp: new Date().toISOString()\n      };\n      \n      // 保存demo3数据\n      fs.writeFileSync(\n        path.join(this.debugDir, `demo3-pipeline-${this.timestamp}.json`),\n        JSON.stringify(demo3Data, null, 2)\n      );\n      \n      console.log('  ✅ Demo3数据捕获成功');\n      return demo3Data;\n      \n    } catch (error) {\n      console.log('  ❌ Demo3数据捕获失败:', error.message);\n      \n      const errorData = {\n        request: testRequest,\n        error: {\n          message: error.message,\n          status: error.response?.status,\n          data: error.response?.data,\n          headers: error.response?.headers\n        },\n        timestamp: new Date().toISOString()\n      };\n      \n      // 保存错误数据\n      fs.writeFileSync(\n        path.join(this.debugDir, `demo3-error-${this.timestamp}.json`),\n        JSON.stringify(errorData, null, 2)\n      );\n      \n      return errorData;\n    }\n  }\n\n  /**\n   * 捕获当前实现的完整流程数据\n   */\n  async captureCurrentPipeline() {\n    console.log('\\n🔧 捕获当前实现流程数据...');\n    \n    const testRequest = {\n      model: 'CLAUDE_SONNET_4_20250514_V1_0',\n      max_tokens: 1000,\n      messages: [\n        { role: 'user', content: 'Hello, can you help me with a simple task?' }\n      ],\n      tools: [{\n        name: 'get_current_time',\n        description: 'Get the current time',\n        input_schema: {\n          type: 'object',\n          properties: {}\n        }\n      }]\n    };\n    \n    try {\n      // 发送到当前实现\n      const currentResponse = await axios.post(`http://localhost:${this.currentPort}/v1/messages`, testRequest, {\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer test-key'\n        },\n        timeout: 30000\n      });\n      \n      const currentData = {\n        request: testRequest,\n        response: currentResponse.data,\n        headers: currentResponse.headers,\n        status: currentResponse.status,\n        timestamp: new Date().toISOString()\n      };\n      \n      // 保存当前实现数据\n      fs.writeFileSync(\n        path.join(this.debugDir, `current-pipeline-${this.timestamp}.json`),\n        JSON.stringify(currentData, null, 2)\n      );\n      \n      console.log('  ✅ 当前实现数据捕获成功');\n      return currentData;\n      \n    } catch (error) {\n      console.log('  ❌ 当前实现数据捕获失败:', error.message);\n      console.log(`     状态码: ${error.response?.status}`);\n      console.log(`     错误详情: ${JSON.stringify(error.response?.data, null, 2)}`);\n      \n      const errorData = {\n        request: testRequest,\n        error: {\n          message: error.message,\n          status: error.response?.status,\n          data: error.response?.data,\n          headers: error.response?.headers\n        },\n        timestamp: new Date().toISOString()\n      };\n      \n      // 保存错误数据\n      fs.writeFileSync(\n        path.join(this.debugDir, `current-error-${this.timestamp}.json`),\n        JSON.stringify(errorData, null, 2)\n      );\n      \n      return errorData;\n    }\n  }\n\n  /**\n   * 执行详细对比分析\n   */\n  async performDetailedComparison(demo3Data, currentData) {\n    console.log('\\n🔬 执行详细对比分析...');\n    \n    const comparison = {\n      requestDifferences: this.compareRequests(demo3Data.request, currentData.request),\n      responseDifferences: this.compareResponses(demo3Data, currentData),\n      headerDifferences: this.compareHeaders(demo3Data.headers, currentData.headers),\n      statusComparison: {\n        demo3: demo3Data.status || demo3Data.error?.status,\n        current: currentData.status || currentData.error?.status,\n        match: (demo3Data.status || demo3Data.error?.status) === (currentData.status || currentData.error?.status)\n      },\n      criticalIssues: [],\n      recommendations: []\n    };\n    \n    // 识别关键问题\n    if (currentData.error?.status === 400) {\n      comparison.criticalIssues.push({\n        type: 'API_400_ERROR',\n        description: 'Current implementation returning 400 Bad Request',\n        currentError: currentData.error,\n        demo3Status: demo3Data.status\n      });\n    }\n    \n    // 工具定义对比\n    if (demo3Data.request?.tools && currentData.request?.tools) {\n      const toolsComparison = this.compareToolDefinitions(\n        demo3Data.request.tools,\n        currentData.request.tools\n      );\n      comparison.toolsComparison = toolsComparison;\n      \n      if (!toolsComparison.match) {\n        comparison.criticalIssues.push({\n          type: 'TOOLS_MISMATCH',\n          description: 'Tool definitions do not match between implementations',\n          differences: toolsComparison.differences\n        });\n      }\n    }\n    \n    // 保存对比结果\n    fs.writeFileSync(\n      path.join(this.debugDir, `comparison-analysis-${this.timestamp}.json`),\n      JSON.stringify(comparison, null, 2)\n    );\n    \n    console.log(`  ✅ 对比分析完成，发现 ${comparison.criticalIssues.length} 个关键问题`);\n    return comparison;\n  }\n\n  /**\n   * 测试token轮换影响\n   */\n  async testTokenRotation() {\n    console.log('\\n🔄 测试Token轮换影响...');\n    \n    const testResults = {\n      beforeRotation: null,\n      afterRotation: null,\n      rotationEffect: null,\n      still400: false\n    };\n    \n    try {\n      // 测试轮换前\n      console.log('  📝 测试Token轮换前状态...');\n      testResults.beforeRotation = await this.sendTestRequest('before-rotation');\n      \n      // 执行token轮换 (模拟)\n      console.log('  🔄 模拟Token轮换...');\n      await this.simulateTokenRotation();\n      \n      // 测试轮换后\n      console.log('  📝 测试Token轮换后状态...');\n      testResults.afterRotation = await this.sendTestRequest('after-rotation');\n      \n      // 分析轮换效果\n      testResults.rotationEffect = this.analyzeRotationEffect(\n        testResults.beforeRotation,\n        testResults.afterRotation\n      );\n      \n      testResults.still400 = testResults.afterRotation.error?.status === 400;\n      \n      if (testResults.still400) {\n        console.log('  ❌ Token轮换后仍有400错误 - 问题不在Token');\n      } else {\n        console.log('  ✅ Token轮换后错误解决 - 问题可能与Token相关');\n      }\n      \n      // 保存轮换测试结果\n      fs.writeFileSync(\n        path.join(this.debugDir, `token-rotation-test-${this.timestamp}.json`),\n        JSON.stringify(testResults, null, 2)\n      );\n      \n      return testResults;\n      \n    } catch (error) {\n      console.log('  ❌ Token轮换测试失败:', error.message);\n      testResults.error = error.message;\n      return testResults;\n    }\n  }\n\n  /**\n   * 发送测试请求\n   */\n  async sendTestRequest(phase) {\n    const testRequest = {\n      model: 'CLAUDE_SONNET_4_20250514_V1_0',\n      max_tokens: 500,\n      messages: [\n        { role: 'user', content: `Test request during ${phase}` }\n      ]\n    };\n    \n    try {\n      const response = await axios.post(`http://localhost:${this.currentPort}/v1/messages`, testRequest, {\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer test-key'\n        },\n        timeout: 15000\n      });\n      \n      return {\n        phase,\n        success: true,\n        status: response.status,\n        data: response.data,\n        timestamp: new Date().toISOString()\n      };\n      \n    } catch (error) {\n      return {\n        phase,\n        success: false,\n        error: {\n          message: error.message,\n          status: error.response?.status,\n          data: error.response?.data\n        },\n        timestamp: new Date().toISOString()\n      };\n    }\n  }\n\n  /**\n   * 模拟token轮换\n   */\n  async simulateTokenRotation() {\n    // 这里可以实现实际的token轮换逻辑\n    // 目前先模拟等待\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    console.log('    💭 Token轮换模拟完成 (实际实现需要调用认证刷新)');\n  }\n\n  /**\n   * 分析轮换效果\n   */\n  analyzeRotationEffect(before, after) {\n    return {\n      statusChanged: before.error?.status !== after.error?.status,\n      errorResolved: before.error && !after.error,\n      newErrorIntroduced: !before.error && after.error,\n      beforeStatus: before.error?.status || before.status,\n      afterStatus: after.error?.status || after.status\n    };\n  }\n\n  /**\n   * 对比请求\n   */\n  compareRequests(demo3Req, currentReq) {\n    const differences = [];\n    \n    if (JSON.stringify(demo3Req.model) !== JSON.stringify(currentReq.model)) {\n      differences.push({ field: 'model', demo3: demo3Req.model, current: currentReq.model });\n    }\n    \n    if (JSON.stringify(demo3Req.messages) !== JSON.stringify(currentReq.messages)) {\n      differences.push({ field: 'messages', demo3: demo3Req.messages, current: currentReq.messages });\n    }\n    \n    if (JSON.stringify(demo3Req.tools) !== JSON.stringify(currentReq.tools)) {\n      differences.push({ field: 'tools', demo3: demo3Req.tools, current: currentReq.tools });\n    }\n    \n    return {\n      match: differences.length === 0,\n      differences\n    };\n  }\n\n  /**\n   * 对比响应\n   */\n  compareResponses(demo3Data, currentData) {\n    if (demo3Data.error && currentData.error) {\n      return {\n        bothErrors: true,\n        demo3Error: demo3Data.error,\n        currentError: currentData.error,\n        sameErrorType: demo3Data.error.status === currentData.error.status\n      };\n    }\n    \n    if (demo3Data.error || currentData.error) {\n      return {\n        mixedResults: true,\n        demo3HasError: !!demo3Data.error,\n        currentHasError: !!currentData.error,\n        demo3Response: demo3Data.response,\n        currentResponse: currentData.response\n      };\n    }\n    \n    return {\n      bothSuccess: true,\n      demo3Response: demo3Data.response,\n      currentResponse: currentData.response\n    };\n  }\n\n  /**\n   * 对比请求头\n   */\n  compareHeaders(demo3Headers, currentHeaders) {\n    const demo3Keys = Object.keys(demo3Headers || {});\n    const currentKeys = Object.keys(currentHeaders || {});\n    \n    return {\n      demo3Keys,\n      currentKeys,\n      commonKeys: demo3Keys.filter(key => currentKeys.includes(key)),\n      demo3Only: demo3Keys.filter(key => !currentKeys.includes(key)),\n      currentOnly: currentKeys.filter(key => !demo3Keys.includes(key))\n    };\n  }\n\n  /**\n   * 对比工具定义\n   */\n  compareToolDefinitions(demo3Tools, currentTools) {\n    const differences = [];\n    \n    if (demo3Tools.length !== currentTools.length) {\n      differences.push({\n        type: 'tool_count',\n        demo3: demo3Tools.length,\n        current: currentTools.length\n      });\n    }\n    \n    demo3Tools.forEach((demo3Tool, index) => {\n      const currentTool = currentTools[index];\n      if (currentTool) {\n        if (demo3Tool.name !== currentTool.name) {\n          differences.push({\n            type: 'tool_name',\n            index,\n            demo3: demo3Tool.name,\n            current: currentTool.name\n          });\n        }\n        \n        if (JSON.stringify(demo3Tool.input_schema) !== JSON.stringify(currentTool.input_schema)) {\n          differences.push({\n            type: 'input_schema',\n            index,\n            demo3: demo3Tool.input_schema,\n            current: currentTool.input_schema\n          });\n        }\n      }\n    });\n    \n    return {\n      match: differences.length === 0,\n      differences\n    };\n  }\n\n  /**\n   * 生成修复建议\n   */\n  async generateFixSuggestions(comparisonResult, tokenRotationResult) {\n    console.log('\\n💡 生成修复建议...');\n    \n    const suggestions = {\n      priority: 'high',\n      issues: comparisonResult.criticalIssues,\n      recommendations: [],\n      codeChanges: [],\n      configChanges: []\n    };\n    \n    // 基于400错误的建议\n    if (comparisonResult.criticalIssues.some(issue => issue.type === 'API_400_ERROR')) {\n      suggestions.recommendations.push({\n        type: 'API_400_FIX',\n        description: '修复API 400错误',\n        actions: [\n          '检查请求体格式是否符合CodeWhisperer API规范',\n          '验证工具定义结构是否正确',\n          '确认profileArn字段处理逻辑',\n          '对比demo3的请求格式进行精确匹配'\n        ]\n      });\n      \n      suggestions.codeChanges.push({\n        file: 'src/providers/codewhisperer/converter.ts',\n        description: '根据demo3格式调整请求转换逻辑',\n        priority: 'critical'\n      });\n    }\n    \n    // 基于token轮换的建议\n    if (tokenRotationResult.still400) {\n      suggestions.recommendations.push({\n        type: 'NON_TOKEN_ISSUE',\n        description: 'Token轮换后仍有400错误，问题不在认证',\n        actions: [\n          '重点检查请求体结构',\n          '验证API端点和路径',\n          '检查必需字段是否缺失'\n        ]\n      });\n    }\n    \n    // 工具定义问题\n    if (comparisonResult.criticalIssues.some(issue => issue.type === 'TOOLS_MISMATCH')) {\n      suggestions.recommendations.push({\n        type: 'TOOLS_FORMAT_FIX',\n        description: '修复工具定义格式不匹配',\n        actions: [\n          '对比demo3和当前实现的工具定义格式',\n          '确保toolSpecification结构正确',\n          '验证inputSchema的json字段'\n        ]\n      });\n    }\n    \n    return suggestions;\n  }\n\n  /**\n   * 生成综合报告\n   */\n  async generateComprehensiveReport(data) {\n    const reportPath = path.join(this.debugDir, `comprehensive-analysis-report-${this.timestamp}.md`);\n    \n    const report = `# Demo3 vs Current Implementation 400错误分析报告\n\n生成时间: ${new Date().toISOString()}\n\n## 📋 执行摘要\n\n### 关键发现\n- Demo3状态: ${data.demo3Data.status || '错误'}\n- 当前实现状态: ${data.currentData.status || data.currentData.error?.status || '错误'}\n- 关键问题数量: ${data.comparisonResult.criticalIssues.length}\n- Token轮换后仍有400错误: ${data.tokenRotationResult.still400 ? '是' : '否'}\n\n### 问题优先级\n${data.fixSuggestions.issues.map(issue => `- **${issue.type}**: ${issue.description}`).join('\\n')}\n\n## 🔍 详细分析\n\n### 1. 请求对比分析\n${JSON.stringify(data.comparisonResult.requestDifferences, null, 2)}\n\n### 2. 响应对比分析\n${JSON.stringify(data.comparisonResult.responseDifferences, null, 2)}\n\n### 3. Token轮换测试结果\n- 轮换前状态: ${data.tokenRotationResult.beforeRotation?.success ? '成功' : '失败'}\n- 轮换后状态: ${data.tokenRotationResult.afterRotation?.success ? '成功' : '失败'}\n- 问题是否与Token相关: ${data.tokenRotationResult.still400 ? '否' : '可能'}\n\n## 💡 修复建议\n\n${data.fixSuggestions.recommendations.map(rec => `\n### ${rec.type}\n${rec.description}\n\n**行动项:**\n${rec.actions.map(action => `- ${action}`).join('\\n')}\n`).join('\\n')}\n\n## 🔧 需要修改的代码文件\n\n${data.fixSuggestions.codeChanges.map(change => `- **${change.file}** (优先级: ${change.priority})\\n  ${change.description}`).join('\\n')}\n\n## 📊 原始数据文件\n\n- Demo3数据: \\`demo3-pipeline-${this.timestamp}.json\\`\n- 当前实现数据: \\`current-pipeline-${this.timestamp}.json\\` 或 \\`current-error-${this.timestamp}.json\\`\n- 对比分析: \\`comparison-analysis-${this.timestamp}.json\\`\n- Token测试: \\`token-rotation-test-${this.timestamp}.json\\`\n\n## 🎯 下一步行动\n\n1. **立即行动**: 修复关键的API 400错误\n2. **代码对比**: 详细对比demo3和当前实现的差异\n3. **测试验证**: 应用修复后进行全面测试\n4. **文档更新**: 更新相关技术文档\n\n---\n*此报告由Demo3ComparisonDebugger自动生成*\n`;\n    \n    fs.writeFileSync(reportPath, report);\n    console.log(`  ✅ 综合分析报告已生成: ${reportPath}`);\n  }\n}\n\n// 运行调试器\nasync function runDebugger() {\n  const debugger = new Demo3ComparisonDebugger();\n  \n  try {\n    await debugger.runFullComparison();\n    console.log('\\n🎉 Demo3对比分析完成！');\n    console.log('📁 查看详细报告:', debugger.debugDir);\n  } catch (error) {\n    console.error('💥 调试器执行失败:', error);\n    process.exit(1);\n  }\n}\n\nif (require.main === module) {\n  runDebugger();\n}\n\nmodule.exports = { Demo3ComparisonDebugger };