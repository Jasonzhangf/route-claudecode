/**
 * Unit tests for CodeWhisperer provider
 * Tests authentication, request conversion, SSE parsing, and error handling
 */

import { describe, it, expect, beforeEach, afterEach, jest } from '@jest/globals';
import { CodeWhispererClient, CodeWhispererAuth, CodeWhispererConverter } from '../../../src/providers/codewhisperer';
import { BaseRequest, ProviderConfig } from '../../../src/types';
import fs from 'fs';
import path from 'path';

// Mock modules
jest.mock('fs');
jest.mock('axios');

const mockFS = fs as jest.Mocked<typeof fs>;

describe('CodeWhispererAuth', () => {
  let auth: CodeWhispererAuth;
  let mockConfig: ProviderConfig;

  beforeEach(() => {
    mockConfig = {
      type: 'codewhisperer',
      endpoint: 'https://codewhisperer.us-east-1.amazonaws.com',
      authentication: {
        type: 'bearer',
        credentials: {
          tokenPath: '~/.aws/sso/cache/test-token.json',
          profileArn: 'arn:aws:codewhisperer:us-east-1:699475941385:profile/test'
        }
      },
      settings: {}
    };
    auth = new CodeWhispererAuth();
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  describe('Token Management', () => {
    it('should load token from file successfully', async () => {
      const mockToken = {
        accessToken: 'test-access-token',
        expiresAt: new Date(Date.now() + 3600000).toISOString(),
        region: 'us-east-1'
      };

      mockFS.readFileSync.mockReturnValue(JSON.stringify(mockToken));
      mockFS.existsSync.mockReturnValue(true);

      const token = await auth.getToken();
      
      expect(token).toBe('test-access-token');
      expect(mockFS.readFileSync).toHaveBeenCalledWith(
        expect.stringContaining('test-token.json'),
        'utf8'
      );
    });

    it('should handle missing token file', async () => {
      mockFS.existsSync.mockReturnValue(false);

      await expect(auth.getValidToken()).rejects.toThrow('Token file not found');
    });

    it('should handle expired token', async () => {
      const expiredToken = {
        accessToken: 'expired-token',
        expiresAt: new Date(Date.now() - 3600000).toISOString(),
        region: 'us-east-1'
      };

      mockFS.readFileSync.mockReturnValue(JSON.stringify(expiredToken));
      mockFS.existsSync.mockReturnValue(true);

      await expect(auth.getValidToken()).rejects.toThrow('Token has expired');
    });

    it('should handle malformed token file', async () => {
      mockFS.readFileSync.mockReturnValue('invalid-json');
      mockFS.existsSync.mockReturnValue(true);

      await expect(auth.getValidToken()).rejects.toThrow('Failed to parse token file');
    });
  });

  describe('Authentication Headers', () => {
    it('should generate correct authentication headers', async () => {
      const mockToken = {
        accessToken: 'test-access-token',
        expiresAt: new Date(Date.now() + 3600000).toISOString(),
        region: 'us-east-1'
      };

      mockFS.readFileSync.mockReturnValue(JSON.stringify(mockToken));
      mockFS.existsSync.mockReturnValue(true);

      const headers = await auth.getAuthHeaders();

      expect(headers).toEqual({
        'Authorization': 'Bearer test-access-token',
        'Content-Type': 'application/json',
        'User-Agent': 'claude-code-router/2.0.0'
      });
    });
  });
});

describe('CodeWhispererConverter', () => {
  let converter: CodeWhispererConverter;

  beforeEach(() => {
    converter = new CodeWhispererConverter();
  });

  describe('Request Conversion', () => {
    it('should convert simple Anthropic request to CodeWhisperer format', () => {
      const baseRequest: BaseRequest = {
        model: 'claude-sonnet-4-20250514',
        messages: [
          { role: 'user', content: 'Hello, how are you?' }
        ],
        max_tokens: 100,
        stream: false,
        metadata: { requestId: 'test-123' }
      };

      const cwRequest = converter.convertRequest(baseRequest, 'test-request-id');

      expect(cwRequest).toEqual({
        profileArn: expect.stringContaining('profile/'),
        model: 'CLAUDE_SONNET_4_20250514_V1_0',
        messages: [
          { role: 'user', content: [{ type: 'text', text: 'Hello, how are you?' }] }
        ],
        inferenceConfiguration: {
          maxTokens: 100,
          temperature: undefined,
          topP: undefined,
          stopSequences: undefined
        },
        additionalRequestData: {
          requestId: 'test-123'
        }
      });
    });

    it('should handle system messages', () => {
      const baseRequest: BaseRequest = {
        model: 'claude-sonnet-4-20250514',
        system: 'You are a helpful assistant.',
        messages: [
          { role: 'user', content: 'Help me with coding.' }
        ],
        max_tokens: 200,
        stream: false,
        metadata: {}
      };

      const cwRequest = converter.convertRequest(baseRequest, 'test-request-id');

      expect(cwRequest.messages[0]).toEqual({
        role: 'user',
        content: [
          { type: 'text', text: 'System: You are a helpful assistant.\n\nUser: Help me with coding.' }
        ]
      });
    });

    it('should handle tool calls', () => {
      const baseRequest: BaseRequest = {
        model: 'claude-sonnet-4-20250514',
        messages: [
          { role: 'user', content: 'What is the weather?' }
        ],
        tools: [
          {
            name: 'get_weather',
            description: 'Get current weather',
            input_schema: {
              type: 'object',
              properties: {
                location: { type: 'string' }
              }
            }
          }
        ],
        max_tokens: 150,
        stream: false,
        metadata: {}
      };

      const cwRequest = converter.convertRequest(baseRequest, 'test-request-id');

      expect(cwRequest.toolConfig).toBeDefined();
      expect(cwRequest.toolConfig.tools).toHaveLength(1);
      expect(cwRequest.toolConfig.tools[0].toolSpec.name).toBe('get_weather');
    });

    it('should convert model names correctly', () => {
      const testCases = [
        ['claude-sonnet-4-20250514', 'CLAUDE_SONNET_4_20250514_V1_0'],
        ['claude-3.7-sonnet-20250219', 'CLAUDE_3_7_SONNET_20250219_V1_0'],
        ['claude-3.5-haiku-20241022', 'CLAUDE_3_5_HAIKU_20241022_V1_0']
      ];

      testCases.forEach(([input, expected]) => {
        const baseRequest: BaseRequest = {
          model: input,
          messages: [{ role: 'user', content: 'test' }],
          max_tokens: 50,
          stream: false,
          metadata: {}
        };

        const cwRequest = converter.convertRequest(baseRequest, 'test-request-id');
        expect(cwRequest.model).toBe(expected);
      });
    });
  });

  describe('Response Conversion', () => {
    it('should convert CodeWhisperer response to Anthropic format', () => {
      const cwResponse = {
        output: {
          message: {
            role: 'assistant',
            content: [
              { text: 'Hello! I am doing well, thank you for asking.' }
            ]
          }
        },
        usage: {
          inputTokens: 15,
          outputTokens: 25,
          totalTokens: 40
        },
        responseMetadata: {
          requestId: 'cw-req-123'
        }
      };

      // Note: convertResponse method doesn't exist in current implementation
      // const anthropicResponse = converter.convertResponse(cwResponse);

      expect(anthropicResponse).toEqual({
        id: expect.stringMatching(/^msg_/),
        type: 'message',
        role: 'assistant',
        content: [
          { type: 'text', text: 'Hello! I am doing well, thank you for asking.' }
        ],
        model: expect.any(String),
        stop_reason: 'end_turn',
        stop_sequence: null,
        usage: {
          input_tokens: 15,
          output_tokens: 25
        }
      });
    });

    it('should handle tool use responses', () => {
      const cwResponse = {
        output: {
          message: {
            role: 'assistant',
            content: [
              { text: 'I will check the weather for you.' },
              { 
                toolUse: {
                  toolUseId: 'tool-123',
                  name: 'get_weather',
                  input: { location: 'New York' }
                }
              }
            ]
          }
        },
        usage: {
          inputTokens: 20,
          outputTokens: 30,
          totalTokens: 50
        }
      };

      // Note: convertResponse method doesn't exist in current implementation
      // const anthropicResponse = converter.convertResponse(cwResponse);

      expect(anthropicResponse.content).toHaveLength(2);
      expect(anthropicResponse.content[0]).toEqual({
        type: 'text',
        text: 'I will check the weather for you.'
      });
      expect(anthropicResponse.content[1]).toEqual({
        type: 'tool_use',
        id: 'tool-123',
        name: 'get_weather',
        input: { location: 'New York' }
      });
    });

    it('should handle error responses', () => {
      const cwErrorResponse = {
        error: {
          message: 'Rate limit exceeded',
          code: 'ThrottlingException'
        }
      };

      expect(() => {
        // Note: convertResponse method doesn't exist in current implementation
        // converter.convertResponse(cwErrorResponse);
      }).toThrow('CodeWhisperer API error: Rate limit exceeded');
    });
  });
});

describe('CodeWhispererClient', () => {
  let client: CodeWhispererClient;
  let mockConfig: ProviderConfig;

  beforeEach(() => {
    mockConfig = {
      type: 'codewhisperer',
      endpoint: 'https://codewhisperer.us-east-1.amazonaws.com',
      authentication: {
        type: 'bearer',
        credentials: {
          tokenPath: '~/.aws/sso/cache/test-token.json',
          profileArn: 'arn:aws:codewhisperer:us-east-1:699475941385:profile/test'
        }
      },
      settings: {
        maxConcurrentRequests: 5,
        timeoutMs: 30000,
        retryAttempts: 3
      }
    };

    // Mock token file
    const mockToken = {
      accessToken: 'test-access-token',
      expiresAt: new Date(Date.now() + 3600000).toISOString(),
      region: 'us-east-1'
    };
    mockFS.readFileSync.mockReturnValue(JSON.stringify(mockToken));
    mockFS.existsSync.mockReturnValue(true);

    client = new CodeWhispererClient(mockConfig);
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  describe('Initialization', () => {
    it('should initialize with correct configuration', () => {
      expect(client).toBeDefined();
      expect(client.isHealthy()).resolves.toBe(true);
    });

    it('should validate configuration on initialization', () => {
      const invalidConfig = { ...mockConfig };
      delete invalidConfig.authentication;

      expect(() => new CodeWhispererClient(invalidConfig)).toThrow(
        'CodeWhisperer configuration missing authentication'
      );
    });
  });

  describe('Health Checks', () => {
    it('should report healthy when token is valid', async () => {
      const isHealthy = await client.isHealthy();
      expect(isHealthy).toBe(true);
    });

    it('should report unhealthy when token is expired', async () => {
      const expiredToken = {
        accessToken: 'expired-token',
        expiresAt: new Date(Date.now() - 3600000).toISOString(),
        region: 'us-east-1'
      };
      mockFS.readFileSync.mockReturnValue(JSON.stringify(expiredToken));

      const isHealthy = await client.isHealthy();
      expect(isHealthy).toBe(false);
    });
  });

  describe('Request Processing', () => {
    it('should process request successfully', async () => {
      // Mock axios response
      const axios = require('axios');
      const mockResponse = {
        data: {
          output: {
            message: {
              role: 'assistant',
              content: [{ text: 'Hello! How can I help you?' }]
            }
          },
          usage: {
            inputTokens: 10,
            outputTokens: 20,
            totalTokens: 30
          }
        },
        status: 200
      };
      axios.post.mockResolvedValue(mockResponse);

      const baseRequest: BaseRequest = {
        model: 'claude-sonnet-4-20250514',
        messages: [{ role: 'user', content: 'Hello' }],
        max_tokens: 100,
        stream: false,
        metadata: { requestId: 'test-123' }
      };

      const response = await client.sendRequest(baseRequest);

      expect(response).toBeDefined();
      expect(response.role).toBe('assistant');
      expect(response.content[0].text).toBe('Hello! How can I help you?');
    });

    it('should handle network errors gracefully', async () => {
      const axios = require('axios');
      axios.post.mockRejectedValue(new Error('Network error'));

      const baseRequest: BaseRequest = {
        model: 'claude-sonnet-4-20250514',
        messages: [{ role: 'user', content: 'Hello' }],
        max_tokens: 100,
        stream: false,
        metadata: { requestId: 'test-456' }
      };

      await expect(client.sendRequest(baseRequest)).rejects.toThrow('Network error');
    });
  });

  describe('Streaming Support', () => {
    it('should support streaming requests', async () => {
      const baseRequest: BaseRequest = {
        model: 'claude-sonnet-4-20250514',
        messages: [{ role: 'user', content: 'Count to 3' }],
        max_tokens: 50,
        stream: true,
        metadata: { requestId: 'stream-test' }
      };

      const streamGenerator = client.sendStreamRequest(baseRequest);
      expect(streamGenerator).toBeDefined();
      
      // Test that it returns an async iterator
      expect(typeof streamGenerator[Symbol.asyncIterator]).toBe('function');
    });
  });
});

describe('Integration Tests', () => {
  describe('Full Pipeline', () => {
    it('should process request through complete pipeline', async () => {
      // This test would require actual network calls or more sophisticated mocking
      // For now, we'll test that all components can be integrated
      
      const mockConfig: ProviderConfig = {
        type: 'codewhisperer',
        endpoint: 'https://codewhisperer.us-east-1.amazonaws.com',
        authentication: {
          type: 'bearer',
          credentials: {
            tokenPath: '~/.aws/sso/cache/test-token.json',
            profileArn: 'arn:aws:codewhisperer:us-east-1:699475941385:profile/test'
          }
        },
        settings: {}
      };

      // Mock token
      const mockToken = {
        accessToken: 'integration-test-token',
        expiresAt: new Date(Date.now() + 3600000).toISOString(),
        region: 'us-east-1'
      };
      mockFS.readFileSync.mockReturnValue(JSON.stringify(mockToken));
      mockFS.existsSync.mockReturnValue(true);

      const auth = new CodeWhispererAuth(mockConfig);
      const converter = new CodeWhispererConverter();
      const client = new CodeWhispererClient(mockConfig);

      // Test authentication
      const token = await auth.getToken();
      expect(token).toBe('integration-test-token');

      // Test conversion
      const baseRequest: BaseRequest = {
        model: 'claude-sonnet-4-20250514',
        messages: [{ role: 'user', content: 'Integration test' }],
        max_tokens: 50,
        stream: false,
        metadata: { requestId: 'integration-test' }
      };

      const cwRequest = converter.convertRequest(baseRequest, 'test-request-id');
      expect(cwRequest.model).toBe('CLAUDE_SONNET_4_20250514_V1_0');

      // Test client initialization
      expect(client).toBeDefined();
    });
  });
});