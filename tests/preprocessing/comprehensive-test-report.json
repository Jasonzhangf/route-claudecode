{
  "timestamp": "2025-08-07T03:45:14.693Z",
  "totalDuration": 8081,
  "summary": {
    "totalTests": 5,
    "passedTests": 5,
    "failedTests": 0,
    "criticalFailures": 0,
    "successRate": "100.0%"
  },
  "testResults": [
    {
      "testName": "综合预处理管道测试",
      "script": "tests/preprocessing/test-comprehensive-preprocessing-pipeline.js",
      "passed": true,
      "duration": 29,
      "critical": true,
      "output": "🧪 [COMPREHENSIVE-PREPROCESSING-TEST] Starting comprehensive preprocessing pipeline test...\n📁 Preprocessor path: /Users/fanzhang/Documents/github/claude-code-router/src/preprocessing/unified-patch-preprocessor.ts\n\n🚀 开始执行 9 个综合预处理测试用例...\n\n\n📋 测试用例: OpenAI工具调用finish_reason修复\n   Provider: openai, Model: gpt-4-turbo, Stage: response\n   ✅ 通过 (1ms)\n   📊 结果: 工具检测: 1个, 修改: 1项\n\n📋 测试用例: ModelScope缺失finish_reason处理\n   Provider: openai-key2, Model: qwen-turbo, Stage: response\n   💥 异常 (1ms): Silent failure detected and fixed\n   ✅ 预期异常处理正确\n\n📋 测试用例: Anthropic文本工具调用检测\n   Provider: anthropic, Model: claude-3-sonnet-20240229, Stage: response\n   ✅ 通过 (0ms)\n   📊 结果: 工具检测: 2个, 修改: 1项\n\n📋 测试用例: Gemini函数调用finish_reason修复\n   Provider: gemini, Model: gemini-pro, Stage: response\n   ✅ 通过 (0ms)\n   📊 结果: 工具检测: 1个, 修改: 1项\n\n📋 测试用例: OpenAI流式工具调用处理\n   Provider: openai, Model: gpt-4-turbo, Stage: streaming\n   ✅ 通过 (0ms)\n   📊 结果: 工具检测: 1个, 修改: 1项\n\n📋 测试用例: GLM文本工具调用滑动窗口检测\n   Provider: openai, Model: glm-4-plus, Stage: response\n   ✅ 通过 (0ms)\n   📊 结果: 工具检测: 1个, 修改: 1项\n\n📋 测试用例: 空响应异常处理\n   Provider: openai, Model: gpt-4, Stage: response\n   💥 异常 (0ms): Provider returned empty response\n   ✅ 预期异常处理正确\n\n📋 测试用例: HTTP错误响应处理\n   Provider: openai, Model: gpt-4, Stage: response\n   💥 异常 (0ms): Provider returned HTTP error response\n   ✅ 预期异常处理正确\n\n📋 测试用例: 连接超时响应处理\n   Provider: openai, Model: gpt-4, Stage: response\n   💥 异常 (0ms): Provider connection or timeout error\n   ✅ 预期异常处理正确\n\n================================================================================\n🎯 综合预处理管道测试总结\n================================================================================\n📊 总测试数: 9\n✅ 通过: 9\n❌ 失败: 0\n📈 成功率: 100.0%\n\n🔧 测试覆盖范围:\n   • OpenAI格式工具调用和finish_reason修复\n   • ModelScope缺失finish_reason异常处理\n   • Anthropic文本工具调用检测和stop_reason修复\n   • Gemini函数调用和finishReason修复\n   • 流式响应工具调用处理\n   • 滑动窗口文本工具调用检测\n   • 异常响应处理（空响应、HTTP错误、连接超时）\n\n🎯 预处理器验证结果:\n   • 工具调用检测准确性: ✅\n   • finish_reason自动修复: ✅\n   • 异常响应处理: ✅\n   • 多Provider格式支持: ✅\n   • 滑动窗口解析: ✅\n\n📄 详细结果已保存到: /Users/fanzhang/Documents/github/claude-code-router/tests/preprocessing/comprehensive-preprocessing-test-results.json\n",
      "error": null,
      "summary": "成功率: 100.0%"
    },
    {
      "testName": "真实数据模拟测试",
      "script": "tests/preprocessing/test-real-data-simulation.js",
      "passed": true,
      "duration": 30,
      "critical": true,
      "output": "🎯 [REAL-DATA-SIMULATION] Starting real data simulation test...\n\n🚀 开始执行 10 个真实数据模拟测试...\n\n\n📋 测试样本: openai_3456_tool_call_error\n   来源: Production Issue - Port 3456\n   时间: 2025-01-07T10:30:00Z\n   Provider: openai, Model: gpt-4-turbo-preview\n   ✅ 通过 (0ms)\n   📊 处理结果: 工具: 1个, 方法: 1种, 修改: 1项\n\n📋 测试样本: modelscope_5507_missing_finish\n   来源: Production Issue - Port 5507\n   时间: 2025-01-07T11:15:00Z\n   Provider: openai-key2, Model: qwen-turbo\n   💥 异常 (1ms): ModelScope provider missing finish_reason field\n   ✅ 预期异常处理正确\n\n📋 测试样本: glm_text_tool_undetected\n   来源: Production Issue - GLM-4.5\n   时间: 2025-01-07T12:00:00Z\n   Provider: openai, Model: glm-4-plus\n   ✅ 通过 (0ms)\n   📊 处理结果: 工具: 1个, 方法: 1种, 修改: 1项\n\n📋 测试样本: anthropic_text_tool_issue\n   来源: Production Issue - Claude\n   时间: 2025-01-07T13:30:00Z\n   Provider: anthropic, Model: claude-3-sonnet-20240229\n   ✅ 通过 (1ms)\n   📊 处理结果: 工具: 1个, 方法: 1种, 修改: 1项\n\n📋 测试样本: gemini_function_call_error\n   来源: Production Issue - Gemini\n   时间: 2025-01-07T14:45:00Z\n   Provider: gemini, Model: gemini-pro\n   ✅ 通过 (0ms)\n   📊 处理结果: 工具: 1个, 方法: 1种, 修改: 1项\n\n📋 测试样本: streaming_tool_call_issue\n   来源: Production Issue - Streaming\n   时间: 2025-01-07T15:20:00Z\n   Provider: openai, Model: gpt-4-turbo\n   ✅ 通过 (0ms)\n   📊 处理结果: 工具: 1个, 方法: 1种, 修改: 1项\n\n📋 测试样本: complex_nested_tool_calls\n   来源: Production Issue - Complex Tools\n   时间: 2025-01-07T16:00:00Z\n   Provider: openai, Model: gpt-4-turbo\n   ✅ 通过 (0ms)\n   📊 处理结果: 工具: 3个, 方法: 1种, 修改: 1项\n\n📋 测试样本: empty_response_error\n   来源: Production Issue - Empty Response\n   时间: 2025-01-07T17:15:00Z\n   Provider: openai, Model: gpt-4\n   💥 异常 (0ms): Provider returned empty response\n   ✅ 预期异常处理正确\n\n📋 测试样本: rate_limit_error\n   来源: Production Issue - Rate Limit\n   时间: 2025-01-07T18:00:00Z\n   Provider: openai, Model: gpt-4\n   💥 异常 (0ms): Provider returned HTTP error response\n   ✅ 预期异常处理正确\n\n📋 测试样本: connection_timeout_error\n   来源: Production Issue - Timeout\n   时间: 2025-01-07T19:30:00Z\n   Provider: openai, Model: gpt-4\n   💥 异常 (0ms): Provider connection or timeout error\n   ✅ 预期异常处理正确\n\n================================================================================\n🎯 真实数据模拟测试详细总结\n================================================================================\n📊 总测试数: 10\n✅ 通过: 10\n❌ 失败: 0\n📈 成功率: 100.0%\n\n📋 问题类型分布:\n   • other: 7/7 (100.0%)\n   • error_handling: 3/3 (100.0%)\n\n✅ 成功处理的关键案例:\n   • openai_3456_tool_call_error: 工具: 1个, 方法: 1种, 修改: 1项\n   • modelscope_5507_missing_finish: 处理成功\n   • glm_text_tool_undetected: 工具: 1个, 方法: 1种, 修改: 1项\n   • anthropic_text_tool_issue: 工具: 1个, 方法: 1种, 修改: 1项\n   • gemini_function_call_error: 工具: 1个, 方法: 1种, 修改: 1项\n\n🔧 预处理器验证覆盖:\n   • OpenAI工具调用finish_reason映射错误修复\n   • ModelScope缺失finish_reason异常检测\n   • GLM-4.5文本格式工具调用滑动窗口检测\n   • Anthropic文本工具调用stop_reason修复\n   • Gemini函数调用finishReason修复\n   • 流式响应工具调用处理\n   • 复杂嵌套工具调用检测\n   • 异常响应处理（空响应、速率限制、连接超时）\n\n📄 详细结果已保存到: /Users/fanzhang/Documents/github/claude-code-router/tests/preprocessing/real-data-simulation-results.json\n📋 问题分析报告已生成: /Users/fanzhang/Documents/github/claude-code-router/tests/preprocessing/production-issue-analysis-report.md\n",
      "error": null,
      "summary": "成功率: 100.0%"
    },
    {
      "testName": "finish_reason修复验证",
      "script": "scripts/test-finish-reason-parsing-simulation.js",
      "passed": true,
      "duration": 29,
      "critical": false,
      "output": "🧪 开始Finish Reason解析模拟测试...\n📊 总测试用例: 8\n\n🔬 测试 1/8: 工具调用被错误映射为stop\n   ✅ 通过 (0ms)\n      原始finish_reason: stop\n      修正finish_reason: tool_calls\n      是否修正: 是\n      工具调用检测: 是 (1)\n      检测方法: message_tool_calls\n      检测置信度: 1\n      🔧 正确应用了修正\n\n🔬 测试 2/8: 流式响应中工具调用finish_reason错误\n   ✅ 通过 (0ms)\n      原始finish_reason: stop\n      修正finish_reason: tool_calls\n      是否修正: 是\n      工具调用检测: 是 (1)\n      检测方法: delta_tool_calls\n      检测置信度: 1\n      🔧 正确应用了修正\n\n🔬 测试 3/8: 工具调用错误地出现在文本内容中\n   ✅ 通过 (0ms)\n      原始finish_reason: stop\n      修正finish_reason: tool_calls\n      是否修正: 是\n      工具调用检测: 是 (1)\n      检测方法: text_detection_text_tool_call_format\n      检测置信度: 0.95\n      🔧 正确应用了修正\n\n🔬 测试 4/8: 正确的工具调用响应\n   ✅ 通过 (0ms)\n      原始finish_reason: tool_calls\n      修正finish_reason: tool_calls\n      是否修正: 否\n      工具调用检测: 是 (1)\n      检测方法: message_tool_calls\n      检测置信度: 1\n      ✅ 正确保持了原值\n\n🔬 测试 5/8: 普通文本响应\n   ✅ 通过 (0ms)\n      原始finish_reason: stop\n      修正finish_reason: stop\n      是否修正: 否\n      工具调用检测: 否 (0)\n      检测方法: none\n      检测置信度: 0\n      ✅ 正确保持了原值\n\n🔬 测试 6/8: 多个工具调用但finish_reason错误\n   ✅ 通过 (0ms)\n      原始finish_reason: stop\n      修正finish_reason: tool_calls\n      是否修正: 是\n      工具调用检测: 是 (2)\n      检测方法: message_tool_calls\n      检测置信度: 1\n      🔧 正确应用了修正\n\n🔬 测试 7/8: 空的tool_calls数组\n   ✅ 通过 (0ms)\n      原始finish_reason: stop\n      修正finish_reason: stop\n      是否修正: 否\n      工具调用检测: 否 (0)\n      检测方法: none\n      检测置信度: 0\n      ✅ 正确保持了原值\n\n🔬 测试 8/8: Anthropic格式的工具调用出现在文本中\n   ✅ 通过 (1ms)\n      原始finish_reason: stop\n      修正finish_reason: tool_calls\n      是否修正: 是\n      工具调用检测: 是 (1)\n      检测方法: text_detection_anthropic_json_format\n      检测置信度: 0.95\n      🔧 正确应用了修正\n\n============================================================\n📊 Finish Reason解析模拟测试报告\n============================================================\n\n📈 总体统计:\n   总测试数: 8\n   通过: 8 (100.0%)\n   失败: 0 (0.0%)\n\n🔧 修正效果统计:\n   应该修正: 5 个\n   实际修正: 5 个\n   正确修正: 5 个\n   正确保持: 3 个\n\n🔍 检测方法分布:\n   message_tool_calls: 3 次\n   delta_tool_calls: 1 次\n   text_detection_text_tool_call_format: 1 次\n   none: 2 次\n   text_detection_anthropic_json_format: 1 次\n\n💡 改进建议:\n   🎉 所有测试通过！修复逻辑工作正常\n\n🛠️  建议的优化方向:\n   1. 增强文本模式检测的准确性\n   2. 优化流式响应的工具调用检测\n   3. 添加更多边缘情况的处理\n   4. 提高检测置信度的计算精度\n\n📄 详细报告已保存: /tmp/finish-reason-parsing-simulation-report-1754538306700.json\n",
      "error": null,
      "summary": "总测试: 8"
    },
    {
      "testName": "工具调用检测验证",
      "script": "scripts/test-tool-call-detection-comprehensive.js",
      "passed": true,
      "duration": 7960,
      "critical": false,
      "output": "🧪 开始综合工具调用检测测试...\n📊 总测试用例: 6\n\n🔬 测试 1/6: 明确的工具调用请求\n\n🔬 测试 2/6: 多工具调用请求\n\n🔬 测试 3/6: 无工具调用的普通文本请求\n\n🔬 测试 4/6: 有工具定义但不需要调用\n\n🔬 测试 5/6: 中文工具调用请求\n\n🔬 测试 6/6: 复杂参数的工具调用\n\n============================================================\n📊 综合工具调用检测测试报告\n============================================================\n\n📈 总体统计:\n   总测试数: 6\n   通过: 0 (0.0%)\n   失败: 6 (100.0%)\n\n🔍 失败原因分析:\n   • Request failed with status code 500: 6 次\n\n📋 Finish Reason分布:\n\n🔧 工具调用检测统计:\n   期望有工具调用: 4\n   实际检测到工具调用: 0\n   检测正确: 0 (0.0%)\n\n💡 改进建议:\n   📊 建议运行修复脚本: node scripts/fix-tool-call-finish-reason.js\n   🔍 建议分析日志: node scripts/analyze-tool-call-detection-issues.js\n\n📄 详细报告已保存: /tmp/tool-call-detection-test-report-1754538314660.json\n   ❌ 请求失败: Request failed with status code 500\n   ❌ 请求失败: Request failed with status code 500\n   ❌ 请求失败: Request failed with status code 500\n   ❌ 请求失败: Request failed with status code 500\n   ❌ 请求失败: Request failed with status code 500\n   ❌ 请求失败: Request failed with status code 500\n",
      "error": null,
      "summary": "总测试: 6"
    },
    {
      "testName": "OpenAI真实响应模拟",
      "script": "scripts/test-real-openai-response-simulation.js",
      "passed": true,
      "duration": 30,
      "critical": false,
      "output": "🧪 开始真实OpenAI响应模拟测试...\n📊 总测试用例: 8\n\n🔬 测试 1/8: 完整的工具调用响应但finish_reason错误\n   ✅ 通过 (0ms)\n      响应ID: chatcmpl-abc123\n      模型: gpt-4\n      原始finish_reason: stop\n      最终finish_reason: tool_calls\n      工具调用检测: 是 (1)\n      检测方法: message_tool_calls\n      是否修正: 是\n      🔧 正确应用了修正\n\n🔬 测试 2/8: 流式响应最后chunk的finish_reason错误\n   ✅ 通过 (0ms)\n      响应ID: chatcmpl-stream123\n      模型: gpt-4\n      原始finish_reason: stop\n      最终finish_reason: tool_calls\n      工具调用检测: 是 (1)\n      检测方法: delta_tool_calls\n      是否修正: 是\n      🔧 正确应用了修正\n\n🔬 测试 3/8: 工具调用泄露到content字段中\n   ✅ 通过 (0ms)\n      响应ID: chatcmpl-leak789\n      模型: gpt-4\n      原始finish_reason: stop\n      最终finish_reason: tool_calls\n      工具调用检测: 是 (1)\n      检测方法: text_detection_text_tool_call\n      是否修正: 是\n      🔧 正确应用了修正\n\n🔬 测试 4/8: 多个工具调用的复杂场景\n   ✅ 通过 (0ms)\n      响应ID: chatcmpl-multi123\n      模型: gpt-4\n      原始finish_reason: stop\n      最终finish_reason: tool_calls\n      工具调用检测: 是 (3)\n      检测方法: message_tool_calls\n      是否修正: 是\n      🔧 正确应用了修正\n\n🔬 测试 5/8: 正确的工具调用响应\n   ✅ 通过 (0ms)\n      响应ID: chatcmpl-correct456\n      模型: gpt-4\n      原始finish_reason: tool_calls\n      最终finish_reason: tool_calls\n      工具调用检测: 是 (1)\n      检测方法: message_tool_calls\n      是否修正: 否\n      ✅ 正确保持了原值\n\n🔬 测试 6/8: 正常的文本响应\n   ✅ 通过 (0ms)\n      响应ID: chatcmpl-text123\n      模型: gpt-4\n      原始finish_reason: stop\n      最终finish_reason: stop\n      工具调用检测: 否 (0)\n      检测方法: none\n      是否修正: 否\n      ✅ 正确保持了原值\n\n🔬 测试 7/8: max_tokens限制但有工具调用\n   ✅ 通过 (0ms)\n      响应ID: chatcmpl-maxtoken789\n      模型: gpt-4\n      原始finish_reason: length\n      最终finish_reason: length\n      工具调用检测: 是 (1)\n      检测方法: message_tool_calls\n      是否修正: 否\n      ✅ 正确保持了原值\n\n🔬 测试 8/8: Anthropic格式混入OpenAI响应\n   ✅ 通过 (0ms)\n      响应ID: chatcmpl-mixed456\n      模型: gpt-4\n      原始finish_reason: stop\n      最终finish_reason: tool_calls\n      工具调用检测: 是 (1)\n      检测方法: text_detection_anthropic_json\n      是否修正: 是\n      🔧 正确应用了修正\n\n============================================================\n📊 真实OpenAI响应模拟测试报告\n============================================================\n\n📈 总体统计:\n   总测试数: 8\n   通过: 8 (100.0%)\n   失败: 0 (0.0%)\n\n📋 响应类型分布:\n   流式响应: 1\n   非流式响应: 7\n   包含工具调用: 7\n   不含工具调用: 1\n\n🔧 修正效果统计:\n   应该修正: 5 个\n   实际修正: 5 个\n   正确修正: 5 个\n   正确保持: 3 个\n\n🎉 所有测试通过！OpenAI finish_reason修复逻辑工作完美！\n\n📄 详细报告已保存: /tmp/real-openai-response-simulation-report-1754538314690.json\n",
      "error": null,
      "summary": "总测试: 8"
    }
  ],
  "coverage": {
    "preprocessingPipeline": true,
    "realDataSimulation": true,
    "finishReasonFix": true,
    "toolCallDetection": true,
    "openaiSimulation": true
  },
  "recommendations": [
    "✅ 所有测试表现良好，预处理器功能正常"
  ]
}