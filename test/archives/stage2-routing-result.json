{
  "baseRequest": {
    "model": "claude-sonnet-4-20250514",
    "max_tokens": 32000,
    "temperature": 1,
    "stream": true,
    "messages": [
      {
        "role": "user",
        "content": "<system-reminder>\nAs you answer the user's questions, you can use the following context:\n# claudeMd\nCodebase and user instructions are shown below. Be sure to adhere to these instructions. IMPORTANT: These instructions OVERRIDE any default behavior and you MUST follow them exactly as written.\n\nContents of /Users/fanzhang/.claude/CLAUDE.md (user's private global instructions for all projects):\n\n- 请以后运行终端命令时使用&，让命令可以后台无阻塞执行\n\n# 虚拟环境管理规则\n- 虚拟环境路径统一为项目根目录下的 `./venv`\n- 运行任何命令前，必须先激活虚拟环境：`source ./venv/bin/activate`\n- 创建虚拟环境的命令：`python3 -m venv ./venv`\n- 在虚拟环境中运行所有开发、测试和部署命令\n- 每次运行`npm`, `yarn`, `pip`等包管理命令前，确保虚拟环境已激活\n\n# Claude Code Router Enhanced 统一脚本规范\n## 服务端口配置  \n- **Claude Code Router**: `3456` (主要API端点)\n- **日志监控**: `/tmp/ccr-dev.log`\n## 项目启动规范\n- **统一使用**: `./fix-and-test.sh` 进行开发调试\n- **服务监控**: `tail -f /tmp/ccr-dev.log`\n- **状态检查**: `node dist/cli.js status`\n\n\n\n\n\n\n\n\n# 所有项目启动脚本\n- **完整开发流程**: `./fix-and-test.sh` (构建+启动+测试一体化)\n- **开发模式启动**: `./start-dev.sh` (自动构建+启动服务+日志记录)\n- **单独构建**: `./build.sh` (清理和构建项目)\n- **测试套件**: `./test-all.sh` (完整测试，包括API和transformer验证)\n- **本地安装**: `./install-local.sh` (构建+打包+全局安装)\n- **启动脚本端口管理**: 自动监控本地项目前后端服务器端口，遇到冲突直接关闭并继续启动，无需人工确认\n- **本地启动脚本处理**: 如果存在其他本地启动脚本，需要重命名并更新相关配置\n\n# 安全配置规则\n- 不允许覆盖~/.gemini/.env\n- 不允许使用fallback机制\n\n# 构建规则\n- **完整构建必须成功**: 不使用fallback机制，不手动操作\n- **依赖解析**: 必须解决所有外部依赖和workspace包依赖\n- **Clean安装验证**: 每次构建后必须验证clean环境下的npm全局安装成功\n- **esbuild配置**: 包含完整的external依赖列表和workspace解析\n- **构建流程**: 1)修复依赖 2)完整构建 3)npm pack测试 4)clean安装验证\n\n# 编程规范：细菌式编程\n- 小巧（Small）：在生物世界里，复制和维护每一行\"代码\"（DNA碱基对）都需要消耗能量。因此，自然选择的压力使得细菌的基因组非常精简，杜绝任何不必要的膨胀\n- 模块化（Modular）：细菌的基因（功能）被组织成可插拔的\"操纵子\"（Operon，功能相关的基因簇）。这种模块化的设计使得不同的功能单元可以被轻松地组合或替换\n- 自包含（Self-contained）：细菌通过\"水平基因转移\"（Horizontal Gene Transfer）的方式，可以直接\"复制粘贴\"有用的基因片段，而无需理解对方整个基因组的上下文。这种能力是它们快速适应环境的关键\n\n# 项目所有权\n- 新文件的项目声明所有者是Jason Zhang\n\n# 前度UI设计规范\n- 所有的UI都是按照卡片排版，默认元素充满95%卡片，所有元素对称且居中对齐\n- 卡片父级容器要确保子卡片的元素不会超出父卡片的边框范围\n\n# 调试规则（全局适用）\n## 🧪 调试前置检查\n1. **先检查项目CLAUDE.md和./test目录下的调试进度md文件**：每次调试前必须先查看项目中的调试规则和已知问题\n2. **查看相关测试记录**：检查项目`test/`目录下相关问题的调试历史记录\n\n## 测试文件组织规则  \n1. **统一目录**：所有测试脚本放在项目根目录的`test/`文件夹下\n2. **功能分类**：按调试功能区分脚本命名\n3. **禁止重复**：如已有相似功能测试脚本，必须修改现有脚本，不允许创建新脚本\n4. **记录进展**：使用`test-[问题关键字]-[YYYYMMDD]-[HHMM].md`格式记录调试发现\n\n## 分离式调试原则\n1. **流水线分段**：对于长流水线问题，建立不同阶段的独立测试脚本\n2. **问题定位**：明确每个测试脚本的作用范围和预期结果\n3. **阶段验证**：确定问题出现在哪个具体阶段\n4. **脚本映射**：明确应该使用哪个测试脚本来验证特定问题\n\n## 测试脚本命名规范\n- `test-step[N]-[功能描述].js` - 流水线分段测试\n- `test-[组件名]-[功能].js` - 组件功能测试  \n- `debug-[问题域].js` - 问题诊断脚本\n\n## 调试记录规范\n- **文件命名**：`test-[问题关键字]-[YYYYMMDD]-[HHMM].md`\n- **必含内容**：问题描述、测试方法、发现结果、解决方案\n- **更新机制**：遇到相关问题时必须先阅读相关记录文件\n\n# 发布与提交规则\n- npm和github提交必须要用户确认才可以，禁止自己主动发布\n\n# 命令执行规则\n- 频繁调用的命令请构建脚本，不用等待用户每次批准\n- 一条命令在一个对话里面被调用三次以上就请写成脚本，每次调用这个脚本。脚本的命名要显而易见。\n\n# 项目目录\n- github项目的根目录是~/Documents/github，所有需要克隆到本地的项目都在这里创建\n\n\nContents of /Users/fanzhang/Documents/github/claude-code-router/CLAUDE.md (project instructions, checked into the codebase):\n\n### 🔄 Claude Code Output Router - 项目架构指南\n\n#### 🏗️ 项目概述\n- **Claude Code Output Router** - 结构化设计的路由转换器，支持多格式、多供应商的模型路由\n- **模块化设计**: 输入格式模块 → 模型路由模块 → 输出格式模块 → 提供商模块\n- **Development Port: 3456, Production Port: 3457** - 分别用于开发和生产环境\n- **环境变量劫持**: 通过ANTHROPIC_BASE_URL和ANTHROPIC_API_KEY将Claude Code路由到本地路由器\n\n#### 🧱 核心架构模块\n\n##### 1. 输入格式模块 (Input Format Module)\n- **支持格式**: OpenAI, Anthropic, Gemini\n- **当前实现**: Anthropic模块 (其余Mock实现)\n- **默认限制**: 每个输入模块只支持一个实例\n- **主要路由**: \n  - `anthropic <-> anthropic`\n  - `anthropic <-> openai` \n  - `anthropic <-> gemini`\n\n##### 2. 模型路由模块 (Model Routing Module)\n- **路由依据**: 输入模型的细分类别\n- **支持类别**: default, background, thinking, longcontext, search\n- **输入模型**: Claude 4, Claude 3.7\n- **配置参考**: `../claude-code-router`配置\n\n##### 3. 输出格式模块 (Output Format Module)\n- **Anthropic格式**: AWS CodeWhisperer (参考 `../kiro2cc`)\n- **OpenAI格式**: 第三方Shuaihong (参考 `~/.claude-code-router/config.json`)\n- **负载均衡**: 支持同一路由多个供应商实例的负载均衡\n- **动态轮询**: CodeWhisperer多token配置时支持动态轮询\n\n##### 4. 提供商模块 (Provider Module)\n- **CodeWhisperer**: AWS提供商 (参考 `../kiro2cc` 实现)\n- **Shuaihong**: 第三方OpenAI格式提供商\n- **多实例支持**: 每个输出可配置多个实例\n- **认证管理**: 启动时验证token，支持多token轮询\n\n#### 🔧 开发规范\n\n##### 代码结构要求 (基于Demo参考实现)\n- **Demo1参考**: 模型分层基础概念，路由逻辑，服务管理\n- **Demo2参考**: CodeWhisperer完整实现，格式转换，SSE解析\n- **文件长度限制**: 单文件不超过500行代码\n- **四层架构设计**: \n  ```\n  src/\n  ├── input/          # 输入格式模块 (基于demo1概念)\n  │   ├── anthropic/  # Anthropic格式处理 (当前实现)\n  │   ├── openai/     # OpenAI格式处理 (Mock)\n  │   └── gemini/     # Gemini格式处理 (Mock)\n  ├── routing/        # 模型路由模块 (基于demo1的router.ts)\n  │   ├── index.ts    # 路由主逻辑\n  │   ├── rules.ts    # 路由规则 (default,background,thinking,longcontext,search)\n  │   └── custom.ts   # 自定义路由支持\n  ├── output/         # 输出格式模块 (基于demo1的transformer概念)\n  │   ├── anthropic/  # Anthropic格式输出\n  │   └── openai/     # OpenAI格式输出\n  └── providers/      # 提供商模块 (基于demo2的完整实现)\n      ├── codewhisperer/  # AWS CodeWhisperer (基于demo2)\n      │   ├── auth.ts     # Token管理 (demo2的token逻辑)\n      │   ├── converter.ts # 格式转换 (demo2的buildCodeWhispererRequest)\n      │   ├── parser.ts   # SSE解析 (demo2的sse_parser.go移植)\n      │   └── client.ts   # HTTP客户端\n      └── shuaihong/      # 第三方OpenAI提供商\n  ```\n\n##### Hook系统设计\n- **调试日志**: `--debug` 参数启用完整链路日志保存\n- **数据注入**: 支持任意节点的数据注入和模拟测试\n- **测试流水线**: 节点级双向测试设计\n- **本地保存**: 每个阶段输入输出的本地log保存\n\n#### 🚀 启动和部署\n\n##### 启动机制\n- **一键启动**: 本地服务器和Claude Code按顺序启动\n- **端口管理**: 启动时自动杀掉占用端口的进程\n- **多实例处理**: 最后启动的服务器替代前面的实例\n- **对话ID**: 每次对话有独立ID，不受实例替换影响\n\n##### 发布渠道\n- **NPM**: 包管理和分发\n- **GitHub**: 源码管理和版本控制\n\n#### 🧪 测试策略\n- **节点测试**: 每个模块独立测试\n- **模拟数据**: 使用模拟数据进行链路测试\n- **双向测试**: 输入输出双向验证\n- **实地测试**: 完整链路端到端测试\n\n#### 📝 配置管理\n- **环境变量**: ANTHROPIC_BASE_URL, ANTHROPIC_API_KEY\n- **路由配置**: 模型到供应商的映射关系\n- **负载均衡**: 多实例轮询配置\n- **认证配置**: 各供应商的token管理\n\n#### 🔍 调试和监控\n- **Debug模式**: `--debug` 启用详细日志\n- **链路追踪**: 完整请求响应链路记录\n- **性能监控**: 各节点处理时间统计\n- **错误处理**: 优雅的错误处理和恢复机制\n\n### 📚 开发注意事项\n- **参考实现**: 基于 `../kiro2cc` 进行模块化重构\n- **配置兼容**: 兼容现有 `~/.claude-code-router/config.json` 配置\n- **渐进开发**: 先实现核心功能，再完善负载均衡等高级特性\n- **测试优先**: 在实地测试前完成完整的测试用例设计\n\n# 编程规范：细菌式编程\n- **小巧（Small）**: 单文件不超过500行代码，每一行代码都有明确目的，杜绝不必要的膨胀\n- **模块化（Modular）**: 功能被组织成可插拔的模块（四层架构设计），不同功能单元可以被轻松组合或替换\n- **自包含（Self-contained）**: 模块间通过标准接口交互，支持\"水平基因转移\"式的模块复用，无需理解整个系统上下文\n\n# 项目所有权\n- **新文件声明**: 所有新创建文件的项目所有者为 Jason Zhang\n\n# 调试规则（项目适用）\n## 🧪 调试前置检查\n1. **先检查项目CLAUDE.md和./test目录下的调试进度md文件**: 每次调试前必须先查看项目中的调试规则和已知问题\n2. **查看相关测试记录**: 检查项目`test/`目录下相关问题的调试历史记录\n\n## 测试文件组织规则  \n1. **统一目录**: 所有测试脚本放在项目根目录的`test/`文件夹下\n2. **功能分类**: 按调试功能区分脚本命名\n3. **禁止重复**: 如已有相似功能测试脚本，必须修改现有脚本，不允许创建新脚本\n4. **记录进展**: 使用`test-[问题关键字]-[YYYYMMDD]-[HHMM].md`格式记录调试发现\n\n## 分离式调试原则\n1. **流水线分段**: 对于长流水线问题，建立不同阶段的独立测试脚本\n   - `test-step1-输入格式解析.js` - 测试Anthropic输入格式处理\n   - `test-step2-路由决策.js` - 测试模型路由逻辑\n   - `test-step3-输出格式转换.js` - 测试格式转换\n   - `test-step4-供应商调用.js` - 测试CodeWhisperer/OpenAI调用\n2. **问题定位**: 明确每个测试脚本的作用范围和预期结果\n3. **阶段验证**: 确定问题出现在哪个具体阶段\n4. **脚本映射**: 明确应该使用哪个测试脚本来验证特定问题\n\n## 测试脚本命名规范\n- `test-step[N]-[功能描述].js` - 流水线分段测试\n- `test-[组件名]-[功能].js` - 组件功能测试  \n- `debug-[问题域].js` - 问题诊断脚本\n- 示例：\n  - `test-anthropic-input.js` - Anthropic输入模块测试\n  - `test-routing-rules.js` - 路由规则测试\n  - `test-codewhisperer-auth.js` - CodeWhisperer认证测试\n  - `debug-sse-parsing.js` - SSE解析问题诊断\n\n## 调试记录规范\n- **文件命名**: `test-[问题关键字]-[YYYYMMDD]-[HHMM].md`\n- **必含内容**: 问题描述、测试方法、发现结果、解决方案\n- **更新机制**: 遇到相关问题时必须先阅读相关记录文件\n\n# 启动脚本规范\n## 统一脚本集合\n- **完整开发流程**: `./fix-and-test.sh` (构建+启动+测试一体化)\n- **开发模式启动**: `./start-dev.sh` (自动构建+启动服务+日志记录)\n- **单独构建**: `./build.sh` (清理和构建项目)\n- **测试套件**: `./test-all.sh` (完整测试，包括API和transformer验证)\n- **本地安装**: `./install-local.sh` (构建+打包+全局安装)\n\n## 端口管理\n- **Development Port**: 3456 (主要API端点)\n- **Production Port**: 3457 (生产环境)\n- **日志监控**: `/tmp/ccr-dev.log`\n- **启动脚本端口管理**: 自动监控端口冲突，直接关闭并继续启动，无需人工确认\n\n## 服务管理\n- **状态检查**: `node dist/cli.js status`\n- **服务监控**: `tail -f /tmp/ccr-dev.log`\n- **多实例处理**: 最后启动的服务器替代前面的实例\n- **对话ID**: 每次对话有独立ID，不受实例替换影响\n\n# 构建规则\n- **完整构建必须成功**: 不使用fallback机制，不手动操作\n- **依赖解析**: 必须解决所有外部依赖和workspace包依赖\n- **Clean安装验证**: 每次构建后必须验证clean环境下的npm全局安装成功\n- **esbuild配置**: 包含完整的external依赖列表和workspace解析\n- **构建流程**: 1)修复依赖 2)完整构建 3)npm pack测试 4)clean安装验证\n\n# 发布与提交规则\n- **用户确认**: npm和github提交必须要用户确认才可以，禁止自主发布\n- **命令脚本化**: 频繁调用的命令请构建脚本，不用等待用户每次批准\n- **三次规则**: 一条命令在一个对话里面被调用三次以上就请写成脚本，脚本命名要显而易见\n\n# 安全配置规则\n- **环境保护**: 不允许覆盖~/.gemini/.env等全局配置\n- **无fallback**: 不允许使用fallback机制，确保构建的完整性\n# important-instruction-reminders\nDo what has been asked; nothing more, nothing less.\nNEVER create files unless they're absolutely necessary for achieving your goal.\nALWAYS prefer editing an existing file to creating a new one.\nNEVER proactively create documentation files (*.md) or README files. Only create documentation files if explicitly requested by the User.\n\n\n      IMPORTANT: this context may or may not be relevant to your tasks. You should not respond to this context or otherwise consider it in your response unless it is highly relevant to your task. Most of the time, it is not relevant.\n</system-reminder>\n\nhello test"
      }
    ],
    "metadata": {
      "requestId": "test-1753501686406",
      "originalRequest": {
        "anthropicBeta": "unknown",
        "userAgent": "claude-code-test"
      }
    }
  },
  "routing": {
    "category": "default",
    "providerId": "k2cc-codewhisperer",
    "reason": "category-based-routing",
    "rule": {
      "provider": "k2cc-codewhisperer",
      "model": "claude-sonnet-4-20250514",
      "priority": 1,
      "reason": "Default routing to CodeWhisperer"
    }
  },
  "modelMapping": {
    "originalModel": "claude-sonnet-4-20250514",
    "newModel": "claude-sonnet-4-20250514",
    "reason": "category-rule-mapping"
  },
  "providerConfig": {
    "type": "codewhisperer",
    "name": "K2CC CodeWhisperer",
    "endpoint": "https://codewhisperer.us-east-1.amazonaws.com",
    "authentication": {
      "type": "bearer",
      "credentials": {
        "apiKey": "dummy-key-not-used",
        "tokenPath": "~/.aws/sso/cache/kiro-auth-token.json"
      }
    },
    "settings": {
      "maxConcurrentRequests": 10,
      "timeoutMs": 30000,
      "retryAttempts": 3,
      "models": [
        "claude-sonnet-4-20250514"
      ],
      "specialties": [
        "default",
        "code-generation"
      ],
      "transformer": [
        "k2cc"
      ]
    }
  },
  "timestamp": "2025-07-26T03:48:06.428Z"
}