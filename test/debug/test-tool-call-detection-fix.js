#!/usr/bin/env node

/**
 * Test script to verify tool call detection fix for 5509 port
 * Tests the specific text that previously caused false positive detection
 */

const { PipelineDebugger } = require('./dist/debug/pipeline-debugger');

// Test text that previously caused false positive (from actual error log)
const problematicText = `
Âü∫‰∫éÂØπÁé∞ÊúâÁ≥ªÁªüÊû∂ÊûÑÁöÑÊ∑±ÂÖ•ÂàÜÊûêÔºåÊàëÊù•‰∏∫ÊÇ®ËÆæËÆ°‰∏Ä‰∏™ÂÖ®Êñ∞ÁöÑÊ®°ÂùóÂåñÊû∂ÊûÑÊñπÊ°à„ÄÇ

## üèóÔ∏è Êñ∞Êû∂ÊûÑËÆæËÆ°ÔºöÊèí‰ª∂ÂåñÊ®°ÂùóÁ≥ªÁªü (Plugin-Based Modular Architecture)

### üìä Áé∞ÊúâÁ≥ªÁªüÈóÆÈ¢òÂàÜÊûê

ÈÄöËøá‰ª£Á†ÅÂàÜÊûêÔºåÊàëÂèëÁé∞‰∫Ü‰ª•‰∏ã‰∏ªË¶ÅÈóÆÈ¢òÔºö

#### 1. **Á¥ßËÄ¶ÂêàÈóÆÈ¢ò**
- **ÊúçÂä°Âô®Áõ¥Êé•ÂØºÂÖ•Provider**: \`server.ts\` Á°¨ÁºñÁ†ÅÂØºÂÖ•ÊâÄÊúâProvider
- **ÈáçÂ§çÂÆûÁé∞**: ÊØè‰∏™ProviderÈÉΩÊúâÁã¨Á´ãÁöÑËÆ§ËØÅ„ÄÅËΩ¨Êç¢„ÄÅËß£ÊûêÈÄªËæë
- **ÈùôÊÄÅ‰æùËµñ**: Ê®°ÂùóÈó¥ÈÄöËøáimportÈùôÊÄÅËÄ¶ÂêàÔºåÊó†Ê≥ïÂä®ÊÄÅÊõøÊç¢

#### 2. **‰ª£Á†ÅÈáçÂ§ç‰∏•Èáç**
- **ËΩ¨Êç¢ÈÄªËæëÈáçÂ§ç**: ÊØè‰∏™ProviderÈÉΩÂÆûÁé∞Á±ª‰ººÁöÑÊ†ºÂºèËΩ¨Êç¢
- **ËÆ§ËØÅÊú∫Âà∂ÈáçÂ§ç**: ‰∏çÂêåProviderÁöÑËÆ§ËØÅÈÄªËæëÁõ∏‰ºº‰ΩÜÁã¨Á´ãÂÆûÁé∞
- **Â∑•ÂÖ∑Ë∞ÉÁî®Â§ÑÁêÜÈáçÂ§ç**: Ëß£ÊûêÂíåÂ§ÑÁêÜÈÄªËæëÂú®Â§öÂ§ÑÈáçÂ§ç

#### 3. **Êâ©Â±ïÊÄßÂ∑Æ**
- **Ê∑ªÂä†Êñ∞ProviderÂ§çÊùÇ**: ÈúÄË¶Å‰øÆÊîπÂ§ö‰∏™Êñá‰ª∂
- **Êó†Ê≥ïÁÉ≠ÊèíÊãî**: ÂøÖÈ°ªÈáçÂêØÊúçÂä°Âô®ÊâçËÉΩÊ∑ªÂä†/ÁßªÈô§Ê®°Âùó
- **ÊµãËØïÂõ∞Èöæ**: Ê®°ÂùóÈó¥‰æùËµñÂ§çÊùÇÔºåÂçïÂÖÉÊµãËØïÂõ∞Èöæ
`;

// Test cases for actual tool call JSON structures (should be detected)
const actualToolCallTexts = [
  // Anthropic format
  '{"type": "tool_use", "id": "call_123", "name": "bash", "input": {"command": "ls"}}',
  
  // OpenAI format
  '{"name": "bash", "arguments": {"command": "ls"}}',
  
  // Function call format
  '{"function": {"name": "bash", "arguments": "{\\"command\\": \\"ls\\"}"}}',
  
  // Tool call with ID  
  '{"id": "call_abc123", "type": "function", "function": {"name": "bash"}}',
  
  // Array format
  '[{"index": 0, "type": "function", "function": {"name": "bash"}}]'
];

console.log('üß™ Testing Tool Call Detection Fix for 5509 Port');
console.log('=' .repeat(60));

// Initialize debugger for port 5509
const pipelineDebugger = new PipelineDebugger(5509);

console.log('\nüìù Test 1: Normal text that previously caused false positive');
console.log('Text sample:', problematicText.substring(0, 200) + '...');

// Test the problematic text that caused false positive
const falsePositive = pipelineDebugger.detectToolCallError(
  problematicText,
  'test-request-1', 
  'text-processing',
  'test-provider',
  'test-model'
);

if (falsePositive) {
  console.log('‚ùå FAILED: Normal text still triggers false positive detection');
  process.exit(1);
} else {
  console.log('‚úÖ PASSED: Normal text with "Â∑•ÂÖ∑Ë∞ÉÁî®" no longer triggers false detection');
}

console.log('\nüîß Test 2: Actual tool call JSON structures (should be detected)');

let actualToolCallsDetected = 0;
let totalActualToolCalls = actualToolCallTexts.length;

actualToolCallTexts.forEach((toolCallText, index) => {
  console.log(`\nTesting actual tool call ${index + 1}:`);
  console.log('JSON:', toolCallText.substring(0, 80) + '...');
  
  const detected = pipelineDebugger.detectToolCallError(
    toolCallText,
    `test-request-tool-${index}`,
    'json-parsing', 
    'test-provider',
    'test-model'
  );
  
  if (detected) {
    console.log('‚úÖ PASSED: Actual tool call JSON correctly detected');
    actualToolCallsDetected++;
  } else {
    console.log('‚ùå FAILED: Actual tool call JSON not detected');
  }
});

console.log('\nüìä Test Results Summary');
console.log('=' .repeat(60));
console.log(`‚úÖ False Positive Test: PASSED (normal text not flagged)`);
console.log(`üîß Actual Tool Call Detection: ${actualToolCallsDetected}/${totalActualToolCalls} detected`);

if (actualToolCallsDetected === totalActualToolCalls) {
  console.log('\nüéâ ALL TESTS PASSED!');
  console.log('‚úÖ Tool call detection fix is working correctly');
  console.log('‚úÖ 5509 port should no longer have conversation interruptions from false positives');
  console.log('\nüìã What was fixed:');
  console.log('- Removed overly broad patterns like /tool_call/i');
  console.log('- Added specific JSON structure patterns');
  console.log('- Normal text mentioning "Â∑•ÂÖ∑Ë∞ÉÁî®" no longer triggers errors');
  console.log('- Actual tool call JSON structures are still properly detected');
  process.exit(0);
} else {
  console.log('\n‚ùå SOME TESTS FAILED');
  console.log('Some actual tool call structures were not detected');
  process.exit(1);
}