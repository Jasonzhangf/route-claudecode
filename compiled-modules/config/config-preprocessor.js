"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigPreprocessor = void 0;
const fs = __importStar(require("fs"));
class ConfigPreprocessor {
    static preprocess(configPath) {
        const startTime = Date.now();
        const timestamp = new Date().toISOString();
        const rawConfig = ConfigPreprocessor._readConfigFile(configPath);
        const parsedConfig = ConfigPreprocessor._parseConfigContent(rawConfig);
        const providers = ConfigPreprocessor._expandProviders(parsedConfig.providers || []);
        const routes = ConfigPreprocessor._generateRoutes(parsedConfig.router || {}, providers);
        const routingTable = {
            providers,
            routes,
            server: ConfigPreprocessor._normalizeServerConfig(parsedConfig.server || {}),
            apiKey: parsedConfig.APIKEY || parsedConfig.apiKey || 'default-key',
            version: '4.1.0',
            description: 'Generated by ConfigPreprocessor',
            lastUpdated: timestamp
        };
        return {
            success: true,
            routingTable: routingTable,
            metadata: {
                configPath,
                processingTime: Date.now() - startTime,
                timestamp,
                sourceFormat: 'v4'
            }
        };
    }
    static _readConfigFile(configPath) {
        return fs.readFileSync(configPath, 'utf8');
    }
    static _parseConfigContent(content) {
        return JSON.parse(content);
    }
    static _expandProviders(providers) {
        const expandedProviders = [];
        for (const provider of providers) {
            const expandedProvider = {
                name: provider.name,
                api_base_url: provider.api_base_url,
                api_key: provider.api_key || '',
                priority: provider.priority || 1,
                models: Array.isArray(provider.models) ? provider.models : [provider.model || 'default']
            };
            expandedProviders.push(expandedProvider);
        }
        return expandedProviders.sort((a, b) => (b.priority || 0) - (a.priority || 0));
    }
    static _generateRoutes(routerConfig, providers) {
        const routes = {};
        if (routerConfig.rules && Array.isArray(routerConfig.rules)) {
            for (const rule of routerConfig.rules) {
                if (rule.virtualModel && rule.targetProvider) {
                    routes[rule.virtualModel] = `${rule.targetProvider},${rule.targetModel || 'default'}`;
                }
            }
        }
        if (routerConfig.mapping) {
            for (const [virtualModel, target] of Object.entries(routerConfig.mapping)) {
                routes[virtualModel] = target;
            }
        }
        if (Object.keys(routes).length === 0) {
            for (const provider of providers) {
                for (const model of provider.models) {
                    const virtualModel = `${provider.name}-${model}`;
                    routes[virtualModel] = `${provider.name},${model}`;
                }
            }
        }
        return routes;
    }
    static _normalizeServerConfig(serverConfig) {
        return {
            port: serverConfig.port || 5506,
            host: serverConfig.host || '0.0.0.0',
            debug: serverConfig.debug === true
        };
    }
}
exports.ConfigPreprocessor = ConfigPreprocessor;
//# sourceMappingURL=config-preprocessor.js.map